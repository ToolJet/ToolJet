version: '3'

services:
  client:
    tty: true
    stdin_open: true
    image: tooljet/tooljet-client-ce:latest
    restart: always
    depends_on:
      - server
    volumes:
      - logs:/var/log/openresty/
      - certs:/etc/resty-auto-ssl/
      - fallbackcerts:/etc/fallback-certs
    ports:
      - 80:80
      - 443:443
    command: openresty -g "daemon off;"

  server:
    image: tooljet/tooljet-server-ce:latest
    tty: true
    stdin_open: true
    restart: always
    ports:
      - 3000
    env_file: .env
    environment:
      SERVE_CLIENT: "false"
    command: npm run start:prod
    # We recommend to use managed postgres service on production for ease of
    # administration, security and management (high availability, backups, monitoring etc)
    #
    # If you'd still want to run posgres with persistent volumes in a docker compose
    # setup, uncomment the lines below and create postgres_data folder within
    # the directory.
    # depends_on:
    #   - postgres

  # postgres:
  #   image: postgres:13
  #   restart: always
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - postgres:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_PASSWORD=postgres

volumes:
  # postgres:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: ${PWD}/postgres_data
  certs:
  logs:
  fallbackcerts:
