name: Cypress Platform Tests

on:
  pull_request_target:
    types: [labeled, unlabeled, closed]
  workflow_dispatch:

env:
  PR_NUMBER: ${{ github.event.number }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  setup-workflow:
    runs-on: ubuntu-22.04
    if: |
      github.event.action == 'labeled' && 
      (github.event.label.name == 'run-cypress-platform' || 
       github.event.label.name == 'run-cypress' ||
       github.event.label.name == 'run-cypress-platform-subpath' ||
       github.event.label.name == 'run-cypress-platform-proxy' ||
       github.event.label.name == 'run-cypress-platform-proxy-subpath')
    outputs:
      test_type: ${{ steps.set-type.outputs.test_type }}
    steps:
      - id: set-type
        run: |
          if [[ "${{ github.event.label.name }}" == "run-cypress-platform" || "${{ github.event.label.name }}" == "run-cypress" ]]; then
            echo "test_type=local" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.label.name }}" == "run-cypress-platform-subpath" ]]; then
            echo "test_type=subpath" >> $GITHUB_OUTPUT
          else
            echo "test_type=proxy" >> $GITHUB_OUTPUT
          fi

  local-dev-test:
    needs: setup-workflow
    if: needs.setup-workflow.outputs.test_type == 'local'
    runs-on: ubuntu-22.04

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.18.2

      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Install and build dependencies
        run: |
          npm cache clean --force
          npm install
          npm install --prefix server
          npm install --prefix frontend
          npm run build:plugins

      - name: Local development setup
        run: |
          sudo docker network create tooljet
          sudo docker run -d --name postgres -p 5432:5432 \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PORT=5432 \
            -d postgres:13

      - name: Configure environment
        run: |
          cat > .env << EOF
          TOOLJET_HOST=http://localhost:8082
          PG_HOST=localhost
          TOOLJET_DB_HOST=localhost
          PGRST_HOST=localhost:3001
          PG_DB=tooljet_development
          PG_USER=postgres
          PG_PASS=postgres
          PG_PORT=5432
          LOCKBOX_MASTER_KEY=cd97331a419c09387bef49787f7da8d2a81d30733f0de6bed23ad8356d2068b2
          SECRET_KEY_BASE=7073b9a35a15dd20914ae17e36a693093f25b74b96517a5fec461fc901c51e011cd142c731bee48c5081ec8bac321c1f259ef097ef2a16f25df17a3798c03426
          ENABLE_TOOLJET_DB=true
          TOOLJET_DB=tooljet_db
          TOOLJET_DB_USER=postgres
          TOOLJET_DB_PASS=postgres
          PGRST_JWT_SECRET=r9iMKoe5CRMgvJBBtp4HrqN7QiPpUToj
          ENABLE_MARKETPLACE_FEATURE=true
          ENABLE_MARKETPLACE_DEV_MODE=true
          SSO_GIT_OAUTH2_CLIENT_ID=dummy
          SSO_GIT_OAUTH2_CLIENT_SECRET=dummy
          SSO_GIT_OAUTH2_HOST=dummy
          SSO_GOOGLE_OAUTH2_CLIENT_ID=dummy
          ENABLE_PRIVATE_APP_EMBED=true
          TOOLJET_DB_STATEMENT_TIMEOUT=60000
          TOOLJET_DB_RECONFIG=true
          EOF

      - name: Setup database and services
        run: |
          npm run --prefix server db:create
          npm run --prefix server db:reset

          sudo docker run -d --name postgrest --network tooljet -p 3001:3000 \
            -e PGRST_DB_URI="postgres://postgres:postgres@postgres:5432/tooljet" \
            -e PGRST_DB_ANON_ROLE="postgres" \
            -e PGRST_JWT_SECRET="r9iMKoe5CRMgvJBBtp4HrqN7QiPpUToj" \
            -e PGRST_DB_PRE_CONFIG=postgrest.pre_config \
            postgrest/postgrest:v12.2.0

          cd plugins && npm start &
          cd ../server && npm run start:dev &
          cd ../frontend && npm start &

      - name: Wait for server
        run: timeout 300 bash -c 'until curl --silent --fail http://localhost:8082; do sleep 5; done'

      - name: Setup Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./cypress-tests
          config: baseUrl=http://localhost:8082
          config-file: cypress-platform.config.js

  docker-deployment:
    needs: setup-workflow
    if: needs.setup-workflow.outputs.test_type == 'subpath' || needs.setup-workflow.outputs.test_type == 'proxy'
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/production.Dockerfile
          push: true
          tags: tooljet/tj-osv:${{ env.BRANCH_NAME }}
          platforms: linux/amd64

      - name: Configure environment
        run: |
          cat > .env << EOF
          TOOLJET_HOST=http://localhost:3000
          PG_HOST=postgres
          TOOLJET_DB_HOST=postgres
          PGRST_HOST=postgrest
          NODE_ENV=production
          SERVE_CLIENT=true
          PG_DB=tooljet_development
          PG_USER=postgres
          PG_PASS=postgres
          PG_PORT=5432
          LOCKBOX_MASTER_KEY=cd97331a419c09387bef49787f7da8d2a81d30733f0de6bed23ad8356d2068b2
          SECRET_KEY_BASE=7073b9a35a15dd20914ae17e36a693093f25b74b96517a5fec461fc901c51e011cd142c731bee48c5081ec8bac321c1f259ef097ef2a16f25df17a3798c03426
          ENABLE_TOOLJET_DB=true
          TOOLJET_DB=tooljet_db
          TOOLJET_DB_USER=postgres
          TOOLJET_DB_PASS=postgres
          PGRST_JWT_SECRET=r9iMKoe5CRMgvJBBtp4HrqN7QiPpUToj
          ENABLE_MARKETPLACE_FEATURE=true
          ENABLE_MARKETPLACE_DEV_MODE=true
          SSO_GIT_OAUTH2_CLIENT_ID=dummy
          SSO_GIT_OAUTH2_CLIENT_SECRET=dummy
          SSO_GIT_OAUTH2_HOST=dummy
          SSO_GOOGLE_OAUTH2_CLIENT_ID=dummy
          ENABLE_PRIVATE_APP_EMBED=true
          TOOLJET_DB_STATEMENT_TIMEOUT=60000
          TOOLJET_DB_RECONFIG=true
          EOF

          if [[ "${{ needs.setup-workflow.outputs.test_type }}" == "subpath" || "${{ github.event.label.name }}" == *"subpath"* ]]; then
            echo "SUB_PATH=/apps/" >> .env
          fi

      - name: Deploy with Docker Compose
        run: |
          curl -LO https://tooljet-test.s3.us-west-1.amazonaws.com/docker-compose.yaml
          mkdir postgres_data
          sed -i '/^[[:space:]]*tooljet:/,/^$/ s|^\([[:space:]]*image:[[:space:]]*\).*|\1tooljet/tj-osv:${{ env.BRANCH_NAME }}|' docker-compose.yaml
          docker-compose up -d

      - name: Setup Nginx for proxy
        if: needs.setup-workflow.outputs.test_type == 'proxy'
        run: |
          sudo apt update
          sudo apt install -y nginx
          if [[ "${{ github.event.label.name }}" == "run-cypress-platform-proxy" ]]; then
            echo 'server {
                listen 80;
                server_name localhost;
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }' | sudo tee /etc/nginx/sites-available/tooljet
          else
            echo 'server {
                listen 80;
                server_name localhost;
                
                location /apps/ {
                    proxy_pass http://localhost:3000/apps/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }' | sudo tee /etc/nginx/sites-available/tooljet
          fi
          sudo ln -sf /etc/nginx/sites-available/tooljet /etc/nginx/sites-enabled/tooljet
          sudo nginx -t
          sudo systemctl reload nginx

      - name: Wait for server
        run: |
          if [[ "${{ needs.setup-workflow.outputs.test_type }}" == "proxy" ]]; then
            if [[ "${{ github.event.label.name }}" == *"subpath"* ]]; then
              timeout 300 bash -c 'until curl --silent --fail http://localhost:80/apps/; do sleep 5; done'
            else
              timeout 300 bash -c 'until curl --silent --fail http://localhost:80/; do sleep 5; done'
            fi
          else
            timeout 300 bash -c 'until curl --silent --fail http://localhost:3000/apps/; do sleep 5; done'
          fi

      - name: Setup Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./cypress-tests
          config: baseUrl=${{ needs.setup-workflow.outputs.test_type == 'proxy' && github.event.label.name == 'run-cypress-platform-proxy-subpath' && 'http://localhost:80/apps' || needs.setup-workflow.outputs.test_type == 'proxy' && 'http://localhost:80' || 'http://localhost:3000/apps' }}
          config-file: cypress-platform.config.js

  post-test:
    needs: [setup-workflow, local-dev-test, docker-deployment]
    if: always()
    runs-on: ubuntu-22.04

    steps:
      - name: Capture Screenshots
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: cypress-tests/cypress/screenshots
