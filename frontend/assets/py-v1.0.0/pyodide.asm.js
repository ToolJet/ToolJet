"use strict";

var _createPyodideModule = (()=>{
    var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
    if (typeof __filename !== 'undefined')
        _scriptDir = _scriptDir || __filename;
    return (function(_createPyodideModule) {
        _createPyodideModule = _createPyodideModule || {};

        var Module = typeof _createPyodideModule != "undefined" ? _createPyodideModule : {};
        if (typeof globalThis.BigInt64Array === "undefined") {
            function partsToBigIntSigned(lower, upper) {
                return BigInt(lower) | BigInt(upper + 2 * (upper & 2147483648)) << 32n
            }
            function partsToBigIntUnsigned(lower, upper) {
                return BigInt(lower) | BigInt(upper) << 32n
            }
            function bigIntToParts(value) {
                var lower = Number(BigInt(value) & BigInt(4294967295)) | 0;
                var upper = Number(BigInt(value) >> 32n) | 0;
                return [lower, upper]
            }
            function createBigIntArrayShim(partsToBigInt) {
                function createBigInt64Array(array) {
                    if (typeof array === "number") {
                        array = new Uint32Array(2 * array)
                    }
                    var orig_array;
                    if (!ArrayBuffer.isView(array)) {
                        if (array.constructor && array.constructor.name === "ArrayBuffer") {
                            array = new Uint32Array(array)
                        } else {
                            orig_array = array;
                            array = new Uint32Array(array.length * 2)
                        }
                    }
                    var proxy = new Proxy({
                        slice: function(min, max) {
                            if (max === undefined) {
                                max = array.length
                            }
                            var new_buf = array.slice(min * 2, max * 2);
                            return createBigInt64Array(new_buf)
                        },
                        subarray: function(min, max) {
                            var new_buf = array.subarray(min * 2, max * 2);
                            return createBigInt64Array(new_buf)
                        },
                        [Symbol.iterator]: function*() {
                            for (var i = 0; i < array.length / 2; i++) {
                                yield partsToBigInt(array[2 * i], array[2 * i + 1])
                            }
                        },
                        BYTES_PER_ELEMENT: 2 * array.BYTES_PER_ELEMENT,
                        buffer: array.buffer,
                        byteLength: array.byteLength,
                        byteOffset: array.byteOffset,
                        length: array.length / 2,
                        copyWithin: function(target, start, end) {
                            array.copyWithin(target * 2, start * 2, end * 2);
                            return proxy
                        },
                        set: function(source, targetOffset) {
                            if (targetOffset === undefined) {
                                targetOffset = 0
                            }
                            if (2 * (source.length + targetOffset) > array.length) {
                                throw new RangeError("offset is out of bounds")
                            }
                            for (var i = 0; i < source.length; i++) {
                                var value = source[i];
                                var pair = bigIntToParts(value);
                                array.set(pair, 2 * (targetOffset + i))
                            }
                        }
                    },{
                        get: function(target, idx, receiver) {
                            if (typeof idx !== "string" || !/^\d+$/.test(idx)) {
                                return Reflect.get(target, idx, receiver)
                            }
                            var lower = array[idx * 2];
                            var upper = array[idx * 2 + 1];
                            return partsToBigInt(lower, upper)
                        },
                        set: function(target, idx, value, receiver) {
                            if (typeof idx !== "string" || !/^\d+$/.test(idx)) {
                                return Reflect.set(target, idx, value, receiver)
                            }
                            if (typeof value !== "bigint") {
                                throw new TypeError(`Cannot convert ${value} to a BigInt`)
                            }
                            var pair = bigIntToParts(value);
                            array.set(pair, 2 * idx);
                            return true
                        }
                    });
                    if (orig_array) {
                        proxy.set(orig_array)
                    }
                    return proxy
                }
                return createBigInt64Array
            }
            globalThis.BigUint64Array = createBigIntArrayShim(partsToBigIntUnsigned);
            globalThis.BigInt64Array = createBigIntArrayShim(partsToBigIntSigned)
        }
        var readyPromiseResolve, readyPromiseReject;
        Module["ready"] = new Promise(function(resolve, reject) {
            readyPromiseResolve = resolve;
            readyPromiseReject = reject
        }
        );
        if (!Module.expectedDataFileDownloads) {
            Module.expectedDataFileDownloads = 0
        }
        Module.expectedDataFileDownloads++;
        (function() {
            if (Module["ENVIRONMENT_IS_PTHREAD"])
                return;
            var loadPackage = function(metadata) {
                var PACKAGE_PATH = "";
                if (typeof window === "object") {
                    PACKAGE_PATH = window["encodeURIComponent"](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/")
                } else if (typeof process === "undefined" && typeof location !== "undefined") {
                    PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/")
                }
                var PACKAGE_NAME = "dist/pyodide.asm.data";
                var REMOTE_PACKAGE_BASE = "pyodide.asm.data";
                if (typeof Module["locateFilePackage"] === "function" && !Module["locateFile"]) {
                    Module["locateFile"] = Module["locateFilePackage"];
                    err("warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)")
                }
                var REMOTE_PACKAGE_NAME = Module["locateFile"] ? Module["locateFile"](REMOTE_PACKAGE_BASE, "") : REMOTE_PACKAGE_BASE;
                var REMOTE_PACKAGE_SIZE = metadata["remote_package_size"];
                function fetchRemotePackage(packageName, packageSize, callback, errback) {
                    if (typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string") {
                        require("fs").readFile(packageName, function(err, contents) {
                            if (err) {
                                errback(err)
                            } else {
                                callback(contents.buffer)
                            }
                        });
                        return
                    }
                    var xhr = new XMLHttpRequest;
                    xhr.open("GET", packageName, true);
                    xhr.responseType = "arraybuffer";
                    xhr.onprogress = function(event) {
                        var url = packageName;
                        var size = packageSize;
                        if (event.total)
                            size = event.total;
                        if (event.loaded) {
                            if (!xhr.addedTotal) {
                                xhr.addedTotal = true;
                                if (!Module.dataFileDownloads)
                                    Module.dataFileDownloads = {};
                                Module.dataFileDownloads[url] = {
                                    loaded: event.loaded,
                                    total: size
                                }
                            } else {
                                Module.dataFileDownloads[url].loaded = event.loaded
                            }
                            var total = 0;
                            var loaded = 0;
                            var num = 0;
                            for (var download in Module.dataFileDownloads) {
                                var data = Module.dataFileDownloads[download];
                                total += data.total;
                                loaded += data.loaded;
                                num++
                            }
                            total = Math.ceil(total * Module.expectedDataFileDownloads / num);
                            if (Module["setStatus"])
                                Module["setStatus"]("Downloading data... (" + loaded + "/" + total + ")")
                        } else if (!Module.dataFileDownloads) {
                            if (Module["setStatus"])
                                Module["setStatus"]("Downloading data...")
                        }
                    }
                    ;
                    xhr.onerror = function(event) {
                        throw new Error("NetworkError for: " + packageName)
                    }
                    ;
                    xhr.onload = function(event) {
                        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || xhr.status == 0 && xhr.response) {
                            var packageData = xhr.response;
                            callback(packageData)
                        } else {
                            throw new Error(xhr.statusText + " : " + xhr.responseURL)
                        }
                    }
                    ;
                    xhr.send(null)
                }
                function handleError(error) {
                    console.error("package error:", error)
                }
                var fetchedCallback = null;
                var fetched = Module["getPreloadedPackage"] ? Module["getPreloadedPackage"](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;
                if (!fetched)
                    fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
                        if (fetchedCallback) {
                            fetchedCallback(data);
                            fetchedCallback = null
                        } else {
                            fetched = data
                        }
                    }, handleError);
                function runWithFS() {
                    function assert(check, msg) {
                        if (!check)
                            throw msg + (new Error).stack
                    }
                    Module["FS_createPath"]("/", "lib", true, true);
                    Module["FS_createPath"]("/lib", "python3.10", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "asyncio", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "collections", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "concurrent", true, true);
                    Module["FS_createPath"]("/lib/python3.10/concurrent", "futures", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "ctypes", true, true);
                    Module["FS_createPath"]("/lib/python3.10/ctypes", "macholib", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "email", true, true);
                    Module["FS_createPath"]("/lib/python3.10/email", "mime", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "encodings", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "html", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "http", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "importlib", true, true);
                    Module["FS_createPath"]("/lib/python3.10/importlib", "metadata", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "json", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "logging", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "multiprocessing", true, true);
                    Module["FS_createPath"]("/lib/python3.10/multiprocessing", "dummy", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "pydoc_data", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "site-packages", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "unittest", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "urllib", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "wsgiref", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "xml", true, true);
                    Module["FS_createPath"]("/lib/python3.10/xml", "dom", true, true);
                    Module["FS_createPath"]("/lib/python3.10/xml", "etree", true, true);
                    Module["FS_createPath"]("/lib/python3.10/xml", "parsers", true, true);
                    Module["FS_createPath"]("/lib/python3.10/xml", "sax", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "xmlrpc", true, true);
                    Module["FS_createPath"]("/lib/python3.10", "zoneinfo", true, true);
                    function processPackageData(arrayBuffer) {
                        assert(arrayBuffer, "Loading data file failed.");
                        assert(arrayBuffer.constructor.name === ArrayBuffer.name, "bad input to processPackageData");
                        var byteArray = new Uint8Array(arrayBuffer);
                        var curr;
                        var compressedData = {
                            "data": null,
                            "cachedOffset": 5010591,
                            "cachedIndexes": [-1, -1],
                            "cachedChunks": [null, null],
                            "offsets": [0, 1391, 2838, 4437, 6049, 7530, 9118, 10455, 11935, 12952, 14343, 15816, 17066, 18516, 19599, 20569, 21534, 22478, 23638, 24844, 26082, 27082, 28030, 29289, 30424, 31457, 32610, 33812, 35038, 36261, 37139, 38264, 39200, 40393, 41442, 42694, 44107, 45372, 46503, 47533, 48418, 49251, 50166, 51582, 52761, 53675, 55164, 56196, 57567, 58938, 60118, 61439, 62635, 63888, 65114, 66281, 67233, 68258, 69265, 70013, 71046, 71721, 72921, 74112, 75204, 76071, 77042, 77910, 78869, 79921, 80774, 81540, 82712, 83801, 84950, 86068, 86887, 87960, 88909, 89754, 90610, 92016, 93204, 94324, 95263, 96509, 97604, 98725, 99931, 101074, 102180, 103120, 104271, 105216, 106525, 107768, 108809, 110012, 110767, 111921, 113057, 114101, 115390, 116603, 117814, 118419, 119116, 119941, 120874, 121801, 123006, 124205, 125437, 126628, 127397, 128468, 129638, 130811, 131795, 132656, 133358, 133987, 134679, 135475, 136249, 136839, 137457, 138226, 138818, 139498, 140223, 141108, 141831, 142645, 143436, 144423, 145444, 146054, 146996, 147723, 148495, 149251, 150112, 150805, 152049, 153405, 154892, 156064, 157531, 158949, 160438, 161762, 163103, 164557, 165661, 166907, 168237, 169604, 171168, 172456, 173923, 175332, 176283, 177366, 178770, 180162, 181437, 182429, 183621, 184980, 186315, 187407, 188538, 189600, 190615, 191720, 192799, 194022, 195101, 196162, 197309, 198390, 199316, 200596, 201599, 202779, 203855, 205051, 206066, 207277, 208437, 209733, 210922, 211951, 212977, 214067, 215209, 216499, 217534, 218647, 219718, 220827, 221713, 222974, 224223, 225544, 226801, 227857, 229085, 230153, 231331, 232686, 233883, 235018, 235901, 237050, 238235, 239533, 240622, 241704, 242661, 243537, 244452, 245333, 246215, 247178, 248209, 249224, 250326, 251396, 252730, 254104, 255534, 256758, 257869, 258823, 259564, 260786, 261997, 263077, 264440, 265802, 267114, 268079, 269190, 270333, 271322, 272302, 273332, 274428, 275212, 276043, 277036, 277947, 278717, 279654, 281092, 282356, 283651, 284829, 285805, 286859, 287780, 288643, 289594, 290782, 291858, 292802, 293845, 294887, 296087, 297225, 298136, 298719, 299475, 300266, 301341, 302551, 303753, 304710, 305754, 306783, 307885, 308929, 309904, 310804, 311916, 313012, 314039, 315070, 316156, 317255, 318164, 319174, 320235, 321308, 322389, 323498, 324354, 325348, 326327, 327381, 328363, 329385, 330717, 332044, 333125, 334025, 335219, 336438, 337714, 339137, 340399, 341626, 342658, 343859, 345144, 346340, 347425, 348167, 348907, 349695, 350660, 351834, 352958, 353967, 354842, 355825, 356670, 357664, 358550, 359402, 360307, 361643, 363222, 364432, 365304, 366346, 367421, 368631, 369702, 371075, 372424, 373667, 374828, 375828, 376861, 378100, 379135, 380261, 381401, 382656, 383907, 384926, 386057, 387153, 388260, 389232, 390442, 391364, 392534, 393733, 394843, 395960, 397060, 398062, 398988, 400190, 401221, 402348, 403121, 403938, 405156, 406134, 407066, 408143, 409335, 410629, 411787, 412792, 413766, 414794, 415910, 416930, 418489, 419604, 420825, 422044, 423137, 424241, 425131, 426205, 427140, 428400, 429560, 430768, 431998, 432827, 433749, 434967, 435919, 436843, 438074, 439278, 440709, 441881, 443016, 444084, 445201, 446194, 447367, 448611, 449777, 451072, 452324, 453486, 454799, 456109, 457288, 458309, 459414, 460558, 461681, 462861, 464011, 465012, 466280, 467139, 468201, 468986, 470075, 471167, 472306, 473475, 474703, 476022, 477260, 478598, 479665, 480607, 481875, 483122, 484423, 485449, 486675, 487735, 488823, 489527, 490585, 491799, 492958, 494129, 495263, 496473, 497540, 498708, 499589, 500594, 501567, 502671, 503778, 505141, 506381, 507356, 508463, 509763, 510899, 512095, 513403, 514499, 515588, 516686, 517740, 518804, 519992, 521363, 522649, 523996, 525163, 526254, 527352, 528342, 529483, 530598, 531663, 532857, 534087, 535432, 536653, 537760, 538831, 539652, 540617, 541548, 542886, 544075, 545321, 546551, 547495, 548667, 549989, 551020, 552236, 553591, 554809, 556133, 557120, 558415, 559567, 560862, 561913, 563164, 564375, 565515, 566493, 567512, 568020, 568841, 570187, 571373, 572463, 573493, 574615, 575749, 576861, 577853, 578972, 579981, 581158, 582295, 583206, 584359, 585687, 586904, 587949, 589214, 590388, 591494, 592634, 593836, 595102, 596265, 597410, 598592, 599778, 600776, 601997, 603159, 604243, 605341, 606307, 606942, 608124, 609208, 610460, 611745, 613033, 614165, 615279, 616542, 617646, 618920, 620527, 621502, 622620, 623766, 624800, 625862, 626968, 627981, 629405, 630733, 631992, 633037, 634367, 635755, 637134, 638474, 639727, 641096, 642312, 643769, 645037, 645952, 646911, 648118, 649236, 650419, 651711, 652773, 653739, 654835, 655796, 657185, 658345, 659507, 660737, 662323, 663548, 664675, 665716, 666886, 668040, 669063, 670272, 671267, 672725, 673668, 674723, 675822, 677164, 678375, 679618, 680692, 682010, 683352, 684541, 685557, 686440, 687356, 688342, 689394, 690290, 691500, 692543, 693599, 694635, 696209, 697620, 698830, 700237, 701597, 702978, 704077, 705206, 706298, 707159, 708224, 709326, 710313, 711077, 712479, 713611, 715135, 716280, 717677, 718885, 720271, 721559, 722977, 724179, 725145, 726652, 728147, 729112, 730247, 731429, 732518, 733634, 734998, 736280, 737382, 738621, 739863, 741207, 742477, 743791, 744964, 746119, 747293, 748626, 749931, 751187, 752342, 753278, 754553, 755716, 756873, 758143, 759409, 760075, 761193, 762631, 764118, 765368, 766818, 767912, 769166, 770183, 771315, 772407, 773577, 774813, 776146, 777355, 778655, 780008, 781103, 781827, 783025, 783725, 784490, 785772, 786841, 787736, 788687, 789473, 790123, 790987, 791775, 792826, 794152, 795474, 796795, 797881, 799093, 800217, 801263, 802352, 803237, 804331, 805367, 806338, 807553, 808296, 809446, 810702, 811965, 812950, 813901, 814774, 815880, 816886, 818165, 819355, 820662, 822075, 823321, 824521, 825697, 826767, 827989, 829113, 830281, 831482, 832726, 833908, 834951, 836201, 837571, 838651, 839857, 840953, 842249, 843568, 844733, 845976, 846876, 847839, 848921, 850148, 851203, 852199, 853305, 854236, 855161, 856330, 857473, 858580, 859611, 860679, 861742, 862966, 864033, 864947, 865936, 867226, 868388, 869486, 870722, 871645, 872769, 873924, 875039, 876151, 877111, 878355, 879618, 880967, 882131, 883318, 884490, 885727, 887226, 888375, 889458, 890640, 891959, 893227, 894540, 895838, 897113, 898500, 899539, 900680, 901893, 902918, 904242, 905297, 906572, 907800, 908956, 910147, 911096, 912229, 913642, 914957, 916204, 917307, 918799, 920257, 921698, 923116, 924434, 925819, 927178, 928526, 929548, 930599, 931655, 932579, 933843, 935226, 936350, 937388, 938434, 939529, 940447, 941474, 942200, 943304, 944095, 945047, 946435, 947760, 948930, 950132, 951568, 952760, 954089, 955354, 956287, 957549, 958930, 960266, 961634, 962538, 963919, 965224, 966526, 967467, 968659, 970009, 971363, 972590, 973843, 975135, 976471, 978017, 979271, 980558, 981813, 982531, 983770, 984993, 986275, 987634, 988446, 989478, 990267, 990861, 992086, 993271, 994492, 995545, 996660, 997814, 998888, 1000101, 1000833, 1001895, 1003165, 1004297, 1005516, 1006609, 1007707, 1008782, 1009881, 1010961, 1012115, 1013236, 1013984, 1015003, 1016098, 1017281, 1018048, 1019438, 1020962, 1022331, 1023853, 1025465, 1026741, 1028230, 1029704, 1031051, 1031872, 1033373, 1034716, 1036070, 1037214, 1038518, 1039805, 1040994, 1042288, 1043614, 1045034, 1046081, 1047459, 1048610, 1049819, 1050908, 1052183, 1053584, 1054701, 1056109, 1057351, 1058778, 1060083, 1061285, 1062709, 1063412, 1064526, 1065625, 1066815, 1068079, 1069356, 1070548, 1071674, 1072967, 1074074, 1075334, 1076568, 1077862, 1079193, 1080206, 1081340, 1082506, 1083677, 1084694, 1085846, 1087043, 1088366, 1089861, 1090977, 1092145, 1093523, 1094895, 1096247, 1097465, 1098718, 1099906, 1100999, 1102407, 1103527, 1104832, 1106099, 1107171, 1108422, 1109720, 1110861, 1111983, 1112944, 1114071, 1115223, 1116544, 1117502, 1118733, 1119883, 1120823, 1122080, 1123252, 1124294, 1125690, 1126875, 1128029, 1129072, 1130040, 1131269, 1132759, 1133974, 1135389, 1136725, 1137732, 1139001, 1139991, 1141215, 1142509, 1143695, 1144832, 1146123, 1147261, 1148245, 1149588, 1150621, 1152068, 1153279, 1154688, 1155980, 1157552, 1159011, 1160306, 1161254, 1161971, 1162584, 1163389, 1164321, 1165305, 1166553, 1167652, 1168788, 1169986, 1171287, 1172542, 1173960, 1175264, 1176489, 1177463, 1178406, 1179634, 1180815, 1181846, 1182891, 1183689, 1184764, 1185722, 1186747, 1187912, 1188868, 1189894, 1191178, 1192198, 1193120, 1194069, 1195291, 1196118, 1197246, 1198316, 1199447, 1200685, 1201694, 1202655, 1203740, 1204892, 1205803, 1207142, 1208422, 1209523, 1210818, 1212148, 1213339, 1214827, 1216098, 1217441, 1218736, 1219634, 1220498, 1221549, 1222600, 1223572, 1224794, 1226147, 1227464, 1228771, 1229634, 1230922, 1232096, 1233493, 1234915, 1236189, 1237725, 1238943, 1240391, 1241907, 1242786, 1244160, 1245580, 1246764, 1247879, 1248973, 1250128, 1251248, 1252125, 1253391, 1254577, 1255745, 1257148, 1258342, 1259523, 1260831, 1262348, 1263629, 1264859, 1266078, 1267095, 1268116, 1269195, 1270116, 1271101, 1272334, 1273649, 1275029, 1276255, 1277548, 1278785, 1280029, 1281135, 1282514, 1283925, 1285260, 1286471, 1287900, 1289049, 1290225, 1291504, 1292763, 1293989, 1295424, 1296437, 1297573, 1298884, 1300070, 1301340, 1302495, 1303649, 1305025, 1306318, 1307526, 1308628, 1309610, 1310519, 1311467, 1312796, 1314126, 1315493, 1316956, 1318010, 1319311, 1320388, 1321540, 1322641, 1323821, 1324687, 1325957, 1327234, 1328368, 1329588, 1330704, 1331843, 1332920, 1334032, 1335298, 1336545, 1337699, 1338923, 1339907, 1341033, 1342471, 1343784, 1345116, 1346344, 1347618, 1349005, 1350136, 1351292, 1352582, 1353699, 1355124, 1356396, 1357656, 1359185, 1360361, 1361782, 1362989, 1364356, 1365842, 1367274, 1368699, 1370067, 1371304, 1372752, 1374136, 1375407, 1376499, 1377648, 1378417, 1379144, 1379908, 1380617, 1381359, 1382331, 1383345, 1384253, 1384890, 1385917, 1387004, 1387941, 1388788, 1389626, 1390472, 1391362, 1392126, 1393069, 1394164, 1395003, 1395746, 1396486, 1397083, 1397713, 1398724, 1399584, 1400469, 1401317, 1402242, 1403063, 1404005, 1404811, 1405528, 1406191, 1406982, 1407974, 1408709, 1409375, 1409972, 1410602, 1411342, 1412346, 1413199, 1413889, 1414550, 1415136, 1415899, 1416790, 1417801, 1418638, 1419503, 1420294, 1421156, 1421944, 1423040, 1424040, 1424721, 1425550, 1426508, 1427256, 1428176, 1429277, 1430123, 1430866, 1431725, 1432566, 1433168, 1434208, 1435236, 1435943, 1436790, 1437821, 1438436, 1439253, 1440310, 1441212, 1441895, 1442810, 1443706, 1444362, 1445434, 1446467, 1447170, 1448017, 1449045, 1449682, 1450530, 1451592, 1452493, 1453180, 1454124, 1455107, 1455994, 1457028, 1457956, 1458644, 1459622, 1460602, 1461445, 1462585, 1463599, 1464258, 1465093, 1466052, 1466781, 1467703, 1468796, 1469631, 1470389, 1471345, 1472199, 1472920, 1474030, 1475126, 1476112, 1476984, 1477747, 1478620, 1479416, 1480567, 1481620, 1482478, 1483294, 1484128, 1484881, 1485810, 1486624, 1487261, 1488160, 1489219, 1489979, 1490693, 1491331, 1492158, 1492911, 1493987, 1494960, 1495635, 1496510, 1497187, 1498038, 1498933, 1499935, 1500811, 1501623, 1502484, 1503378, 1504119, 1505187, 1505895, 1506649, 1507351, 1508226, 1508865, 1509880, 1510757, 1511461, 1512079, 1512865, 1513926, 1514686, 1515413, 1516018, 1516709, 1517415, 1518417, 1519397, 1520068, 1520832, 1521470, 1522266, 1523109, 1524016, 1524872, 1525556, 1526449, 1527474, 1528186, 1528933, 1529682, 1530494, 1531248, 1532360, 1533262, 1533941, 1534842, 1535514, 1536236, 1537082, 1537956, 1538801, 1539554, 1540498, 1541491, 1542197, 1542866, 1543634, 1544408, 1545271, 1546300, 1547082, 1547841, 1548724, 1549362, 1550074, 1551079, 1551756, 1552531, 1553305, 1554278, 1555250, 1555902, 1556646, 1557452, 1558181, 1559041, 1560078, 1560824, 1561611, 1562297, 1562895, 1563575, 1564499, 1565197, 1565916, 1566627, 1567565, 1568496, 1569165, 1569853, 1570558, 1571282, 1572035, 1573013, 1573715, 1574460, 1575028, 1575619, 1576321, 1577392, 1578377, 1579057, 1579842, 1580594, 1581436, 1582451, 1583192, 1583953, 1584813, 1585837, 1586580, 1587313, 1587967, 1588824, 1589632, 1590713, 1591620, 1592293, 1593238, 1593869, 1594566, 1595411, 1596221, 1597095, 1597830, 1598832, 1599801, 1600439, 1601109, 1601936, 1602665, 1603565, 1604563, 1605305, 1606072, 1606919, 1607556, 1608266, 1609338, 1610011, 1610792, 1611564, 1612663, 1613543, 1614205, 1614879, 1615716, 1616355, 1617383, 1618363, 1619083, 1619883, 1620471, 1621325, 1621993, 1623042, 1623739, 1624459, 1625273, 1626363, 1627226, 1627889, 1628577, 1629395, 1630045, 1631100, 1632083, 1632771, 1633597, 1634235, 1635076, 1635744, 1636746, 1637620, 1638239, 1639194, 1640219, 1640931, 1641668, 1642500, 1643151, 1644018, 1645095, 1645928, 1646624, 1647504, 1648355, 1649051, 1650077, 1650769, 1651594, 1652357, 1653458, 1654368, 1655033, 1655750, 1656637, 1657279, 1658308, 1659287, 1660006, 1660811, 1661471, 1662306, 1662973, 1664034, 1664879, 1665594, 1666316, 1667353, 1668098, 1668852, 1669723, 1670438, 1671122, 1672048, 1672940, 1673618, 1674581, 1675274, 1675871, 1676745, 1677485, 1678355, 1679046, 1680084, 1681047, 1681699, 1682376, 1683239, 1683851, 1684781, 1685832, 1686591, 1687372, 1688177, 1689041, 1689723, 1690688, 1691307, 1692007, 1692724, 1693674, 1694645, 1695305, 1695986, 1696664, 1697291, 1698110, 1699080, 1699830, 1700540, 1701121, 1701800, 1702465, 1703501, 1704289, 1705013, 1705780, 1706790, 1707573, 1708277, 1709037, 1709800, 1710524, 1711557, 1712444, 1713122, 1713988, 1714626, 1715340, 1716369, 1717391, 1718140, 1718838, 1719596, 1720341, 1721337, 1722285, 1723171, 1724025, 1724767, 1725550, 1726571, 1727143, 1727727, 1728319, 1728929, 1729753, 1730763, 1731851, 1732628, 1733378, 1734120, 1734843, 1735657, 1736862, 1737820, 1739004, 1740002, 1741012, 1741621, 1742192, 1742758, 1743635, 1744738, 1745585, 1746328, 1747123, 1747883, 1748526, 1749631, 1750648, 1751315, 1751996, 1752739, 1753460, 1754366, 1755445, 1756326, 1757034, 1757769, 1758500, 1759439, 1760513, 1761409, 1762104, 1762907, 1763788, 1764546, 1765630, 1766666, 1767384, 1768047, 1768816, 1769426, 1770180, 1771204, 1772153, 1772836, 1773607, 1774483, 1775123, 1776095, 1777110, 1777877, 1778545, 1779411, 1780080, 1780798, 1781866, 1782864, 1783547, 1784296, 1785086, 1785845, 1786799, 1787849, 1788600, 1789336, 1790159, 1790860, 1791647, 1792673, 1793627, 1794309, 1795076, 1795884, 1796634, 1797616, 1798663, 1799422, 1800129, 1800805, 1801404, 1802221, 1803278, 1804179, 1804865, 1805549, 1806246, 1807282, 1808294, 1808966, 1809666, 1810623, 1811295, 1812270, 1813290, 1814051, 1814719, 1815491, 1816368, 1817428, 1818307, 1819009, 1819818, 1820614, 1821279, 1822303, 1823396, 1824240, 1824990, 1825882, 1826617, 1827224, 1828152, 1829201, 1829968, 1830779, 1831630, 1832335, 1833091, 1834149, 1835058, 1835739, 1836665, 1837418, 1838017, 1838848, 1839918, 1840688, 1841420, 1842276, 1843112, 1843704, 1844771, 1845741, 1846556, 1847330, 1848165, 1848768, 1849496, 1850161, 1850941, 1851761, 1852544, 1853367, 1853935, 1854635, 1855309, 1856004, 1856705, 1857402, 1858287, 1859044, 1859923, 1860625, 1861272, 1862365, 1863259, 1864367, 1865057, 1865827, 1866536, 1867300, 1868170, 1868921, 1869698, 1870447, 1871177, 1871953, 1872682, 1873503, 1874292, 1875337, 1876041, 1876811, 1877570, 1878515, 1879333, 1879998, 1880918, 1881756, 1882426, 1883144, 1884044, 1884993, 1886052, 1887155, 1888011, 1888743, 1889464, 1890404, 1891196, 1892186, 1892890, 1893657, 1894439, 1895114, 1896185, 1897095, 1898072, 1898872, 1899539, 1900256, 1901183, 1902163, 1903159, 1903913, 1904799, 1905481, 1906172, 1907252, 1908093, 1909334, 1910286, 1911339, 1912100, 1912924, 1913968, 1914683, 1915327, 1916493, 1917510, 1918182, 1918990, 1919840, 1920533, 1921238, 1922498, 1923716, 1924869, 1925717, 1926733, 1927889, 1928489, 1929293, 1930313, 1931082, 1931755, 1932508, 1933254, 1934318, 1935307, 1936261, 1937169, 1937961, 1938936, 1939903, 1940855, 1941538, 1942542, 1943446, 1944706, 1945795, 1946712, 1947880, 1949016, 1950197, 1951460, 1952597, 1953587, 1954808, 1956100, 1957275, 1958529, 1959752, 1960796, 1961918, 1963187, 1964356, 1965607, 1966606, 1967576, 1968608, 1969978, 1971295, 1972412, 1973445, 1974429, 1975953, 1977500, 1978840, 1979849, 1980917, 1981929, 1982886, 1983863, 1985251, 1986480, 1987757, 1989152, 1990361, 1991249, 1992284, 1993486, 1994595, 1995836, 1996910, 1998159, 1998868, 1999724, 2000680, 2002036, 2003118, 2004500, 2006022, 2007171, 2008436, 2009624, 2010775, 2012001, 2013147, 2014244, 2015235, 2016553, 2017627, 2018825, 2019781, 2020913, 2022031, 2023327, 2024720, 2025812, 2026553, 2027056, 2028039, 2029232, 2030473, 2031610, 2033072, 2034492, 2035701, 2036765, 2037877, 2039250, 2040485, 2041847, 2042892, 2044047, 2045054, 2046116, 2047533, 2048973, 2050433, 2051499, 2052612, 2054123, 2055259, 2056631, 2058198, 2059536, 2060667, 2061875, 2062933, 2063841, 2065092, 2066253, 2067022, 2068109, 2069319, 2070235, 2070982, 2072151, 2073244, 2074386, 2075398, 2076865, 2078075, 2079295, 2080471, 2081685, 2082978, 2084275, 2085658, 2086719, 2087913, 2088892, 2090046, 2091197, 2092292, 2093613, 2094877, 2096258, 2097292, 2098417, 2099639, 2101053, 2102598, 2104251, 2105848, 2107084, 2108602, 2109657, 2111001, 2112151, 2113571, 2114635, 2115732, 2117062, 2118139, 2119347, 2120763, 2121911, 2123200, 2124037, 2124970, 2126213, 2127416, 2128662, 2129915, 2131179, 2132400, 2133538, 2134446, 2135283, 2136221, 2137115, 2138052, 2138949, 2139907, 2140766, 2141709, 2142601, 2143534, 2144410, 2145320, 2146239, 2147093, 2147878, 2148713, 2149655, 2150564, 2151484, 2152392, 2153305, 2154146, 2155038, 2155972, 2156872, 2157731, 2158954, 2160283, 2161598, 2162585, 2163304, 2164342, 2165432, 2166521, 2167553, 2168900, 2170238, 2171644, 2172938, 2174271, 2175697, 2177188, 2178594, 2179858, 2181065, 2182237, 2183440, 2184660, 2185710, 2186833, 2187857, 2189151, 2190505, 2191695, 2193026, 2194166, 2195375, 2196593, 2197874, 2198894, 2199904, 2201126, 2202333, 2203498, 2204510, 2205561, 2206946, 2208379, 2209763, 2211065, 2212412, 2213817, 2215003, 2216361, 2217684, 2218879, 2220313, 2221789, 2222977, 2224213, 2225118, 2226127, 2227030, 2228096, 2229225, 2230037, 2231031, 2232328, 2233548, 2234570, 2235752, 2236648, 2237729, 2238802, 2239891, 2240896, 2241916, 2243030, 2244249, 2245461, 2246266, 2247658, 2248623, 2249751, 2251349, 2252613, 2254149, 2255532, 2256632, 2257763, 2258920, 2260141, 2261446, 2262521, 2264021, 2265473, 2266947, 2268423, 2269805, 2270804, 2272022, 2273185, 2274380, 2275491, 2276842, 2278146, 2279342, 2280471, 2281716, 2283023, 2284405, 2285697, 2286874, 2287873, 2289123, 2290270, 2291496, 2293049, 2293839, 2295194, 2296600, 2297714, 2298952, 2300212, 2301482, 2302519, 2303527, 2304556, 2305551, 2306676, 2307765, 2308828, 2309975, 2311078, 2312137, 2313116, 2314253, 2315399, 2316452, 2317571, 2318934, 2320269, 2321619, 2322923, 2323853, 2325151, 2326367, 2327652, 2328803, 2329981, 2331317, 2332344, 2333621, 2334827, 2336110, 2337509, 2338862, 2340008, 2341185, 2342397, 2343677, 2344806, 2345810, 2346879, 2347896, 2348987, 2350093, 2351393, 2352434, 2353496, 2354776, 2355919, 2357132, 2358434, 2359714, 2360924, 2362284, 2363403, 2364658, 2366014, 2367103, 2368293, 2369632, 2371070, 2372393, 2373548, 2374931, 2376360, 2377363, 2378580, 2379853, 2380876, 2382135, 2383305, 2384146, 2385135, 2386421, 2387593, 2388769, 2389923, 2391072, 2392204, 2393232, 2394540, 2395728, 2397019, 2398217, 2399551, 2400834, 2401993, 2403221, 2404438, 2405552, 2406738, 2407807, 2408916, 2410074, 2411301, 2412508, 2413290, 2414477, 2415635, 2416820, 2418084, 2419215, 2420556, 2421810, 2422899, 2424134, 2425196, 2426408, 2427773, 2429106, 2430347, 2431486, 2432778, 2433927, 2435226, 2436328, 2437422, 2438549, 2439820, 2440881, 2442233, 2443454, 2444830, 2446242, 2447365, 2448381, 2449473, 2450542, 2451649, 2452806, 2453966, 2455308, 2456694, 2457698, 2459011, 2460036, 2461249, 2462405, 2463626, 2464763, 2465967, 2467068, 2468040, 2469260, 2470538, 2471759, 2472970, 2474024, 2475140, 2476210, 2477470, 2478620, 2479899, 2481003, 2482168, 2483306, 2484322, 2485625, 2486652, 2487950, 2489161, 2490377, 2491491, 2492606, 2493465, 2494494, 2495664, 2496692, 2497837, 2499033, 2500239, 2501172, 2502337, 2503278, 2504496, 2505412, 2506248, 2507331, 2508159, 2509228, 2510286, 2511496, 2512775, 2514192, 2515516, 2516189, 2517178, 2518249, 2519456, 2520556, 2521602, 2522649, 2523731, 2524803, 2526064, 2526958, 2527959, 2528961, 2529982, 2531096, 2532169, 2533077, 2534238, 2535280, 2536541, 2537585, 2538595, 2539683, 2540825, 2541982, 2543174, 2544029, 2545240, 2546275, 2547449, 2548552, 2549389, 2550349, 2551257, 2552410, 2553472, 2554666, 2555965, 2557407, 2558778, 2560016, 2560914, 2562074, 2563488, 2564638, 2565896, 2566780, 2567880, 2569064, 2570215, 2571390, 2572692, 2573920, 2574969, 2575868, 2576873, 2577606, 2578668, 2579866, 2581043, 2582262, 2583406, 2584639, 2586062, 2587236, 2588490, 2589564, 2590838, 2592030, 2593121, 2594081, 2595425, 2596688, 2597849, 2598786, 2599989, 2600789, 2601487, 2602277, 2602788, 2603360, 2603903, 2604434, 2604964, 2605512, 2606075, 2606624, 2607195, 2607776, 2608313, 2608854, 2609434, 2609990, 2610581, 2611186, 2611811, 2613080, 2614194, 2615502, 2616583, 2617655, 2619216, 2620470, 2621731, 2623219, 2624379, 2625777, 2626965, 2628166, 2629314, 2630674, 2631978, 2633295, 2634508, 2635592, 2636766, 2638050, 2639111, 2640426, 2641523, 2642706, 2643979, 2645151, 2646401, 2647499, 2648689, 2649740, 2650601, 2651829, 2652912, 2653914, 2655093, 2656315, 2657214, 2658483, 2659677, 2660682, 2661675, 2662581, 2663882, 2665327, 2666744, 2667901, 2669253, 2670559, 2671808, 2672873, 2673932, 2675078, 2675782, 2676481, 2677534, 2678617, 2679622, 2680707, 2681835, 2683009, 2684029, 2685581, 2686797, 2688174, 2689299, 2690553, 2691686, 2692903, 2694040, 2695299, 2696407, 2697794, 2699095, 2700243, 2701511, 2702776, 2704138, 2705158, 2706365, 2707351, 2708622, 2709786, 2711025, 2712143, 2713434, 2714636, 2715811, 2716938, 2718318, 2719537, 2720793, 2721865, 2722619, 2723598, 2724600, 2725760, 2726837, 2727818, 2728883, 2729948, 2731262, 2732412, 2733520, 2734553, 2735698, 2736639, 2737738, 2738709, 2739578, 2740281, 2741335, 2742411, 2743342, 2744390, 2745401, 2746332, 2747104, 2747858, 2748777, 2749781, 2750576, 2751565, 2752317, 2753103, 2754108, 2754944, 2755873, 2757015, 2757991, 2759450, 2760737, 2762057, 2763222, 2764514, 2765731, 2766932, 2767916, 2768962, 2770256, 2771498, 2772535, 2773204, 2774001, 2775157, 2776534, 2777800, 2778782, 2779643, 2780686, 2781642, 2782621, 2783766, 2784793, 2785898, 2786998, 2788147, 2789563, 2790826, 2791798, 2792741, 2793931, 2794907, 2796062, 2797196, 2798305, 2799560, 2800750, 2801930, 2803091, 2804309, 2805201, 2806417, 2807593, 2808307, 2809352, 2810551, 2811392, 2812680, 2813865, 2815113, 2816303, 2817478, 2818586, 2819804, 2820704, 2821840, 2823167, 2824489, 2825709, 2826609, 2827867, 2829159, 2830512, 2831843, 2832899, 2833926, 2834916, 2836073, 2837148, 2838358, 2839467, 2840511, 2841604, 2842763, 2843934, 2845056, 2846283, 2847567, 2848561, 2849340, 2850467, 2851562, 2852663, 2853813, 2854860, 2856187, 2857463, 2858771, 2859716, 2860721, 2861834, 2862891, 2863690, 2864833, 2865770, 2866754, 2867857, 2868920, 2869928, 2870893, 2872069, 2873103, 2874370, 2875528, 2876947, 2878005, 2879294, 2880319, 2881366, 2882421, 2883581, 2884928, 2886040, 2887021, 2888061, 2889085, 2890336, 2891605, 2892736, 2893804, 2894902, 2896110, 2897325, 2898421, 2899487, 2900921, 2902131, 2903224, 2904365, 2905750, 2906857, 2907798, 2908863, 2910268, 2911262, 2912152, 2913081, 2914058, 2915321, 2916313, 2917488, 2918740, 2919994, 2921371, 2922561, 2923814, 2925137, 2926175, 2926992, 2928044, 2929006, 2930339, 2931487, 2932798, 2933829, 2935012, 2936299, 2937540, 2938832, 2939777, 2940705, 2942141, 2943599, 2945016, 2946262, 2947605, 2949125, 2950468, 2951694, 2952726, 2953726, 2955019, 2956166, 2957385, 2958405, 2959100, 2960229, 2961347, 2962529, 2963732, 2964945, 2966471, 2967649, 2968905, 2970199, 2971623, 2972895, 2973878, 2974871, 2976147, 2977385, 2978622, 2979650, 2980977, 2982302, 2983679, 2985196, 2986100, 2987131, 2988015, 2989025, 2990165, 2991236, 2992366, 2993696, 2994542, 2995806, 2996744, 2997838, 2999191, 3000580, 3001735, 3002991, 3004014, 3005140, 3006185, 3007296, 3008397, 3009656, 3010842, 3011880, 3012875, 3013657, 3014675, 3015783, 3016946, 3017916, 3018883, 3019965, 3021343, 3022578, 3023679, 3024811, 3026029, 3027204, 3028443, 3029539, 3030619, 3031795, 3033295, 3034315, 3035642, 3037071, 3038426, 3039863, 3041076, 3042316, 3043607, 3044571, 3045609, 3046822, 3047889, 3049008, 3050327, 3051028, 3051988, 3053054, 3054272, 3055567, 3056698, 3058179, 3059314, 3060613, 3061855, 3063081, 3063917, 3065043, 3066425, 3067393, 3068218, 3069263, 3070377, 3071527, 3072612, 3073974, 3074996, 3076246, 3077208, 3078256, 3079269, 3080043, 3080539, 3081944, 3083511, 3084984, 3086084, 3087411, 3088528, 3089801, 3091006, 3092201, 3093511, 3094857, 3095929, 3097036, 3098226, 3099491, 3100484, 3101646, 3102741, 3103798, 3105053, 3106349, 3107380, 3108491, 3109523, 3110478, 3111898, 3113175, 3114399, 3115644, 3117039, 3118356, 3119768, 3121043, 3122275, 3123456, 3124715, 3125716, 3126845, 3128132, 3129353, 3130673, 3131718, 3132895, 3134009, 3135198, 3136224, 3137138, 3138118, 3139291, 3140219, 3141385, 3142481, 3143694, 3144912, 3145842, 3146879, 3147735, 3148677, 3149663, 3150714, 3151476, 3152531, 3153602, 3155174, 3156764, 3158251, 3159806, 3160974, 3161693, 3162756, 3163761, 3164655, 3165501, 3166767, 3167712, 3168709, 3169634, 3170889, 3172075, 3172949, 3174237, 3175540, 3176695, 3177639, 3178465, 3179405, 3180654, 3181441, 3182334, 3183315, 3184447, 3185076, 3186265, 3187646, 3189003, 3190355, 3191425, 3192682, 3193772, 3194993, 3196129, 3197564, 3198735, 3199821, 3200988, 3202048, 3203019, 3204203, 3205453, 3206938, 3208029, 3208985, 3210097, 3211499, 3212769, 3213959, 3215168, 3216376, 3217191, 3218429, 3219633, 3221148, 3222416, 3223914, 3225256, 3226867, 3228308, 3229919, 3231317, 3232464, 3233697, 3234970, 3236312, 3237452, 3238643, 3240026, 3241252, 3242606, 3243901, 3245006, 3246156, 3247043, 3248087, 3249370, 3250593, 3251973, 3253345, 3254789, 3255812, 3256768, 3257779, 3258912, 3260150, 3261325, 3262255, 3263446, 3264352, 3265058, 3266190, 3267763, 3269075, 3270246, 3271385, 3272611, 3273946, 3275094, 3276376, 3277881, 3279240, 3280402, 3281664, 3282876, 3284115, 3285313, 3286790, 3287886, 3289224, 3290278, 3291139, 3292137, 3292994, 3293952, 3294965, 3295722, 3296552, 3297354, 3298808, 3300026, 3301433, 3302681, 3303472, 3304406, 3305645, 3306853, 3308228, 3309654, 3310805, 3312175, 3313625, 3315075, 3316242, 3317225, 3318344, 3319352, 3320496, 3321414, 3322475, 3323626, 3324617, 3325633, 3326427, 3327436, 3328797, 3330039, 3331350, 3332488, 3333918, 3334960, 3336278, 3337541, 3338740, 3339912, 3340894, 3342113, 3343637, 3344944, 3346136, 3347493, 3348859, 3350232, 3351482, 3352843, 3354063, 3355315, 3356633, 3357872, 3359007, 3360079, 3361292, 3362415, 3363349, 3364113, 3365111, 3366281, 3367430, 3368703, 3369943, 3371105, 3372049, 3373152, 3373985, 3374868, 3375980, 3377155, 3378348, 3379641, 3380735, 3381905, 3383283, 3384486, 3385551, 3386576, 3387867, 3388933, 3390109, 3391325, 3392534, 3393674, 3394974, 3396019, 3397353, 3398522, 3399419, 3400536, 3401642, 3402848, 3403973, 3405335, 3406436, 3407500, 3408451, 3409469, 3410476, 3411535, 3412517, 3413539, 3414491, 3415560, 3416495, 3417566, 3418328, 3419379, 3420418, 3421334, 3422200, 3423019, 3423963, 3424840, 3425733, 3426686, 3427600, 3428497, 3429397, 3430218, 3431177, 3432131, 3433165, 3434278, 3435300, 3436425, 3437352, 3438319, 3439340, 3440383, 3441370, 3442577, 3443616, 3444723, 3445790, 3446908, 3448063, 3449136, 3450180, 3451258, 3452327, 3453364, 3454335, 3455306, 3456332, 3457381, 3458287, 3459289, 3460282, 3461291, 3462224, 3463255, 3464124, 3465028, 3466003, 3467e3, 3467873, 3468807, 3469871, 3470852, 3471741, 3472606, 3473504, 3474559, 3475537, 3476477, 3477300, 3478207, 3479159, 3480108, 3481009, 3481831, 3482701, 3483689, 3484840, 3485816, 3486938, 3487941, 3488972, 3490016, 3490985, 3491851, 3492801, 3493726, 3494652, 3495696, 3496702, 3497686, 3498617, 3499605, 3500610, 3501525, 3502455, 3503472, 3504449, 3505455, 3506496, 3507566, 3508622, 3509617, 3510658, 3511722, 3512802, 3513945, 3514998, 3515992, 3516950, 3518015, 3519013, 3519941, 3520780, 3521852, 3523049, 3524278, 3525441, 3526559, 3527650, 3528671, 3529583, 3530607, 3531630, 3532725, 3533788, 3534862, 3535940, 3537057, 3538288, 3539496, 3540493, 3541509, 3542485, 3543431, 3544454, 3545221, 3545930, 3546915, 3547899, 3548610, 3549132, 3549849, 3550594, 3551412, 3552242, 3553031, 3553942, 3554776, 3555593, 3556524, 3557336, 3558398, 3559518, 3560559, 3561621, 3562716, 3563806, 3564957, 3565875, 3566912, 3567946, 3569086, 3570104, 3571236, 3572258, 3573457, 3574520, 3575686, 3576818, 3578021, 3579097, 3580129, 3581177, 3582269, 3583339, 3584404, 3585475, 3586316, 3587126, 3588031, 3588958, 3589796, 3590921, 3592052, 3593177, 3594180, 3594732, 3595141, 3595671, 3596659, 3597630, 3598824, 3599948, 3600811, 3601844, 3602902, 3603860, 3604775, 3605713, 3606481, 3607354, 3608414, 3609445, 3610324, 3611372, 3612505, 3613424, 3614434, 3615444, 3616463, 3617405, 3618360, 3619324, 3620335, 3621405, 3622410, 3623554, 3624507, 3625525, 3626342, 3627310, 3628258, 3629215, 3630239, 3631194, 3632147, 3633050, 3634040, 3635018, 3635999, 3636920, 3637758, 3638657, 3639600, 3640595, 3641623, 3642669, 3643586, 3644518, 3645504, 3646409, 3647322, 3648368, 3649359, 3650344, 3651286, 3652111, 3653105, 3653940, 3654787, 3655623, 3656597, 3657548, 3658554, 3659553, 3660619, 3661544, 3662589, 3663554, 3664562, 3665543, 3666494, 3667464, 3668295, 3669144, 3669942, 3670849, 3671663, 3672534, 3673420, 3674255, 3675169, 3676108, 3676923, 3677457, 3678135, 3679027, 3679964, 3680923, 3681894, 3682749, 3683888, 3684812, 3685260, 3686056, 3687180, 3688133, 3689330, 3690362, 3691572, 3692522, 3693580, 3694752, 3695831, 3696952, 3698129, 3699216, 3700329, 3701479, 3702634, 3703478, 3704116, 3704784, 3705793, 3706693, 3707767, 3708669, 3709771, 3710852, 3712030, 3713004, 3714122, 3715309, 3716265, 3717386, 3718535, 3719634, 3720779, 3721746, 3722863, 3723839, 3724741, 3725587, 3726453, 3727265, 3728128, 3729011, 3729956, 3730827, 3731805, 3732824, 3733852, 3734959, 3735756, 3736265, 3737381, 3738362, 3739532, 3740541, 3741307, 3741854, 3742479, 3743538, 3744562, 3745681, 3746762, 3747842, 3748829, 3749774, 3750767, 3751515, 3752017, 3752596, 3753250, 3754291, 3755435, 3756478, 3757459, 3758594, 3759837, 3760950, 3761898, 3763095, 3764426, 3765842, 3767062, 3768191, 3769452, 3770793, 3772277, 3773420, 3774623, 3775863, 3776701, 3777976, 3779324, 3780481, 3781690, 3783008, 3784349, 3785586, 3786795, 3788097, 3788986, 3790339, 3791520, 3792789, 3794148, 3795184, 3796393, 3797543, 3798843, 3799930, 3800833, 3802339, 3803572, 3804814, 3805883, 3807211, 3808339, 3809671, 3810942, 3812255, 3813619, 3815124, 3816354, 3817584, 3819059, 3820455, 3821800, 3822897, 3824094, 3825074, 3826134, 3827187, 3828262, 3829100, 3830397, 3831846, 3833146, 3834392, 3835302, 3836647, 3837700, 3838708, 3839461, 3840318, 3841391, 3842731, 3844032, 3845533, 3846730, 3847925, 3849058, 3850360, 3851472, 3852621, 3853899, 3855130, 3856128, 3857187, 3858272, 3859690, 3860693, 3861945, 3862999, 3864151, 3865496, 3866769, 3867905, 3869176, 3870530, 3871905, 3873214, 3874364, 3875602, 3877032, 3878333, 3879573, 3880922, 3882097, 3883267, 3884624, 3885923, 3887029, 3888355, 3889677, 3891272, 3892460, 3893268, 3893861, 3894796, 3895799, 3896702, 3897593, 3898639, 3899516, 3900679, 3902054, 3903181, 3904431, 3905581, 3906643, 3908076, 3909443, 3910584, 3911884, 3913194, 3914442, 3915651, 3916807, 3918164, 3919349, 3920538, 3921879, 3922853, 3924007, 3925314, 3926455, 3927740, 3928854, 3930225, 3931359, 3932581, 3933854, 3935197, 3936625, 3937747, 3938891, 3940212, 3941585, 3942599, 3943642, 3944776, 3945920, 3947072, 3948228, 3949157, 3950325, 3951430, 3952657, 3953903, 3955121, 3956196, 3957450, 3958884, 3960185, 3961443, 3962976, 3964466, 3965647, 3966920, 3967983, 3969084, 3970104, 3971369, 3972375, 3973432, 3974568, 3975872, 3977324, 3978431, 3979277, 3980016, 3980919, 3981818, 3983079, 3984533, 3985601, 3986726, 3988022, 3988838, 3989582, 3990961, 3992180, 3993113, 3994255, 3995503, 3996616, 3997540, 3998501, 3999446, 4000404, 4001323, 4002468, 4003663, 4004443, 4005347, 4006245, 4006984, 4007807, 4008731, 4009764, 4010499, 4011690, 4012628, 4013944, 4014909, 4016115, 4017310, 4018323, 4019702, 4021053, 4022368, 4023696, 4025019, 4026108, 4027500, 4029055, 4030388, 4031885, 4033086, 4034167, 4035313, 4036785, 4037978, 4039325, 4040547, 4041771, 4042593, 4043749, 4045125, 4045958, 4047105, 4048129, 4049577, 4050468, 4051715, 4052710, 4053731, 4054757, 4055737, 4057095, 4058100, 4059191, 4060499, 4061764, 4062944, 4064319, 4065582, 4066829, 4068122, 4069288, 4070683, 4071973, 4073017, 4074299, 4075177, 4076112, 4077135, 4078404, 4079602, 4080739, 4081848, 4082773, 4083417, 4084482, 4085423, 4086470, 4087522, 4088455, 4089463, 4090345, 4091334, 4092384, 4093366, 4094371, 4095469, 4096544, 4097582, 4098469, 4099451, 4100576, 4101882, 4103136, 4104269, 4105074, 4106006, 4107e3, 4107978, 4108781, 4109944, 4110881, 4111838, 4112713, 4113559, 4114848, 4115770, 4116443, 4117715, 4118935, 4120120, 4121222, 4122502, 4123857, 4125029, 4126170, 4127479, 4128858, 4130257, 4131750, 4132934, 4134139, 4135375, 4136592, 4137904, 4139435, 4140458, 4141687, 4143086, 4144147, 4145277, 4146359, 4147411, 4148412, 4149519, 4150534, 4151762, 4152896, 4153789, 4154949, 4156004, 4157224, 4158445, 4159675, 4160829, 4162097, 4163299, 4164336, 4165394, 4166505, 4167680, 4168772, 4169726, 4170714, 4171582, 4172423, 4173587, 4174842, 4175897, 4177004, 4178275, 4179446, 4180566, 4181586, 4182638, 4183757, 4184764, 4185756, 4186998, 4188237, 4189164, 4190777, 4192052, 4193547, 4194747, 4195959, 4196909, 4197720, 4198689, 4199624, 4200583, 4201888, 4203291, 4204664, 4205984, 4207337, 4208544, 4209749, 4211155, 4212474, 4213802, 4215137, 4216282, 4217313, 4218249, 4219400, 4220859, 4222181, 4223412, 4224489, 4225806, 4227173, 4228265, 4229252, 4230547, 4231839, 4233419, 4234593, 4235763, 4236997, 4238133, 4239393, 4240505, 4241830, 4243080, 4244364, 4245733, 4246987, 4248034, 4249418, 4250779, 4251976, 4253305, 4254438, 4255803, 4257085, 4258227, 4259224, 4260294, 4261448, 4262639, 4263779, 4265144, 4266466, 4267905, 4269446, 4270566, 4271885, 4273124, 4274377, 4275612, 4276942, 4278443, 4279754, 4281004, 4282011, 4283169, 4284570, 4285588, 4286987, 4287978, 4288966, 4289951, 4291111, 4292363, 4293865, 4294997, 4296145, 4297228, 4298354, 4299587, 4300894, 4301892, 4302958, 4303958, 4304752, 4305809, 4307014, 4308153, 4309413, 4310790, 4312009, 4313190, 4314405, 4315602, 4316799, 4317883, 4318998, 4320079, 4321124, 4322308, 4323539, 4324510, 4325410, 4326448, 4327523, 4328536, 4329470, 4330437, 4331192, 4332411, 4333858, 4335128, 4336416, 4337330, 4338528, 4339989, 4341313, 4342646, 4343889, 4345101, 4346211, 4347472, 4348699, 4350138, 4351552, 4352773, 4353770, 4355142, 4356245, 4357561, 4358898, 4360134, 4361251, 4362452, 4363471, 4364526, 4365762, 4366781, 4368122, 4369433, 4370708, 4371925, 4373087, 4374289, 4375712, 4377114, 4378294, 4379359, 4380496, 4381727, 4382936, 4384089, 4385197, 4386254, 4387551, 4388677, 4390067, 4391463, 4392314, 4393544, 4395027, 4396430, 4397451, 4398909, 4399906, 4400866, 4402161, 4403318, 4404424, 4405557, 4406734, 4408199, 4409408, 4410507, 4411730, 4412684, 4413497, 4414556, 4415752, 4416907, 4418094, 4419175, 4420115, 4421142, 4421992, 4422969, 4423967, 4424822, 4425916, 4426777, 4427690, 4428785, 4429950, 4430947, 4432140, 4433487, 4434728, 4435755, 4436892, 4438228, 4439268, 4440286, 4441432, 4442543, 4443606, 4444815, 4446100, 4447102, 4447910, 4448910, 4449887, 4451286, 4452536, 4453504, 4454611, 4455800, 4457074, 4458124, 4459127, 4460210, 4461337, 4462450, 4463518, 4464731, 4465959, 4466923, 4468024, 4469221, 4470575, 4471538, 4472832, 4474192, 4475256, 4476279, 4477349, 4478246, 4479255, 4480260, 4481621, 4482878, 4484301, 4485776, 4486950, 4488123, 4489409, 4490428, 4491610, 4492820, 4493801, 4494838, 4495917, 4497150, 4498270, 4499237, 4500270, 4501602, 4502889, 4504002, 4505163, 4506363, 4507771, 4508805, 4509807, 4511041, 4512289, 4512876, 4514099, 4515111, 4516245, 4517431, 4518736, 4519714, 4520568, 4521441, 4522189, 4523471, 4524628, 4525748, 4527119, 4528488, 4529861, 4531240, 4532450, 4533193, 4534201, 4535162, 4536530, 4537926, 4539093, 4540303, 4541665, 4542884, 4544160, 4545505, 4546936, 4548297, 4549461, 4550582, 4551476, 4552469, 4553871, 4555332, 4556733, 4558176, 4559453, 4560756, 4561847, 4562995, 4564062, 4565052, 4566305, 4567644, 4569030, 4570347, 4571608, 4572801, 4573875, 4575119, 4576221, 4577574, 4578897, 4580067, 4581170, 4582266, 4583551, 4584764, 4585944, 4587088, 4588237, 4589560, 4591050, 4592183, 4593232, 4594440, 4595593, 4596702, 4597863, 4599100, 4600390, 4601368, 4602008, 4602742, 4603598, 4604720, 4605832, 4607204, 4608597, 4609704, 4610830, 4612e3, 4613148, 4614456, 4615412, 4616558, 4617515, 4618814, 4620224, 4621398, 4622640, 4624108, 4625404, 4626634, 4627800, 4628717, 4629630, 4630764, 4632258, 4633498, 4634619, 4635717, 4637116, 4638433, 4639618, 4640722, 4641830, 4643045, 4644203, 4645454, 4646643, 4647851, 4648985, 4650288, 4651462, 4652742, 4653832, 4654824, 4655956, 4656912, 4657705, 4658702, 4659840, 4661082, 4662358, 4663136, 4664013, 4665117, 4666394, 4667360, 4668452, 4669747, 4670856, 4672291, 4673784, 4675033, 4676410, 4677697, 4678977, 4680231, 4681461, 4682720, 4683992, 4685446, 4686965, 4688147, 4689070, 4690452, 4691641, 4692873, 4694216, 4695454, 4696754, 4698239, 4699678, 4700881, 4701774, 4702991, 4704082, 4705318, 4706664, 4707613, 4708400, 4709623, 4710957, 4712051, 4713322, 4714672, 4715947, 4716979, 4718093, 4718980, 4719933, 4720851, 4721938, 4723083, 4724101, 4724940, 4726142, 4727218, 4728351, 4729358, 4730424, 4731557, 4732427, 4733647, 4734768, 4735940, 4736813, 4737640, 4738679, 4739920, 4740973, 4742040, 4743067, 4743913, 4744744, 4745816, 4746829, 4747833, 4748799, 4749901, 4751103, 4752103, 4753025, 4753912, 4754989, 4756006, 4756993, 4758020, 4759245, 4760396, 4761437, 4762381, 4763429, 4764175, 4765254, 4766393, 4767310, 4768448, 4769590, 4770463, 4771333, 4772526, 4773526, 4774420, 4775596, 4776430, 4777252, 4778493, 4779565, 4780653, 4782133, 4783464, 4784488, 4785840, 4787264, 4788292, 4789113, 4790071, 4790879, 4792e3, 4793356, 4794881, 4796173, 4797317, 4798441, 4799381, 4800539, 4801691, 4802644, 4803830, 4804593, 4805819, 4806894, 4807926, 4808923, 4809915, 4810917, 4812197, 4813322, 4814440, 4815673, 4817010, 4818199, 4819383, 4820363, 4821559, 4822626, 4823338, 4824483, 4825482, 4826754, 4827799, 4828848, 4829857, 4831039, 4831827, 4833326, 4834519, 4835829, 4837061, 4838181, 4839425, 4840461, 4841401, 4842318, 4843392, 4844288, 4845206, 4846305, 4847618, 4848921, 4850011, 4851090, 4852280, 4853199, 4854397, 4855707, 4856736, 4857975, 4858901, 4859914, 4860701, 4861994, 4863039, 4864183, 4865392, 4866459, 4867601, 4868589, 4870075, 4871524, 4872881, 4874111, 4875312, 4876069, 4877290, 4878627, 4879742, 4880694, 4882046, 4882864, 4883927, 4885161, 4886311, 4887504, 4888609, 4889980, 4891144, 4892360, 4893413, 4894665, 4895937, 4897170, 4898425, 4899751, 4901020, 4902202, 4903350, 4904508, 4905683, 4906950, 4908242, 4909241, 4910551, 4911613, 4912837, 4914031, 4915282, 4916229, 4917320, 4918557, 4919936, 4921214, 4922538, 4923757, 4925180, 4926433, 4927667, 4928942, 4930216, 4931331, 4932411, 4933461, 4934856, 4936022, 4937010, 4937970, 4939137, 4940376, 4941425, 4942333, 4943325, 4944407, 4945359, 4946633, 4947786, 4948838, 4950020, 4951265, 4952506, 4953735, 4954813, 4956005, 4957200, 4958295, 4959450, 4960609, 4961428, 4962404, 4963525, 4964160, 4965151, 4966004, 4967211, 4968409, 4969758, 4970908, 4972081, 4973440, 4974631, 4975716, 4976882, 4977912, 4979105, 4980458, 4981494, 4982328, 4983344, 4984855, 4986092, 4987365, 4988636, 4989840, 4991096, 4992533, 4993799, 4995098, 4996362, 4997740, 4998852, 4999907, 5001137, 5002469, 5003646, 5004645, 5005794, 5006928, 5008336, 5009447],
                            "sizes": [1391, 1447, 1599, 1612, 1481, 1588, 1337, 1480, 1017, 1391, 1473, 1250, 1450, 1083, 970, 965, 944, 1160, 1206, 1238, 1e3, 948, 1259, 1135, 1033, 1153, 1202, 1226, 1223, 878, 1125, 936, 1193, 1049, 1252, 1413, 1265, 1131, 1030, 885, 833, 915, 1416, 1179, 914, 1489, 1032, 1371, 1371, 1180, 1321, 1196, 1253, 1226, 1167, 952, 1025, 1007, 748, 1033, 675, 1200, 1191, 1092, 867, 971, 868, 959, 1052, 853, 766, 1172, 1089, 1149, 1118, 819, 1073, 949, 845, 856, 1406, 1188, 1120, 939, 1246, 1095, 1121, 1206, 1143, 1106, 940, 1151, 945, 1309, 1243, 1041, 1203, 755, 1154, 1136, 1044, 1289, 1213, 1211, 605, 697, 825, 933, 927, 1205, 1199, 1232, 1191, 769, 1071, 1170, 1173, 984, 861, 702, 629, 692, 796, 774, 590, 618, 769, 592, 680, 725, 885, 723, 814, 791, 987, 1021, 610, 942, 727, 772, 756, 861, 693, 1244, 1356, 1487, 1172, 1467, 1418, 1489, 1324, 1341, 1454, 1104, 1246, 1330, 1367, 1564, 1288, 1467, 1409, 951, 1083, 1404, 1392, 1275, 992, 1192, 1359, 1335, 1092, 1131, 1062, 1015, 1105, 1079, 1223, 1079, 1061, 1147, 1081, 926, 1280, 1003, 1180, 1076, 1196, 1015, 1211, 1160, 1296, 1189, 1029, 1026, 1090, 1142, 1290, 1035, 1113, 1071, 1109, 886, 1261, 1249, 1321, 1257, 1056, 1228, 1068, 1178, 1355, 1197, 1135, 883, 1149, 1185, 1298, 1089, 1082, 957, 876, 915, 881, 882, 963, 1031, 1015, 1102, 1070, 1334, 1374, 1430, 1224, 1111, 954, 741, 1222, 1211, 1080, 1363, 1362, 1312, 965, 1111, 1143, 989, 980, 1030, 1096, 784, 831, 993, 911, 770, 937, 1438, 1264, 1295, 1178, 976, 1054, 921, 863, 951, 1188, 1076, 944, 1043, 1042, 1200, 1138, 911, 583, 756, 791, 1075, 1210, 1202, 957, 1044, 1029, 1102, 1044, 975, 900, 1112, 1096, 1027, 1031, 1086, 1099, 909, 1010, 1061, 1073, 1081, 1109, 856, 994, 979, 1054, 982, 1022, 1332, 1327, 1081, 900, 1194, 1219, 1276, 1423, 1262, 1227, 1032, 1201, 1285, 1196, 1085, 742, 740, 788, 965, 1174, 1124, 1009, 875, 983, 845, 994, 886, 852, 905, 1336, 1579, 1210, 872, 1042, 1075, 1210, 1071, 1373, 1349, 1243, 1161, 1e3, 1033, 1239, 1035, 1126, 1140, 1255, 1251, 1019, 1131, 1096, 1107, 972, 1210, 922, 1170, 1199, 1110, 1117, 1100, 1002, 926, 1202, 1031, 1127, 773, 817, 1218, 978, 932, 1077, 1192, 1294, 1158, 1005, 974, 1028, 1116, 1020, 1559, 1115, 1221, 1219, 1093, 1104, 890, 1074, 935, 1260, 1160, 1208, 1230, 829, 922, 1218, 952, 924, 1231, 1204, 1431, 1172, 1135, 1068, 1117, 993, 1173, 1244, 1166, 1295, 1252, 1162, 1313, 1310, 1179, 1021, 1105, 1144, 1123, 1180, 1150, 1001, 1268, 859, 1062, 785, 1089, 1092, 1139, 1169, 1228, 1319, 1238, 1338, 1067, 942, 1268, 1247, 1301, 1026, 1226, 1060, 1088, 704, 1058, 1214, 1159, 1171, 1134, 1210, 1067, 1168, 881, 1005, 973, 1104, 1107, 1363, 1240, 975, 1107, 1300, 1136, 1196, 1308, 1096, 1089, 1098, 1054, 1064, 1188, 1371, 1286, 1347, 1167, 1091, 1098, 990, 1141, 1115, 1065, 1194, 1230, 1345, 1221, 1107, 1071, 821, 965, 931, 1338, 1189, 1246, 1230, 944, 1172, 1322, 1031, 1216, 1355, 1218, 1324, 987, 1295, 1152, 1295, 1051, 1251, 1211, 1140, 978, 1019, 508, 821, 1346, 1186, 1090, 1030, 1122, 1134, 1112, 992, 1119, 1009, 1177, 1137, 911, 1153, 1328, 1217, 1045, 1265, 1174, 1106, 1140, 1202, 1266, 1163, 1145, 1182, 1186, 998, 1221, 1162, 1084, 1098, 966, 635, 1182, 1084, 1252, 1285, 1288, 1132, 1114, 1263, 1104, 1274, 1607, 975, 1118, 1146, 1034, 1062, 1106, 1013, 1424, 1328, 1259, 1045, 1330, 1388, 1379, 1340, 1253, 1369, 1216, 1457, 1268, 915, 959, 1207, 1118, 1183, 1292, 1062, 966, 1096, 961, 1389, 1160, 1162, 1230, 1586, 1225, 1127, 1041, 1170, 1154, 1023, 1209, 995, 1458, 943, 1055, 1099, 1342, 1211, 1243, 1074, 1318, 1342, 1189, 1016, 883, 916, 986, 1052, 896, 1210, 1043, 1056, 1036, 1574, 1411, 1210, 1407, 1360, 1381, 1099, 1129, 1092, 861, 1065, 1102, 987, 764, 1402, 1132, 1524, 1145, 1397, 1208, 1386, 1288, 1418, 1202, 966, 1507, 1495, 965, 1135, 1182, 1089, 1116, 1364, 1282, 1102, 1239, 1242, 1344, 1270, 1314, 1173, 1155, 1174, 1333, 1305, 1256, 1155, 936, 1275, 1163, 1157, 1270, 1266, 666, 1118, 1438, 1487, 1250, 1450, 1094, 1254, 1017, 1132, 1092, 1170, 1236, 1333, 1209, 1300, 1353, 1095, 724, 1198, 700, 765, 1282, 1069, 895, 951, 786, 650, 864, 788, 1051, 1326, 1322, 1321, 1086, 1212, 1124, 1046, 1089, 885, 1094, 1036, 971, 1215, 743, 1150, 1256, 1263, 985, 951, 873, 1106, 1006, 1279, 1190, 1307, 1413, 1246, 1200, 1176, 1070, 1222, 1124, 1168, 1201, 1244, 1182, 1043, 1250, 1370, 1080, 1206, 1096, 1296, 1319, 1165, 1243, 900, 963, 1082, 1227, 1055, 996, 1106, 931, 925, 1169, 1143, 1107, 1031, 1068, 1063, 1224, 1067, 914, 989, 1290, 1162, 1098, 1236, 923, 1124, 1155, 1115, 1112, 960, 1244, 1263, 1349, 1164, 1187, 1172, 1237, 1499, 1149, 1083, 1182, 1319, 1268, 1313, 1298, 1275, 1387, 1039, 1141, 1213, 1025, 1324, 1055, 1275, 1228, 1156, 1191, 949, 1133, 1413, 1315, 1247, 1103, 1492, 1458, 1441, 1418, 1318, 1385, 1359, 1348, 1022, 1051, 1056, 924, 1264, 1383, 1124, 1038, 1046, 1095, 918, 1027, 726, 1104, 791, 952, 1388, 1325, 1170, 1202, 1436, 1192, 1329, 1265, 933, 1262, 1381, 1336, 1368, 904, 1381, 1305, 1302, 941, 1192, 1350, 1354, 1227, 1253, 1292, 1336, 1546, 1254, 1287, 1255, 718, 1239, 1223, 1282, 1359, 812, 1032, 789, 594, 1225, 1185, 1221, 1053, 1115, 1154, 1074, 1213, 732, 1062, 1270, 1132, 1219, 1093, 1098, 1075, 1099, 1080, 1154, 1121, 748, 1019, 1095, 1183, 767, 1390, 1524, 1369, 1522, 1612, 1276, 1489, 1474, 1347, 821, 1501, 1343, 1354, 1144, 1304, 1287, 1189, 1294, 1326, 1420, 1047, 1378, 1151, 1209, 1089, 1275, 1401, 1117, 1408, 1242, 1427, 1305, 1202, 1424, 703, 1114, 1099, 1190, 1264, 1277, 1192, 1126, 1293, 1107, 1260, 1234, 1294, 1331, 1013, 1134, 1166, 1171, 1017, 1152, 1197, 1323, 1495, 1116, 1168, 1378, 1372, 1352, 1218, 1253, 1188, 1093, 1408, 1120, 1305, 1267, 1072, 1251, 1298, 1141, 1122, 961, 1127, 1152, 1321, 958, 1231, 1150, 940, 1257, 1172, 1042, 1396, 1185, 1154, 1043, 968, 1229, 1490, 1215, 1415, 1336, 1007, 1269, 990, 1224, 1294, 1186, 1137, 1291, 1138, 984, 1343, 1033, 1447, 1211, 1409, 1292, 1572, 1459, 1295, 948, 717, 613, 805, 932, 984, 1248, 1099, 1136, 1198, 1301, 1255, 1418, 1304, 1225, 974, 943, 1228, 1181, 1031, 1045, 798, 1075, 958, 1025, 1165, 956, 1026, 1284, 1020, 922, 949, 1222, 827, 1128, 1070, 1131, 1238, 1009, 961, 1085, 1152, 911, 1339, 1280, 1101, 1295, 1330, 1191, 1488, 1271, 1343, 1295, 898, 864, 1051, 1051, 972, 1222, 1353, 1317, 1307, 863, 1288, 1174, 1397, 1422, 1274, 1536, 1218, 1448, 1516, 879, 1374, 1420, 1184, 1115, 1094, 1155, 1120, 877, 1266, 1186, 1168, 1403, 1194, 1181, 1308, 1517, 1281, 1230, 1219, 1017, 1021, 1079, 921, 985, 1233, 1315, 1380, 1226, 1293, 1237, 1244, 1106, 1379, 1411, 1335, 1211, 1429, 1149, 1176, 1279, 1259, 1226, 1435, 1013, 1136, 1311, 1186, 1270, 1155, 1154, 1376, 1293, 1208, 1102, 982, 909, 948, 1329, 1330, 1367, 1463, 1054, 1301, 1077, 1152, 1101, 1180, 866, 1270, 1277, 1134, 1220, 1116, 1139, 1077, 1112, 1266, 1247, 1154, 1224, 984, 1126, 1438, 1313, 1332, 1228, 1274, 1387, 1131, 1156, 1290, 1117, 1425, 1272, 1260, 1529, 1176, 1421, 1207, 1367, 1486, 1432, 1425, 1368, 1237, 1448, 1384, 1271, 1092, 1149, 769, 727, 764, 709, 742, 972, 1014, 908, 637, 1027, 1087, 937, 847, 838, 846, 890, 764, 943, 1095, 839, 743, 740, 597, 630, 1011, 860, 885, 848, 925, 821, 942, 806, 717, 663, 791, 992, 735, 666, 597, 630, 740, 1004, 853, 690, 661, 586, 763, 891, 1011, 837, 865, 791, 862, 788, 1096, 1e3, 681, 829, 958, 748, 920, 1101, 846, 743, 859, 841, 602, 1040, 1028, 707, 847, 1031, 615, 817, 1057, 902, 683, 915, 896, 656, 1072, 1033, 703, 847, 1028, 637, 848, 1062, 901, 687, 944, 983, 887, 1034, 928, 688, 978, 980, 843, 1140, 1014, 659, 835, 959, 729, 922, 1093, 835, 758, 956, 854, 721, 1110, 1096, 986, 872, 763, 873, 796, 1151, 1053, 858, 816, 834, 753, 929, 814, 637, 899, 1059, 760, 714, 638, 827, 753, 1076, 973, 675, 875, 677, 851, 895, 1002, 876, 812, 861, 894, 741, 1068, 708, 754, 702, 875, 639, 1015, 877, 704, 618, 786, 1061, 760, 727, 605, 691, 706, 1002, 980, 671, 764, 638, 796, 843, 907, 856, 684, 893, 1025, 712, 747, 749, 812, 754, 1112, 902, 679, 901, 672, 722, 846, 874, 845, 753, 944, 993, 706, 669, 768, 774, 863, 1029, 782, 759, 883, 638, 712, 1005, 677, 775, 774, 973, 972, 652, 744, 806, 729, 860, 1037, 746, 787, 686, 598, 680, 924, 698, 719, 711, 938, 931, 669, 688, 705, 724, 753, 978, 702, 745, 568, 591, 702, 1071, 985, 680, 785, 752, 842, 1015, 741, 761, 860, 1024, 743, 733, 654, 857, 808, 1081, 907, 673, 945, 631, 697, 845, 810, 874, 735, 1002, 969, 638, 670, 827, 729, 900, 998, 742, 767, 847, 637, 710, 1072, 673, 781, 772, 1099, 880, 662, 674, 837, 639, 1028, 980, 720, 800, 588, 854, 668, 1049, 697, 720, 814, 1090, 863, 663, 688, 818, 650, 1055, 983, 688, 826, 638, 841, 668, 1002, 874, 619, 955, 1025, 712, 737, 832, 651, 867, 1077, 833, 696, 880, 851, 696, 1026, 692, 825, 763, 1101, 910, 665, 717, 887, 642, 1029, 979, 719, 805, 660, 835, 667, 1061, 845, 715, 722, 1037, 745, 754, 871, 715, 684, 926, 892, 678, 963, 693, 597, 874, 740, 870, 691, 1038, 963, 652, 677, 863, 612, 930, 1051, 759, 781, 805, 864, 682, 965, 619, 700, 717, 950, 971, 660, 681, 678, 627, 819, 970, 750, 710, 581, 679, 665, 1036, 788, 724, 767, 1010, 783, 704, 760, 763, 724, 1033, 887, 678, 866, 638, 714, 1029, 1022, 749, 698, 758, 745, 996, 948, 886, 854, 742, 783, 1021, 572, 584, 592, 610, 824, 1010, 1088, 777, 750, 742, 723, 814, 1205, 958, 1184, 998, 1010, 609, 571, 566, 877, 1103, 847, 743, 795, 760, 643, 1105, 1017, 667, 681, 743, 721, 906, 1079, 881, 708, 735, 731, 939, 1074, 896, 695, 803, 881, 758, 1084, 1036, 718, 663, 769, 610, 754, 1024, 949, 683, 771, 876, 640, 972, 1015, 767, 668, 866, 669, 718, 1068, 998, 683, 749, 790, 759, 954, 1050, 751, 736, 823, 701, 787, 1026, 954, 682, 767, 808, 750, 982, 1047, 759, 707, 676, 599, 817, 1057, 901, 686, 684, 697, 1036, 1012, 672, 700, 957, 672, 975, 1020, 761, 668, 772, 877, 1060, 879, 702, 809, 796, 665, 1024, 1093, 844, 750, 892, 735, 607, 928, 1049, 767, 811, 851, 705, 756, 1058, 909, 681, 926, 753, 599, 831, 1070, 770, 732, 856, 836, 592, 1067, 970, 815, 774, 835, 603, 728, 665, 780, 820, 783, 823, 568, 700, 674, 695, 701, 697, 885, 757, 879, 702, 647, 1093, 894, 1108, 690, 770, 709, 764, 870, 751, 777, 749, 730, 776, 729, 821, 789, 1045, 704, 770, 759, 945, 818, 665, 920, 838, 670, 718, 900, 949, 1059, 1103, 856, 732, 721, 940, 792, 990, 704, 767, 782, 675, 1071, 910, 977, 800, 667, 717, 927, 980, 996, 754, 886, 682, 691, 1080, 841, 1241, 952, 1053, 761, 824, 1044, 715, 644, 1166, 1017, 672, 808, 850, 693, 705, 1260, 1218, 1153, 848, 1016, 1156, 600, 804, 1020, 769, 673, 753, 746, 1064, 989, 954, 908, 792, 975, 967, 952, 683, 1004, 904, 1260, 1089, 917, 1168, 1136, 1181, 1263, 1137, 990, 1221, 1292, 1175, 1254, 1223, 1044, 1122, 1269, 1169, 1251, 999, 970, 1032, 1370, 1317, 1117, 1033, 984, 1524, 1547, 1340, 1009, 1068, 1012, 957, 977, 1388, 1229, 1277, 1395, 1209, 888, 1035, 1202, 1109, 1241, 1074, 1249, 709, 856, 956, 1356, 1082, 1382, 1522, 1149, 1265, 1188, 1151, 1226, 1146, 1097, 991, 1318, 1074, 1198, 956, 1132, 1118, 1296, 1393, 1092, 741, 503, 983, 1193, 1241, 1137, 1462, 1420, 1209, 1064, 1112, 1373, 1235, 1362, 1045, 1155, 1007, 1062, 1417, 1440, 1460, 1066, 1113, 1511, 1136, 1372, 1567, 1338, 1131, 1208, 1058, 908, 1251, 1161, 769, 1087, 1210, 916, 747, 1169, 1093, 1142, 1012, 1467, 1210, 1220, 1176, 1214, 1293, 1297, 1383, 1061, 1194, 979, 1154, 1151, 1095, 1321, 1264, 1381, 1034, 1125, 1222, 1414, 1545, 1653, 1597, 1236, 1518, 1055, 1344, 1150, 1420, 1064, 1097, 1330, 1077, 1208, 1416, 1148, 1289, 837, 933, 1243, 1203, 1246, 1253, 1264, 1221, 1138, 908, 837, 938, 894, 937, 897, 958, 859, 943, 892, 933, 876, 910, 919, 854, 785, 835, 942, 909, 920, 908, 913, 841, 892, 934, 900, 859, 1223, 1329, 1315, 987, 719, 1038, 1090, 1089, 1032, 1347, 1338, 1406, 1294, 1333, 1426, 1491, 1406, 1264, 1207, 1172, 1203, 1220, 1050, 1123, 1024, 1294, 1354, 1190, 1331, 1140, 1209, 1218, 1281, 1020, 1010, 1222, 1207, 1165, 1012, 1051, 1385, 1433, 1384, 1302, 1347, 1405, 1186, 1358, 1323, 1195, 1434, 1476, 1188, 1236, 905, 1009, 903, 1066, 1129, 812, 994, 1297, 1220, 1022, 1182, 896, 1081, 1073, 1089, 1005, 1020, 1114, 1219, 1212, 805, 1392, 965, 1128, 1598, 1264, 1536, 1383, 1100, 1131, 1157, 1221, 1305, 1075, 1500, 1452, 1474, 1476, 1382, 999, 1218, 1163, 1195, 1111, 1351, 1304, 1196, 1129, 1245, 1307, 1382, 1292, 1177, 999, 1250, 1147, 1226, 1553, 790, 1355, 1406, 1114, 1238, 1260, 1270, 1037, 1008, 1029, 995, 1125, 1089, 1063, 1147, 1103, 1059, 979, 1137, 1146, 1053, 1119, 1363, 1335, 1350, 1304, 930, 1298, 1216, 1285, 1151, 1178, 1336, 1027, 1277, 1206, 1283, 1399, 1353, 1146, 1177, 1212, 1280, 1129, 1004, 1069, 1017, 1091, 1106, 1300, 1041, 1062, 1280, 1143, 1213, 1302, 1280, 1210, 1360, 1119, 1255, 1356, 1089, 1190, 1339, 1438, 1323, 1155, 1383, 1429, 1003, 1217, 1273, 1023, 1259, 1170, 841, 989, 1286, 1172, 1176, 1154, 1149, 1132, 1028, 1308, 1188, 1291, 1198, 1334, 1283, 1159, 1228, 1217, 1114, 1186, 1069, 1109, 1158, 1227, 1207, 782, 1187, 1158, 1185, 1264, 1131, 1341, 1254, 1089, 1235, 1062, 1212, 1365, 1333, 1241, 1139, 1292, 1149, 1299, 1102, 1094, 1127, 1271, 1061, 1352, 1221, 1376, 1412, 1123, 1016, 1092, 1069, 1107, 1157, 1160, 1342, 1386, 1004, 1313, 1025, 1213, 1156, 1221, 1137, 1204, 1101, 972, 1220, 1278, 1221, 1211, 1054, 1116, 1070, 1260, 1150, 1279, 1104, 1165, 1138, 1016, 1303, 1027, 1298, 1211, 1216, 1114, 1115, 859, 1029, 1170, 1028, 1145, 1196, 1206, 933, 1165, 941, 1218, 916, 836, 1083, 828, 1069, 1058, 1210, 1279, 1417, 1324, 673, 989, 1071, 1207, 1100, 1046, 1047, 1082, 1072, 1261, 894, 1001, 1002, 1021, 1114, 1073, 908, 1161, 1042, 1261, 1044, 1010, 1088, 1142, 1157, 1192, 855, 1211, 1035, 1174, 1103, 837, 960, 908, 1153, 1062, 1194, 1299, 1442, 1371, 1238, 898, 1160, 1414, 1150, 1258, 884, 1100, 1184, 1151, 1175, 1302, 1228, 1049, 899, 1005, 733, 1062, 1198, 1177, 1219, 1144, 1233, 1423, 1174, 1254, 1074, 1274, 1192, 1091, 960, 1344, 1263, 1161, 937, 1203, 800, 698, 790, 511, 572, 543, 531, 530, 548, 563, 549, 571, 581, 537, 541, 580, 556, 591, 605, 625, 1269, 1114, 1308, 1081, 1072, 1561, 1254, 1261, 1488, 1160, 1398, 1188, 1201, 1148, 1360, 1304, 1317, 1213, 1084, 1174, 1284, 1061, 1315, 1097, 1183, 1273, 1172, 1250, 1098, 1190, 1051, 861, 1228, 1083, 1002, 1179, 1222, 899, 1269, 1194, 1005, 993, 906, 1301, 1445, 1417, 1157, 1352, 1306, 1249, 1065, 1059, 1146, 704, 699, 1053, 1083, 1005, 1085, 1128, 1174, 1020, 1552, 1216, 1377, 1125, 1254, 1133, 1217, 1137, 1259, 1108, 1387, 1301, 1148, 1268, 1265, 1362, 1020, 1207, 986, 1271, 1164, 1239, 1118, 1291, 1202, 1175, 1127, 1380, 1219, 1256, 1072, 754, 979, 1002, 1160, 1077, 981, 1065, 1065, 1314, 1150, 1108, 1033, 1145, 941, 1099, 971, 869, 703, 1054, 1076, 931, 1048, 1011, 931, 772, 754, 919, 1004, 795, 989, 752, 786, 1005, 836, 929, 1142, 976, 1459, 1287, 1320, 1165, 1292, 1217, 1201, 984, 1046, 1294, 1242, 1037, 669, 797, 1156, 1377, 1266, 982, 861, 1043, 956, 979, 1145, 1027, 1105, 1100, 1149, 1416, 1263, 972, 943, 1190, 976, 1155, 1134, 1109, 1255, 1190, 1180, 1161, 1218, 892, 1216, 1176, 714, 1045, 1199, 841, 1288, 1185, 1248, 1190, 1175, 1108, 1218, 900, 1136, 1327, 1322, 1220, 900, 1258, 1292, 1353, 1331, 1056, 1027, 990, 1157, 1075, 1210, 1109, 1044, 1093, 1159, 1171, 1122, 1227, 1284, 994, 779, 1127, 1095, 1101, 1150, 1047, 1327, 1276, 1308, 945, 1005, 1113, 1057, 799, 1143, 937, 984, 1103, 1063, 1008, 965, 1176, 1034, 1267, 1158, 1419, 1058, 1289, 1025, 1047, 1055, 1160, 1347, 1112, 981, 1040, 1024, 1251, 1269, 1131, 1068, 1098, 1208, 1215, 1096, 1066, 1434, 1210, 1093, 1141, 1385, 1107, 941, 1065, 1405, 994, 890, 929, 977, 1263, 992, 1175, 1252, 1254, 1377, 1190, 1253, 1323, 1038, 817, 1052, 962, 1333, 1148, 1311, 1031, 1183, 1287, 1241, 1292, 945, 928, 1436, 1458, 1417, 1246, 1343, 1520, 1343, 1226, 1032, 1e3, 1293, 1147, 1219, 1020, 695, 1129, 1118, 1182, 1203, 1213, 1526, 1178, 1256, 1294, 1424, 1272, 983, 993, 1276, 1238, 1237, 1028, 1327, 1325, 1377, 1517, 904, 1031, 884, 1010, 1140, 1071, 1130, 1330, 846, 1264, 938, 1094, 1353, 1389, 1155, 1256, 1023, 1126, 1045, 1111, 1101, 1259, 1186, 1038, 995, 782, 1018, 1108, 1163, 970, 967, 1082, 1378, 1235, 1101, 1132, 1218, 1175, 1239, 1096, 1080, 1176, 1500, 1020, 1327, 1429, 1355, 1437, 1213, 1240, 1291, 964, 1038, 1213, 1067, 1119, 1319, 701, 960, 1066, 1218, 1295, 1131, 1481, 1135, 1299, 1242, 1226, 836, 1126, 1382, 968, 825, 1045, 1114, 1150, 1085, 1362, 1022, 1250, 962, 1048, 1013, 774, 496, 1405, 1567, 1473, 1100, 1327, 1117, 1273, 1205, 1195, 1310, 1346, 1072, 1107, 1190, 1265, 993, 1162, 1095, 1057, 1255, 1296, 1031, 1111, 1032, 955, 1420, 1277, 1224, 1245, 1395, 1317, 1412, 1275, 1232, 1181, 1259, 1001, 1129, 1287, 1221, 1320, 1045, 1177, 1114, 1189, 1026, 914, 980, 1173, 928, 1166, 1096, 1213, 1218, 930, 1037, 856, 942, 986, 1051, 762, 1055, 1071, 1572, 1590, 1487, 1555, 1168, 719, 1063, 1005, 894, 846, 1266, 945, 997, 925, 1255, 1186, 874, 1288, 1303, 1155, 944, 826, 940, 1249, 787, 893, 981, 1132, 629, 1189, 1381, 1357, 1352, 1070, 1257, 1090, 1221, 1136, 1435, 1171, 1086, 1167, 1060, 971, 1184, 1250, 1485, 1091, 956, 1112, 1402, 1270, 1190, 1209, 1208, 815, 1238, 1204, 1515, 1268, 1498, 1342, 1611, 1441, 1611, 1398, 1147, 1233, 1273, 1342, 1140, 1191, 1383, 1226, 1354, 1295, 1105, 1150, 887, 1044, 1283, 1223, 1380, 1372, 1444, 1023, 956, 1011, 1133, 1238, 1175, 930, 1191, 906, 706, 1132, 1573, 1312, 1171, 1139, 1226, 1335, 1148, 1282, 1505, 1359, 1162, 1262, 1212, 1239, 1198, 1477, 1096, 1338, 1054, 861, 998, 857, 958, 1013, 757, 830, 802, 1454, 1218, 1407, 1248, 791, 934, 1239, 1208, 1375, 1426, 1151, 1370, 1450, 1450, 1167, 983, 1119, 1008, 1144, 918, 1061, 1151, 991, 1016, 794, 1009, 1361, 1242, 1311, 1138, 1430, 1042, 1318, 1263, 1199, 1172, 982, 1219, 1524, 1307, 1192, 1357, 1366, 1373, 1250, 1361, 1220, 1252, 1318, 1239, 1135, 1072, 1213, 1123, 934, 764, 998, 1170, 1149, 1273, 1240, 1162, 944, 1103, 833, 883, 1112, 1175, 1193, 1293, 1094, 1170, 1378, 1203, 1065, 1025, 1291, 1066, 1176, 1216, 1209, 1140, 1300, 1045, 1334, 1169, 897, 1117, 1106, 1206, 1125, 1362, 1101, 1064, 951, 1018, 1007, 1059, 982, 1022, 952, 1069, 935, 1071, 762, 1051, 1039, 916, 866, 819, 944, 877, 893, 953, 914, 897, 900, 821, 959, 954, 1034, 1113, 1022, 1125, 927, 967, 1021, 1043, 987, 1207, 1039, 1107, 1067, 1118, 1155, 1073, 1044, 1078, 1069, 1037, 971, 971, 1026, 1049, 906, 1002, 993, 1009, 933, 1031, 869, 904, 975, 997, 873, 934, 1064, 981, 889, 865, 898, 1055, 978, 940, 823, 907, 952, 949, 901, 822, 870, 988, 1151, 976, 1122, 1003, 1031, 1044, 969, 866, 950, 925, 926, 1044, 1006, 984, 931, 988, 1005, 915, 930, 1017, 977, 1006, 1041, 1070, 1056, 995, 1041, 1064, 1080, 1143, 1053, 994, 958, 1065, 998, 928, 839, 1072, 1197, 1229, 1163, 1118, 1091, 1021, 912, 1024, 1023, 1095, 1063, 1074, 1078, 1117, 1231, 1208, 997, 1016, 976, 946, 1023, 767, 709, 985, 984, 711, 522, 717, 745, 818, 830, 789, 911, 834, 817, 931, 812, 1062, 1120, 1041, 1062, 1095, 1090, 1151, 918, 1037, 1034, 1140, 1018, 1132, 1022, 1199, 1063, 1166, 1132, 1203, 1076, 1032, 1048, 1092, 1070, 1065, 1071, 841, 810, 905, 927, 838, 1125, 1131, 1125, 1003, 552, 409, 530, 988, 971, 1194, 1124, 863, 1033, 1058, 958, 915, 938, 768, 873, 1060, 1031, 879, 1048, 1133, 919, 1010, 1010, 1019, 942, 955, 964, 1011, 1070, 1005, 1144, 953, 1018, 817, 968, 948, 957, 1024, 955, 953, 903, 990, 978, 981, 921, 838, 899, 943, 995, 1028, 1046, 917, 932, 986, 905, 913, 1046, 991, 985, 942, 825, 994, 835, 847, 836, 974, 951, 1006, 999, 1066, 925, 1045, 965, 1008, 981, 951, 970, 831, 849, 798, 907, 814, 871, 886, 835, 914, 939, 815, 534, 678, 892, 937, 959, 971, 855, 1139, 924, 448, 796, 1124, 953, 1197, 1032, 1210, 950, 1058, 1172, 1079, 1121, 1177, 1087, 1113, 1150, 1155, 844, 638, 668, 1009, 900, 1074, 902, 1102, 1081, 1178, 974, 1118, 1187, 956, 1121, 1149, 1099, 1145, 967, 1117, 976, 902, 846, 866, 812, 863, 883, 945, 871, 978, 1019, 1028, 1107, 797, 509, 1116, 981, 1170, 1009, 766, 547, 625, 1059, 1024, 1119, 1081, 1080, 987, 945, 993, 748, 502, 579, 654, 1041, 1144, 1043, 981, 1135, 1243, 1113, 948, 1197, 1331, 1416, 1220, 1129, 1261, 1341, 1484, 1143, 1203, 1240, 838, 1275, 1348, 1157, 1209, 1318, 1341, 1237, 1209, 1302, 889, 1353, 1181, 1269, 1359, 1036, 1209, 1150, 1300, 1087, 903, 1506, 1233, 1242, 1069, 1328, 1128, 1332, 1271, 1313, 1364, 1505, 1230, 1230, 1475, 1396, 1345, 1097, 1197, 980, 1060, 1053, 1075, 838, 1297, 1449, 1300, 1246, 910, 1345, 1053, 1008, 753, 857, 1073, 1340, 1301, 1501, 1197, 1195, 1133, 1302, 1112, 1149, 1278, 1231, 998, 1059, 1085, 1418, 1003, 1252, 1054, 1152, 1345, 1273, 1136, 1271, 1354, 1375, 1309, 1150, 1238, 1430, 1301, 1240, 1349, 1175, 1170, 1357, 1299, 1106, 1326, 1322, 1595, 1188, 808, 593, 935, 1003, 903, 891, 1046, 877, 1163, 1375, 1127, 1250, 1150, 1062, 1433, 1367, 1141, 1300, 1310, 1248, 1209, 1156, 1357, 1185, 1189, 1341, 974, 1154, 1307, 1141, 1285, 1114, 1371, 1134, 1222, 1273, 1343, 1428, 1122, 1144, 1321, 1373, 1014, 1043, 1134, 1144, 1152, 1156, 929, 1168, 1105, 1227, 1246, 1218, 1075, 1254, 1434, 1301, 1258, 1533, 1490, 1181, 1273, 1063, 1101, 1020, 1265, 1006, 1057, 1136, 1304, 1452, 1107, 846, 739, 903, 899, 1261, 1454, 1068, 1125, 1296, 816, 744, 1379, 1219, 933, 1142, 1248, 1113, 924, 961, 945, 958, 919, 1145, 1195, 780, 904, 898, 739, 823, 924, 1033, 735, 1191, 938, 1316, 965, 1206, 1195, 1013, 1379, 1351, 1315, 1328, 1323, 1089, 1392, 1555, 1333, 1497, 1201, 1081, 1146, 1472, 1193, 1347, 1222, 1224, 822, 1156, 1376, 833, 1147, 1024, 1448, 891, 1247, 995, 1021, 1026, 980, 1358, 1005, 1091, 1308, 1265, 1180, 1375, 1263, 1247, 1293, 1166, 1395, 1290, 1044, 1282, 878, 935, 1023, 1269, 1198, 1137, 1109, 925, 644, 1065, 941, 1047, 1052, 933, 1008, 882, 989, 1050, 982, 1005, 1098, 1075, 1038, 887, 982, 1125, 1306, 1254, 1133, 805, 932, 994, 978, 803, 1163, 937, 957, 875, 846, 1289, 922, 673, 1272, 1220, 1185, 1102, 1280, 1355, 1172, 1141, 1309, 1379, 1399, 1493, 1184, 1205, 1236, 1217, 1312, 1531, 1023, 1229, 1399, 1061, 1130, 1082, 1052, 1001, 1107, 1015, 1228, 1134, 893, 1160, 1055, 1220, 1221, 1230, 1154, 1268, 1202, 1037, 1058, 1111, 1175, 1092, 954, 988, 868, 841, 1164, 1255, 1055, 1107, 1271, 1171, 1120, 1020, 1052, 1119, 1007, 992, 1242, 1239, 927, 1613, 1275, 1495, 1200, 1212, 950, 811, 969, 935, 959, 1305, 1403, 1373, 1320, 1353, 1207, 1205, 1406, 1319, 1328, 1335, 1145, 1031, 936, 1151, 1459, 1322, 1231, 1077, 1317, 1367, 1092, 987, 1295, 1292, 1580, 1174, 1170, 1234, 1136, 1260, 1112, 1325, 1250, 1284, 1369, 1254, 1047, 1384, 1361, 1197, 1329, 1133, 1365, 1282, 1142, 997, 1070, 1154, 1191, 1140, 1365, 1322, 1439, 1541, 1120, 1319, 1239, 1253, 1235, 1330, 1501, 1311, 1250, 1007, 1158, 1401, 1018, 1399, 991, 988, 985, 1160, 1252, 1502, 1132, 1148, 1083, 1126, 1233, 1307, 998, 1066, 1e3, 794, 1057, 1205, 1139, 1260, 1377, 1219, 1181, 1215, 1197, 1197, 1084, 1115, 1081, 1045, 1184, 1231, 971, 900, 1038, 1075, 1013, 934, 967, 755, 1219, 1447, 1270, 1288, 914, 1198, 1461, 1324, 1333, 1243, 1212, 1110, 1261, 1227, 1439, 1414, 1221, 997, 1372, 1103, 1316, 1337, 1236, 1117, 1201, 1019, 1055, 1236, 1019, 1341, 1311, 1275, 1217, 1162, 1202, 1423, 1402, 1180, 1065, 1137, 1231, 1209, 1153, 1108, 1057, 1297, 1126, 1390, 1396, 851, 1230, 1483, 1403, 1021, 1458, 997, 960, 1295, 1157, 1106, 1133, 1177, 1465, 1209, 1099, 1223, 954, 813, 1059, 1196, 1155, 1187, 1081, 940, 1027, 850, 977, 998, 855, 1094, 861, 913, 1095, 1165, 997, 1193, 1347, 1241, 1027, 1137, 1336, 1040, 1018, 1146, 1111, 1063, 1209, 1285, 1002, 808, 1e3, 977, 1399, 1250, 968, 1107, 1189, 1274, 1050, 1003, 1083, 1127, 1113, 1068, 1213, 1228, 964, 1101, 1197, 1354, 963, 1294, 1360, 1064, 1023, 1070, 897, 1009, 1005, 1361, 1257, 1423, 1475, 1174, 1173, 1286, 1019, 1182, 1210, 981, 1037, 1079, 1233, 1120, 967, 1033, 1332, 1287, 1113, 1161, 1200, 1408, 1034, 1002, 1234, 1248, 587, 1223, 1012, 1134, 1186, 1305, 978, 854, 873, 748, 1282, 1157, 1120, 1371, 1369, 1373, 1379, 1210, 743, 1008, 961, 1368, 1396, 1167, 1210, 1362, 1219, 1276, 1345, 1431, 1361, 1164, 1121, 894, 993, 1402, 1461, 1401, 1443, 1277, 1303, 1091, 1148, 1067, 990, 1253, 1339, 1386, 1317, 1261, 1193, 1074, 1244, 1102, 1353, 1323, 1170, 1103, 1096, 1285, 1213, 1180, 1144, 1149, 1323, 1490, 1133, 1049, 1208, 1153, 1109, 1161, 1237, 1290, 978, 640, 734, 856, 1122, 1112, 1372, 1393, 1107, 1126, 1170, 1148, 1308, 956, 1146, 957, 1299, 1410, 1174, 1242, 1468, 1296, 1230, 1166, 917, 913, 1134, 1494, 1240, 1121, 1098, 1399, 1317, 1185, 1104, 1108, 1215, 1158, 1251, 1189, 1208, 1134, 1303, 1174, 1280, 1090, 992, 1132, 956, 793, 997, 1138, 1242, 1276, 778, 877, 1104, 1277, 966, 1092, 1295, 1109, 1435, 1493, 1249, 1377, 1287, 1280, 1254, 1230, 1259, 1272, 1454, 1519, 1182, 923, 1382, 1189, 1232, 1343, 1238, 1300, 1485, 1439, 1203, 893, 1217, 1091, 1236, 1346, 949, 787, 1223, 1334, 1094, 1271, 1350, 1275, 1032, 1114, 887, 953, 918, 1087, 1145, 1018, 839, 1202, 1076, 1133, 1007, 1066, 1133, 870, 1220, 1121, 1172, 873, 827, 1039, 1241, 1053, 1067, 1027, 846, 831, 1072, 1013, 1004, 966, 1102, 1202, 1e3, 922, 887, 1077, 1017, 987, 1027, 1225, 1151, 1041, 944, 1048, 746, 1079, 1139, 917, 1138, 1142, 873, 870, 1193, 1e3, 894, 1176, 834, 822, 1241, 1072, 1088, 1480, 1331, 1024, 1352, 1424, 1028, 821, 958, 808, 1121, 1356, 1525, 1292, 1144, 1124, 940, 1158, 1152, 953, 1186, 763, 1226, 1075, 1032, 997, 992, 1002, 1280, 1125, 1118, 1233, 1337, 1189, 1184, 980, 1196, 1067, 712, 1145, 999, 1272, 1045, 1049, 1009, 1182, 788, 1499, 1193, 1310, 1232, 1120, 1244, 1036, 940, 917, 1074, 896, 918, 1099, 1313, 1303, 1090, 1079, 1190, 919, 1198, 1310, 1029, 1239, 926, 1013, 787, 1293, 1045, 1144, 1209, 1067, 1142, 988, 1486, 1449, 1357, 1230, 1201, 757, 1221, 1337, 1115, 952, 1352, 818, 1063, 1234, 1150, 1193, 1105, 1371, 1164, 1216, 1053, 1252, 1272, 1233, 1255, 1326, 1269, 1182, 1148, 1158, 1175, 1267, 1292, 999, 1310, 1062, 1224, 1194, 1251, 947, 1091, 1237, 1379, 1278, 1324, 1219, 1423, 1253, 1234, 1275, 1274, 1115, 1080, 1050, 1395, 1166, 988, 960, 1167, 1239, 1049, 908, 992, 1082, 952, 1274, 1153, 1052, 1182, 1245, 1241, 1229, 1078, 1192, 1195, 1095, 1155, 1159, 819, 976, 1121, 635, 991, 853, 1207, 1198, 1349, 1150, 1173, 1359, 1191, 1085, 1166, 1030, 1193, 1353, 1036, 834, 1016, 1511, 1237, 1273, 1271, 1204, 1256, 1437, 1266, 1299, 1264, 1378, 1112, 1055, 1230, 1332, 1177, 999, 1149, 1134, 1408, 1111, 1144],
                            "successes": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                        };
                        compressedData["data"] = byteArray;
                        assert(typeof Module["LZ4"] === "object", "LZ4 not present - was your app build with -sLZ4?");
                        Module["LZ4"].loadPackage({
                            "metadata": metadata,
                            "compressedData": compressedData
                        }, true);
                        Module["removeRunDependency"]("datafile_dist/pyodide.asm.data")
                    }
                    Module["addRunDependency"]("datafile_dist/pyodide.asm.data");
                    if (!Module.preloadResults)
                        Module.preloadResults = {};
                    Module.preloadResults[PACKAGE_NAME] = {
                        fromCache: false
                    };
                    if (fetched) {
                        processPackageData(fetched);
                        fetched = null
                    } else {
                        fetchedCallback = processPackageData
                    }
                }
                if (Module["calledRun"]) {
                    runWithFS()
                } else {
                    if (!Module["preRun"])
                        Module["preRun"] = [];
                    Module["preRun"].push(runWithFS)
                }
            };
            loadPackage({
                "files": [{
                    "filename": "/lib/python3.10/LICENSE.txt",
                    "start": 0,
                    "end": 13931
                }, {
                    "filename": "/lib/python3.10/__future__.py",
                    "start": 13931,
                    "end": 19086
                }, {
                    "filename": "/lib/python3.10/__phello__.foo.py",
                    "start": 19086,
                    "end": 19150
                }, {
                    "filename": "/lib/python3.10/_aix_support.py",
                    "start": 19150,
                    "end": 22420
                }, {
                    "filename": "/lib/python3.10/_bootsubprocess.py",
                    "start": 22420,
                    "end": 25095
                }, {
                    "filename": "/lib/python3.10/_collections_abc.py",
                    "start": 25095,
                    "end": 57044
                }, {
                    "filename": "/lib/python3.10/_compat_pickle.py",
                    "start": 57044,
                    "end": 65793
                }, {
                    "filename": "/lib/python3.10/_compression.py",
                    "start": 65793,
                    "end": 71474
                }, {
                    "filename": "/lib/python3.10/_markupbase.py",
                    "start": 71474,
                    "end": 86127
                }, {
                    "filename": "/lib/python3.10/_py_abc.py",
                    "start": 86127,
                    "end": 92316
                }, {
                    "filename": "/lib/python3.10/_pydecimal.py",
                    "start": 92316,
                    "end": 320992
                }, {
                    "filename": "/lib/python3.10/_pyio.py",
                    "start": 320992,
                    "end": 415555
                }, {
                    "filename": "/lib/python3.10/_sitebuiltins.py",
                    "start": 415555,
                    "end": 418683
                }, {
                    "filename": "/lib/python3.10/_strptime.py",
                    "start": 418683,
                    "end": 443960
                }, {
                    "filename": "/lib/python3.10/_sysconfigdata__emscripten_wasm32-emscripten.py",
                    "start": 443960,
                    "end": 470809
                }, {
                    "filename": "/lib/python3.10/_threading_local.py",
                    "start": 470809,
                    "end": 478029
                }, {
                    "filename": "/lib/python3.10/_weakrefset.py",
                    "start": 478029,
                    "end": 483952
                }, {
                    "filename": "/lib/python3.10/abc.py",
                    "start": 483952,
                    "end": 490474
                }, {
                    "filename": "/lib/python3.10/aifc.py",
                    "start": 490474,
                    "end": 523079
                }, {
                    "filename": "/lib/python3.10/antigravity.py",
                    "start": 523079,
                    "end": 523579
                }, {
                    "filename": "/lib/python3.10/argparse.py",
                    "start": 523579,
                    "end": 621563
                }, {
                    "filename": "/lib/python3.10/ast.py",
                    "start": 621563,
                    "end": 681135
                }, {
                    "filename": "/lib/python3.10/asynchat.py",
                    "start": 681135,
                    "end": 692620
                }, {
                    "filename": "/lib/python3.10/asyncio/__init__.py",
                    "start": 692620,
                    "end": 693728
                }, {
                    "filename": "/lib/python3.10/asyncio/__main__.py",
                    "start": 693728,
                    "end": 697071
                }, {
                    "filename": "/lib/python3.10/asyncio/base_events.py",
                    "start": 697071,
                    "end": 770522
                }, {
                    "filename": "/lib/python3.10/asyncio/base_futures.py",
                    "start": 770522,
                    "end": 773096
                }, {
                    "filename": "/lib/python3.10/asyncio/base_subprocess.py",
                    "start": 773096,
                    "end": 781939
                }, {
                    "filename": "/lib/python3.10/asyncio/base_tasks.py",
                    "start": 781939,
                    "end": 784406
                }, {
                    "filename": "/lib/python3.10/asyncio/constants.py",
                    "start": 784406,
                    "end": 785294
                }, {
                    "filename": "/lib/python3.10/asyncio/coroutines.py",
                    "start": 785294,
                    "end": 794091
                }, {
                    "filename": "/lib/python3.10/asyncio/events.py",
                    "start": 794091,
                    "end": 821315
                }, {
                    "filename": "/lib/python3.10/asyncio/exceptions.py",
                    "start": 821315,
                    "end": 822948
                }, {
                    "filename": "/lib/python3.10/asyncio/format_helpers.py",
                    "start": 822948,
                    "end": 825352
                }, {
                    "filename": "/lib/python3.10/asyncio/futures.py",
                    "start": 825352,
                    "end": 839366
                }, {
                    "filename": "/lib/python3.10/asyncio/locks.py",
                    "start": 839366,
                    "end": 852953
                }, {
                    "filename": "/lib/python3.10/asyncio/log.py",
                    "start": 852953,
                    "end": 853077
                }, {
                    "filename": "/lib/python3.10/asyncio/mixins.py",
                    "start": 853077,
                    "end": 853880
                }, {
                    "filename": "/lib/python3.10/asyncio/proactor_events.py",
                    "start": 853880,
                    "end": 886136
                }, {
                    "filename": "/lib/python3.10/asyncio/protocols.py",
                    "start": 886136,
                    "end": 893272
                }, {
                    "filename": "/lib/python3.10/asyncio/queues.py",
                    "start": 893272,
                    "end": 901282
                }, {
                    "filename": "/lib/python3.10/asyncio/runners.py",
                    "start": 901282,
                    "end": 903386
                }, {
                    "filename": "/lib/python3.10/asyncio/selector_events.py",
                    "start": 903386,
                    "end": 942888
                }, {
                    "filename": "/lib/python3.10/asyncio/sslproto.py",
                    "start": 942888,
                    "end": 970072
                }, {
                    "filename": "/lib/python3.10/asyncio/staggered.py",
                    "start": 970072,
                    "end": 976064
                }, {
                    "filename": "/lib/python3.10/asyncio/streams.py",
                    "start": 976064,
                    "end": 1001836
                }, {
                    "filename": "/lib/python3.10/asyncio/subprocess.py",
                    "start": 1001836,
                    "end": 1009241
                }, {
                    "filename": "/lib/python3.10/asyncio/tasks.py",
                    "start": 1009241,
                    "end": 1041081
                }, {
                    "filename": "/lib/python3.10/asyncio/threads.py",
                    "start": 1041081,
                    "end": 1041871
                }, {
                    "filename": "/lib/python3.10/asyncio/transports.py",
                    "start": 1041871,
                    "end": 1052357
                }, {
                    "filename": "/lib/python3.10/asyncio/trsock.py",
                    "start": 1052357,
                    "end": 1058233
                }, {
                    "filename": "/lib/python3.10/asyncio/unix_events.py",
                    "start": 1058233,
                    "end": 1109833
                }, {
                    "filename": "/lib/python3.10/asyncio/windows_events.py",
                    "start": 1109833,
                    "end": 1142837
                }, {
                    "filename": "/lib/python3.10/asyncio/windows_utils.py",
                    "start": 1142837,
                    "end": 1147897
                }, {
                    "filename": "/lib/python3.10/asyncore.py",
                    "start": 1147897,
                    "end": 1168130
                }, {
                    "filename": "/lib/python3.10/base64.py",
                    "start": 1168130,
                    "end": 1188977
                }, {
                    "filename": "/lib/python3.10/bdb.py",
                    "start": 1188977,
                    "end": 1221204
                }, {
                    "filename": "/lib/python3.10/binhex.py",
                    "start": 1221204,
                    "end": 1235988
                }, {
                    "filename": "/lib/python3.10/bisect.py",
                    "start": 1235988,
                    "end": 1239123
                }, {
                    "filename": "/lib/python3.10/bz2.py",
                    "start": 1239123,
                    "end": 1250970
                }, {
                    "filename": "/lib/python3.10/cProfile.py",
                    "start": 1250970,
                    "end": 1257305
                }, {
                    "filename": "/lib/python3.10/calendar.py",
                    "start": 1257305,
                    "end": 1281780
                }, {
                    "filename": "/lib/python3.10/cgi.py",
                    "start": 1281780,
                    "end": 1315879
                }, {
                    "filename": "/lib/python3.10/cgitb.py",
                    "start": 1315879,
                    "end": 1327975
                }, {
                    "filename": "/lib/python3.10/chunk.py",
                    "start": 1327975,
                    "end": 1333410
                }, {
                    "filename": "/lib/python3.10/cmd.py",
                    "start": 1333410,
                    "end": 1348270
                }, {
                    "filename": "/lib/python3.10/code.py",
                    "start": 1348270,
                    "end": 1358892
                }, {
                    "filename": "/lib/python3.10/codecs.py",
                    "start": 1358892,
                    "end": 1395564
                }, {
                    "filename": "/lib/python3.10/codeop.py",
                    "start": 1395564,
                    "end": 1402132
                }, {
                    "filename": "/lib/python3.10/collections/__init__.py",
                    "start": 1402132,
                    "end": 1453360
                }, {
                    "filename": "/lib/python3.10/collections/abc.py",
                    "start": 1453360,
                    "end": 1453479
                }, {
                    "filename": "/lib/python3.10/colorsys.py",
                    "start": 1453479,
                    "end": 1457496
                }, {
                    "filename": "/lib/python3.10/compileall.py",
                    "start": 1457496,
                    "end": 1477739
                }, {
                    "filename": "/lib/python3.10/concurrent/__init__.py",
                    "start": 1477739,
                    "end": 1477777
                }, {
                    "filename": "/lib/python3.10/concurrent/futures/__init__.py",
                    "start": 1477777,
                    "end": 1479331
                }, {
                    "filename": "/lib/python3.10/concurrent/futures/_base.py",
                    "start": 1479331,
                    "end": 1501908
                }, {
                    "filename": "/lib/python3.10/concurrent/futures/process.py",
                    "start": 1501908,
                    "end": 1532115
                }, {
                    "filename": "/lib/python3.10/concurrent/futures/thread.py",
                    "start": 1532115,
                    "end": 1540886
                }, {
                    "filename": "/lib/python3.10/configparser.py",
                    "start": 1540886,
                    "end": 1595516
                }, {
                    "filename": "/lib/python3.10/contextlib.py",
                    "start": 1595516,
                    "end": 1621398
                }, {
                    "filename": "/lib/python3.10/contextvars.py",
                    "start": 1621398,
                    "end": 1621527
                }, {
                    "filename": "/lib/python3.10/copy.py",
                    "start": 1621527,
                    "end": 1630205
                }, {
                    "filename": "/lib/python3.10/copyreg.py",
                    "start": 1630205,
                    "end": 1637631
                }, {
                    "filename": "/lib/python3.10/crypt.py",
                    "start": 1637631,
                    "end": 1641450
                }, {
                    "filename": "/lib/python3.10/csv.py",
                    "start": 1641450,
                    "end": 1657480
                }, {
                    "filename": "/lib/python3.10/ctypes/__init__.py",
                    "start": 1657480,
                    "end": 1675468
                }, {
                    "filename": "/lib/python3.10/ctypes/_aix.py",
                    "start": 1675468,
                    "end": 1688043
                }, {
                    "filename": "/lib/python3.10/ctypes/_endian.py",
                    "start": 1688043,
                    "end": 1690043
                }, {
                    "filename": "/lib/python3.10/ctypes/macholib/README.ctypes",
                    "start": 1690043,
                    "end": 1690339
                }, {
                    "filename": "/lib/python3.10/ctypes/macholib/__init__.py",
                    "start": 1690339,
                    "end": 1690493
                }, {
                    "filename": "/lib/python3.10/ctypes/macholib/dyld.py",
                    "start": 1690493,
                    "end": 1695776
                }, {
                    "filename": "/lib/python3.10/ctypes/macholib/dylib.py",
                    "start": 1695776,
                    "end": 1697604
                }, {
                    "filename": "/lib/python3.10/ctypes/macholib/fetch_macholib",
                    "start": 1697604,
                    "end": 1697688
                }, {
                    "filename": "/lib/python3.10/ctypes/macholib/fetch_macholib.bat",
                    "start": 1697688,
                    "end": 1697763
                }, {
                    "filename": "/lib/python3.10/ctypes/macholib/framework.py",
                    "start": 1697763,
                    "end": 1699964
                }, {
                    "filename": "/lib/python3.10/ctypes/util.py",
                    "start": 1699964,
                    "end": 1713843
                }, {
                    "filename": "/lib/python3.10/ctypes/wintypes.py",
                    "start": 1713843,
                    "end": 1719471
                }, {
                    "filename": "/lib/python3.10/dataclasses.py",
                    "start": 1719471,
                    "end": 1775858
                }, {
                    "filename": "/lib/python3.10/datetime.py",
                    "start": 1775858,
                    "end": 1863917
                }, {
                    "filename": "/lib/python3.10/decimal.py",
                    "start": 1863917,
                    "end": 1864237
                }, {
                    "filename": "/lib/python3.10/difflib.py",
                    "start": 1864237,
                    "end": 1947544
                }, {
                    "filename": "/lib/python3.10/dis.py",
                    "start": 1947544,
                    "end": 1967564
                }, {
                    "filename": "/lib/python3.10/doctest.py",
                    "start": 1967564,
                    "end": 2072355
                }, {
                    "filename": "/lib/python3.10/email/__init__.py",
                    "start": 2072355,
                    "end": 2074121
                }, {
                    "filename": "/lib/python3.10/email/_encoded_words.py",
                    "start": 2074121,
                    "end": 2082645
                }, {
                    "filename": "/lib/python3.10/email/_header_value_parser.py",
                    "start": 2082645,
                    "end": 2189604
                }, {
                    "filename": "/lib/python3.10/email/_parseaddr.py",
                    "start": 2189604,
                    "end": 2207331
                }, {
                    "filename": "/lib/python3.10/email/_policybase.py",
                    "start": 2207331,
                    "end": 2222404
                }, {
                    "filename": "/lib/python3.10/email/architecture.rst",
                    "start": 2222404,
                    "end": 2231965
                }, {
                    "filename": "/lib/python3.10/email/base64mime.py",
                    "start": 2231965,
                    "end": 2235524
                }, {
                    "filename": "/lib/python3.10/email/charset.py",
                    "start": 2235524,
                    "end": 2252652
                }, {
                    "filename": "/lib/python3.10/email/contentmanager.py",
                    "start": 2252652,
                    "end": 2263207
                }, {
                    "filename": "/lib/python3.10/email/encoders.py",
                    "start": 2263207,
                    "end": 2264993
                }, {
                    "filename": "/lib/python3.10/email/errors.py",
                    "start": 2264993,
                    "end": 2268728
                }, {
                    "filename": "/lib/python3.10/email/feedparser.py",
                    "start": 2268728,
                    "end": 2291508
                }, {
                    "filename": "/lib/python3.10/email/generator.py",
                    "start": 2291508,
                    "end": 2311704
                }, {
                    "filename": "/lib/python3.10/email/header.py",
                    "start": 2311704,
                    "end": 2335806
                }, {
                    "filename": "/lib/python3.10/email/headerregistry.py",
                    "start": 2335806,
                    "end": 2356619
                }, {
                    "filename": "/lib/python3.10/email/iterators.py",
                    "start": 2356619,
                    "end": 2358754
                }, {
                    "filename": "/lib/python3.10/email/message.py",
                    "start": 2358754,
                    "end": 2405814
                }, {
                    "filename": "/lib/python3.10/email/mime/__init__.py",
                    "start": 2405814,
                    "end": 2405814
                }, {
                    "filename": "/lib/python3.10/email/mime/application.py",
                    "start": 2405814,
                    "end": 2407135
                }, {
                    "filename": "/lib/python3.10/email/mime/audio.py",
                    "start": 2407135,
                    "end": 2409874
                }, {
                    "filename": "/lib/python3.10/email/mime/base.py",
                    "start": 2409874,
                    "end": 2410790
                }, {
                    "filename": "/lib/python3.10/email/mime/image.py",
                    "start": 2410790,
                    "end": 2412619
                }, {
                    "filename": "/lib/python3.10/email/mime/message.py",
                    "start": 2412619,
                    "end": 2413936
                }, {
                    "filename": "/lib/python3.10/email/mime/multipart.py",
                    "start": 2413936,
                    "end": 2415557
                }, {
                    "filename": "/lib/python3.10/email/mime/nonmultipart.py",
                    "start": 2415557,
                    "end": 2416248
                }, {
                    "filename": "/lib/python3.10/email/mime/text.py",
                    "start": 2416248,
                    "end": 2417685
                }, {
                    "filename": "/lib/python3.10/email/parser.py",
                    "start": 2417685,
                    "end": 2422726
                }, {
                    "filename": "/lib/python3.10/email/policy.py",
                    "start": 2422726,
                    "end": 2433109
                }, {
                    "filename": "/lib/python3.10/email/quoprimime.py",
                    "start": 2433109,
                    "end": 2442967
                }, {
                    "filename": "/lib/python3.10/email/utils.py",
                    "start": 2442967,
                    "end": 2456389
                }, {
                    "filename": "/lib/python3.10/encodings/__init__.py",
                    "start": 2456389,
                    "end": 2462009
                }, {
                    "filename": "/lib/python3.10/encodings/aliases.py",
                    "start": 2462009,
                    "end": 2477686
                }, {
                    "filename": "/lib/python3.10/encodings/ascii.py",
                    "start": 2477686,
                    "end": 2478934
                }, {
                    "filename": "/lib/python3.10/encodings/base64_codec.py",
                    "start": 2478934,
                    "end": 2480467
                }, {
                    "filename": "/lib/python3.10/encodings/big5.py",
                    "start": 2480467,
                    "end": 2481486
                }, {
                    "filename": "/lib/python3.10/encodings/big5hkscs.py",
                    "start": 2481486,
                    "end": 2482525
                }, {
                    "filename": "/lib/python3.10/encodings/bz2_codec.py",
                    "start": 2482525,
                    "end": 2484774
                }, {
                    "filename": "/lib/python3.10/encodings/charmap.py",
                    "start": 2484774,
                    "end": 2486858
                }, {
                    "filename": "/lib/python3.10/encodings/cp037.py",
                    "start": 2486858,
                    "end": 2499979
                }, {
                    "filename": "/lib/python3.10/encodings/cp1006.py",
                    "start": 2499979,
                    "end": 2513547
                }, {
                    "filename": "/lib/python3.10/encodings/cp1026.py",
                    "start": 2513547,
                    "end": 2526660
                }, {
                    "filename": "/lib/python3.10/encodings/cp1125.py",
                    "start": 2526660,
                    "end": 2561257
                }, {
                    "filename": "/lib/python3.10/encodings/cp1140.py",
                    "start": 2561257,
                    "end": 2574362
                }, {
                    "filename": "/lib/python3.10/encodings/cp1250.py",
                    "start": 2574362,
                    "end": 2588048
                }, {
                    "filename": "/lib/python3.10/encodings/cp1251.py",
                    "start": 2588048,
                    "end": 2601409
                }, {
                    "filename": "/lib/python3.10/encodings/cp1252.py",
                    "start": 2601409,
                    "end": 2614920
                }, {
                    "filename": "/lib/python3.10/encodings/cp1253.py",
                    "start": 2614920,
                    "end": 2628014
                }, {
                    "filename": "/lib/python3.10/encodings/cp1254.py",
                    "start": 2628014,
                    "end": 2641516
                }, {
                    "filename": "/lib/python3.10/encodings/cp1255.py",
                    "start": 2641516,
                    "end": 2653982
                }, {
                    "filename": "/lib/python3.10/encodings/cp1256.py",
                    "start": 2653982,
                    "end": 2666796
                }, {
                    "filename": "/lib/python3.10/encodings/cp1257.py",
                    "start": 2666796,
                    "end": 2680170
                }, {
                    "filename": "/lib/python3.10/encodings/cp1258.py",
                    "start": 2680170,
                    "end": 2693534
                }, {
                    "filename": "/lib/python3.10/encodings/cp273.py",
                    "start": 2693534,
                    "end": 2707666
                }, {
                    "filename": "/lib/python3.10/encodings/cp424.py",
                    "start": 2707666,
                    "end": 2719721
                }, {
                    "filename": "/lib/python3.10/encodings/cp437.py",
                    "start": 2719721,
                    "end": 2754285
                }, {
                    "filename": "/lib/python3.10/encodings/cp500.py",
                    "start": 2754285,
                    "end": 2767406
                }, {
                    "filename": "/lib/python3.10/encodings/cp720.py",
                    "start": 2767406,
                    "end": 2781092
                }, {
                    "filename": "/lib/python3.10/encodings/cp737.py",
                    "start": 2781092,
                    "end": 2815773
                }, {
                    "filename": "/lib/python3.10/encodings/cp775.py",
                    "start": 2815773,
                    "end": 2850249
                }, {
                    "filename": "/lib/python3.10/encodings/cp850.py",
                    "start": 2850249,
                    "end": 2884354
                }, {
                    "filename": "/lib/python3.10/encodings/cp852.py",
                    "start": 2884354,
                    "end": 2919356
                }, {
                    "filename": "/lib/python3.10/encodings/cp855.py",
                    "start": 2919356,
                    "end": 2953206
                }, {
                    "filename": "/lib/python3.10/encodings/cp856.py",
                    "start": 2953206,
                    "end": 2965629
                }, {
                    "filename": "/lib/python3.10/encodings/cp857.py",
                    "start": 2965629,
                    "end": 2999537
                }, {
                    "filename": "/lib/python3.10/encodings/cp858.py",
                    "start": 2999537,
                    "end": 3033552
                }, {
                    "filename": "/lib/python3.10/encodings/cp860.py",
                    "start": 3033552,
                    "end": 3068233
                }, {
                    "filename": "/lib/python3.10/encodings/cp861.py",
                    "start": 3068233,
                    "end": 3102866
                }, {
                    "filename": "/lib/python3.10/encodings/cp862.py",
                    "start": 3102866,
                    "end": 3136236
                }, {
                    "filename": "/lib/python3.10/encodings/cp863.py",
                    "start": 3136236,
                    "end": 3170488
                }, {
                    "filename": "/lib/python3.10/encodings/cp864.py",
                    "start": 3170488,
                    "end": 3204151
                }, {
                    "filename": "/lib/python3.10/encodings/cp865.py",
                    "start": 3204151,
                    "end": 3238769
                }, {
                    "filename": "/lib/python3.10/encodings/cp866.py",
                    "start": 3238769,
                    "end": 3273165
                }, {
                    "filename": "/lib/python3.10/encodings/cp869.py",
                    "start": 3273165,
                    "end": 3306130
                }, {
                    "filename": "/lib/python3.10/encodings/cp874.py",
                    "start": 3306130,
                    "end": 3318725
                }, {
                    "filename": "/lib/python3.10/encodings/cp875.py",
                    "start": 3318725,
                    "end": 3331579
                }, {
                    "filename": "/lib/python3.10/encodings/cp932.py",
                    "start": 3331579,
                    "end": 3332602
                }, {
                    "filename": "/lib/python3.10/encodings/cp949.py",
                    "start": 3332602,
                    "end": 3333625
                }, {
                    "filename": "/lib/python3.10/encodings/cp950.py",
                    "start": 3333625,
                    "end": 3334648
                }, {
                    "filename": "/lib/python3.10/encodings/euc_jis_2004.py",
                    "start": 3334648,
                    "end": 3335699
                }, {
                    "filename": "/lib/python3.10/encodings/euc_jisx0213.py",
                    "start": 3335699,
                    "end": 3336750
                }, {
                    "filename": "/lib/python3.10/encodings/euc_jp.py",
                    "start": 3336750,
                    "end": 3337777
                }, {
                    "filename": "/lib/python3.10/encodings/euc_kr.py",
                    "start": 3337777,
                    "end": 3338804
                }, {
                    "filename": "/lib/python3.10/encodings/gb18030.py",
                    "start": 3338804,
                    "end": 3339835
                }, {
                    "filename": "/lib/python3.10/encodings/gb2312.py",
                    "start": 3339835,
                    "end": 3340862
                }, {
                    "filename": "/lib/python3.10/encodings/gbk.py",
                    "start": 3340862,
                    "end": 3341877
                }, {
                    "filename": "/lib/python3.10/encodings/hex_codec.py",
                    "start": 3341877,
                    "end": 3343385
                }, {
                    "filename": "/lib/python3.10/encodings/hp_roman8.py",
                    "start": 3343385,
                    "end": 3356860
                }, {
                    "filename": "/lib/python3.10/encodings/hz.py",
                    "start": 3356860,
                    "end": 3357871
                }, {
                    "filename": "/lib/python3.10/encodings/idna.py",
                    "start": 3357871,
                    "end": 3367041
                }, {
                    "filename": "/lib/python3.10/encodings/iso2022_jp.py",
                    "start": 3367041,
                    "end": 3368094
                }, {
                    "filename": "/lib/python3.10/encodings/iso2022_jp_1.py",
                    "start": 3368094,
                    "end": 3369155
                }, {
                    "filename": "/lib/python3.10/encodings/iso2022_jp_2.py",
                    "start": 3369155,
                    "end": 3370216
                }, {
                    "filename": "/lib/python3.10/encodings/iso2022_jp_2004.py",
                    "start": 3370216,
                    "end": 3371289
                }, {
                    "filename": "/lib/python3.10/encodings/iso2022_jp_3.py",
                    "start": 3371289,
                    "end": 3372350
                }, {
                    "filename": "/lib/python3.10/encodings/iso2022_jp_ext.py",
                    "start": 3372350,
                    "end": 3373419
                }, {
                    "filename": "/lib/python3.10/encodings/iso2022_kr.py",
                    "start": 3373419,
                    "end": 3374472
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_1.py",
                    "start": 3374472,
                    "end": 3387648
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_10.py",
                    "start": 3387648,
                    "end": 3401237
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_11.py",
                    "start": 3401237,
                    "end": 3413572
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_13.py",
                    "start": 3413572,
                    "end": 3426843
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_14.py",
                    "start": 3426843,
                    "end": 3440495
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_15.py",
                    "start": 3440495,
                    "end": 3453707
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_16.py",
                    "start": 3453707,
                    "end": 3467264
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_2.py",
                    "start": 3467264,
                    "end": 3480668
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_3.py",
                    "start": 3480668,
                    "end": 3493757
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_4.py",
                    "start": 3493757,
                    "end": 3507133
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_5.py",
                    "start": 3507133,
                    "end": 3520148
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_6.py",
                    "start": 3520148,
                    "end": 3530981
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_7.py",
                    "start": 3530981,
                    "end": 3543825
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_8.py",
                    "start": 3543825,
                    "end": 3554861
                }, {
                    "filename": "/lib/python3.10/encodings/iso8859_9.py",
                    "start": 3554861,
                    "end": 3568017
                }, {
                    "filename": "/lib/python3.10/encodings/johab.py",
                    "start": 3568017,
                    "end": 3569040
                }, {
                    "filename": "/lib/python3.10/encodings/koi8_r.py",
                    "start": 3569040,
                    "end": 3582819
                }, {
                    "filename": "/lib/python3.10/encodings/koi8_t.py",
                    "start": 3582819,
                    "end": 3596012
                }, {
                    "filename": "/lib/python3.10/encodings/koi8_u.py",
                    "start": 3596012,
                    "end": 3609774
                }, {
                    "filename": "/lib/python3.10/encodings/kz1048.py",
                    "start": 3609774,
                    "end": 3623497
                }, {
                    "filename": "/lib/python3.10/encodings/latin_1.py",
                    "start": 3623497,
                    "end": 3624761
                }, {
                    "filename": "/lib/python3.10/encodings/mac_arabic.py",
                    "start": 3624761,
                    "end": 3661228
                }, {
                    "filename": "/lib/python3.10/encodings/mac_croatian.py",
                    "start": 3661228,
                    "end": 3674861
                }, {
                    "filename": "/lib/python3.10/encodings/mac_cyrillic.py",
                    "start": 3674861,
                    "end": 3688315
                }, {
                    "filename": "/lib/python3.10/encodings/mac_farsi.py",
                    "start": 3688315,
                    "end": 3703485
                }, {
                    "filename": "/lib/python3.10/encodings/mac_greek.py",
                    "start": 3703485,
                    "end": 3717206
                }, {
                    "filename": "/lib/python3.10/encodings/mac_iceland.py",
                    "start": 3717206,
                    "end": 3730704
                }, {
                    "filename": "/lib/python3.10/encodings/mac_latin2.py",
                    "start": 3730704,
                    "end": 3744822
                }, {
                    "filename": "/lib/python3.10/encodings/mac_roman.py",
                    "start": 3744822,
                    "end": 3758302
                }, {
                    "filename": "/lib/python3.10/encodings/mac_romanian.py",
                    "start": 3758302,
                    "end": 3771963
                }, {
                    "filename": "/lib/python3.10/encodings/mac_turkish.py",
                    "start": 3771963,
                    "end": 3785476
                }, {
                    "filename": "/lib/python3.10/encodings/mbcs.py",
                    "start": 3785476,
                    "end": 3786687
                }, {
                    "filename": "/lib/python3.10/encodings/oem.py",
                    "start": 3786687,
                    "end": 3787706
                }, {
                    "filename": "/lib/python3.10/encodings/palmos.py",
                    "start": 3787706,
                    "end": 3801225
                }, {
                    "filename": "/lib/python3.10/encodings/ptcp154.py",
                    "start": 3801225,
                    "end": 3815240
                }, {
                    "filename": "/lib/python3.10/encodings/punycode.py",
                    "start": 3815240,
                    "end": 3822123
                }, {
                    "filename": "/lib/python3.10/encodings/quopri_codec.py",
                    "start": 3822123,
                    "end": 3823648
                }, {
                    "filename": "/lib/python3.10/encodings/raw_unicode_escape.py",
                    "start": 3823648,
                    "end": 3824980
                }, {
                    "filename": "/lib/python3.10/encodings/rot_13.py",
                    "start": 3824980,
                    "end": 3827428
                }, {
                    "filename": "/lib/python3.10/encodings/shift_jis.py",
                    "start": 3827428,
                    "end": 3828467
                }, {
                    "filename": "/lib/python3.10/encodings/shift_jis_2004.py",
                    "start": 3828467,
                    "end": 3829526
                }, {
                    "filename": "/lib/python3.10/encodings/shift_jisx0213.py",
                    "start": 3829526,
                    "end": 3830585
                }, {
                    "filename": "/lib/python3.10/encodings/tis_620.py",
                    "start": 3830585,
                    "end": 3842885
                }, {
                    "filename": "/lib/python3.10/encodings/undefined.py",
                    "start": 3842885,
                    "end": 3844184
                }, {
                    "filename": "/lib/python3.10/encodings/unicode_escape.py",
                    "start": 3844184,
                    "end": 3845488
                }, {
                    "filename": "/lib/python3.10/encodings/utf_16.py",
                    "start": 3845488,
                    "end": 3850724
                }, {
                    "filename": "/lib/python3.10/encodings/utf_16_be.py",
                    "start": 3850724,
                    "end": 3851761
                }, {
                    "filename": "/lib/python3.10/encodings/utf_16_le.py",
                    "start": 3851761,
                    "end": 3852798
                }, {
                    "filename": "/lib/python3.10/encodings/utf_32.py",
                    "start": 3852798,
                    "end": 3857927
                }, {
                    "filename": "/lib/python3.10/encodings/utf_32_be.py",
                    "start": 3857927,
                    "end": 3858857
                }, {
                    "filename": "/lib/python3.10/encodings/utf_32_le.py",
                    "start": 3858857,
                    "end": 3859787
                }, {
                    "filename": "/lib/python3.10/encodings/utf_7.py",
                    "start": 3859787,
                    "end": 3860733
                }, {
                    "filename": "/lib/python3.10/encodings/utf_8.py",
                    "start": 3860733,
                    "end": 3861738
                }, {
                    "filename": "/lib/python3.10/encodings/utf_8_sig.py",
                    "start": 3861738,
                    "end": 3865871
                }, {
                    "filename": "/lib/python3.10/encodings/uu_codec.py",
                    "start": 3865871,
                    "end": 3868722
                }, {
                    "filename": "/lib/python3.10/encodings/zlib_codec.py",
                    "start": 3868722,
                    "end": 3870926
                }, {
                    "filename": "/lib/python3.10/enum.py",
                    "start": 3870926,
                    "end": 3910757
                }, {
                    "filename": "/lib/python3.10/filecmp.py",
                    "start": 3910757,
                    "end": 3920935
                }, {
                    "filename": "/lib/python3.10/fileinput.py",
                    "start": 3920935,
                    "end": 3937175
                }, {
                    "filename": "/lib/python3.10/fnmatch.py",
                    "start": 3937175,
                    "end": 3943179
                }, {
                    "filename": "/lib/python3.10/fractions.py",
                    "start": 3943179,
                    "end": 3971421
                }, {
                    "filename": "/lib/python3.10/ftplib.py",
                    "start": 3971421,
                    "end": 4006917
                }, {
                    "filename": "/lib/python3.10/functools.py",
                    "start": 4006917,
                    "end": 4044993
                }, {
                    "filename": "/lib/python3.10/genericpath.py",
                    "start": 4044993,
                    "end": 4049968
                }, {
                    "filename": "/lib/python3.10/getopt.py",
                    "start": 4049968,
                    "end": 4057457
                }, {
                    "filename": "/lib/python3.10/getpass.py",
                    "start": 4057457,
                    "end": 4063447
                }, {
                    "filename": "/lib/python3.10/gettext.py",
                    "start": 4063447,
                    "end": 4090713
                }, {
                    "filename": "/lib/python3.10/glob.py",
                    "start": 4090713,
                    "end": 4098601
                }, {
                    "filename": "/lib/python3.10/graphlib.py",
                    "start": 4098601,
                    "end": 4108174
                }, {
                    "filename": "/lib/python3.10/gzip.py",
                    "start": 4108174,
                    "end": 4130023
                }, {
                    "filename": "/lib/python3.10/hashlib.py",
                    "start": 4130023,
                    "end": 4140252
                }, {
                    "filename": "/lib/python3.10/heapq.py",
                    "start": 4140252,
                    "end": 4163129
                }, {
                    "filename": "/lib/python3.10/hmac.py",
                    "start": 4163129,
                    "end": 4170846
                }, {
                    "filename": "/lib/python3.10/html/__init__.py",
                    "start": 4170846,
                    "end": 4175602
                }, {
                    "filename": "/lib/python3.10/html/entities.py",
                    "start": 4175602,
                    "end": 4250917
                }, {
                    "filename": "/lib/python3.10/html/parser.py",
                    "start": 4250917,
                    "end": 4268309
                }, {
                    "filename": "/lib/python3.10/http/__init__.py",
                    "start": 4268309,
                    "end": 4275042
                }, {
                    "filename": "/lib/python3.10/http/client.py",
                    "start": 4275042,
                    "end": 4331760
                }, {
                    "filename": "/lib/python3.10/http/cookiejar.py",
                    "start": 4331760,
                    "end": 4409167
                }, {
                    "filename": "/lib/python3.10/http/cookies.py",
                    "start": 4409167,
                    "end": 4429649
                }, {
                    "filename": "/lib/python3.10/http/server.py",
                    "start": 4429649,
                    "end": 4476920
                }, {
                    "filename": "/lib/python3.10/imaplib.py",
                    "start": 4476920,
                    "end": 4531786
                }, {
                    "filename": "/lib/python3.10/imghdr.py",
                    "start": 4531786,
                    "end": 4535594
                }, {
                    "filename": "/lib/python3.10/imp.py",
                    "start": 4535594,
                    "end": 4546185
                }, {
                    "filename": "/lib/python3.10/importlib/__init__.py",
                    "start": 4546185,
                    "end": 4552274
                }, {
                    "filename": "/lib/python3.10/importlib/_abc.py",
                    "start": 4552274,
                    "end": 4554126
                }, {
                    "filename": "/lib/python3.10/importlib/_adapters.py",
                    "start": 4554126,
                    "end": 4556034
                }, {
                    "filename": "/lib/python3.10/importlib/_bootstrap.py",
                    "start": 4556034,
                    "end": 4597501
                }, {
                    "filename": "/lib/python3.10/importlib/_bootstrap_external.py",
                    "start": 4597501,
                    "end": 4661973
                }, {
                    "filename": "/lib/python3.10/importlib/_common.py",
                    "start": 4661973,
                    "end": 4665047
                }, {
                    "filename": "/lib/python3.10/importlib/abc.py",
                    "start": 4665047,
                    "end": 4679468
                }, {
                    "filename": "/lib/python3.10/importlib/machinery.py",
                    "start": 4679468,
                    "end": 4680299
                }, {
                    "filename": "/lib/python3.10/importlib/metadata/__init__.py",
                    "start": 4680299,
                    "end": 4709772
                }, {
                    "filename": "/lib/python3.10/importlib/metadata/_adapters.py",
                    "start": 4709772,
                    "end": 4711634
                }, {
                    "filename": "/lib/python3.10/importlib/metadata/_collections.py",
                    "start": 4711634,
                    "end": 4712377
                }, {
                    "filename": "/lib/python3.10/importlib/metadata/_functools.py",
                    "start": 4712377,
                    "end": 4714878
                }, {
                    "filename": "/lib/python3.10/importlib/metadata/_itertools.py",
                    "start": 4714878,
                    "end": 4715485
                }, {
                    "filename": "/lib/python3.10/importlib/metadata/_meta.py",
                    "start": 4715485,
                    "end": 4716615
                }, {
                    "filename": "/lib/python3.10/importlib/metadata/_text.py",
                    "start": 4716615,
                    "end": 4718813
                }, {
                    "filename": "/lib/python3.10/importlib/readers.py",
                    "start": 4718813,
                    "end": 4722400
                }, {
                    "filename": "/lib/python3.10/importlib/resources.py",
                    "start": 4722400,
                    "end": 4728105
                }, {
                    "filename": "/lib/python3.10/importlib/util.py",
                    "start": 4728105,
                    "end": 4739592
                }, {
                    "filename": "/lib/python3.10/inspect.py",
                    "start": 4739592,
                    "end": 4863332
                }, {
                    "filename": "/lib/python3.10/io.py",
                    "start": 4863332,
                    "end": 4867528
                }, {
                    "filename": "/lib/python3.10/ipaddress.py",
                    "start": 4867528,
                    "end": 4942314
                }, {
                    "filename": "/lib/python3.10/json/__init__.py",
                    "start": 4942314,
                    "end": 4956333
                }, {
                    "filename": "/lib/python3.10/json/decoder.py",
                    "start": 4956333,
                    "end": 4968805
                }, {
                    "filename": "/lib/python3.10/json/encoder.py",
                    "start": 4968805,
                    "end": 4984878
                }, {
                    "filename": "/lib/python3.10/json/scanner.py",
                    "start": 4984878,
                    "end": 4987303
                }, {
                    "filename": "/lib/python3.10/json/tool.py",
                    "start": 4987303,
                    "end": 4990642
                }, {
                    "filename": "/lib/python3.10/keyword.py",
                    "start": 4990642,
                    "end": 4991703
                }, {
                    "filename": "/lib/python3.10/linecache.py",
                    "start": 4991703,
                    "end": 4997358
                }, {
                    "filename": "/lib/python3.10/locale.py",
                    "start": 4997358,
                    "end": 5075482
                }, {
                    "filename": "/lib/python3.10/logging/__init__.py",
                    "start": 5075482,
                    "end": 5155687
                }, {
                    "filename": "/lib/python3.10/logging/config.py",
                    "start": 5155687,
                    "end": 5192150
                }, {
                    "filename": "/lib/python3.10/logging/handlers.py",
                    "start": 5192150,
                    "end": 5252779
                }, {
                    "filename": "/lib/python3.10/mailbox.py",
                    "start": 5252779,
                    "end": 5331573
                }, {
                    "filename": "/lib/python3.10/mailcap.py",
                    "start": 5331573,
                    "end": 5339726
                }, {
                    "filename": "/lib/python3.10/mimetypes.py",
                    "start": 5339726,
                    "end": 5362350
                }, {
                    "filename": "/lib/python3.10/modulefinder.py",
                    "start": 5362350,
                    "end": 5386751
                }, {
                    "filename": "/lib/python3.10/multiprocessing/__init__.py",
                    "start": 5386751,
                    "end": 5387667
                }, {
                    "filename": "/lib/python3.10/multiprocessing/connection.py",
                    "start": 5387667,
                    "end": 5419691
                }, {
                    "filename": "/lib/python3.10/multiprocessing/context.py",
                    "start": 5419691,
                    "end": 5430948
                }, {
                    "filename": "/lib/python3.10/multiprocessing/dummy/__init__.py",
                    "start": 5430948,
                    "end": 5434009
                }, {
                    "filename": "/lib/python3.10/multiprocessing/dummy/connection.py",
                    "start": 5434009,
                    "end": 5435607
                }, {
                    "filename": "/lib/python3.10/multiprocessing/forkserver.py",
                    "start": 5435607,
                    "end": 5447749
                }, {
                    "filename": "/lib/python3.10/multiprocessing/heap.py",
                    "start": 5447749,
                    "end": 5459375
                }, {
                    "filename": "/lib/python3.10/multiprocessing/managers.py",
                    "start": 5459375,
                    "end": 5506877
                }, {
                    "filename": "/lib/python3.10/multiprocessing/pool.py",
                    "start": 5506877,
                    "end": 5539432
                }, {
                    "filename": "/lib/python3.10/multiprocessing/popen_fork.py",
                    "start": 5539432,
                    "end": 5541809
                }, {
                    "filename": "/lib/python3.10/multiprocessing/popen_forkserver.py",
                    "start": 5541809,
                    "end": 5544039
                }, {
                    "filename": "/lib/python3.10/multiprocessing/popen_spawn_posix.py",
                    "start": 5544039,
                    "end": 5546068
                }, {
                    "filename": "/lib/python3.10/multiprocessing/popen_spawn_win32.py",
                    "start": 5546068,
                    "end": 5550079
                }, {
                    "filename": "/lib/python3.10/multiprocessing/process.py",
                    "start": 5550079,
                    "end": 5562079
                }, {
                    "filename": "/lib/python3.10/multiprocessing/queues.py",
                    "start": 5562079,
                    "end": 5574072
                }, {
                    "filename": "/lib/python3.10/multiprocessing/reduction.py",
                    "start": 5574072,
                    "end": 5583584
                }, {
                    "filename": "/lib/python3.10/multiprocessing/resource_sharer.py",
                    "start": 5583584,
                    "end": 5588716
                }, {
                    "filename": "/lib/python3.10/multiprocessing/resource_tracker.py",
                    "start": 5588716,
                    "end": 5597691
                }, {
                    "filename": "/lib/python3.10/multiprocessing/shared_memory.py",
                    "start": 5597691,
                    "end": 5616087
                }, {
                    "filename": "/lib/python3.10/multiprocessing/sharedctypes.py",
                    "start": 5616087,
                    "end": 5622393
                }, {
                    "filename": "/lib/python3.10/multiprocessing/spawn.py",
                    "start": 5622393,
                    "end": 5631689
                }, {
                    "filename": "/lib/python3.10/multiprocessing/synchronize.py",
                    "start": 5631689,
                    "end": 5643299
                }, {
                    "filename": "/lib/python3.10/multiprocessing/util.py",
                    "start": 5643299,
                    "end": 5657322
                }, {
                    "filename": "/lib/python3.10/netrc.py",
                    "start": 5657322,
                    "end": 5663069
                }, {
                    "filename": "/lib/python3.10/nntplib.py",
                    "start": 5663069,
                    "end": 5704092
                }, {
                    "filename": "/lib/python3.10/ntpath.py",
                    "start": 5704092,
                    "end": 5732498
                }, {
                    "filename": "/lib/python3.10/nturl2path.py",
                    "start": 5732498,
                    "end": 5735385
                }, {
                    "filename": "/lib/python3.10/numbers.py",
                    "start": 5735385,
                    "end": 5745723
                }, {
                    "filename": "/lib/python3.10/opcode.py",
                    "start": 5745723,
                    "end": 5751625
                }, {
                    "filename": "/lib/python3.10/operator.py",
                    "start": 5751625,
                    "end": 5762376
                }, {
                    "filename": "/lib/python3.10/optparse.py",
                    "start": 5762376,
                    "end": 5822745
                }, {
                    "filename": "/lib/python3.10/os.py",
                    "start": 5822745,
                    "end": 5862259
                }, {
                    "filename": "/lib/python3.10/pathlib.py",
                    "start": 5862259,
                    "end": 5911785
                }, {
                    "filename": "/lib/python3.10/pdb.py",
                    "start": 5911785,
                    "end": 5974886
                }, {
                    "filename": "/lib/python3.10/pickle.py",
                    "start": 5974886,
                    "end": 6039832
                }, {
                    "filename": "/lib/python3.10/pickletools.py",
                    "start": 6039832,
                    "end": 6133318
                }, {
                    "filename": "/lib/python3.10/pipes.py",
                    "start": 6133318,
                    "end": 6142232
                }, {
                    "filename": "/lib/python3.10/pkgutil.py",
                    "start": 6142232,
                    "end": 6166808
                }, {
                    "filename": "/lib/python3.10/platform.py",
                    "start": 6166808,
                    "end": 6208756
                }, {
                    "filename": "/lib/python3.10/plistlib.py",
                    "start": 6208756,
                    "end": 6237004
                }, {
                    "filename": "/lib/python3.10/poplib.py",
                    "start": 6237004,
                    "end": 6252202
                }, {
                    "filename": "/lib/python3.10/posixpath.py",
                    "start": 6252202,
                    "end": 6268424
                }, {
                    "filename": "/lib/python3.10/pprint.py",
                    "start": 6268424,
                    "end": 6292868
                }, {
                    "filename": "/lib/python3.10/profile.py",
                    "start": 6292868,
                    "end": 6315739
                }, {
                    "filename": "/lib/python3.10/pstats.py",
                    "start": 6315739,
                    "end": 6345065
                }, {
                    "filename": "/lib/python3.10/pty.py",
                    "start": 6345065,
                    "end": 6350278
                }, {
                    "filename": "/lib/python3.10/py_compile.py",
                    "start": 6350278,
                    "end": 6358115
                }, {
                    "filename": "/lib/python3.10/pyclbr.py",
                    "start": 6358115,
                    "end": 6369511
                }, {
                    "filename": "/lib/python3.10/pydoc.py",
                    "start": 6369511,
                    "end": 6479045
                }, {
                    "filename": "/lib/python3.10/pydoc_data/__init__.py",
                    "start": 6479045,
                    "end": 6479045
                }, {
                    "filename": "/lib/python3.10/pydoc_data/_pydoc.css",
                    "start": 6479045,
                    "end": 6479141
                }, {
                    "filename": "/lib/python3.10/pydoc_data/topics.py",
                    "start": 6479141,
                    "end": 7222747
                }, {
                    "filename": "/lib/python3.10/queue.py",
                    "start": 7222747,
                    "end": 7234230
                }, {
                    "filename": "/lib/python3.10/quopri.py",
                    "start": 7234230,
                    "end": 7241498
                }, {
                    "filename": "/lib/python3.10/random.py",
                    "start": 7241498,
                    "end": 7274719
                }, {
                    "filename": "/lib/python3.10/re.py",
                    "start": 7274719,
                    "end": 7290579
                }, {
                    "filename": "/lib/python3.10/reprlib.py",
                    "start": 7290579,
                    "end": 7295846
                }, {
                    "filename": "/lib/python3.10/rlcompleter.py",
                    "start": 7295846,
                    "end": 7303663
                }, {
                    "filename": "/lib/python3.10/runpy.py",
                    "start": 7303663,
                    "end": 7315901
                }, {
                    "filename": "/lib/python3.10/sched.py",
                    "start": 7315901,
                    "end": 7322252
                }, {
                    "filename": "/lib/python3.10/secrets.py",
                    "start": 7322252,
                    "end": 7324288
                }, {
                    "filename": "/lib/python3.10/selectors.py",
                    "start": 7324288,
                    "end": 7343824
                }, {
                    "filename": "/lib/python3.10/shelve.py",
                    "start": 7343824,
                    "end": 7352384
                }, {
                    "filename": "/lib/python3.10/shlex.py",
                    "start": 7352384,
                    "end": 7365885
                }, {
                    "filename": "/lib/python3.10/shutil.py",
                    "start": 7365885,
                    "end": 7418133
                }, {
                    "filename": "/lib/python3.10/signal.py",
                    "start": 7418133,
                    "end": 7420571
                }, {
                    "filename": "/lib/python3.10/site-packages/README.txt",
                    "start": 7420571,
                    "end": 7420690
                }, {
                    "filename": "/lib/python3.10/site.py",
                    "start": 7420690,
                    "end": 7443277
                }, {
                    "filename": "/lib/python3.10/smtpd.py",
                    "start": 7443277,
                    "end": 7478400
                }, {
                    "filename": "/lib/python3.10/smtplib.py",
                    "start": 7478400,
                    "end": 7523818
                }, {
                    "filename": "/lib/python3.10/sndhdr.py",
                    "start": 7523818,
                    "end": 7530917
                }, {
                    "filename": "/lib/python3.10/socket.py",
                    "start": 7530917,
                    "end": 7567650
                }, {
                    "filename": "/lib/python3.10/socketserver.py",
                    "start": 7567650,
                    "end": 7594946
                }, {
                    "filename": "/lib/python3.10/sre_compile.py",
                    "start": 7594946,
                    "end": 7621641
                }, {
                    "filename": "/lib/python3.10/sre_constants.py",
                    "start": 7621641,
                    "end": 7628795
                }, {
                    "filename": "/lib/python3.10/sre_parse.py",
                    "start": 7628795,
                    "end": 7669025
                }, {
                    "filename": "/lib/python3.10/stat.py",
                    "start": 7669025,
                    "end": 7674510
                }, {
                    "filename": "/lib/python3.10/statistics.py",
                    "start": 7674510,
                    "end": 7717575
                }, {
                    "filename": "/lib/python3.10/string.py",
                    "start": 7717575,
                    "end": 7728141
                }, {
                    "filename": "/lib/python3.10/stringprep.py",
                    "start": 7728141,
                    "end": 7741058
                }, {
                    "filename": "/lib/python3.10/struct.py",
                    "start": 7741058,
                    "end": 7741315
                }, {
                    "filename": "/lib/python3.10/subprocess.py",
                    "start": 7741315,
                    "end": 7825049
                }, {
                    "filename": "/lib/python3.10/sunau.py",
                    "start": 7825049,
                    "end": 7843207
                }, {
                    "filename": "/lib/python3.10/symtable.py",
                    "start": 7843207,
                    "end": 7853405
                }, {
                    "filename": "/lib/python3.10/sysconfig.py",
                    "start": 7853405,
                    "end": 7881014
                }, {
                    "filename": "/lib/python3.10/tabnanny.py",
                    "start": 7881014,
                    "end": 7892422
                }, {
                    "filename": "/lib/python3.10/tarfile.py",
                    "start": 7892422,
                    "end": 7987596
                }, {
                    "filename": "/lib/python3.10/telnetlib.py",
                    "start": 7987596,
                    "end": 8010850
                }, {
                    "filename": "/lib/python3.10/tempfile.py",
                    "start": 8010850,
                    "end": 8039307
                }, {
                    "filename": "/lib/python3.10/textwrap.py",
                    "start": 8039307,
                    "end": 8059079
                }, {
                    "filename": "/lib/python3.10/this.py",
                    "start": 8059079,
                    "end": 8060082
                }, {
                    "filename": "/lib/python3.10/threading.py",
                    "start": 8060082,
                    "end": 8116982
                }, {
                    "filename": "/lib/python3.10/timeit.py",
                    "start": 8116982,
                    "end": 8130477
                }, {
                    "filename": "/lib/python3.10/token.py",
                    "start": 8130477,
                    "end": 8132863
                }, {
                    "filename": "/lib/python3.10/tokenize.py",
                    "start": 8132863,
                    "end": 8158784
                }, {
                    "filename": "/lib/python3.10/trace.py",
                    "start": 8158784,
                    "end": 8187979
                }, {
                    "filename": "/lib/python3.10/traceback.py",
                    "start": 8187979,
                    "end": 8214197
                }, {
                    "filename": "/lib/python3.10/tracemalloc.py",
                    "start": 8214197,
                    "end": 8232244
                }, {
                    "filename": "/lib/python3.10/tty.py",
                    "start": 8232244,
                    "end": 8233123
                }, {
                    "filename": "/lib/python3.10/types.py",
                    "start": 8233123,
                    "end": 8243240
                }, {
                    "filename": "/lib/python3.10/typing.py",
                    "start": 8243240,
                    "end": 8334517
                }, {
                    "filename": "/lib/python3.10/unittest/__init__.py",
                    "start": 8334517,
                    "end": 8338278
                }, {
                    "filename": "/lib/python3.10/unittest/__main__.py",
                    "start": 8338278,
                    "end": 8338750
                }, {
                    "filename": "/lib/python3.10/unittest/_log.py",
                    "start": 8338750,
                    "end": 8341496
                }, {
                    "filename": "/lib/python3.10/unittest/async_case.py",
                    "start": 8341496,
                    "end": 8347717
                }, {
                    "filename": "/lib/python3.10/unittest/case.py",
                    "start": 8347717,
                    "end": 8405279
                }, {
                    "filename": "/lib/python3.10/unittest/loader.py",
                    "start": 8405279,
                    "end": 8427981
                }, {
                    "filename": "/lib/python3.10/unittest/main.py",
                    "start": 8427981,
                    "end": 8439219
                }, {
                    "filename": "/lib/python3.10/unittest/mock.py",
                    "start": 8439219,
                    "end": 8541305
                }, {
                    "filename": "/lib/python3.10/unittest/result.py",
                    "start": 8541305,
                    "end": 8548774
                }, {
                    "filename": "/lib/python3.10/unittest/runner.py",
                    "start": 8548774,
                    "end": 8556825
                }, {
                    "filename": "/lib/python3.10/unittest/signals.py",
                    "start": 8556825,
                    "end": 8559228
                }, {
                    "filename": "/lib/python3.10/unittest/suite.py",
                    "start": 8559228,
                    "end": 8572740
                }, {
                    "filename": "/lib/python3.10/unittest/util.py",
                    "start": 8572740,
                    "end": 8577955
                }, {
                    "filename": "/lib/python3.10/urllib/__init__.py",
                    "start": 8577955,
                    "end": 8577955
                }, {
                    "filename": "/lib/python3.10/urllib/error.py",
                    "start": 8577955,
                    "end": 8580587
                }, {
                    "filename": "/lib/python3.10/urllib/parse.py",
                    "start": 8580587,
                    "end": 8622865
                }, {
                    "filename": "/lib/python3.10/urllib/request.py",
                    "start": 8622865,
                    "end": 8724255
                }, {
                    "filename": "/lib/python3.10/urllib/response.py",
                    "start": 8724255,
                    "end": 8726616
                }, {
                    "filename": "/lib/python3.10/urllib/robotparser.py",
                    "start": 8726616,
                    "end": 8736040
                }, {
                    "filename": "/lib/python3.10/uu.py",
                    "start": 8736040,
                    "end": 8742999
                }, {
                    "filename": "/lib/python3.10/uuid.py",
                    "start": 8742999,
                    "end": 8770323
                }, {
                    "filename": "/lib/python3.10/warnings.py",
                    "start": 8770323,
                    "end": 8790011
                }, {
                    "filename": "/lib/python3.10/wave.py",
                    "start": 8790011,
                    "end": 8808015
                }, {
                    "filename": "/lib/python3.10/weakref.py",
                    "start": 8808015,
                    "end": 8829575
                }, {
                    "filename": "/lib/python3.10/webbrowser.py",
                    "start": 8829575,
                    "end": 8829996
                }, {
                    "filename": "/lib/python3.10/wsgiref/__init__.py",
                    "start": 8829996,
                    "end": 8830583
                }, {
                    "filename": "/lib/python3.10/wsgiref/handlers.py",
                    "start": 8830583,
                    "end": 8852252
                }, {
                    "filename": "/lib/python3.10/wsgiref/headers.py",
                    "start": 8852252,
                    "end": 8859018
                }, {
                    "filename": "/lib/python3.10/wsgiref/simple_server.py",
                    "start": 8859018,
                    "end": 8864189
                }, {
                    "filename": "/lib/python3.10/wsgiref/util.py",
                    "start": 8864189,
                    "end": 8870040
                }, {
                    "filename": "/lib/python3.10/wsgiref/validate.py",
                    "start": 8870040,
                    "end": 8885139
                }, {
                    "filename": "/lib/python3.10/xdrlib.py",
                    "start": 8885139,
                    "end": 8891052
                }, {
                    "filename": "/lib/python3.10/xml/__init__.py",
                    "start": 8891052,
                    "end": 8891609
                }, {
                    "filename": "/lib/python3.10/xml/dom/NodeFilter.py",
                    "start": 8891609,
                    "end": 8892545
                }, {
                    "filename": "/lib/python3.10/xml/dom/__init__.py",
                    "start": 8892545,
                    "end": 8896564
                }, {
                    "filename": "/lib/python3.10/xml/dom/domreg.py",
                    "start": 8896564,
                    "end": 8900015
                }, {
                    "filename": "/lib/python3.10/xml/dom/expatbuilder.py",
                    "start": 8900015,
                    "end": 8935782
                }, {
                    "filename": "/lib/python3.10/xml/dom/minicompat.py",
                    "start": 8935782,
                    "end": 8939149
                }, {
                    "filename": "/lib/python3.10/xml/dom/minidom.py",
                    "start": 8939149,
                    "end": 9007215
                }, {
                    "filename": "/lib/python3.10/xml/dom/pulldom.py",
                    "start": 9007215,
                    "end": 9019212
                }, {
                    "filename": "/lib/python3.10/xml/dom/xmlbuilder.py",
                    "start": 9019212,
                    "end": 9031599
                }, {
                    "filename": "/lib/python3.10/xml/etree/ElementInclude.py",
                    "start": 9031599,
                    "end": 9038481
                }, {
                    "filename": "/lib/python3.10/xml/etree/ElementPath.py",
                    "start": 9038481,
                    "end": 9052488
                }, {
                    "filename": "/lib/python3.10/xml/etree/ElementTree.py",
                    "start": 9052488,
                    "end": 9126424
                }, {
                    "filename": "/lib/python3.10/xml/etree/__init__.py",
                    "start": 9126424,
                    "end": 9128029
                }, {
                    "filename": "/lib/python3.10/xml/etree/cElementTree.py",
                    "start": 9128029,
                    "end": 9128111
                }, {
                    "filename": "/lib/python3.10/xml/parsers/__init__.py",
                    "start": 9128111,
                    "end": 9128278
                }, {
                    "filename": "/lib/python3.10/xml/parsers/expat.py",
                    "start": 9128278,
                    "end": 9128526
                }, {
                    "filename": "/lib/python3.10/xml/sax/__init__.py",
                    "start": 9128526,
                    "end": 9132168
                }, {
                    "filename": "/lib/python3.10/xml/sax/_exceptions.py",
                    "start": 9132168,
                    "end": 9136953
                }, {
                    "filename": "/lib/python3.10/xml/sax/expatreader.py",
                    "start": 9136953,
                    "end": 9152680
                }, {
                    "filename": "/lib/python3.10/xml/sax/handler.py",
                    "start": 9152680,
                    "end": 9168297
                }, {
                    "filename": "/lib/python3.10/xml/sax/saxutils.py",
                    "start": 9168297,
                    "end": 9180552
                }, {
                    "filename": "/lib/python3.10/xml/sax/xmlreader.py",
                    "start": 9180552,
                    "end": 9193236
                }, {
                    "filename": "/lib/python3.10/xmlrpc/__init__.py",
                    "start": 9193236,
                    "end": 9193274
                }, {
                    "filename": "/lib/python3.10/xmlrpc/client.py",
                    "start": 9193274,
                    "end": 9242665
                }, {
                    "filename": "/lib/python3.10/xmlrpc/server.py",
                    "start": 9242665,
                    "end": 9279337
                }, {
                    "filename": "/lib/python3.10/zipapp.py",
                    "start": 9279337,
                    "end": 9286872
                }, {
                    "filename": "/lib/python3.10/zipfile.py",
                    "start": 9286872,
                    "end": 9375403
                }, {
                    "filename": "/lib/python3.10/zipimport.py",
                    "start": 9375403,
                    "end": 9405544
                }, {
                    "filename": "/lib/python3.10/zoneinfo/__init__.py",
                    "start": 9405544,
                    "end": 9406247
                }, {
                    "filename": "/lib/python3.10/zoneinfo/_common.py",
                    "start": 9406247,
                    "end": 9411532
                }, {
                    "filename": "/lib/python3.10/zoneinfo/_tzpath.py",
                    "start": 9411532,
                    "end": 9416613
                }, {
                    "filename": "/lib/python3.10/zoneinfo/_zoneinfo.py",
                    "start": 9416613,
                    "end": 9440931
                }],
                "remote_package_size": 5014687
            })
        }
        )();
        const API = Module.API;
        const Hiwire = {};
        const Tests = {};
        API.tests = Tests;
        API.version = "0.22.0.dev0";
        Module.hiwire = Hiwire;
        !function(exports) {
            "use strict";
            const IN_NODE = "undefined" != typeof process && process.release && "node" === process.release.name && void 0 === process.browser;
            let nodeFetch, nodePath, nodeFsPromisesMod, resolvePath, loadBinaryFile;
            if (resolvePath = IN_NODE ? function(path, base) {
                return nodePath.resolve(base || ".", path)
            }
            : function(path, base) {
                return void 0 === base && (base = location),
                new URL(path,base).toString()
            }
            ,
            loadBinaryFile = IN_NODE ? async function(path, _file_sub_resource_hash) {
                if (path.startsWith("file://") && (path = path.slice("file://".length)),
                path.includes("://")) {
                    let response = await nodeFetch(path);
                    if (!response.ok)
                        throw new Error(`Failed to load '${path}': request failed.`);
                    return new Uint8Array(await response.arrayBuffer())
                }
                {
                    const data = await nodeFsPromisesMod.readFile(path);
                    return new Uint8Array(data.buffer,data.byteOffset,data.byteLength)
                }
            }
            : async function(path, subResourceHash) {
                const url = new URL(path,location);
                let options = subResourceHash ? {
                    integrity: subResourceHash
                } : {}
                  , response = await fetch(url, options);
                if (!response.ok)
                    throw new Error(`Failed to load '${url}': request failed.`);
                return new Uint8Array(await response.arrayBuffer())
            }
            ,
            globalThis.document)
                ;
            else if (globalThis.importScripts)
                ;
            else if (!IN_NODE)
                throw new Error("Cannot determine runtime environment");
            function createLock() {
                let _lock = Promise.resolve();
                return async function() {
                    const old_lock = _lock;
                    let releaseLock;
                    return _lock = new Promise(resolve=>releaseLock = resolve),
                    await old_lock,
                    releaseLock
                }
            }
            const acquireDynlibLock = createLock();
            async function loadDynlib(lib, shared) {
                const releaseDynlibLock = await acquireDynlibLock()
                  , loadGlobally = shared;
                const libraryFS = {
                    _ldLibraryPaths: ["/usr/lib", API.sitepackages],
                    _resolvePath: path=>{
                        if (Module.PATH.isAbs(path)) {
                            if (null !== Module.FS.findObject(path))
                                return path;
                            path = path.substring(path.lastIndexOf("/") + 1)
                        }
                        for (const dir of libraryFS._ldLibraryPaths) {
                            const fullPath = Module.PATH.join2(dir, path);
                            if (null !== Module.FS.findObject(fullPath))
                                return fullPath
                        }
                        return path
                    }
                    ,
                    findObject: (path,dontResolveLastLink)=>{
                        let obj = Module.FS.findObject(libraryFS._resolvePath(path), dontResolveLastLink);
                        return obj
                    }
                    ,
                    readFile: path=>Module.FS.readFile(libraryFS._resolvePath(path))
                };
                try {
                    await Module.loadDynamicLibrary(lib, {
                        loadAsync: !0,
                        nodelete: !0,
                        global: loadGlobally,
                        fs: libraryFS,
                        allowUndefined: !0
                    })
                } catch (e) {
                    if (e && e.message && e.message.includes("need to see wasm magic number"))
                        return void console.warn(`Failed to load dynlib ${lib}. We probably just tried to load a linux .so file or something.`);
                    throw e
                } finally {
                    releaseDynlibLock()
                }
            }
            function isPyProxy(jsobj) {
                return !!jsobj && void 0 !== jsobj.$$ && "PyProxy" === jsobj.$$.type
            }
            API.loadDynlib = loadDynlib,
            API.isPyProxy = isPyProxy,
            globalThis.FinalizationRegistry ? Module.finalizationRegistry = new FinalizationRegistry(([ptr,cache])=>{
                cache && (cache.leaked = !0,
                pyproxy_decref_cache(cache));
                try {
                    Module._Py_DecRef(ptr)
                } catch (e) {
                    API.fatal_error(e)
                }
            }
            ) : Module.finalizationRegistry = {
                register() {},
                unregister() {}
            };
            let trace_pyproxy_alloc, trace_pyproxy_dealloc, pyproxy_alloc_map = new Map;
            function pyproxy_new(ptrobj, {flags: flags_arg, cache: cache, props: props, $$: $$}={}) {
                const flags = void 0 !== flags_arg ? flags_arg : Module._pyproxy_getflags(ptrobj)
                  , cls = Module.getPyProxyClass(flags);
                let target;
                256 & flags ? (target = function() {}
                ,
                Object.setPrototypeOf(target, cls.prototype),
                delete target.length,
                delete target.name,
                target.prototype = void 0) : target = Object.create(cls.prototype);
                const isAlias = !!$$;
                if (!isAlias) {
                    if (!cache) {
                        cache = {
                            cacheId: Hiwire.new_value(new Map),
                            refcnt: 0
                        }
                    }
                    cache.refcnt++,
                    $$ = {
                        ptr: ptrobj,
                        type: "PyProxy",
                        cache: cache,
                        flags: flags
                    },
                    Module.finalizationRegistry.register($$, [ptrobj, cache], $$),
                    Module._Py_IncRef(ptrobj)
                }
                Object.defineProperty(target, "$$", {
                    value: $$
                }),
                props || (props = {}),
                props = Object.assign({
                    isBound: !1,
                    captureThis: !1,
                    boundArgs: [],
                    roundtrip: !1
                }, props),
                Object.defineProperty(target, "$$props", {
                    value: props
                });
                let proxy = new Proxy(target,PyProxyHandlers);
                return isAlias || trace_pyproxy_alloc(proxy),
                proxy
            }
            function _getPtr(jsobj) {
                let ptr = jsobj.$$.ptr;
                if (0 === ptr)
                    throw new Error(jsobj.$$.destroyed_msg);
                return ptr
            }
            function _adjustArgs(proxyobj, jsthis, jsargs) {
                const {captureThis: captureThis, boundArgs: boundArgs, boundThis: boundThis, isBound: isBound} = proxyobj.$$props;
                return captureThis ? isBound ? [boundThis].concat(boundArgs, jsargs) : [jsthis].concat(jsargs) : isBound ? boundArgs.concat(jsargs) : jsargs
            }
            Module.pyproxy_alloc_map = pyproxy_alloc_map,
            Module.enable_pyproxy_allocation_tracing = function() {
                trace_pyproxy_alloc = function(proxy) {
                    pyproxy_alloc_map.set(proxy, Error().stack)
                }
                ,
                trace_pyproxy_dealloc = function(proxy) {
                    pyproxy_alloc_map.delete(proxy)
                }
            }
            ,
            Module.disable_pyproxy_allocation_tracing = function() {
                trace_pyproxy_alloc = function(proxy) {}
                ,
                trace_pyproxy_dealloc = function(proxy) {}
            }
            ,
            Module.disable_pyproxy_allocation_tracing(),
            Module.pyproxy_new = pyproxy_new;
            let pyproxyClassMap = new Map;
            Module.getPyProxyClass = function(flags) {
                const FLAG_TYPE_PAIRS = [[1, PyProxyLengthMethods], [2, PyProxyGetItemMethods], [4, PyProxySetItemMethods], [8, PyProxyContainsMethods], [16, PyProxyIterableMethods], [32, PyProxyIteratorMethods], [64, PyProxyAwaitableMethods], [128, PyProxyBufferMethods], [256, PyProxyCallableMethods]];
                let result = pyproxyClassMap.get(flags);
                if (result)
                    return result;
                let descriptors = {};
                for (let[feature_flag,methods] of FLAG_TYPE_PAIRS)
                    flags & feature_flag && Object.assign(descriptors, Object.getOwnPropertyDescriptors(methods.prototype));
                descriptors.constructor = Object.getOwnPropertyDescriptor(PyProxyClass.prototype, "constructor"),
                Object.assign(descriptors, Object.getOwnPropertyDescriptors({
                    $$flags: flags
                }));
                let new_proto = Object.create(PyProxyClass.prototype, descriptors);
                function NewPyProxyClass() {}
                return NewPyProxyClass.prototype = new_proto,
                pyproxyClassMap.set(flags, NewPyProxyClass),
                NewPyProxyClass
            }
            ,
            Module.PyProxy_getPtr = _getPtr;
            function pyproxy_decref_cache(cache) {
                if (cache && (cache.refcnt--,
                0 === cache.refcnt)) {
                    let cache_map = Hiwire.pop_value(cache.cacheId);
                    for (let proxy_id of cache_map.values()) {
                        const cache_entry = Hiwire.pop_value(proxy_id);
                        cache.leaked || Module.pyproxy_destroy(cache_entry, "This borrowed attribute proxy was automatically destroyed in the process of destroying the proxy it was borrowed from. Try using the 'copy' method.")
                    }
                }
            }
            Module.pyproxy_destroy = function(proxy, destroyed_msg) {
                if (0 === proxy.$$.ptr)
                    return;
                let ptrobj = _getPtr(proxy);
                Module.finalizationRegistry.unregister(proxy.$$),
                destroyed_msg = destroyed_msg || "Object has already been destroyed";
                let proxy_repr, proxy_type = proxy.type;
                try {
                    proxy_repr = proxy.toString()
                } catch (e) {
                    if (e.pyodide_fatal_error)
                        throw e
                }
                proxy.$$.ptr = 0,
                destroyed_msg += `\nThe object was of type "${proxy_type}" and `,
                destroyed_msg += proxy_repr ? `had repr "${proxy_repr}"` : "an error was raised when trying to generate its repr",
                proxy.$$.destroyed_msg = destroyed_msg,
                pyproxy_decref_cache(proxy.$$.cache);
                try {
                    Module._Py_DecRef(ptrobj),
                    trace_pyproxy_dealloc(proxy)
                } catch (e) {
                    API.fatal_error(e)
                }
            }
            ,
            Module.callPyObjectKwargs = function(ptrobj, jsargs, kwargs) {
                let num_pos_args = jsargs.length
                  , kwargs_names = Object.keys(kwargs)
                  , kwargs_values = Object.values(kwargs)
                  , num_kwargs = kwargs_names.length;
                jsargs.push(...kwargs_values);
                let idresult, idargs = Hiwire.new_value(jsargs), idkwnames = Hiwire.new_value(kwargs_names);
                try {
                    idresult = Module.__pyproxy_apply(ptrobj, idargs, num_pos_args, idkwnames, num_kwargs)
                } catch (e) {
                    API.fatal_error(e)
                } finally {
                    Hiwire.decref(idargs),
                    Hiwire.decref(idkwnames)
                }
                0 === idresult && Module._pythonexc2js();
                let result = Hiwire.pop_value(idresult);
                return result && "coroutine" === result.type && result._ensure_future && result._ensure_future(),
                result
            }
            ,
            Module.callPyObject = function(ptrobj, jsargs) {
                return Module.callPyObjectKwargs(ptrobj, jsargs, {})
            }
            ;
            class PyProxyClass {
                constructor() {
                    throw new TypeError("PyProxy is not a constructor")
                }
                get[Symbol.toStringTag]() {
                    return "PyProxy"
                }
                get type() {
                    let ptrobj = _getPtr(this);
                    return Hiwire.pop_value(Module.__pyproxy_type(ptrobj))
                }
                toString() {
                    let jsref_repr, ptrobj = _getPtr(this);
                    try {
                        jsref_repr = Module.__pyproxy_repr(ptrobj)
                    } catch (e) {
                        API.fatal_error(e)
                    }
                    return 0 === jsref_repr && Module._pythonexc2js(),
                    Hiwire.pop_value(jsref_repr)
                }
                destroy(destroyed_msg) {
                    Module.pyproxy_destroy(this, destroyed_msg)
                }
                copy() {
                    return pyproxy_new(_getPtr(this), {
                        flags: this.$$flags,
                        cache: this.$$.cache,
                        props: this.$$props
                    })
                }
                toJs({depth: depth=-1, pyproxies: pyproxies, create_pyproxies: create_pyproxies=!0, dict_converter: dict_converter, default_converter: default_converter}={}) {
                    let idresult, proxies_id, ptrobj = _getPtr(this), dict_converter_id = 0, default_converter_id = 0;
                    proxies_id = create_pyproxies ? pyproxies ? Hiwire.new_value(pyproxies) : Hiwire.new_value([]) : 0,
                    dict_converter && (dict_converter_id = Hiwire.new_value(dict_converter)),
                    default_converter && (default_converter_id = Hiwire.new_value(default_converter));
                    try {
                        idresult = Module._python2js_custom(ptrobj, depth, proxies_id, dict_converter_id, default_converter_id)
                    } catch (e) {
                        API.fatal_error(e)
                    } finally {
                        Hiwire.decref(proxies_id),
                        Hiwire.decref(dict_converter_id),
                        Hiwire.decref(default_converter_id)
                    }
                    return 0 === idresult && Module._pythonexc2js(),
                    Hiwire.pop_value(idresult)
                }
                supportsLength() {
                    return !!(1 & this.$$flags)
                }
                supportsGet() {
                    return !!(2 & this.$$flags)
                }
                supportsSet() {
                    return !!(4 & this.$$flags)
                }
                supportsHas() {
                    return !!(8 & this.$$flags)
                }
                isIterable() {
                    return !!(48 & this.$$flags)
                }
                isIterator() {
                    return !!(32 & this.$$flags)
                }
                isAwaitable() {
                    return !!(64 & this.$$flags)
                }
                isBuffer() {
                    return !!(128 & this.$$flags)
                }
                isCallable() {
                    return !!(256 & this.$$flags)
                }
            }
            class PyProxyLengthMethods {
                get length() {
                    let length, ptrobj = _getPtr(this);
                    try {
                        length = Module._PyObject_Size(ptrobj)
                    } catch (e) {
                        API.fatal_error(e)
                    }
                    return -1 === length && Module._pythonexc2js(),
                    length
                }
            }
            class PyProxyGetItemMethods {
                get(key) {
                    let idresult, ptrobj = _getPtr(this), idkey = Hiwire.new_value(key);
                    try {
                        idresult = Module.__pyproxy_getitem(ptrobj, idkey)
                    } catch (e) {
                        API.fatal_error(e)
                    } finally {
                        Hiwire.decref(idkey)
                    }
                    if (0 === idresult) {
                        if (!Module._PyErr_Occurred())
                            return;
                        Module._pythonexc2js()
                    }
                    return Hiwire.pop_value(idresult)
                }
            }
            class PyProxySetItemMethods {
                set(key, value) {
                    let errcode, ptrobj = _getPtr(this), idkey = Hiwire.new_value(key), idval = Hiwire.new_value(value);
                    try {
                        errcode = Module.__pyproxy_setitem(ptrobj, idkey, idval)
                    } catch (e) {
                        API.fatal_error(e)
                    } finally {
                        Hiwire.decref(idkey),
                        Hiwire.decref(idval)
                    }
                    -1 === errcode && Module._pythonexc2js()
                }
                delete(key) {
                    let errcode, ptrobj = _getPtr(this), idkey = Hiwire.new_value(key);
                    try {
                        errcode = Module.__pyproxy_delitem(ptrobj, idkey)
                    } catch (e) {
                        API.fatal_error(e)
                    } finally {
                        Hiwire.decref(idkey)
                    }
                    -1 === errcode && Module._pythonexc2js()
                }
            }
            class PyProxyContainsMethods {
                has(key) {
                    let result, ptrobj = _getPtr(this), idkey = Hiwire.new_value(key);
                    try {
                        result = Module.__pyproxy_contains(ptrobj, idkey)
                    } catch (e) {
                        API.fatal_error(e)
                    } finally {
                        Hiwire.decref(idkey)
                    }
                    return -1 === result && Module._pythonexc2js(),
                    1 === result
                }
            }
            class PyProxyIterableMethods {
                [Symbol.iterator]() {
                    let iterptr, ptrobj = _getPtr(this), token = {};
                    try {
                        iterptr = Module._PyObject_GetIter(ptrobj)
                    } catch (e) {
                        API.fatal_error(e)
                    }
                    0 === iterptr && Module._pythonexc2js();
                    let result = function*(iterptr, token) {
                        try {
                            let item;
                            for (; item = Module.__pyproxy_iter_next(iterptr); )
                                yield Hiwire.pop_value(item)
                        } catch (e) {
                            API.fatal_error(e)
                        } finally {
                            Module.finalizationRegistry.unregister(token),
                            Module._Py_DecRef(iterptr)
                        }
                        Module._PyErr_Occurred() && Module._pythonexc2js()
                    }(iterptr, token);
                    return Module.finalizationRegistry.register(result, [iterptr, void 0], token),
                    result
                }
            }
            class PyProxyIteratorMethods {
                [Symbol.iterator]() {
                    return this
                }
                next(arg) {
                    let status, done, idarg = Hiwire.new_value(arg), stackTop = Module.stackSave(), res_ptr = Module.stackAlloc(4);
                    try {
                        status = Module.__pyproxyGen_Send(_getPtr(this), idarg, res_ptr)
                    } catch (e) {
                        API.fatal_error(e)
                    } finally {
                        Hiwire.decref(idarg)
                    }
                    let idresult = Module.HEAPU32[0 + (res_ptr >> 2)];
                    return Module.stackRestore(stackTop),
                    -1 === status && Module._pythonexc2js(),
                    done = 0 === status,
                    {
                        done: done,
                        value: Hiwire.pop_value(idresult)
                    }
                }
            }
            let PyProxyHandlers = {
                isExtensible: ()=>!0,
                has: (jsobj,jskey)=>!!Reflect.has(jsobj, jskey) || "symbol" != typeof jskey && (jskey.startsWith("$") && (jskey = jskey.slice(1)),
                function(jsobj, jskey) {
                    let result, ptrobj = _getPtr(jsobj), idkey = Hiwire.new_value(jskey);
                    try {
                        result = Module.__pyproxy_hasattr(ptrobj, idkey)
                    } catch (e) {
                        API.fatal_error(e)
                    } finally {
                        Hiwire.decref(idkey)
                    }
                    return -1 === result && Module._pythonexc2js(),
                    0 !== result
                }(jsobj, jskey)),
                get(jsobj, jskey) {
                    if (jskey in jsobj || "symbol" == typeof jskey)
                        return Reflect.get(jsobj, jskey);
                    jskey.startsWith("$") && (jskey = jskey.slice(1));
                    let idresult = function(jsobj, jskey) {
                        let idresult, ptrobj = _getPtr(jsobj), idkey = Hiwire.new_value(jskey), cacheId = jsobj.$$.cache.cacheId;
                        try {
                            idresult = Module.__pyproxy_getattr(ptrobj, idkey, cacheId)
                        } catch (e) {
                            API.fatal_error(e)
                        } finally {
                            Hiwire.decref(idkey)
                        }
                        return 0 === idresult && Module._PyErr_Occurred() && Module._pythonexc2js(),
                        idresult
                    }(jsobj, jskey);
                    return 0 !== idresult ? Hiwire.pop_value(idresult) : void 0
                },
                set(jsobj, jskey, jsval) {
                    let descr = Object.getOwnPropertyDescriptor(jsobj, jskey);
                    if (descr && !descr.writable)
                        throw new TypeError(`Cannot set read only field '${jskey}'`);
                    return "symbol" == typeof jskey ? Reflect.set(jsobj, jskey, jsval) : (jskey.startsWith("$") && (jskey = jskey.slice(1)),
                    function(jsobj, jskey, jsval) {
                        let errcode, ptrobj = _getPtr(jsobj), idkey = Hiwire.new_value(jskey), idval = Hiwire.new_value(jsval);
                        try {
                            errcode = Module.__pyproxy_setattr(ptrobj, idkey, idval)
                        } catch (e) {
                            API.fatal_error(e)
                        } finally {
                            Hiwire.decref(idkey),
                            Hiwire.decref(idval)
                        }
                        -1 === errcode && Module._pythonexc2js()
                    }(jsobj, jskey, jsval),
                    !0)
                },
                deleteProperty(jsobj, jskey) {
                    let descr = Object.getOwnPropertyDescriptor(jsobj, jskey);
                    if (descr && !descr.writable)
                        throw new TypeError(`Cannot delete read only field '${jskey}'`);
                    return "symbol" == typeof jskey ? Reflect.deleteProperty(jsobj, jskey) : (jskey.startsWith("$") && (jskey = jskey.slice(1)),
                    function(jsobj, jskey) {
                        let errcode, ptrobj = _getPtr(jsobj), idkey = Hiwire.new_value(jskey);
                        try {
                            errcode = Module.__pyproxy_delattr(ptrobj, idkey)
                        } catch (e) {
                            API.fatal_error(e)
                        } finally {
                            Hiwire.decref(idkey)
                        }
                        -1 === errcode && Module._pythonexc2js()
                    }(jsobj, jskey),
                    !descr || !!descr.configurable)
                },
                ownKeys(jsobj) {
                    let idresult, ptrobj = _getPtr(jsobj);
                    try {
                        idresult = Module.__pyproxy_ownKeys(ptrobj)
                    } catch (e) {
                        API.fatal_error(e)
                    }
                    0 === idresult && Module._pythonexc2js();
                    let result = Hiwire.pop_value(idresult);
                    return result.push(...Reflect.ownKeys(jsobj)),
                    result
                },
                apply: (jsobj,jsthis,jsargs)=>jsobj.apply(jsthis, jsargs)
            };
            class PyProxyAwaitableMethods {
                _ensure_future() {
                    if (this.$$.promise)
                        return this.$$.promise;
                    let resolveHandle, rejectHandle, errcode, ptrobj = _getPtr(this), promise = new Promise((resolve,reject)=>{
                        resolveHandle = resolve,
                        rejectHandle = reject
                    }
                    ), resolve_handle_id = Hiwire.new_value(resolveHandle), reject_handle_id = Hiwire.new_value(rejectHandle);
                    try {
                        errcode = Module.__pyproxy_ensure_future(ptrobj, resolve_handle_id, reject_handle_id)
                    } catch (e) {
                        API.fatal_error(e)
                    } finally {
                        Hiwire.decref(reject_handle_id),
                        Hiwire.decref(resolve_handle_id)
                    }
                    return -1 === errcode && Module._pythonexc2js(),
                    this.$$.promise = promise,
                    this.destroy(),
                    promise
                }
                then(onFulfilled, onRejected) {
                    return this._ensure_future().then(onFulfilled, onRejected)
                }
                catch(onRejected) {
                    return this._ensure_future().catch(onRejected)
                }
                finally(onFinally) {
                    return this._ensure_future().finally(onFinally)
                }
            }
            class PyProxyCallableMethods {
                apply(thisArg, jsargs) {
                    return jsargs = _adjustArgs(this, thisArg, jsargs = function(...args) {
                        return args
                    }
                    .apply(void 0, jsargs)),
                    Module.callPyObject(_getPtr(this), jsargs)
                }
                call(thisArg, ...jsargs) {
                    return jsargs = _adjustArgs(this, thisArg, jsargs),
                    Module.callPyObject(_getPtr(this), jsargs)
                }
                callKwargs(...jsargs) {
                    if (0 === jsargs.length)
                        throw new TypeError("callKwargs requires at least one argument (the key word argument object)");
                    let kwargs = jsargs.pop();
                    if (void 0 !== kwargs.constructor && "Object" !== kwargs.constructor.name)
                        throw new TypeError("kwargs argument is not an object");
                    return Module.callPyObjectKwargs(_getPtr(this), jsargs, kwargs)
                }
                bind(thisArg, ...jsargs) {
                    const {boundArgs: boundArgsOld, boundThis: boundThisOld, isBound: isBound} = this.$$props;
                    let boundThis = thisArg;
                    isBound && (boundThis = boundThisOld);
                    let boundArgs = boundArgsOld.concat(jsargs);
                    const props = Object.assign({}, this.$$props, {
                        boundArgs: boundArgs,
                        isBound: !0,
                        boundThis: boundThis
                    })
                      , $$ = this.$$;
                    return pyproxy_new(_getPtr(this), {
                        $$: $$,
                        flags: this.$$flags,
                        props: props
                    })
                }
                captureThis() {
                    const props = Object.assign({}, this.$$props, {
                        captureThis: !0
                    });
                    return pyproxy_new(_getPtr(this), {
                        $$: this.$$,
                        flags: this.$$flags,
                        props: props
                    })
                }
            }
            PyProxyCallableMethods.prototype.prototype = Function.prototype;
            let cdnURL, type_to_array_map = new Map([["i8", Int8Array], ["u8", Uint8Array], ["u8clamped", Uint8ClampedArray], ["i16", Int16Array], ["u16", Uint16Array], ["i32", Int32Array], ["u32", Uint32Array], ["i32", Int32Array], ["u32", Uint32Array], ["i64", globalThis.BigInt64Array], ["u64", globalThis.BigUint64Array], ["f32", Float32Array], ["f64", Float64Array], ["dataview", DataView]]);
            class PyProxyBufferMethods {
                getBuffer(type) {
                    let ArrayType;
                    if (type && (ArrayType = type_to_array_map.get(type),
                    void 0 === ArrayType))
                        throw new Error(`Unknown type ${type}`);
                    let errcode, HEAPU32 = Module.HEAPU32, orig_stack_ptr = Module.stackSave(), buffer_struct_ptr = Module.stackAlloc(HEAPU32[0 + (Module._buffer_struct_size >> 2)]), this_ptr = _getPtr(this);
                    try {
                        errcode = Module.__pyproxy_get_buffer(buffer_struct_ptr, this_ptr)
                    } catch (e) {
                        API.fatal_error(e)
                    }
                    -1 === errcode && Module._pythonexc2js();
                    let startByteOffset = HEAPU32[0 + (buffer_struct_ptr >> 2)]
                      , minByteOffset = HEAPU32[1 + (buffer_struct_ptr >> 2)]
                      , maxByteOffset = HEAPU32[2 + (buffer_struct_ptr >> 2)]
                      , readonly = !!HEAPU32[3 + (buffer_struct_ptr >> 2)]
                      , format_ptr = HEAPU32[4 + (buffer_struct_ptr >> 2)]
                      , itemsize = HEAPU32[5 + (buffer_struct_ptr >> 2)]
                      , shape = Hiwire.pop_value(HEAPU32[6 + (buffer_struct_ptr >> 2)])
                      , strides = Hiwire.pop_value(HEAPU32[7 + (buffer_struct_ptr >> 2)])
                      , view_ptr = HEAPU32[8 + (buffer_struct_ptr >> 2)]
                      , c_contiguous = !!HEAPU32[9 + (buffer_struct_ptr >> 2)]
                      , f_contiguous = !!HEAPU32[10 + (buffer_struct_ptr >> 2)]
                      , format = Module.UTF8ToString(format_ptr);
                    Module.stackRestore(orig_stack_ptr);
                    let success = !1;
                    try {
                        let bigEndian = !1;
                        void 0 === ArrayType && ([ArrayType,bigEndian] = Module.processBufferFormatString(format, " In this case, you can pass an explicit type argument."));
                        let alignment = parseInt(ArrayType.name.replace(/[^0-9]/g, "")) / 8 || 1;
                        if (bigEndian && alignment > 1)
                            throw new Error("Javascript has no native support for big endian buffers. In this case, you can pass an explicit type argument. For instance, `getBuffer('dataview')` will return a `DataView`which has native support for reading big endian data. Alternatively, toJs will automatically convert the buffer to little endian.");
                        let numBytes = maxByteOffset - minByteOffset;
                        if (0 !== numBytes && (startByteOffset % alignment != 0 || minByteOffset % alignment != 0 || maxByteOffset % alignment != 0))
                            throw new Error(`Buffer does not have valid alignment for a ${ArrayType.name}`);
                        let data, numEntries = numBytes / alignment, offset = (startByteOffset - minByteOffset) / alignment;
                        data = 0 === numBytes ? new ArrayType : new ArrayType(HEAPU32.buffer,minByteOffset,numEntries);
                        for (let i of strides.keys())
                            strides[i] /= alignment;
                        return success = !0,
                        Object.create(PyBuffer.prototype, Object.getOwnPropertyDescriptors({
                            offset: offset,
                            readonly: readonly,
                            format: format,
                            itemsize: itemsize,
                            ndim: shape.length,
                            nbytes: numBytes,
                            shape: shape,
                            strides: strides,
                            data: data,
                            c_contiguous: c_contiguous,
                            f_contiguous: f_contiguous,
                            _view_ptr: view_ptr,
                            _released: !1
                        }))
                    } finally {
                        if (!success)
                            try {
                                Module._PyBuffer_Release(view_ptr),
                                Module._PyMem_Free(view_ptr)
                            } catch (e) {
                                API.fatal_error(e)
                            }
                    }
                }
            }
            class PyBuffer {
                constructor() {
                    throw new TypeError("PyBuffer is not a constructor")
                }
                release() {
                    if (!this._released) {
                        try {
                            Module._PyBuffer_Release(this._view_ptr),
                            Module._PyMem_Free(this._view_ptr)
                        } catch (e) {
                            API.fatal_error(e)
                        }
                        this._released = !0,
                        this.data = null
                    }
                }
            }
            API.packageIndexReady = async function(lockFileURL) {
                let repodata;
                if (IN_NODE) {
                    await async function() {
                        if (!IN_NODE)
                            return;
                        if ((await import("url")).default,
                        nodeFsPromisesMod = await import("fs/promises"),
                        nodeFetch = globalThis.fetch ? fetch : (await import("node-fetch")).default,
                        (await import("vm")).default,
                        nodePath = await import("path"),
                        "undefined" != typeof require)
                            return;
                        const node_modules = {
                            fs: await import("fs"),
                            crypto: await import("crypto"),
                            ws: await import("ws"),
                            child_process: await import("child_process")
                        };
                        globalThis.require = function(mod) {
                            return node_modules[mod]
                        }
                    }();
                    const package_string = await nodeFsPromisesMod.readFile(lockFileURL);
                    repodata = JSON.parse(package_string)
                } else {
                    let response = await fetch(lockFileURL);
                    repodata = await response.json()
                }
                if (!repodata.packages)
                    throw new Error("Loaded repodata.json does not contain the expected key 'packages'.");
                API.repodata_info = repodata.info,
                API.repodata_packages = repodata.packages,
                API._import_name_to_package_name = new Map;
                for (let name of Object.keys(API.repodata_packages))
                    for (let import_name of API.repodata_packages[name].imports)
                        API._import_name_to_package_name.set(import_name, name)
            }(API.config.lockFileURL),
            API.setCdnUrl = function(url) {
                cdnURL = url
            }
            ;
            const package_uri_regexp = /^.*?([^\/]*)\.whl$/;
            function _uri_to_package_name(package_uri) {
                let match = package_uri_regexp.exec(package_uri);
                if (match) {
                    return match[1].toLowerCase().split("-").slice(0, -4).join("-")
                }
            }
            function createDonePromise() {
                let _resolve = ()=>{}
                  , _reject = ()=>{}
                ;
                const p = new Promise((resolve,reject)=>{
                    _resolve = resolve,
                    _reject = reject
                }
                );
                return p.resolve = _resolve,
                p.reject = _reject,
                p
            }
            function addPackageToLoad(name, toLoad) {
                if (name = name.toLowerCase(),
                toLoad.has(name))
                    return;
                const pkg_info = API.repodata_packages[name];
                if (!pkg_info)
                    throw new Error(`No known package with name '${name}'`);
                if (toLoad.set(name, {
                    name: name,
                    channel: "default channel",
                    depends: pkg_info.depends,
                    installPromise: void 0,
                    done: createDonePromise()
                }),
                void 0 === loadedPackages[name])
                    for (let dep_name of pkg_info.depends)
                        addPackageToLoad(dep_name, toLoad)
            }
            async function downloadAndInstall(name, toLoad, loaded, failed, checkIntegrity=!0) {
                if (void 0 !== loadedPackages[name])
                    return;
                const pkg = toLoad.get(name);
                try {
                    const buffer = await async function(name, channel, checkIntegrity=!0) {
                        let file_name, uri, file_sub_resource_hash;
                        if ("default channel" === channel) {
                            if (!(name in API.repodata_packages))
                                throw new Error(`Internal error: no entry for package named ${name}`);
                            file_name = API.repodata_packages[name].file_name,
                            uri = resolvePath(file_name, API.config.indexURL),
                            file_sub_resource_hash = API.package_loader.sub_resource_hash(API.repodata_packages[name].sha256)
                        } else
                            uri = channel,
                            file_sub_resource_hash = void 0;
                        checkIntegrity || (file_sub_resource_hash = void 0);
                        try {
                            return await loadBinaryFile(uri, file_sub_resource_hash)
                        } catch (e) {
                            if (!IN_NODE || "default channel" !== channel)
                                throw e
                        }
                        console.log(`Didn't find package ${file_name} locally, attempting to load from ${cdnURL}`);
                        let binary = await loadBinaryFile(cdnURL + file_name);
                        return console.log(`Package ${file_name} loaded from ${cdnURL}, caching the wheel in node_modules for future use.`),
                        await nodeFsPromisesMod.writeFile(uri, binary),
                        binary
                    }(pkg.name, pkg.channel, checkIntegrity)
                      , installPromisDependencies = pkg.depends.map(dependency=>toLoad.has(dependency) ? toLoad.get(dependency).done : Promise.resolve());
                    await Promise.all(installPromisDependencies),
                    await async function(name, buffer, channel) {
                        let pkg = API.repodata_packages[name];
                        pkg || (pkg = {
                            file_name: ".whl",
                            shared_library: !1,
                            depends: [],
                            imports: []
                        });
                        const filename = pkg.file_name
                          , dynlibs = API.package_loader.unpack_buffer.callKwargs({
                            buffer: buffer,
                            filename: filename,
                            target: pkg.install_dir,
                            calculate_dynlibs: !0,
                            installer: "pyodide.loadPackage",
                            source: "default channel" === channel ? "pyodide" : channel
                        });
                        for (const dynlib of dynlibs)
                            await loadDynlib(dynlib, pkg.shared_library)
                    }(pkg.name, buffer, pkg.channel),
                    loaded.add(pkg.name),
                    loadedPackages[pkg.name] = pkg.channel
                } catch (err) {
                    failed.set(name, err)
                } finally {
                    pkg.done.resolve()
                }
            }
            const acquirePackageLock = createLock();
            let loadPackagePositionalCallbackDeprecationWarned = !1;
            async function loadPackage(names, options={
                checkIntegrity: !0
            }, errorCallbackDeprecated) {
                "function" == typeof options && (loadPackagePositionalCallbackDeprecationWarned || (console.warn("Passing a messageCallback or errorCallback as the second or third argument to loadPackage is deprecated and will be removed in v0.24. Instead use { messageCallback : callbackFunc }"),
                options = {
                    messageCallback: options,
                    errorCallback: errorCallbackDeprecated
                },
                loadPackagePositionalCallbackDeprecationWarned = !0));
                const messageCallback = options.messageCallback || console.log
                  , errorCallback = options.errorCallback || console.error;
                isPyProxy(names) && (names = names.toJs()),
                Array.isArray(names) || (names = [names]);
                const toLoad = function(names, errorCallback) {
                    const toLoad = new Map;
                    for (let name of names) {
                        const pkgname = _uri_to_package_name(name);
                        if (void 0 === pkgname) {
                            addPackageToLoad(name, toLoad);
                            continue
                        }
                        const channel = name;
                        toLoad.has(pkgname) && toLoad.get(pkgname).channel !== channel ? errorCallback(`Loading same package ${pkgname} from ${channel} and ${toLoad.get(pkgname).channel}`) : toLoad.set(pkgname, {
                            name: pkgname,
                            channel: channel,
                            depends: [],
                            installPromise: void 0,
                            done: createDonePromise()
                        })
                    }
                    return toLoad
                }(names, errorCallback);
                for (const [pkg,pkg_metadata] of toLoad) {
                    const loaded = loadedPackages[pkg];
                    void 0 !== loaded && (toLoad.delete(pkg),
                    loaded === pkg_metadata.channel || "default channel" === pkg_metadata.channel ? messageCallback(`${pkg} already loaded from ${loaded}`) : errorCallback(`URI mismatch, attempting to load package ${pkg} from ${pkg_metadata.channel} while it is already loaded from ${loaded}. To override a dependency, load the custom package first.`))
                }
                if (0 === toLoad.size)
                    return void messageCallback("No new packages to load");
                const packageNames = [...toLoad.keys()].join(", ")
                  , loaded = new Set
                  , failed = new Map
                  , releaseLock = await acquirePackageLock();
                try {
                    messageCallback(`Loading ${packageNames}`);
                    for (const [name] of toLoad)
                        loadedPackages[name] ? toLoad.delete(name) : toLoad.get(name).installPromise = downloadAndInstall(name, toLoad, loaded, failed, options.checkIntegrity);
                    if (await Promise.all(Array.from(toLoad.values()).map(({installPromise: installPromise})=>installPromise)),
                    Module.reportUndefinedSymbols(),
                    loaded.size > 0) {
                        messageCallback(`Loaded ${Array.from(loaded).join(", ")}`)
                    }
                    if (failed.size > 0) {
                        messageCallback(`Failed to load ${Array.from(failed.keys()).join(", ")}`);
                        for (const [name,err] of failed)
                            errorCallback(`The following error occurred while loading ${name}:`),
                            errorCallback(err.message)
                    }
                    API.importlib.invalidate_caches()
                } finally {
                    releaseLock()
                }
            }
            let loadedPackages = {};
            "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self;
            var errorStackParser = {
                exports: {}
            }
              , stackframe = {
                exports: {}
            };
            stackframe.exports = function() {
                function _isNumber(n) {
                    return !isNaN(parseFloat(n)) && isFinite(n)
                }
                function _capitalize(str) {
                    return str.charAt(0).toUpperCase() + str.substring(1)
                }
                function _getter(p) {
                    return function() {
                        return this[p]
                    }
                }
                var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"]
                  , numericProps = ["columnNumber", "lineNumber"]
                  , stringProps = ["fileName", "functionName", "source"]
                  , arrayProps = ["args"]
                  , objectProps = ["evalOrigin"]
                  , props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);
                function StackFrame(obj) {
                    if (obj)
                        for (var i = 0; i < props.length; i++)
                            void 0 !== obj[props[i]] && this["set" + _capitalize(props[i])](obj[props[i]])
                }
                StackFrame.prototype = {
                    getArgs: function() {
                        return this.args
                    },
                    setArgs: function(v) {
                        if ("[object Array]" !== Object.prototype.toString.call(v))
                            throw new TypeError("Args must be an Array");
                        this.args = v
                    },
                    getEvalOrigin: function() {
                        return this.evalOrigin
                    },
                    setEvalOrigin: function(v) {
                        if (v instanceof StackFrame)
                            this.evalOrigin = v;
                        else {
                            if (!(v instanceof Object))
                                throw new TypeError("Eval Origin must be an Object or StackFrame");
                            this.evalOrigin = new StackFrame(v)
                        }
                    },
                    toString: function() {
                        var fileName = this.getFileName() || ""
                          , lineNumber = this.getLineNumber() || ""
                          , columnNumber = this.getColumnNumber() || ""
                          , functionName = this.getFunctionName() || "";
                        return this.getIsEval() ? fileName ? "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")" : "[eval]:" + lineNumber + ":" + columnNumber : functionName ? functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")" : fileName + ":" + lineNumber + ":" + columnNumber
                    }
                },
                StackFrame.fromString = function(str) {
                    var argsStartIndex = str.indexOf("(")
                      , argsEndIndex = str.lastIndexOf(")")
                      , functionName = str.substring(0, argsStartIndex)
                      , args = str.substring(argsStartIndex + 1, argsEndIndex).split(",")
                      , locationString = str.substring(argsEndIndex + 1);
                    if (0 === locationString.indexOf("@"))
                        var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, "")
                          , fileName = parts[1]
                          , lineNumber = parts[2]
                          , columnNumber = parts[3];
                    return new StackFrame({
                        functionName: functionName,
                        args: args || void 0,
                        fileName: fileName,
                        lineNumber: lineNumber || void 0,
                        columnNumber: columnNumber || void 0
                    })
                }
                ;
                for (var i = 0; i < booleanProps.length; i++)
                    StackFrame.prototype["get" + _capitalize(booleanProps[i])] = _getter(booleanProps[i]),
                    StackFrame.prototype["set" + _capitalize(booleanProps[i])] = function(p) {
                        return function(v) {
                            this[p] = Boolean(v)
                        }
                    }(booleanProps[i]);
                for (var j = 0; j < numericProps.length; j++)
                    StackFrame.prototype["get" + _capitalize(numericProps[j])] = _getter(numericProps[j]),
                    StackFrame.prototype["set" + _capitalize(numericProps[j])] = function(p) {
                        return function(v) {
                            if (!_isNumber(v))
                                throw new TypeError(p + " must be a Number");
                            this[p] = Number(v)
                        }
                    }(numericProps[j]);
                for (var k = 0; k < stringProps.length; k++)
                    StackFrame.prototype["get" + _capitalize(stringProps[k])] = _getter(stringProps[k]),
                    StackFrame.prototype["set" + _capitalize(stringProps[k])] = function(p) {
                        return function(v) {
                            this[p] = String(v)
                        }
                    }(stringProps[k]);
                return StackFrame
            }(),
            function(module, exports) {
                var StackFrame, FIREFOX_SAFARI_STACK_REGEXP, CHROME_IE_STACK_REGEXP, SAFARI_NATIVE_CODE_REGEXP;
                module.exports = (StackFrame = stackframe.exports,
                FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/,
                CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m,
                SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/,
                {
                    parse: function(error) {
                        if (void 0 !== error.stacktrace || void 0 !== error["opera#sourceloc"])
                            return this.parseOpera(error);
                        if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP))
                            return this.parseV8OrIE(error);
                        if (error.stack)
                            return this.parseFFOrSafari(error);
                        throw new Error("Cannot parse given Error object")
                    },
                    extractLocation: function(urlLike) {
                        if (-1 === urlLike.indexOf(":"))
                            return [urlLike];
                        var parts = /(.+?)(?::(\d+))?(?::(\d+))?$/.exec(urlLike.replace(/[()]/g, ""));
                        return [parts[1], parts[2] || void 0, parts[3] || void 0]
                    },
                    parseV8OrIE: function(error) {
                        return error.stack.split("\n").filter(function(line) {
                            return !!line.match(CHROME_IE_STACK_REGEXP)
                        }, this).map(function(line) {
                            line.indexOf("(eval ") > -1 && (line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(,.*$)/g, ""));
                            var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(").replace(/^.*?\s+/, "")
                              , location = sanitizedLine.match(/ (\(.+\)$)/);
                            sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
                            var locationParts = this.extractLocation(location ? location[1] : sanitizedLine)
                              , functionName = location && sanitizedLine || void 0
                              , fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
                            return new StackFrame({
                                functionName: functionName,
                                fileName: fileName,
                                lineNumber: locationParts[1],
                                columnNumber: locationParts[2],
                                source: line
                            })
                        }, this)
                    },
                    parseFFOrSafari: function(error) {
                        return error.stack.split("\n").filter(function(line) {
                            return !line.match(SAFARI_NATIVE_CODE_REGEXP)
                        }, this).map(function(line) {
                            if (line.indexOf(" > eval") > -1 && (line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1")),
                            -1 === line.indexOf("@") && -1 === line.indexOf(":"))
                                return new StackFrame({
                                    functionName: line
                                });
                            var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/
                              , matches = line.match(functionNameRegex)
                              , functionName = matches && matches[1] ? matches[1] : void 0
                              , locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
                            return new StackFrame({
                                functionName: functionName,
                                fileName: locationParts[0],
                                lineNumber: locationParts[1],
                                columnNumber: locationParts[2],
                                source: line
                            })
                        }, this)
                    },
                    parseOpera: function(e) {
                        return !e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length ? this.parseOpera9(e) : e.stack ? this.parseOpera11(e) : this.parseOpera10(e)
                    },
                    parseOpera9: function(e) {
                        for (var lineRE = /Line (\d+).*script (?:in )?(\S+)/i, lines = e.message.split("\n"), result = [], i = 2, len = lines.length; i < len; i += 2) {
                            var match = lineRE.exec(lines[i]);
                            match && result.push(new StackFrame({
                                fileName: match[2],
                                lineNumber: match[1],
                                source: lines[i]
                            }))
                        }
                        return result
                    },
                    parseOpera10: function(e) {
                        for (var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, lines = e.stacktrace.split("\n"), result = [], i = 0, len = lines.length; i < len; i += 2) {
                            var match = lineRE.exec(lines[i]);
                            match && result.push(new StackFrame({
                                functionName: match[3] || void 0,
                                fileName: match[2],
                                lineNumber: match[1],
                                source: lines[i]
                            }))
                        }
                        return result
                    },
                    parseOpera11: function(error) {
                        return error.stack.split("\n").filter(function(line) {
                            return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/)
                        }, this).map(function(line) {
                            var argsRaw, tokens = line.split("@"), locationParts = this.extractLocation(tokens.pop()), functionCall = tokens.shift() || "", functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
                            functionCall.match(/\(([^)]*)\)/) && (argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1"));
                            var args = void 0 === argsRaw || "[arguments not available]" === argsRaw ? void 0 : argsRaw.split(",");
                            return new StackFrame({
                                functionName: functionName,
                                args: args,
                                fileName: locationParts[0],
                                lineNumber: locationParts[1],
                                columnNumber: locationParts[2],
                                source: line
                            })
                        }, this)
                    }
                })
            }(errorStackParser);
            var ErrorStackParser = errorStackParser.exports;
            function ensureCaughtObjectIsError(e) {
                if ("string" == typeof e)
                    e = new Error(e);
                else if ("object" != typeof e || null === e || "string" != typeof e.stack || "string" != typeof e.message) {
                    let msg = `A value of type ${typeof e} with tag ${Object.prototype.toString.call(e)} was thrown as an error!`;
                    try {
                        msg += `\nString interpolation of the thrown value gives """${e}""".`
                    } catch (e) {
                        msg += "\nString interpolation of the thrown value fails."
                    }
                    try {
                        msg += `\nThe thrown value's toString method returns """${e.toString()}""".`
                    } catch (e) {
                        msg += "\nThe thrown value's toString method fails."
                    }
                    e = new Error(msg)
                }
                return e
            }
            class CppException extends Error {
                constructor(ty, msg, ptr) {
                    msg || (msg = `The exception is an object of type ${ty} at address ${ptr} which does not inherit from std::exception`),
                    super(msg),
                    this.ty = ty
                }
            }
            function convertCppException(e) {
                let[ty,msg] = Module.getExceptionMessage(e);
                return new CppException(ty,msg,e)
            }
            Object.defineProperty(CppException.prototype, "name", {
                get() {
                    return `${this.constructor.name} ${this.ty}`
                }
            }),
            Tests.convertCppException = convertCppException;
            let fatal_error_occurred = !1;
            API.fatal_error = function(e) {
                if (!e || !e.pyodide_fatal_error) {
                    if (fatal_error_occurred)
                        return console.error("Recursive call to fatal_error. Inner error was:"),
                        void console.error(e);
                    (e = "number" == typeof e ? convertCppException(e) : ensureCaughtObjectIsError(e)).pyodide_fatal_error = !0,
                    fatal_error_occurred = !0,
                    console.error("Pyodide has suffered a fatal error. Please report this to the Pyodide maintainers."),
                    console.error("The cause of the fatal error was:"),
                    API.inTestHoist ? (console.error(e.toString()),
                    console.error(e.stack)) : console.error(e);
                    try {
                        Module._dump_traceback();
                        for (let key of Object.keys(API.public_api))
                            key.startsWith("_") || "version" === key || Object.defineProperty(API.public_api, key, {
                                enumerable: !0,
                                configurable: !0,
                                get: ()=>{
                                    throw new Error("Pyodide already fatally failed and can no longer be used.")
                                }
                            });
                        API.on_fatal && API.on_fatal(e)
                    } catch (err2) {
                        console.error("Another error occurred while handling the fatal error:"),
                        console.error(err2)
                    }
                    throw e
                }
            }
            ;
            class FatalPyodideError extends Error {
            }
            Object.defineProperty(FatalPyodideError.prototype, "name", {
                value: FatalPyodideError.name
            });
            let stderr_chars = [];
            function isPyodideFrame(frame) {
                if (!frame)
                    return !1;
                const fileName = frame.fileName || "";
                if (fileName.includes("wasm-function"))
                    return !0;
                if (!fileName.includes("pyodide.asm.js"))
                    return !1;
                let funcName = frame.functionName || "";
                return funcName.startsWith("Object.") && (funcName = funcName.slice("Object.".length)),
                !(funcName in API.public_api) || "PythonError" === funcName || (frame.functionName = funcName,
                !1)
            }
            API.capture_stderr = function() {
                stderr_chars = [];
                const FS = Module.FS;
                FS.createDevice("/dev", "capture_stderr", null, e=>stderr_chars.push(e)),
                FS.closeStream(2),
                FS.open("/dev/capture_stderr", 1)
            }
            ,
            API.restore_stderr = function() {
                const FS = Module.FS;
                return FS.closeStream(2),
                FS.unlink("/dev/capture_stderr"),
                FS.open("/dev/stderr", 1),
                (new TextDecoder).decode(new Uint8Array(stderr_chars))
            }
            ,
            API.fatal_loading_error = function(...args) {
                let message = args.join(" ");
                if (Module._PyErr_Occurred()) {
                    API.capture_stderr(),
                    Module._PyErr_Print();
                    message += "\n" + API.restore_stderr()
                }
                throw new FatalPyodideError(message)
            }
            ,
            Module.handle_js_error = function(e) {
                if (e && e.pyodide_fatal_error)
                    throw e;
                if (e instanceof Module._PropagatePythonError)
                    return;
                let stack, weirdCatch, restored_error = !1;
                e instanceof API.PythonError && (restored_error = Module._restore_sys_last_exception(e.__error_address));
                try {
                    stack = ErrorStackParser.parse(e)
                } catch (_) {
                    weirdCatch = !0
                }
                if (weirdCatch && (e = ensureCaughtObjectIsError(e)),
                !restored_error) {
                    let eidx = Hiwire.new_value(e)
                      , err = Module._JsProxy_create(eidx);
                    Module._set_error(err),
                    Module._Py_DecRef(err),
                    Hiwire.decref(eidx)
                }
                if (!weirdCatch) {
                    if (function(frame) {
                        if (!isPyodideFrame(frame))
                            return !1;
                        const funcName = frame.functionName;
                        return "PythonError" === funcName || "new_error" === funcName
                    }(stack[0]))
                        for (; isPyodideFrame(stack[0]); )
                            stack.shift();
                    for (const frame of stack) {
                        if (isPyodideFrame(frame))
                            break;
                        const funcnameAddr = Module.stringToNewUTF8(frame.functionName || "???")
                          , fileNameAddr = Module.stringToNewUTF8(frame.fileName || "???.js");
                        Module.__PyTraceback_Add(funcnameAddr, fileNameAddr, frame.lineNumber),
                        Module._free(funcnameAddr),
                        Module._free(fileNameAddr)
                    }
                }
            }
            ;
            class PythonError extends Error {
                constructor(message, error_address) {
                    const oldLimit = Error.stackTraceLimit;
                    Error.stackTraceLimit = 1 / 0,
                    super(message),
                    Error.stackTraceLimit = oldLimit,
                    this.__error_address = error_address
                }
            }
            Object.defineProperty(PythonError.prototype, "name", {
                value: PythonError.name
            }),
            API.PythonError = PythonError;
            class _PropagatePythonError extends Error {
                constructor() {
                    API.fail_test = !0,
                    super("If you are seeing this message, an internal Pyodide error has occurred. Please report it to the Pyodide maintainers.")
                }
            }
            Object.defineProperty(_PropagatePythonError.prototype, "name", {
                value: _PropagatePythonError.name
            }),
            Module._PropagatePythonError = _PropagatePythonError;
            function runPython(code, options={}) {
                return options.globals || (options.globals = API.globals),
                API.pyodide_code.eval_code(code, options.globals)
            }
            API.loadBinaryFile = loadBinaryFile,
            API.runPythonInternal = function(code) {
                return API._pyodide._base.eval_code(code, API.runPythonInternal_dict)
            }
            ,
            API.runPython = runPython;
            let loadPackagesFromImportsPositionalCallbackDeprecationWarned = !1;
            async function loadPackagesFromImports(code, options={
                checkIntegrity: !0
            }, errorCallbackDeprecated) {
                "function" == typeof options && (loadPackagesFromImportsPositionalCallbackDeprecationWarned || (console.warn("Passing a messageCallback or errorCallback as the second or third argument to loadPackagesFromImports is deprecated and will be removed in v0.24. Instead use { messageCallback : callbackFunc }"),
                options = {
                    messageCallback: options,
                    errorCallback: errorCallbackDeprecated
                },
                loadPackagesFromImportsPositionalCallbackDeprecationWarned = !0));
                let imports, pyimports = API.pyodide_code.find_imports(code);
                try {
                    imports = pyimports.toJs()
                } finally {
                    pyimports.destroy()
                }
                if (0 === imports.length)
                    return;
                let packageNames = API._import_name_to_package_name
                  , packages = new Set;
                for (let name of imports)
                    packageNames.has(name) && packages.add(packageNames.get(name));
                packages.size && await loadPackage(Array.from(packages), options)
            }
            async function runPythonAsync(code, options={}) {
                return options.globals || (options.globals = API.globals),
                await API.pyodide_code.eval_code_async(code, options.globals)
            }
            function registerJsModule(name, module) {
                API.pyodide_ffi.register_js_module(name, module)
            }
            function registerComlink(Comlink) {
                API._Comlink = Comlink
            }
            function unregisterJsModule(name) {
                API.pyodide_ffi.unregister_js_module(name)
            }
            function toPy(obj, {depth: depth, defaultConverter: defaultConverter}={
                depth: -1
            }) {
                switch (typeof obj) {
                case "string":
                case "number":
                case "boolean":
                case "bigint":
                case "undefined":
                    return obj
                }
                if (!obj || API.isPyProxy(obj))
                    return obj;
                let obj_id = 0
                  , py_result = 0
                  , result = 0;
                try {
                    obj_id = Hiwire.new_value(obj);
                    try {
                        py_result = Module.js2python_convert(obj_id, {
                            depth: depth,
                            defaultConverter: defaultConverter
                        })
                    } catch (e) {
                        throw e instanceof Module._PropagatePythonError && Module._pythonexc2js(),
                        e
                    }
                    if (Module._JsProxy_Check(py_result))
                        return obj;
                    result = Module._python2js(py_result),
                    0 === result && Module._pythonexc2js()
                } finally {
                    Hiwire.decref(obj_id),
                    Module._Py_DecRef(py_result)
                }
                return Hiwire.pop_value(result)
            }
            function pyimport(mod_name) {
                return API.importlib.import_module(mod_name)
            }
            function unpackArchive(buffer, format, options={}) {
                if (!ArrayBuffer.isView(buffer) && "[object ArrayBuffer]" !== Object.prototype.toString.call(buffer))
                    throw new TypeError("Expected argument 'buffer' to be an ArrayBuffer or an ArrayBuffer view");
                API.typedArrayAsUint8Array(buffer);
                let extract_dir = options.extractDir;
                API.package_loader.unpack_buffer.callKwargs({
                    buffer: buffer,
                    format: format,
                    extract_dir: extract_dir,
                    installer: "pyodide.unpackArchive"
                })
            }
            async function mountNativeFS(path, fileSystemHandle) {
                if ("FileSystemDirectoryHandle" !== fileSystemHandle.constructor.name)
                    throw new TypeError("Expected argument 'fileSystemHandle' to be a FileSystemDirectoryHandle");
                return null == Module.FS.findObject(path) && Module.FS.mkdirTree(path),
                Module.FS.mount(Module.FS.filesystems.NATIVEFS_ASYNC, {
                    fileSystemHandle: fileSystemHandle
                }, path),
                await new Promise((resolve,_)=>Module.FS.syncfs(!0, resolve)),
                {
                    syncfs: async()=>new Promise((resolve,_)=>Module.FS.syncfs(!1, resolve))
                }
            }
            function setInterruptBuffer(interrupt_buffer) {
                Module.HEAP8[Module._Py_EMSCRIPTEN_SIGNAL_HANDLING] = !!interrupt_buffer,
                Module.Py_EmscriptenSignalBuffer = interrupt_buffer
            }
            function checkInterrupt() {
                Module.__PyErr_CheckSignals() && Module._pythonexc2js()
            }
            API.runPythonAsync = runPythonAsync,
            API.saveState = ()=>API.pyodide_py._state.save_state(),
            API.restoreState = state=>API.pyodide_py._state.restore_state(state),
            exports.FS = void 0,
            exports.PATH = void 0,
            exports.ERRNO_CODES = void 0,
            API.makePublicAPI = function() {
                exports.FS = Module.FS,
                exports.PATH = Module.PATH,
                exports.ERRNO_CODES = Module.ERRNO_CODES;
                let namespace = {
                    globals: undefined,
                    FS: exports.FS,
                    PATH: exports.PATH,
                    ERRNO_CODES: exports.ERRNO_CODES,
                    pyodide_py: undefined,
                    version: "0.22.0.dev0",
                    loadPackage: loadPackage,
                    loadPackagesFromImports: loadPackagesFromImports,
                    loadedPackages: loadedPackages,
                    isPyProxy: isPyProxy,
                    runPython: runPython,
                    runPythonAsync: runPythonAsync,
                    registerJsModule: registerJsModule,
                    unregisterJsModule: unregisterJsModule,
                    setInterruptBuffer: setInterruptBuffer,
                    checkInterrupt: checkInterrupt,
                    toPy: toPy,
                    pyimport: pyimport,
                    unpackArchive: unpackArchive,
                    mountNativeFS: mountNativeFS,
                    registerComlink: registerComlink,
                    PythonError: PythonError,
                    PyBuffer: PyBuffer,
                    _module: Module,
                    _api: API
                };
                return API.public_api = namespace,
                namespace
            }
            ,
            exports.checkInterrupt = checkInterrupt,
            exports.globals = undefined,
            exports.isPyProxy = isPyProxy,
            exports.loadPackage = loadPackage,
            exports.loadPackagesFromImports = loadPackagesFromImports,
            exports.loadedPackages = loadedPackages,
            exports.mountNativeFS = mountNativeFS,
            exports.pyimport = pyimport,
            exports.pyodide_py = undefined,
            exports.registerComlink = registerComlink,
            exports.registerJsModule = registerJsModule,
            exports.runPython = runPython,
            exports.runPythonAsync = runPythonAsync,
            exports.setInterruptBuffer = setInterruptBuffer,
            exports.toPy = toPy,
            exports.unpackArchive = unpackArchive,
            exports.unregisterJsModule = unregisterJsModule,
            Object.defineProperty(exports, "__esModule", {
                value: !0
            })
        }({});
        var moduleOverrides = Object.assign({}, Module);
        var arguments_ = [];
        var thisProgram = "./this.program";
        var quit_ = (status,toThrow)=>{
            throw toThrow
        }
        ;
        var ENVIRONMENT_IS_WEB = typeof window == "object";
        var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
        var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
        var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
        var scriptDirectory = "";
        function locateFile(path) {
            if (Module["locateFile"]) {
                return Module["locateFile"](path, scriptDirectory)
            }
            return scriptDirectory + path
        }
        var read_, readAsync, readBinary, setWindowTitle;
        function logExceptionOnExit(e) {
            if (e instanceof ExitStatus)
                return;
            let toLog = e;
            err("exiting due to exception: " + toLog)
        }
        if (ENVIRONMENT_IS_NODE) {
            if (ENVIRONMENT_IS_WORKER) {
                scriptDirectory = require("path").dirname(scriptDirectory) + "/"
            } else {
                scriptDirectory = __dirname + "/"
            }
            var fs;
            var nodePath;
            var requireNodeFS = ()=>{
                if (!nodePath) {
                    fs = require("fs");
                    nodePath = require("path")
                }
            }
            ;
            read_ = (filename,binary)=>{
                requireNodeFS();
                filename = nodePath["normalize"](filename);
                return fs.readFileSync(filename, binary ? undefined : "utf8")
            }
            ;
            readBinary = filename=>{
                var ret = read_(filename, true);
                if (!ret.buffer) {
                    ret = new Uint8Array(ret)
                }
                return ret
            }
            ;
            readAsync = (filename,onload,onerror)=>{
                requireNodeFS();
                filename = nodePath["normalize"](filename);
                fs.readFile(filename, function(err, data) {
                    if (err)
                        onerror(err);
                    else
                        onload(data.buffer)
                })
            }
            ;
            if (process["argv"].length > 1) {
                thisProgram = process["argv"][1].replace(/\\/g, "/")
            }
            arguments_ = process["argv"].slice(2);
            process["on"]("uncaughtException", function(ex) {
                if (!(ex instanceof ExitStatus)) {
                    throw ex
                }
            });
            process["on"]("unhandledRejection", function(reason) {
                throw reason
            });
            quit_ = (status,toThrow)=>{
                if (keepRuntimeAlive()) {
                    process["exitCode"] = status;
                    throw toThrow
                }
                logExceptionOnExit(toThrow);
                process["exit"](status)
            }
            ;
            Module["inspect"] = function() {
                return "[Emscripten Module object]"
            }
        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
            if (ENVIRONMENT_IS_WORKER) {
                scriptDirectory = self.location.href
            } else if (typeof document != "undefined" && document.currentScript) {
                scriptDirectory = document.currentScript.src
            }
            if (_scriptDir) {
                scriptDirectory = _scriptDir
            }
            if (scriptDirectory.indexOf("blob:") !== 0) {
                scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1)
            } else {
                scriptDirectory = ""
            }
            {
                read_ = url=>{
                    var xhr = new XMLHttpRequest;
                    xhr.open("GET", url, false);
                    xhr.send(null);
                    return xhr.responseText
                }
                ;
                if (ENVIRONMENT_IS_WORKER) {
                    readBinary = url=>{
                        var xhr = new XMLHttpRequest;
                        xhr.open("GET", url, false);
                        xhr.responseType = "arraybuffer";
                        xhr.send(null);
                        return new Uint8Array(xhr.response)
                    }
                }
                readAsync = (url,onload,onerror)=>{
                    var xhr = new XMLHttpRequest;
                    xhr.open("GET", url, true);
                    xhr.responseType = "arraybuffer";
                    xhr.onload = ()=>{
                        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                            onload(xhr.response);
                            return
                        }
                        onerror()
                    }
                    ;
                    xhr.onerror = onerror;
                    xhr.send(null)
                }
            }
            setWindowTitle = title=>document.title = title
        } else {}
        var out = Module["print"] || console.log.bind(console);
        var err = Module["printErr"] || console.warn.bind(console);
        Object.assign(Module, moduleOverrides);
        moduleOverrides = null;
        if (Module["arguments"])
            arguments_ = Module["arguments"];
        if (Module["thisProgram"])
            thisProgram = Module["thisProgram"];
        if (Module["quit"])
            quit_ = Module["quit"];
        var STACK_ALIGN = 16;
        var POINTER_SIZE = 4;
        function getNativeTypeSize(type) {
            switch (type) {
            case "i1":
            case "i8":
            case "u8":
                return 1;
            case "i16":
            case "u16":
                return 2;
            case "i32":
            case "u32":
                return 4;
            case "i64":
            case "u64":
                return 8;
            case "float":
                return 4;
            case "double":
                return 8;
            default:
                {
                    if (type[type.length - 1] === "*") {
                        return POINTER_SIZE
                    }
                    if (type[0] === "i") {
                        const bits = Number(type.substr(1));
                        assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
                        return bits / 8
                    }
                    return 0
                }
            }
        }
        var dynamicLibraries = Module["dynamicLibraries"] || [];
        var wasmBinary;
        if (Module["wasmBinary"])
            wasmBinary = Module["wasmBinary"];
        var noExitRuntime = Module["noExitRuntime"] || true;
        if (typeof WebAssembly != "object") {
            abort("no native wasm support detected")
        }
        var wasmMemory;
        var ABORT = false;
        var EXITSTATUS;
        function assert(condition, text) {
            if (!condition) {
                abort(text)
            }
        }
        var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
        function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
            var endIdx = idx + maxBytesToRead;
            var endPtr = idx;
            while (heapOrArray[endPtr] && !(endPtr >= endIdx))
                ++endPtr;
            if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
                return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr))
            }
            var str = "";
            while (idx < endPtr) {
                var u0 = heapOrArray[idx++];
                if (!(u0 & 128)) {
                    str += String.fromCharCode(u0);
                    continue
                }
                var u1 = heapOrArray[idx++] & 63;
                if ((u0 & 224) == 192) {
                    str += String.fromCharCode((u0 & 31) << 6 | u1);
                    continue
                }
                var u2 = heapOrArray[idx++] & 63;
                if ((u0 & 240) == 224) {
                    u0 = (u0 & 15) << 12 | u1 << 6 | u2
                } else {
                    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63
                }
                if (u0 < 65536) {
                    str += String.fromCharCode(u0)
                } else {
                    var ch = u0 - 65536;
                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)
                }
            }
            return str
        }
        function UTF8ToString(ptr, maxBytesToRead) {
            return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : ""
        }
        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
            if (!(maxBytesToWrite > 0))
                return 0;
            var startIdx = outIdx;
            var endIdx = outIdx + maxBytesToWrite - 1;
            for (var i = 0; i < str.length; ++i) {
                var u = str.charCodeAt(i);
                if (u >= 55296 && u <= 57343) {
                    var u1 = str.charCodeAt(++i);
                    u = 65536 + ((u & 1023) << 10) | u1 & 1023
                }
                if (u <= 127) {
                    if (outIdx >= endIdx)
                        break;
                    heap[outIdx++] = u
                } else if (u <= 2047) {
                    if (outIdx + 1 >= endIdx)
                        break;
                    heap[outIdx++] = 192 | u >> 6;
                    heap[outIdx++] = 128 | u & 63
                } else if (u <= 65535) {
                    if (outIdx + 2 >= endIdx)
                        break;
                    heap[outIdx++] = 224 | u >> 12;
                    heap[outIdx++] = 128 | u >> 6 & 63;
                    heap[outIdx++] = 128 | u & 63
                } else {
                    if (outIdx + 3 >= endIdx)
                        break;
                    heap[outIdx++] = 240 | u >> 18;
                    heap[outIdx++] = 128 | u >> 12 & 63;
                    heap[outIdx++] = 128 | u >> 6 & 63;
                    heap[outIdx++] = 128 | u & 63
                }
            }
            heap[outIdx] = 0;
            return outIdx - startIdx
        }
        function stringToUTF8(str, outPtr, maxBytesToWrite) {
            return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite)
        }
        function lengthBytesUTF8(str) {
            var len = 0;
            for (var i = 0; i < str.length; ++i) {
                var c = str.charCodeAt(i);
                if (c <= 127) {
                    len++
                } else if (c <= 2047) {
                    len += 2
                } else if (c >= 55296 && c <= 57343) {
                    len += 4;
                    ++i
                } else {
                    len += 3
                }
            }
            return len
        }
        var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAP64, HEAPU64, HEAPF64;
        function updateGlobalBufferAndViews(buf) {
            buffer = buf;
            Module["HEAP8"] = HEAP8 = new Int8Array(buf);
            Module["HEAP16"] = HEAP16 = new Int16Array(buf);
            Module["HEAP32"] = HEAP32 = new Int32Array(buf);
            Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
            Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
            Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
            Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
            Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
            Module["HEAP64"] = HEAP64 = new BigInt64Array(buf);
            Module["HEAPU64"] = HEAPU64 = new BigUint64Array(buf)
        }
        var TOTAL_STACK = 5242880;
        var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 20971520;
        if (Module["wasmMemory"]) {
            wasmMemory = Module["wasmMemory"]
        } else {
            wasmMemory = new WebAssembly.Memory({
                "initial": INITIAL_MEMORY / 65536,
                "maximum": 2147483648 / 65536
            })
        }
        if (wasmMemory) {
            buffer = wasmMemory.buffer
        }
        INITIAL_MEMORY = buffer.byteLength;
        updateGlobalBufferAndViews(buffer);
        var wasmTable = new WebAssembly.Table({
            "initial": 6034,
            "element": "anyfunc"
        });
        var __ATPRERUN__ = [];
        var __ATINIT__ = [];
        var __ATMAIN__ = [];
        var __ATEXIT__ = [];
        var __ATPOSTRUN__ = [];
        var __RELOC_FUNCS__ = [];
        var runtimeInitialized = false;
        function keepRuntimeAlive() {
            return noExitRuntime
        }
        function preRun() {
            if (Module["preRun"]) {
                if (typeof Module["preRun"] == "function")
                    Module["preRun"] = [Module["preRun"]];
                while (Module["preRun"].length) {
                    addOnPreRun(Module["preRun"].shift())
                }
            }
            callRuntimeCallbacks(__ATPRERUN__)
        }
        function initRuntime() {
            runtimeInitialized = true;
            callRuntimeCallbacks(__RELOC_FUNCS__);
            if (!Module["noFSInit"] && !FS.init.initialized)
                FS.init();
            FS.ignorePermissions = false;
            TTY.init();
            SOCKFS.root = FS.mount(SOCKFS, {}, null);
            PIPEFS.root = FS.mount(PIPEFS, {}, null);
            callRuntimeCallbacks(__ATINIT__)
        }
        function preMain() {
            callRuntimeCallbacks(__ATMAIN__)
        }
        function postRun() {
            if (Module["postRun"]) {
                if (typeof Module["postRun"] == "function")
                    Module["postRun"] = [Module["postRun"]];
                while (Module["postRun"].length) {
                    addOnPostRun(Module["postRun"].shift())
                }
            }
            callRuntimeCallbacks(__ATPOSTRUN__)
        }
        function addOnPreRun(cb) {
            __ATPRERUN__.unshift(cb)
        }
        function addOnInit(cb) {
            __ATINIT__.unshift(cb)
        }
        function addOnPreMain(cb) {
            __ATMAIN__.unshift(cb)
        }
        function addOnExit(cb) {}
        function addOnPostRun(cb) {
            __ATPOSTRUN__.unshift(cb)
        }
        var runDependencies = 0;
        var runDependencyWatcher = null;
        var dependenciesFulfilled = null;
        function getUniqueRunDependency(id) {
            return id
        }
        function addRunDependency(id) {
            runDependencies++;
            if (Module["monitorRunDependencies"]) {
                Module["monitorRunDependencies"](runDependencies)
            }
        }
        function removeRunDependency(id) {
            runDependencies--;
            if (Module["monitorRunDependencies"]) {
                Module["monitorRunDependencies"](runDependencies)
            }
            if (runDependencies == 0) {
                if (runDependencyWatcher !== null) {
                    clearInterval(runDependencyWatcher);
                    runDependencyWatcher = null
                }
                if (dependenciesFulfilled) {
                    var callback = dependenciesFulfilled;
                    dependenciesFulfilled = null;
                    callback()
                }
            }
        }
        function abort(what) {
            {
                if (Module["onAbort"]) {
                    Module["onAbort"](what)
                }
            }
            what = "Aborted(" + what + ")";
            err(what);
            ABORT = true;
            EXITSTATUS = 1;
            what += ". Build with -sASSERTIONS for more info.";
            var e = new WebAssembly.RuntimeError(what);
            readyPromiseReject(e);
            throw e
        }
        var dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) {
            return filename.startsWith(dataURIPrefix)
        }
        function isFileURI(filename) {
            return filename.startsWith("file://")
        }
        var wasmBinaryFile;
        wasmBinaryFile = "pyodide.asm.wasm";
        if (!isDataURI(wasmBinaryFile)) {
            wasmBinaryFile = locateFile(wasmBinaryFile)
        }
        function getBinary(file) {
            try {
                if (file == wasmBinaryFile && wasmBinary) {
                    return new Uint8Array(wasmBinary)
                }
                if (readBinary) {
                    return readBinary(file)
                }
                throw "both async and sync fetching of the wasm failed"
            } catch (err) {
                abort(err)
            }
        }
        function getBinaryPromise() {
            if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
                if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) {
                    return fetch(wasmBinaryFile, {
                        credentials: "same-origin"
                    }).then(function(response) {
                        if (!response["ok"]) {
                            throw "failed to load wasm binary file at '" + wasmBinaryFile + "'"
                        }
                        return response["arrayBuffer"]()
                    }).catch(function() {
                        return getBinary(wasmBinaryFile)
                    })
                } else {
                    if (readAsync) {
                        return new Promise(function(resolve, reject) {
                            readAsync(wasmBinaryFile, function(response) {
                                resolve(new Uint8Array(response))
                            }, reject)
                        }
                        )
                    }
                }
            }
            return Promise.resolve().then(function() {
                return getBinary(wasmBinaryFile)
            })
        }
        function createWasm() {
            var info = {
                "env": asmLibraryArg,
                "wasi_snapshot_preview1": asmLibraryArg,
                "GOT.mem": new Proxy(asmLibraryArg,GOTHandler),
                "GOT.func": new Proxy(asmLibraryArg,GOTHandler)
            };
            function receiveInstance(instance, module) {
                var exports = instance.exports;
                exports = relocateExports(exports, 1024);
                Module["asm"] = exports;
                var metadata = getDylinkMetadata(module);
                if (metadata.neededDynlibs) {
                    dynamicLibraries = metadata.neededDynlibs.concat(dynamicLibraries)
                }
                mergeLibSymbols(exports, "main");
                addOnInit(Module["asm"]["__wasm_call_ctors"]);
                __RELOC_FUNCS__.push(Module["asm"]["__wasm_apply_data_relocs"]);
                removeRunDependency("wasm-instantiate")
            }
            addRunDependency("wasm-instantiate");
            function receiveInstantiationResult(result) {
                receiveInstance(result["instance"], result["module"])
            }
            function instantiateArrayBuffer(receiver) {
                return getBinaryPromise().then(function(binary) {
                    return WebAssembly.instantiate(binary, info)
                }).then(function(instance) {
                    return instance
                }).then(receiver, function(reason) {
                    err("failed to asynchronously prepare wasm: " + reason);
                    abort(reason)
                })
            }
            function instantiateAsync() {
                if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == "function") {
                    return fetch(wasmBinaryFile, {
                        credentials: "same-origin"
                    }).then(function(response) {
                        var result = WebAssembly.instantiateStreaming(response, info);
                        return result.then(receiveInstantiationResult, function(reason) {
                            err("wasm streaming compile failed: " + reason);
                            err("falling back to ArrayBuffer instantiation");
                            return instantiateArrayBuffer(receiveInstantiationResult)
                        })
                    })
                } else {
                    return instantiateArrayBuffer(receiveInstantiationResult)
                }
            }
            if (Module["instantiateWasm"]) {
                try {
                    var exports = Module["instantiateWasm"](info, receiveInstance);
                    return exports
                } catch (e) {
                    err("Module.instantiateWasm callback failed with error: " + e);
                    readyPromiseReject(e)
                }
            }
            instantiateAsync().catch(readyPromiseReject);
            return {}
        }
        var tempDouble;
        var tempI64;
        var ASM_CONSTS = {
            3081509: ()=>{
                throw new Error("intentionally triggered fatal error!")
            }
            ,
            3081566: $0=>{
                Hiwire.get_value($0)()
            }
            ,
            3081589: ($0,$1)=>{
                Hiwire.get_value($1).push(...Hiwire.get_value($0))
            }
            ,
            3081645: $0=>{
                for (let v of Hiwire.get_value($0)) {
                    if (typeof v.destroy === "function") {
                        try {
                            v.destroy()
                        } catch (e) {
                            console.warn("Weird error:", e)
                        }
                    }
                }
            }
            ,
            3081794: ()=>{
                API.fatal_loading_error("Failed to import _pyodide module.")
            }
            ,
            3081855: ()=>{
                API.fatal_loading_error("Failed to create core module.")
            }
            ,
            3081912: ()=>{
                API.fatal_loading_error("Failed to initialize module", "error_handling", ".")
            }
            ,
            3081990: ()=>{
                API.fatal_loading_error("Failed to initialize module ", "hiwire", ".")
            }
            ,
            3082061: ()=>{
                API.fatal_loading_error("Failed to initialize module ", "docstring", ".")
            }
            ,
            3082135: ()=>{
                API.fatal_loading_error("Failed to initialize module ", "js2python", ".")
            }
            ,
            3082209: ()=>{
                API.fatal_loading_error("Failed to initialize module", "python2js", ".")
            }
            ,
            3082282: ()=>{
                API.fatal_loading_error("Failed to initialize module ", "python2js_buffer", ".")
            }
            ,
            3082363: ()=>{
                API.fatal_loading_error("Failed to initialize module", "JsProxy", ".")
            }
            ,
            3082434: ()=>{
                API.fatal_loading_error("Failed to initialize module", "pyproxy", ".")
            }
            ,
            3082505: ()=>{
                API.fatal_loading_error("Failed to add '_pyodide_core' module to modules dict.")
            }
            ,
            3082586: ()=>{
                API.fatal_loading_error("Failed to create _pyodide proxy.")
            }
            ,
            3082646: $0=>{
                API._pyodide = Hiwire.pop_value($0)
            }
            ,
            3082687: $0=>{
                if (!$0) {
                    AL.alcErr = 40964;
                    return 1
                }
            }
            ,
            3082735: $0=>{
                if (!AL.currentCtx) {
                    err("alGetProcAddress() called without a valid context");
                    return 1
                }
                if (!$0) {
                    AL.currentCtx.err = 40963;
                    return 1
                }
            }
        };
        function console_error(msg) {
            let jsmsg = UTF8ToString(msg);
            console.error(jsmsg)
        }
        function console_error_obj(obj) {
            console.error(Hiwire.get_value(obj))
        }
        function new_error(msg, err) {
            "use strict";
            try {
                return Hiwire.new_value(new API.PythonError(UTF8ToString(msg),err))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function fail_test() {
            API.fail_test = true
        }
        function hiwire_to_bool(val) {
            return !!Hiwire.get_value(val)
        }
        function hiwire_init() {
            "use strict";
            try {
                let _hiwire = {
                    objects: new Map,
                    obj_to_key: new Map,
                    counter: new Uint32Array([1])
                };
                Hiwire.UNDEFINED = HEAPU8[_Js_undefined + 0];
                _hiwire.objects.set(Hiwire.UNDEFINED, [undefined, -1]);
                _hiwire.obj_to_key.set(undefined, Hiwire.UNDEFINED);
                Hiwire.JSNULL = HEAPU8[_Js_null + 0];
                _hiwire.objects.set(Hiwire.JSNULL, [null, -1]);
                _hiwire.obj_to_key.set(null, Hiwire.JSNULL);
                Hiwire.TRUE = HEAPU8[_Js_true + 0];
                _hiwire.objects.set(Hiwire.TRUE, [!!1, -1]);
                _hiwire.obj_to_key.set(!!1, Hiwire.TRUE);
                Hiwire.FALSE = HEAPU8[_Js_false + 0];
                _hiwire.objects.set(Hiwire.FALSE, [!!0, -1]);
                _hiwire.obj_to_key.set(!!0, Hiwire.FALSE);
                let hiwire_next_permanent = HEAPU8[_Js_novalue] + 2;
                Hiwire.new_value = function(jsval) {
                    let idval = _hiwire.obj_to_key.get(jsval);
                    if (idval !== undefined) {
                        _hiwire.objects.get(idval)[1]++;
                        return idval
                    }
                    while (_hiwire.objects.has(_hiwire.counter[0])) {
                        _hiwire.counter[0] += 2
                    }
                    idval = _hiwire.counter[0];
                    _hiwire.objects.set(idval, [jsval, 1]);
                    _hiwire.obj_to_key.set(jsval, idval);
                    _hiwire.counter[0] += 2;
                    return idval
                }
                ;
                Hiwire.intern_object = function(obj) {
                    let id = hiwire_next_permanent;
                    hiwire_next_permanent += 2;
                    _hiwire.objects.set(id, [obj, -1]);
                    return id
                }
                ;
                Hiwire.num_keys = function() {
                    return Array.from(_hiwire.objects.keys()).filter(x=>x % 2).length
                }
                ;
                Hiwire.get_value = function(idval) {
                    if (!idval) {
                        API.fail_test = !!1;
                        if (_PyErr_Occurred()) {
                            let exc = _wrap_exception();
                            let e = Hiwire.pop_value(exc);
                            console.error(`Pyodide internal error: Argument '${idval}' to hiwire.get_value is falsy. ` + "This was probably because the Python error indicator was set when get_value was called. " + "The Python error that caused this was:", e);
                            throw e
                        } else {
                            console.error(`Pyodide internal error: Argument '${idval}' to hiwire.get_value is falsy` + " (but error indicator is not set).");
                            throw new Error(`Pyodide internal error: Argument '${idval}' to hiwire.get_value is falsy` + " (but error indicator is not set).")
                        }
                    }
                    if (!_hiwire.objects.has(idval)) {
                        API.fail_test = !!1;
                        console.error(`Pyodide internal error: Undefined id ${idval}`);
                        throw new Error(`Undefined id ${idval}`)
                    }
                    return _hiwire.objects.get(idval)[0]
                }
                ;
                Hiwire.decref = function(idval) {
                    if ((idval & 1) === 0) {
                        return
                    }
                    let pair = _hiwire.objects.get(idval);
                    let new_refcnt = --pair[1];
                    if (new_refcnt === 0) {
                        _hiwire.objects.delete(idval);
                        _hiwire.obj_to_key.delete(pair[0])
                    }
                }
                ;
                Hiwire.incref = function(idval) {
                    if ((idval & 1) === 0) {
                        return
                    }
                    _hiwire.objects.get(idval)[1]++
                }
                ;
                Hiwire.pop_value = function(idval) {
                    let result = Hiwire.get_value(idval);
                    Hiwire.decref(idval);
                    return result
                }
                ;
                Hiwire.isPromise = function(obj) {
                    try {
                        return !!obj && typeof obj.then === "function"
                    } catch (e) {
                        return !!0
                    }
                }
                ;
                API.typedArrayAsUint8Array = function(arg) {
                    if (ArrayBuffer.isView(arg)) {
                        return new Uint8Array(arg.buffer,arg.byteOffset,arg.byteLength)
                    } else {
                        return new Uint8Array(arg)
                    }
                }
                ;
                {
                    let dtypes_str = ["b", "B", "h", "H", "i", "I", "f", "d"].join(String.fromCharCode(0));
                    let dtypes_ptr = stringToNewUTF8(dtypes_str);
                    let dtypes_map = {};
                    for (let[idx,val] of Object.entries(dtypes_str)) {
                        dtypes_map[val] = dtypes_ptr + Number(idx)
                    }
                    let buffer_datatype_map = new Map([["Int8Array", [dtypes_map["b"], 1, !!1]], ["Uint8Array", [dtypes_map["B"], 1, !!1]], ["Uint8ClampedArray", [dtypes_map["B"], 1, !!1]], ["Int16Array", [dtypes_map["h"], 2, !!1]], ["Uint16Array", [dtypes_map["H"], 2, !!1]], ["Int32Array", [dtypes_map["i"], 4, !!1]], ["Uint32Array", [dtypes_map["I"], 4, !!1]], ["Float32Array", [dtypes_map["f"], 4, !!1]], ["Float64Array", [dtypes_map["d"], 8, !!1]], ["DataView", [dtypes_map["B"], 1, !!0]], ["ArrayBuffer", [dtypes_map["B"], 1, !!0]]]);
                    Module.get_buffer_datatype = function(jsobj) {
                        return buffer_datatype_map.get(jsobj.constructor.name) || [0, 0, !!0]
                    }
                }
                if (globalThis.BigInt) {
                    Module.BigInt = BigInt
                } else {
                    Module.BigInt = Number
                }
                return 0
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function hiwire_incref(idval) {
            if (idval & 1) {
                Hiwire.incref(idval)
            }
            return idval
        }
        function hiwire_decref(idval) {
            Hiwire.decref(idval)
        }
        function hiwire_int(val) {
            "use strict";
            try {
                return Hiwire.new_value(val)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_int_from_digits(digits, ndigits) {
            "use strict";
            try {
                let result = BigInt(0);
                for (let i = 0; i < ndigits; i++) {
                    result += BigInt(HEAPU32[(digits >> 2) + i]) << BigInt(32 * i)
                }
                result += BigInt(HEAPU32[(digits >> 2) + ndigits - 1] & 2147483648) << BigInt(1 + 32 * (ndigits - 1));
                if (-Number.MAX_SAFE_INTEGER < result && result < Number.MAX_SAFE_INTEGER) {
                    result = Number(result)
                }
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_double(val) {
            "use strict";
            try {
                return Hiwire.new_value(val)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_string_ucs4(ptr, len) {
            "use strict";
            try {
                let jsstr = "";
                for (let i = 0; i < len; ++i) {
                    jsstr += String.fromCodePoint(HEAPU32[(ptr >> 2) + i])
                }
                return Hiwire.new_value(jsstr)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_string_ucs2(ptr, len) {
            "use strict";
            try {
                let jsstr = "";
                for (let i = 0; i < len; ++i) {
                    jsstr += String.fromCharCode(HEAPU16[(ptr >> 1) + i])
                }
                return Hiwire.new_value(jsstr)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_string_ucs1(ptr, len) {
            "use strict";
            try {
                let jsstr = "";
                for (let i = 0; i < len; ++i) {
                    jsstr += String.fromCharCode(HEAPU8[ptr + i])
                }
                return Hiwire.new_value(jsstr)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_string_utf8(ptr) {
            "use strict";
            try {
                return Hiwire.new_value(UTF8ToString(ptr))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_string_ascii(ptr) {
            "use strict";
            try {
                return Hiwire.new_value(AsciiToString(ptr))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_throw_error(iderr) {
            throw Hiwire.pop_value(iderr)
        }
        function hiwire_call(idfunc, idargs) {
            "use strict";
            try {
                let jsfunc = Hiwire.get_value(idfunc);
                let jsargs = Hiwire.get_value(idargs);
                return Hiwire.new_value(jsfunc(...jsargs))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_call_OneArg(idfunc, idarg) {
            "use strict";
            try {
                let jsfunc = Hiwire.get_value(idfunc);
                let jsarg = Hiwire.get_value(idarg);
                return Hiwire.new_value(jsfunc(jsarg))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_call_bound(idfunc, idthis, idargs) {
            "use strict";
            try {
                let func = Hiwire.get_value(idfunc);
                let this_;
                if (idthis === 0) {
                    this_ = null
                } else {
                    this_ = Hiwire.get_value(idthis)
                }
                let args = Hiwire.get_value(idargs);
                return Hiwire.new_value(func.apply(this_, args))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_HasMethod(obj_id, name) {
            "use strict";
            try {
                let obj = Hiwire.get_value(obj_id);
                return obj && typeof obj[Hiwire.get_value(name)] === "function"
            } catch (e) {
                return !!0
            }
        }
        function hiwire_CallMethodString(idobj, name, idargs) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let jsname = UTF8ToString(name);
                let jsargs = Hiwire.get_value(idargs);
                return Hiwire.new_value(jsobj[jsname](...jsargs))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_CallMethod(idobj, name, idargs) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let jsname = Hiwire.get_value(name);
                let jsargs = Hiwire.get_value(idargs);
                return Hiwire.new_value(jsobj[jsname](...jsargs))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_CallMethod_OneArg(idobj, name, idarg) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let jsname = Hiwire.get_value(name);
                let jsarg = Hiwire.get_value(idarg);
                return Hiwire.new_value(jsobj[jsname](jsarg))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_construct(idobj, idargs) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let jsargs = Hiwire.get_value(idargs);
                return Hiwire.new_value(Reflect.construct(jsobj, jsargs))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_has_length(idobj) {
            "use strict";
            try {
                let val = Hiwire.get_value(idobj);
                return typeof val.size === "number" || typeof val.length === "number" && typeof val !== "function"
            } catch (e) {
                return !!0
            }
        }
        function hiwire_get_length_helper(idobj) {
            "use strict";
            try {
                let val = Hiwire.get_value(idobj);
                let result;
                if (typeof val.size === "number") {
                    result = val.size
                } else if (typeof val.length === "number") {
                    result = val.length
                } else {
                    return -2
                }
                if (result < 0) {
                    return -3
                }
                if (result > 2147483647) {
                    return -4
                }
                return result
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function hiwire_get_length_string(idobj) {
            "use strict";
            try {
                const val = Hiwire.get_value(idobj);
                let result;
                if (typeof val.size === "number") {
                    result = val.size
                } else if (typeof val.length === "number") {
                    result = val.length
                }
                return stringToNewUTF8(" " + result.toString())
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_get_bool(idobj) {
            "use strict";
            try {
                let val = Hiwire.get_value(idobj);
                if (!val) {
                    return !!0
                }
                if (val.size === 0) {
                    if (/HTML[A-Za-z]*Element/.test(Object.prototype.toString.call(val))) {
                        return !!1
                    }
                    return !!0
                }
                if (val.length === 0 && JsArray_Check(idobj)) {
                    return !!0
                }
                if (val.byteLength === 0) {
                    return !!0
                }
                return !!1
            } catch (e) {
                return !!0
            }
        }
        function hiwire_is_pyproxy(idobj) {
            "use strict";
            try {
                return API.isPyProxy(Hiwire.get_value(idobj))
            } catch (e) {
                return !!0
            }
        }
        function hiwire_is_function(idobj) {
            "use strict";
            try {
                return typeof Hiwire.get_value(idobj) === "function"
            } catch (e) {
                return !!0
            }
        }
        function hiwire_is_comlink_proxy(idobj) {
            "use strict";
            try {
                let value = Hiwire.get_value(idobj);
                return !!(API.Comlink && value[API.Comlink.createEndpoint])
            } catch (e) {
                return !!0
            }
        }
        function hiwire_is_error(idobj) {
            "use strict";
            try {
                let value = Hiwire.get_value(idobj);
                return !!(value && typeof value.stack === "string" && typeof value.message === "string")
            } catch (e) {
                return !!0
            }
        }
        function hiwire_is_promise(idobj) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                return Hiwire.isPromise(obj)
            } catch (e) {
                return !!0
            }
        }
        function hiwire_resolve_promise(idobj) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                let result = Promise.resolve(obj);
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_to_string(idobj) {
            "use strict";
            try {
                return Hiwire.new_value(Hiwire.get_value(idobj).toString())
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_typeof(idobj) {
            return Hiwire.new_value(typeof Hiwire.get_value(idobj))
        }
        function hiwire_constructor_name(idobj) {
            "use strict";
            try {
                return stringToNewUTF8(Hiwire.get_value(idobj).constructor.name)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_less_than(ida, idb) {
            "use strict";
            try {
                return !!(Hiwire.get_value(ida) < Hiwire.get_value(idb))
            } catch (e) {
                return !!0
            }
        }
        function hiwire_less_than_equal(ida, idb) {
            "use strict";
            try {
                return !!(Hiwire.get_value(ida) <= Hiwire.get_value(idb))
            } catch (e) {
                return !!0
            }
        }
        function hiwire_equal(ida, idb) {
            "use strict";
            try {
                return !!(Hiwire.get_value(ida) === Hiwire.get_value(idb))
            } catch (e) {
                return !!0
            }
        }
        function hiwire_not_equal(ida, idb) {
            "use strict";
            try {
                return !!(Hiwire.get_value(ida) !== Hiwire.get_value(idb))
            } catch (e) {
                return !!0
            }
        }
        function hiwire_greater_than(ida, idb) {
            "use strict";
            try {
                return !!(Hiwire.get_value(ida) > Hiwire.get_value(idb))
            } catch (e) {
                return !!0
            }
        }
        function hiwire_greater_than_equal(ida, idb) {
            "use strict";
            try {
                return !!(Hiwire.get_value(ida) >= Hiwire.get_value(idb))
            } catch (e) {
                return !!0
            }
        }
        function hiwire_is_iterator(idobj) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                return typeof jsobj.next === "function"
            } catch (e) {
                return !!0
            }
        }
        function hiwire_next(idobj, result_ptr) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let {done: done, value: value} = jsobj.next();
                let result_id = Hiwire.new_value(value);
                HEAPU32[(result_ptr >> 2) + 0] = result_id;
                return done
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function hiwire_is_iterable(idobj) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                return typeof jsobj[Symbol.iterator] === "function"
            } catch (e) {
                return !!0
            }
        }
        function hiwire_get_iterator(idobj) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                return Hiwire.new_value(jsobj[Symbol.iterator]())
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_reversed_iterator(idarray) {
            "use strict";
            try {
                if (!Module._reversedIterator) {
                    Module._reversedIterator = class ReversedIterator {
                        constructor(array) {
                            this._array = array;
                            this._i = array.length - 1
                        }
                        __length_hint__() {
                            return this._array.length
                        }
                        [Symbol.toStringTag]() {
                            return "ReverseIterator"
                        }
                        next() {
                            const i = this._i;
                            const a = this._array;
                            const done = i < 0;
                            const value = done ? undefined : a[i];
                            this._i--;
                            return {
                                done: done,
                                value: value
                            }
                        }
                    }
                }
                let array = Hiwire.get_value(idarray);
                return Hiwire.new_value(new Module._reversedIterator(array))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function hiwire_is_typedarray(idobj) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                return ArrayBuffer.isView(jsobj) || jsobj.constructor && jsobj.constructor.name === "ArrayBuffer"
            } catch (e) {
                return !!0
            }
        }
        function hiwire_assign_to_ptr(idobj, ptr) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                Module.HEAPU8.set(API.typedArrayAsUint8Array(jsobj), ptr)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function hiwire_assign_from_ptr(idobj, ptr) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                API.typedArrayAsUint8Array(jsobj).set(Module.HEAPU8.subarray(ptr, ptr + jsobj.byteLength))
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function hiwire_read_from_file(idobj, fd) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let uint8_buffer = API.typedArrayAsUint8Array(jsobj);
                let stream = Module.FS.streams[fd];
                Module.FS.read(stream, uint8_buffer, 0, uint8_buffer.byteLength)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function hiwire_write_to_file(idobj, fd) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let uint8_buffer = API.typedArrayAsUint8Array(jsobj);
                let stream = Module.FS.streams[fd];
                Module.FS.write(stream, uint8_buffer, 0, uint8_buffer.byteLength)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function hiwire_into_file(idobj, fd) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let uint8_buffer = API.typedArrayAsUint8Array(jsobj);
                let stream = Module.FS.streams[fd];
                Module.FS.write(stream, uint8_buffer, 0, uint8_buffer.byteLength, undefined, !!1)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function hiwire_get_buffer_info(idobj, byteLength_ptr, format_ptr, size_ptr, checked_ptr) {
            let jsobj = Hiwire.get_value(idobj);
            let byteLength = jsobj.byteLength;
            let[format_utf8,size,checked] = Module.get_buffer_datatype(jsobj);
            HEAPU32[(byteLength_ptr >> 2) + 0] = byteLength;
            HEAPU32[(format_ptr >> 2) + 0] = format_utf8;
            HEAPU32[(size_ptr >> 2) + 0] = size;
            HEAPU8[checked_ptr + 0] = checked
        }
        function hiwire_subarray(idarr, start, end) {
            "use strict";
            try {
                let jsarr = Hiwire.get_value(idarr);
                let jssub = jsarr.subarray(start, end);
                return Hiwire.new_value(jssub)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsArray_Check(idobj) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                if (Array.isArray(obj)) {
                    return !!1
                }
                let typeTag = Object.prototype.toString.call(obj);
                if (typeTag === "[object HTMLCollection]" || typeTag === "[object NodeList]") {
                    return !!1
                }
                if (ArrayBuffer.isView(obj) && obj.constructor.name !== "DataView") {
                    return !!1
                }
                return !!0
            } catch (e) {
                return !!0
            }
        }
        function JsArray_New() {
            "use strict";
            try {
                return Hiwire.new_value([])
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsArray_Push(idarr, idval) {
            "use strict";
            try {
                Hiwire.get_value(idarr).push(Hiwire.get_value(idval))
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsArray_Push_unchecked(idarr, idval) {
            const arr = Hiwire.get_value(idarr);
            arr.push(Hiwire.get_value(idval));
            return arr.length - 1
        }
        function JsArray_Get(idobj, idx) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                let result = obj[idx];
                if (result === undefined && !(idx in obj)) {
                    return 0
                }
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsArray_Set(idobj, idx, idval) {
            "use strict";
            try {
                Hiwire.get_value(idobj)[idx] = Hiwire.get_value(idval)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsArray_Delete(idobj, idx) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                if (idx < 0 || idx >= obj.length) {
                    return -1
                }
                obj.splice(idx, 1)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsArray_Splice(idobj, idx) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                if (idx < 0 || idx >= obj.length) {
                    return 0
                }
                return Hiwire.new_value(obj.splice(idx, 1))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsArray_slice(idobj, length, start, stop, step) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                let result;
                if (step === 1) {
                    result = obj.slice(start, stop)
                } else {
                    result = Array.from({
                        length: length
                    }, (_,i)=>obj[start + i * step])
                }
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsArray_slice_assign(idobj, slicelength, start, stop, step, values_length, values) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                let jsvalues = [];
                for (let i = 0; i < values_length; i++) {
                    let ref = _python2js(HEAPU32[(values >> 2) + i]);
                    if (ref === 0) {
                        return -1
                    }
                    jsvalues.push(Hiwire.pop_value(ref))
                }
                if (step === 1) {
                    obj.splice(start, slicelength, ...jsvalues)
                } else {
                    if (values !== 0) {
                        for (let i = 0; i < slicelength; i++) {
                            obj.splice(start + i * step, 1, jsvalues[i])
                        }
                    } else {
                        for (let i = slicelength - 1; i >= 0; i--) {
                            obj.splice(start + i * step, 1)
                        }
                    }
                }
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsArray_Clear(idobj) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                obj.splice(0, obj.length)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsObject_New() {
            "use strict";
            try {
                return Hiwire.new_value({})
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsObject_GetString(idobj, ptrkey) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let jskey = UTF8ToString(ptrkey);
                let result = jsobj[jskey];
                if (result === undefined && !(jskey in jsobj)) {
                    return 0
                }
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsObject_SetString(idobj, ptrkey, idval) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let jskey = UTF8ToString(ptrkey);
                let jsval = Hiwire.get_value(idval);
                jsobj[jskey] = jsval
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsObject_DeleteString(idobj, ptrkey) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let jskey = UTF8ToString(ptrkey);
                delete jsobj[jskey]
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsObject_Dir(idobj) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                let result = [];
                do {
                    result.push(...Object.getOwnPropertyNames(jsobj).filter(s=>{
                        let c = s.charCodeAt(0);
                        return c < 48 || c > 57
                    }
                    ))
                } while (jsobj = Object.getPrototypeOf(jsobj));
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsObject_Entries(idobj) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                return Hiwire.new_value(Object.entries(jsobj))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsObject_Keys(idobj) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                return Hiwire.new_value(Object.keys(jsobj))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsObject_Values(idobj) {
            "use strict";
            try {
                let jsobj = Hiwire.get_value(idobj);
                return Hiwire.new_value(Object.values(jsobj))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsString_InternFromCString(str) {
            "use strict";
            try {
                let jsstring = UTF8ToString(str);
                return Hiwire.intern_object(jsstring)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsMap_New() {
            "use strict";
            try {
                return Hiwire.new_value(new Map)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsMap_Set(mapid, keyid, valueid) {
            "use strict";
            try {
                let map = Hiwire.get_value(mapid);
                let key = Hiwire.get_value(keyid);
                let value = Hiwire.get_value(valueid);
                map.set(key, value)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsSet_New() {
            "use strict";
            try {
                return Hiwire.new_value(new Set)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsSet_Add(mapid, keyid) {
            "use strict";
            try {
                let set = Hiwire.get_value(mapid);
                let key = Hiwire.get_value(keyid);
                set.add(key)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function js2python(id) {
            "use strict";
            try {
                let value = Hiwire.get_value(id);
                let result = Module.js2python_convertImmutable(value, id);
                if (result !== undefined) {
                    return result
                }
                return _JsProxy_create(id)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function js2python_convert(id, depth, default_converter) {
            "use strict";
            try {
                let defaultConverter = default_converter ? Module.hiwire.get_value(default_converter) : undefined;
                return Module.js2python_convert(id, {
                    depth: depth,
                    defaultConverter: defaultConverter
                })
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function js2python_init() {
            "use strict";
            try {
                {
                    0;
                    let PropagateError = Module._PropagatePythonError;
                    function js2python_string(value) {
                        let max_code_point = 0;
                        let num_code_points = 0;
                        for (let c of value) {
                            num_code_points++;
                            let code_point = c.codePointAt(0);
                            max_code_point = code_point > max_code_point ? code_point : max_code_point
                        }
                        let result = _PyUnicode_New(num_code_points, max_code_point);
                        if (result === 0) {
                            throw new PropagateError
                        }
                        let ptr = _PyUnicode_Data(result);
                        if (max_code_point > 65535) {
                            for (let c of value) {
                                HEAPU32[ptr / 4] = c.codePointAt(0);
                                ptr += 4
                            }
                        } else if (max_code_point > 255) {
                            for (let c of value) {
                                HEAPU16[ptr / 2] = c.codePointAt(0);
                                ptr += 2
                            }
                        } else {
                            for (let c of value) {
                                HEAPU8[ptr] = c.codePointAt(0);
                                ptr += 1
                            }
                        }
                        return result
                    }
                    function js2python_bigint(value) {
                        let value_orig = value;
                        let length = 0;
                        if (value < 0) {
                            value = -value
                        }
                        value <<= BigInt(1);
                        while (value) {
                            length++;
                            value >>= BigInt(32)
                        }
                        let stackTop = stackSave();
                        let ptr = stackAlloc(length * 4);
                        value = value_orig;
                        for (let i = 0; i < length; i++) {
                            HEAPU32[(ptr >> 2) + i] = Number(value & BigInt(4294967295));
                            value >>= BigInt(32)
                        }
                        let result = __PyLong_FromByteArray(ptr, length * 4, !!1, !!1);
                        stackRestore(stackTop);
                        return result
                    }
                    function js2python_convertImmutable(value, id) {
                        let result = js2python_convertImmutableInner(value, id);
                        if (result === 0) {
                            throw new PropagateError
                        }
                        return result
                    }
                    Module.js2python_convertImmutable = js2python_convertImmutable;
                    function js2python_convertImmutableInner(value, id) {
                        let type = typeof value;
                        if (type === "string") {
                            return js2python_string(value)
                        } else if (type === "number") {
                            if (Number.isSafeInteger(value)) {
                                return _PyLong_FromDouble(value)
                            } else {
                                return _PyFloat_FromDouble(value)
                            }
                        } else if (type === "bigint") {
                            return js2python_bigint(value)
                        } else if (value === undefined || value === null) {
                            return __js2python_none()
                        } else if (value === !!1) {
                            return __js2python_true()
                        } else if (value === !!0) {
                            return __js2python_false()
                        } else if (API.isPyProxy(value)) {
                            if (value.$$props.roundtrip) {
                                if (id === undefined) {
                                    id = Hiwire.new_value(value)
                                }
                                return _JsProxy_create(id)
                            } else {
                                return __js2python_pyproxy(Module.PyProxy_getPtr(value))
                            }
                        }
                        return undefined
                    }
                    function js2python_convertList(obj, context) {
                        let list = _PyList_New(obj.length);
                        if (list === 0) {
                            return 0
                        }
                        let entryid = 0;
                        let item = 0;
                        try {
                            context.cache.set(obj, list);
                            for (let i = 0; i < obj.length; i++) {
                                entryid = Hiwire.new_value(obj[i]);
                                item = js2python_convert_with_context(entryid, context);
                                _Py_IncRef(item);
                                if (_PyList_SetItem(list, i, item) === -1) {
                                    throw new PropagateError
                                }
                                Hiwire.decref(entryid);
                                entryid = 0;
                                _Py_DecRef(item);
                                item = 0
                            }
                        } catch (e) {
                            Hiwire.decref(entryid);
                            _Py_DecRef(item);
                            _Py_DecRef(list);
                            throw e
                        }
                        return list
                    }
                    function js2python_convertMap(obj, entries, context) {
                        let dict = _PyDict_New();
                        if (dict === 0) {
                            return 0
                        }
                        let key_py = 0;
                        let value_id = 0;
                        let value_py = 0;
                        try {
                            context.cache.set(obj, dict);
                            for (let[key_js,value_js] of entries) {
                                key_py = js2python_convertImmutable(key_js);
                                if (key_py === undefined) {
                                    let key_type = key_js.constructor && key_js.constructor.name || typeof key_js;
                                    throw new Error(`Cannot use key of type ${key_type} as a key to a Python dict`)
                                }
                                value_id = Hiwire.new_value(value_js);
                                value_py = js2python_convert_with_context(value_id, context);
                                if (_PyDict_SetItem(dict, key_py, value_py) === -1) {
                                    throw new PropagateError
                                }
                                _Py_DecRef(key_py);
                                key_py = 0;
                                Hiwire.decref(value_id);
                                value_id = 0;
                                _Py_DecRef(value_py);
                                value_py = 0
                            }
                        } catch (e) {
                            _Py_DecRef(key_py);
                            Hiwire.decref(value_id);
                            _Py_DecRef(value_py);
                            _Py_DecRef(dict);
                            throw e
                        }
                        return dict
                    }
                    function js2python_convertSet(obj, context) {
                        let set = _PySet_New(0);
                        if (set === 0) {
                            return 0
                        }
                        let key_py = 0;
                        try {
                            context.cache.set(obj, set);
                            for (let key_js of obj) {
                                key_py = js2python_convertImmutable(key_js);
                                if (key_py === undefined) {
                                    let key_type = key_js.constructor && key_js.constructor.name || typeof key_js;
                                    throw new Error(`Cannot use key of type ${key_type} as a key to a Python set`)
                                }
                                let errcode = _PySet_Add(set, key_py);
                                if (errcode === -1) {
                                    throw new PropagateError
                                }
                                _Py_DecRef(key_py);
                                key_py = 0
                            }
                        } catch (e) {
                            _Py_DecRef(key_py);
                            _Py_DecRef(set);
                            throw e
                        }
                        return set
                    }
                    function checkBoolIntCollision(obj, ty) {
                        if (obj.has(1) && obj.has(!!1)) {
                            throw new Error(`Cannot faithfully convert ${ty} into Python since it ` + "contains both 1 and true as keys.")
                        }
                        if (obj.has(0) && obj.has(!!0)) {
                            throw new Error(`Cannot faithfully convert ${ty} into Python since it ` + "contains both 0 and false as keys.")
                        }
                    }
                    function js2python_convertOther(id, value, context) {
                        let toStringTag = Object.prototype.toString.call(value);
                        if (Array.isArray(value) || value === "[object HTMLCollection]" || value === "[object NodeList]") {
                            return js2python_convertList(value, context)
                        }
                        if (toStringTag === "[object Map]" || value instanceof Map) {
                            checkBoolIntCollision(value, "Map");
                            return js2python_convertMap(value, value.entries(), context)
                        }
                        if (toStringTag === "[object Set]" || value instanceof Set) {
                            checkBoolIntCollision(value, "Set");
                            return js2python_convertSet(value, context)
                        }
                        if (toStringTag === "[object Object]" && (value.constructor === undefined || value.constructor.name === "Object")) {
                            return js2python_convertMap(value, Object.entries(value), context)
                        }
                        if (toStringTag === "[object ArrayBuffer]" || ArrayBuffer.isView(value)) {
                            let[format_utf8,itemsize] = Module.get_buffer_datatype(value);
                            return _JsBuffer_CopyIntoMemoryView(id, value.byteLength, format_utf8, itemsize)
                        }
                        return undefined
                    }
                    function js2python_convert_with_context(id, context) {
                        let value = Hiwire.get_value(id);
                        let result;
                        result = js2python_convertImmutable(value, id);
                        if (result !== undefined) {
                            return result
                        }
                        if (context.depth === 0) {
                            return _JsProxy_create(id)
                        }
                        result = context.cache.get(value);
                        if (result !== undefined) {
                            return result
                        }
                        context.depth--;
                        try {
                            result = js2python_convertOther(id, value, context);
                            if (result !== undefined) {
                                return result
                            }
                            if (context.defaultConverter === undefined) {
                                return _JsProxy_create(id)
                            }
                            let result_js = context.defaultConverter(value, context.converter, context.cacheConversion);
                            result = js2python_convertImmutable(result_js);
                            if (API.isPyProxy(result_js)) {
                                result_js.destroy()
                            }
                            if (result !== undefined) {
                                return result
                            }
                            let result_id = Module.hiwire.new_value(result_js);
                            result = _JsProxy_create(result_id);
                            Module.hiwire.decref(result_id);
                            return result
                        } finally {
                            context.depth++
                        }
                    }
                    function js2python_convert(id, {depth: depth, defaultConverter: defaultConverter}) {
                        let context = {
                            cache: new Map,
                            depth: depth,
                            defaultConverter: defaultConverter,
                            converter(x) {
                                let id = Module.hiwire.new_value(x);
                                try {
                                    return Module.pyproxy_new(js2python_convert_with_context(id, context))
                                } finally {
                                    Module.hiwire.decref(id)
                                }
                            },
                            cacheConversion(input, output) {
                                if (API.isPyProxy(output)) {
                                    context.cache.set(input, Module.PyProxy_getPtr(output))
                                } else {
                                    throw new Error("Second argument should be a PyProxy!")
                                }
                            }
                        };
                        return js2python_convert_with_context(id, context)
                    }
                    Module.js2python_convert = js2python_convert
                }
                return 0
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsArray_index_helper(list, value, start, stop) {
            "use strict";
            try {
                let o = Hiwire.get_value(list);
                let v = Hiwire.get_value(value);
                for (let i = start; i < stop; i++) {
                    if (o[i] === v) {
                        return i
                    }
                }
                return -1
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsArray_count_helper(list, value) {
            "use strict";
            try {
                let o = Hiwire.get_value(list);
                let v = Hiwire.get_value(value);
                let result = 0;
                for (let i = 0; i < o.length; i++) {
                    if (o[i] === v) {
                        result++
                    }
                }
                return result
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsArray_reverse_helper(arrayid) {
            "use strict";
            try {
                Hiwire.get_value(arrayid).reverse()
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function JsProxy_subscript_js(idobj, idkey) {
            "use strict";
            try {
                let obj = Hiwire.get_value(idobj);
                let key = Hiwire.get_value(idkey);
                let result = obj.get(key);
                if (result === undefined) {
                    if (obj.has && typeof obj.has === "function" && !obj.has(key)) {
                        return 0
                    }
                }
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function get_async_js_call_done_callback(proxies_id) {
            "use strict";
            try {
                let proxies = Hiwire.get_value(proxies_id);
                return Hiwire.new_value(function(result) {
                    let msg = "This borrowed proxy was automatically destroyed " + "at the end of an asynchronous function call. Try " + "using create_proxy or create_once_callable.";
                    for (let px of proxies) {
                        Module.pyproxy_destroy(px, msg)
                    }
                    if (API.isPyProxy(result)) {
                        Module.pyproxy_destroy(result, msg)
                    }
                })
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsBuffer_DecodeString_js(jsbuffer_id, encoding) {
            "use strict";
            try {
                let buffer = Hiwire.get_value(jsbuffer_id);
                let encoding_js;
                if (encoding) {
                    encoding_js = UTF8ToString(encoding)
                }
                let decoder = new TextDecoder(encoding_js,{
                    fatal: !!1,
                    ignoreBOM: !!1
                });
                let res;
                try {
                    res = decoder.decode(buffer)
                } catch (e) {
                    if (e instanceof TypeError) {
                        return 0
                    }
                    throw e
                }
                return Hiwire.new_value(res)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsDoubleProxy_unwrap_helper(id) {
            "use strict";
            try {
                return Module.PyProxy_getPtr(Hiwire.get_value(id))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function JsProxy_array_detect(idobj) {
            "use strict";
            try {
                try {
                    let obj = Hiwire.get_value(idobj);
                    if (Array.isArray(obj)) {
                        return 1 << 10
                    }
                    let typeTag = Object.prototype.toString.call(obj);
                    if (typeTag === "[object HTMLCollection]" || typeTag === "[object NodeList]") {
                        return 1 << 11
                    }
                    if (ArrayBuffer.isView(obj) && obj.constructor.name !== "DataView") {
                        return 1 << 12
                    }
                    return 0
                } catch (e) {
                    return 0
                }
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function pyproxy_Check(x) {
            if (x == 0) {
                return false
            }
            let val = Hiwire.get_value(x);
            return API.isPyProxy(val)
        }
        function pyproxy_AsPyObject(x) {
            if (x == 0) {
                return 0
            }
            let val = Hiwire.get_value(x);
            if (!API.isPyProxy(val)) {
                return 0
            }
            return Module.PyProxy_getPtr(val)
        }
        function destroy_proxies(proxies_id, msg_ptr) {
            let msg = undefined;
            if (msg_ptr) {
                msg = UTF8ToString(msg_ptr)
            }
            let proxies = Hiwire.get_value(proxies_id);
            for (let px of proxies) {
                Module.pyproxy_destroy(px, msg)
            }
        }
        function destroy_proxy(proxy_id, msg_ptr) {
            let msg = undefined;
            if (msg_ptr) {
                msg = UTF8ToString(msg_ptr)
            }
            Module.pyproxy_destroy(Module.hiwire.get_value(proxy_id), msg)
        }
        function proxy_cache_get(proxyCacheId, descr) {
            let proxyCache = Hiwire.get_value(proxyCacheId);
            let proxyId = proxyCache.get(descr);
            if (!proxyId) {
                return undefined
            }
            if (Hiwire.get_value(proxyId).$$.ptr) {
                return proxyId
            } else {
                proxyCache.delete(descr);
                Hiwire.decref(proxyId);
                return undefined
            }
        }
        function proxy_cache_set(proxyCacheId, descr, proxy) {
            let proxyCache = Hiwire.get_value(proxyCacheId);
            proxyCache.set(descr, proxy)
        }
        function array_to_js(array, len) {
            return Hiwire.new_value(Array.from(HEAP32.subarray(array / 4, array / 4 + len)))
        }
        function pyproxy_new_ex(ptrobj, capture_this, roundtrip) {
            "use strict";
            try {
                return Hiwire.new_value(Module.pyproxy_new(ptrobj, {
                    props: {
                        captureThis: !!capture_this,
                        roundtrip: !!roundtrip
                    }
                }))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function pyproxy_new(ptrobj) {
            "use strict";
            try {
                return Hiwire.new_value(Module.pyproxy_new(ptrobj))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function create_once_callable(obj) {
            "use strict";
            try {
                _Py_IncRef(obj);
                let alreadyCalled = !!0;
                function wrapper(...args) {
                    if (alreadyCalled) {
                        throw new Error("OnceProxy can only be called once")
                    }
                    try {
                        return Module.callPyObject(obj, args)
                    } finally {
                        wrapper.destroy()
                    }
                }
                wrapper.destroy = function() {
                    if (alreadyCalled) {
                        throw new Error("OnceProxy has already been destroyed")
                    }
                    alreadyCalled = !!1;
                    Module.finalizationRegistry.unregister(wrapper);
                    _Py_DecRef(obj)
                }
                ;
                Module.finalizationRegistry.register(wrapper, [obj, undefined], wrapper);
                return Hiwire.new_value(wrapper)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function create_promise_handles(handle_result, handle_exception, done_callback_id) {
            "use strict";
            try {
                if (handle_result) {
                    _Py_IncRef(handle_result)
                }
                if (handle_exception) {
                    _Py_IncRef(handle_exception)
                }
                let done_callback = x=>{}
                ;
                if (done_callback_id) {
                    done_callback = Hiwire.get_value(done_callback_id)
                }
                let used = !!0;
                function checkUsed() {
                    if (used) {
                        throw new Error("One of the promise handles has already been called.")
                    }
                }
                function destroy() {
                    checkUsed();
                    used = !!1;
                    if (handle_result) {
                        _Py_DecRef(handle_result)
                    }
                    if (handle_exception) {
                        _Py_DecRef(handle_exception)
                    }
                }
                function onFulfilled(res) {
                    checkUsed();
                    try {
                        if (handle_result) {
                            return Module.callPyObject(handle_result, [res])
                        }
                    } finally {
                        done_callback(res);
                        destroy()
                    }
                }
                function onRejected(err) {
                    checkUsed();
                    try {
                        if (handle_exception) {
                            return Module.callPyObject(handle_exception, [err])
                        }
                    } finally {
                        done_callback(undefined);
                        destroy()
                    }
                }
                onFulfilled.destroy = destroy;
                onRejected.destroy = destroy;
                return Hiwire.new_value([onFulfilled, onRejected])
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function _python2js_buffer_inner(buf, itemsize, ndim, format, shape, strides, suboffsets) {
            "use strict";
            try {
                let converter = Module.get_converter(format, itemsize);
                let result = Module._python2js_buffer_recursive(buf, 0, {
                    ndim: ndim,
                    format: format,
                    itemsize: itemsize,
                    shape: shape,
                    strides: strides,
                    suboffsets: suboffsets,
                    converter: converter
                });
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function python2js_buffer_init() {
            "use strict";
            try {
                {
                    0;
                    Module.processBufferFormatString = function(formatStr, errorMessage="") {
                        if (formatStr.length > 2) {
                            throw new Error("Expected format string to have length <= 2, " + `got '${formatStr}'.` + errorMessage)
                        }
                        let formatChar = formatStr.slice(-1);
                        let alignChar = formatStr.slice(0, -1);
                        let bigEndian;
                        switch (alignChar) {
                        case "!":
                        case ">":
                            bigEndian = !!1;
                            break;
                        case "<":
                        case "@":
                        case "=":
                        case "":
                            bigEndian = !!0;
                            break;
                        default:
                            throw new Error(`Unrecognized alignment character ${alignChar}.` + errorMessage)
                        }
                        let arrayType;
                        switch (formatChar) {
                        case "b":
                            arrayType = Int8Array;
                            break;
                        case "s":
                        case "p":
                        case "c":
                        case "B":
                        case "?":
                            arrayType = Uint8Array;
                            break;
                        case "h":
                            arrayType = Int16Array;
                            break;
                        case "H":
                            arrayType = Uint16Array;
                            break;
                        case "i":
                        case "l":
                        case "n":
                            arrayType = Int32Array;
                            break;
                        case "I":
                        case "L":
                        case "N":
                        case "P":
                            arrayType = Uint32Array;
                            break;
                        case "q":
                            if (globalThis.BigInt64Array === undefined) {
                                throw new Error("BigInt64Array is not supported on this browser." + errorMessage)
                            }
                            arrayType = BigInt64Array;
                            break;
                        case "Q":
                            if (globalThis.BigUint64Array === undefined) {
                                throw new Error("BigUint64Array is not supported on this browser." + errorMessage)
                            }
                            arrayType = BigUint64Array;
                            break;
                        case "f":
                            arrayType = Float32Array;
                            break;
                        case "d":
                            arrayType = Float64Array;
                            break;
                        case "e":
                            throw new Error("Javascript has no Float16 support.");
                        default:
                            throw new Error(`Unrecognized format character '${formatChar}'.` + errorMessage)
                        }
                        return [arrayType, bigEndian]
                    }
                    ;
                    Module.python2js_buffer_1d_contiguous = function(ptr, stride, n) {
                        "use strict";
                        let byteLength = stride * n;
                        return HEAP8.slice(ptr, ptr + byteLength).buffer
                    }
                    ;
                    Module.python2js_buffer_1d_noncontiguous = function(ptr, stride, suboffset, n, itemsize) {
                        "use strict";
                        let byteLength = itemsize * n;
                        let buffer = new Uint8Array(byteLength);
                        for (let i = 0; i < n; ++i) {
                            let curptr = ptr + i * stride;
                            if (suboffset >= 0) {
                                curptr = HEAPU32[(curptr >> 2) + 0] + suboffset
                            }
                            buffer.set(HEAP8.subarray(curptr, curptr + itemsize), i * itemsize)
                        }
                        return buffer.buffer
                    }
                    ;
                    Module._python2js_buffer_recursive = function(ptr, curdim, bufferData) {
                        "use strict";
                        let n = HEAPU32[(bufferData.shape >> 2) + curdim];
                        let stride = HEAP32[(bufferData.strides >> 2) + curdim];
                        let suboffset = -1;
                        if (bufferData.suboffsets !== 0) {
                            suboffset = HEAP32[(bufferData.suboffsets >> 2) + curdim]
                        }
                        if (curdim === bufferData.ndim - 1) {
                            let arraybuffer;
                            if (stride === bufferData.itemsize && suboffset < 0) {
                                arraybuffer = Module.python2js_buffer_1d_contiguous(ptr, stride, n)
                            } else {
                                arraybuffer = Module.python2js_buffer_1d_noncontiguous(ptr, stride, suboffset, n, bufferData.itemsize)
                            }
                            return bufferData.converter(arraybuffer)
                        }
                        let result = [];
                        for (let i = 0; i < n; ++i) {
                            let curPtr = ptr + i * stride;
                            if (suboffset >= 0) {
                                curptr = HEAPU32[(curptr >> 2) + 0] + suboffset
                            }
                            result.push(Module._python2js_buffer_recursive(curPtr, curdim + 1, bufferData))
                        }
                        return result
                    }
                    ;
                    Module.get_converter = function(format, itemsize) {
                        "use strict";
                        let formatStr = UTF8ToString(format);
                        let[ArrayType,bigEndian] = Module.processBufferFormatString(formatStr);
                        let formatChar = formatStr.slice(-1);
                        switch (formatChar) {
                        case "s":
                            let decoder = new TextDecoder("utf8",{
                                ignoreBOM: !!1
                            });
                            return buff=>decoder.decode(buff);
                        case "?":
                            return buff=>Array.from(new Uint8Array(buff), x=>!!x)
                        }
                        if (!bigEndian) {
                            return buff=>new ArrayType(buff)
                        }
                        let getFuncName;
                        let setFuncName;
                        switch (itemsize) {
                        case 2:
                            getFuncName = "getUint16";
                            setFuncName = "setUint16";
                            break;
                        case 4:
                            getFuncName = "getUint32";
                            setFuncName = "setUint32";
                            break;
                        case 8:
                            getFuncName = "getFloat64";
                            setFuncName = "setFloat64";
                            break;
                        default:
                            throw new Error(`Unexpected size ${itemsize}`)
                        }
                        function swapFunc(buff) {
                            let dataview = new DataView(buff);
                            let getFunc = dataview[getFuncName].bind(dataview);
                            let setFunc = dataview[setFuncName].bind(dataview);
                            for (let byte = 0; byte < dataview.byteLength; byte += itemsize) {
                                setFunc(byte, getFunc(byte, !!1), !!0)
                            }
                            return buff
                        }
                        return buff=>new ArrayType(swapFunc(buff))
                    }
                }
                return 0
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function _python2js_addto_postprocess_list(idlist, idparent, idkey, value) {
            const list = Hiwire.get_value(idlist);
            const parent = Hiwire.get_value(idparent);
            const key = Hiwire.get_value(idkey);
            list.push([parent, key, value])
        }
        function _python2js_handle_postprocess_list(idlist, idcache) {
            const list = Hiwire.get_value(idlist);
            const cache = Hiwire.get_value(idcache);
            for (const [parent,key,value] of list) {
                let out_value = Hiwire.get_value(cache.get(value));
                if (parent.constructor.name === "Map") {
                    parent.set(key, out_value)
                } else {
                    parent[key] = out_value
                }
            }
        }
        function _python2js_add_to_cache(cacheid, pyparent, jsparent) {
            "use strict";
            try {
                const cache = Hiwire.get_value(cacheid);
                const old_value = cache.get(pyparent);
                if (old_value !== undefined) {
                    Hiwire.decref(old_value)
                }
                Hiwire.incref(jsparent);
                cache.set(pyparent, jsparent)
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function _python2js_destroy_cache(cacheid) {
            const cache = Hiwire.get_value(cacheid);
            for (const [k,v] of cache.entries()) {
                Hiwire.decref(v)
            }
        }
        function _python2js_cache_lookup(cacheid, pyparent) {
            return Hiwire.get_value(cacheid).get(pyparent)
        }
        function _JsArray_PushEntry_helper(array, key, value) {
            "use strict";
            try {
                Hiwire.get_value(array).push([Hiwire.get_value(key), Hiwire.get_value(value)])
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function _JsArray_PostProcess_helper(jscontext, array) {
            "use strict";
            try {
                return Hiwire.new_value(Hiwire.get_value(jscontext).dict_converter(Hiwire.get_value(array)))
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function python2js__default_converter(jscontext, object) {
            "use strict";
            try {
                let context = Hiwire.get_value(jscontext);
                let proxy = Module.pyproxy_new(object);
                let result = context.default_converter(proxy, context.converter, context.cacheConversion);
                proxy.destroy();
                return Hiwire.new_value(result)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function python2js_custom__create_jscontext(context, idcache, dict_converter, default_converter) {
            "use strict";
            try {
                let jscontext = {};
                if (dict_converter !== 0) {
                    jscontext.dict_converter = Hiwire.get_value(dict_converter)
                }
                if (default_converter !== 0) {
                    jscontext.default_converter = Hiwire.get_value(default_converter);
                    jscontext.cacheConversion = function(input, output) {
                        if (!API.isPyProxy(input)) {
                            throw new TypeError("The first argument to cacheConversion must be a PyProxy.")
                        }
                        let input_ptr = Module.PyProxy_getPtr(input);
                        let output_key = Hiwire.new_value(output);
                        Hiwire.get_value(idcache).set(input_ptr, output_key)
                    }
                    ;
                    jscontext.converter = function(x) {
                        if (!API.isPyProxy(x)) {
                            return x
                        }
                        let ptr = Module.PyProxy_getPtr(x);
                        let res = __python2js(context, ptr);
                        return Hiwire.pop_value(res)
                    }
                }
                return Hiwire.new_value(jscontext)
            } catch (e) {
                Module.handle_js_error(e);
                return 0
            }
            throw new Error("Assertion error: control reached end of function without return")
        }
        function destroy_proxies_js(proxies_id) {
            "use strict";
            try {
                for (let proxy of Hiwire.get_value(proxies_id)) {
                    proxy.destroy()
                }
            } catch (e) {
                Module.handle_js_error(e);
                return -1
            }
            return 0
        }
        function getter_call_trampoline(get, obj, closure) {
            return wasmTable.get(get)(obj, closure)
        }
        function setter_call_trampoline(set, obj, value, closure) {
            return wasmTable.get(set)(obj, value, closure)
        }
        function method_call_trampoline(func, self, arg1, arg2) {
            return wasmTable.get(func)(self, arg1, arg2)
        }
        function em_call_init_function(f) {
            return Module.wasmTable.get(f)()
        }
        function _Py_CheckEmscriptenSignals_Helper() {
            if (!Module.Py_EmscriptenSignalBuffer) {
                return 0
            }
            try {
                let result = Module.Py_EmscriptenSignalBuffer[0];
                Module.Py_EmscriptenSignalBuffer[0] = 0;
                return result
            } catch (e) {
                return 0
            }
        }
        function unbox_small_structs(type_ptr) {
            var type_id = HEAPU16[(type_ptr + 6 >> 1) + 0];
            while (type_id === 13) {
                var elements = HEAPU32[(type_ptr + 8 >> 2) + 0];
                var first_element = HEAPU32[(elements >> 2) + 0];
                if (first_element === 0) {
                    type_id = 0;
                    break
                } else if (HEAPU32[(elements >> 2) + 1] === 0) {
                    type_ptr = first_element;
                    type_id = HEAPU16[(first_element + 6 >> 1) + 0]
                } else {
                    break
                }
            }
            return [type_ptr, type_id]
        }
        function ffi_call(cif, fn, rvalue, avalue) {
            var abi = HEAPU32[(cif >> 2) + 0];
            var nargs = HEAPU32[(cif >> 2) + 1];
            var nfixedargs = HEAPU32[(cif >> 2) + 6];
            var arg_types_ptr = HEAPU32[(cif >> 2) + 2];
            var rtype_unboxed = unbox_small_structs(HEAPU32[(cif >> 2) + 3]);
            var rtype_ptr = rtype_unboxed[0];
            var rtype_id = rtype_unboxed[1];
            var orig_stack_ptr = stackSave();
            var cur_stack_ptr = orig_stack_ptr;
            var args = [];
            var ret_by_arg = false;
            if (rtype_id === 15) {
                throw new Error("complex ret marshalling nyi")
            }
            if (rtype_id < 0 || rtype_id > 15) {
                throw new Error("Unexpected rtype " + rtype_id)
            }
            if (rtype_id === 4 || rtype_id === 13) {
                args.push(rvalue);
                ret_by_arg = true
            }
            for (var i = 0; i < nfixedargs; i++) {
                var arg_ptr = HEAPU32[(avalue >> 2) + i];
                var arg_unboxed = unbox_small_structs(HEAPU32[(arg_types_ptr >> 2) + i]);
                var arg_type_ptr = arg_unboxed[0];
                var arg_type_id = arg_unboxed[1];
                switch (arg_type_id) {
                case 1:
                case 10:
                case 9:
                case 14:
                    args.push(HEAPU32[(arg_ptr >> 2) + 0]);
                    break;
                case 2:
                    args.push(HEAPF32[(arg_ptr >> 2) + 0]);
                    break;
                case 3:
                    args.push(HEAPF64[(arg_ptr >> 3) + 0]);
                    break;
                case 5:
                    args.push(HEAPU8[arg_ptr + 0]);
                    break;
                case 6:
                    args.push(HEAP8[arg_ptr + 0]);
                    break;
                case 7:
                    args.push(HEAPU16[(arg_ptr >> 1) + 0]);
                    break;
                case 8:
                    args.push(HEAP16[(arg_ptr >> 1) + 0]);
                    break;
                case 11:
                case 12:
                    args.push(BigInt(HEAPU32[(arg_ptr >> 2) + 0 * 2]) | BigInt(HEAPU32[(arg_ptr >> 2) + 0 * 2 + 1]) << BigInt(32));
                    break;
                case 4:
                    args.push(BigInt(HEAPU32[(arg_ptr >> 2) + 0 * 2]) | BigInt(HEAPU32[(arg_ptr >> 2) + 0 * 2 + 1]) << BigInt(32));
                    args.push(BigInt(HEAPU32[(arg_ptr >> 2) + 1 * 2]) | BigInt(HEAPU32[(arg_ptr >> 2) + 1 * 2 + 1]) << BigInt(32));
                    break;
                case 13:
                    var size = HEAPU32[(arg_type_ptr >> 2) + 0];
                    var align = HEAPU16[(arg_type_ptr + 4 >> 1) + 0];
                    cur_stack_ptr -= size,
                    cur_stack_ptr &= ~(align - 1);
                    HEAP8.subarray(cur_stack_ptr, cur_stack_ptr + size).set(HEAP8.subarray(arg_ptr, arg_ptr + size));
                    args.push(cur_stack_ptr);
                    break;
                case 15:
                    throw new Error("complex marshalling nyi");
                default:
                    throw new Error("Unexpected type " + arg_type_id)
                }
            }
            if (nfixedargs != nargs) {
                var struct_arg_info = [];
                for (var i = nargs - 1; i >= nfixedargs; i--) {
                    var arg_ptr = HEAPU32[(avalue >> 2) + i];
                    var arg_unboxed = unbox_small_structs(HEAPU32[(arg_types_ptr >> 2) + i]);
                    var arg_type_ptr = arg_unboxed[0];
                    var arg_type_id = arg_unboxed[1];
                    switch (arg_type_id) {
                    case 5:
                    case 6:
                        cur_stack_ptr -= 1,
                        cur_stack_ptr &= ~(1 - 1);
                        HEAPU8[cur_stack_ptr + 0] = HEAPU8[arg_ptr + 0];
                        break;
                    case 7:
                    case 8:
                        cur_stack_ptr -= 2,
                        cur_stack_ptr &= ~(2 - 1);
                        HEAPU16[(cur_stack_ptr >> 1) + 0] = HEAPU16[(arg_ptr >> 1) + 0];
                        break;
                    case 1:
                    case 9:
                    case 10:
                    case 14:
                    case 2:
                        cur_stack_ptr -= 4,
                        cur_stack_ptr &= ~(4 - 1);
                        HEAPU32[(cur_stack_ptr >> 2) + 0] = HEAPU32[(arg_ptr >> 2) + 0];
                        break;
                    case 3:
                    case 11:
                    case 12:
                        cur_stack_ptr -= 8,
                        cur_stack_ptr &= ~(8 - 1);
                        HEAPU32[(cur_stack_ptr >> 2) + 0] = HEAPU32[(arg_ptr >> 2) + 0];
                        HEAPU32[(cur_stack_ptr >> 2) + 1] = HEAPU32[(arg_ptr >> 2) + 1];
                        break;
                    case 4:
                        cur_stack_ptr -= 16,
                        cur_stack_ptr &= ~(8 - 1);
                        HEAPU32[(cur_stack_ptr >> 2) + 0] = HEAPU32[(arg_ptr >> 2) + 0];
                        HEAPU32[(cur_stack_ptr >> 2) + 1] = HEAPU32[(arg_ptr >> 2) + 1];
                        HEAPU32[(cur_stack_ptr >> 2) + 2] = HEAPU32[(arg_ptr >> 2) + 1];
                        HEAPU32[(cur_stack_ptr >> 2) + 3] = HEAPU32[(arg_ptr >> 2) + 1];
                        break;
                    case 13:
                        cur_stack_ptr -= 4,
                        cur_stack_ptr &= ~(4 - 1);
                        struct_arg_info.push([cur_stack_ptr, arg_ptr, HEAPU32[(arg_type_ptr >> 2) + 0], HEAPU16[(arg_type_ptr + 4 >> 1) + 0]]);
                        break;
                    case 15:
                        throw new Error("complex arg marshalling nyi");
                    default:
                        throw new Error("Unexpected argtype " + arg_type_id)
                    }
                }
                args.push(cur_stack_ptr);
                for (var i = 0; i < struct_arg_info.length; i++) {
                    var struct_info = struct_arg_info[i];
                    var arg_target = struct_info[0];
                    var arg_ptr = struct_info[1];
                    var size = struct_info[2];
                    var align = struct_info[3];
                    cur_stack_ptr -= size,
                    cur_stack_ptr &= ~(align - 1);
                    HEAP8.subarray(cur_stack_ptr, cur_stack_ptr + size).set(HEAP8.subarray(arg_ptr, arg_ptr + size));
                    HEAPU32[(arg_target >> 2) + 0] = cur_stack_ptr
                }
            }
            cur_stack_ptr -= 0,
            cur_stack_ptr &= ~(8 - 1);
            stackRestore(cur_stack_ptr);
            var result = wasmTable.get(fn).apply(null, args);
            stackRestore(orig_stack_ptr);
            if (ret_by_arg) {
                return
            }
            switch (rtype_id) {
            case 0:
                break;
            case 1:
            case 9:
            case 10:
            case 14:
                HEAPU32[(rvalue >> 2) + 0] = result;
                break;
            case 2:
                HEAPF32[(rvalue >> 2) + 0] = result;
                break;
            case 3:
                HEAPF64[(rvalue >> 3) + 0] = result;
                break;
            case 5:
            case 6:
                HEAPU8[rvalue + 0] = result;
                break;
            case 7:
            case 8:
                HEAPU16[(rvalue >> 1) + 0] = result;
                break;
            case 11:
            case 12:
                HEAPU32[(rvalue >> 2) + 0 * 2] = Number(result & BigInt(4294967295)) | 0,
                HEAPU32[(rvalue >> 2) + 0 * 2 + 1] = Number(result >> BigInt(32)) | 0;
                break;
            case 15:
                throw new Error("complex ret marshalling nyi");
            default:
                throw new Error("Unexpected rtype " + rtype_id)
            }
        }
        function ffi_closure_alloc_helper(size, code) {
            var closure = _malloc(size);
            var index = getEmptyTableSlot();
            HEAPU32[(code >> 2) + 0] = index;
            HEAPU32[(closure >> 2) + 0] = index;
            return closure
        }
        function ffi_closure_free_helper(closure) {
            var index = HEAPU32[(closure >> 2) + 0];
            freeTableIndexes.push(index);
            _free(closure)
        }
        function ffi_prep_closure_loc_helper(closure, cif, fun, user_data, codeloc) {
            var abi = HEAPU32[(cif >> 2) + 0];
            var nargs = HEAPU32[(cif >> 2) + 1];
            var nfixedargs = HEAPU32[(cif >> 2) + 6];
            var arg_types_ptr = HEAPU32[(cif >> 2) + 2];
            var rtype_unboxed = unbox_small_structs(HEAPU32[(cif >> 2) + 3]);
            var rtype_ptr = rtype_unboxed[0];
            var rtype_id = rtype_unboxed[1];
            var sig;
            var ret_by_arg = false;
            switch (rtype_id) {
            case 0:
                sig = "v";
                break;
            case 13:
            case 4:
                sig = "vi";
                ret_by_arg = true;
                break;
            case 1:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 14:
                sig = "i";
                break;
            case 2:
                sig = "f";
                break;
            case 3:
                sig = "d";
                break;
            case 11:
            case 12:
                sig = "j";
                break;
            case 15:
                throw new Error("complex ret marshalling nyi");
            default:
                throw new Error("Unexpected rtype " + rtype_id)
            }
            var unboxed_arg_type_id_list = [];
            var unboxed_arg_type_info_list = [];
            for (var i = 0; i < nargs; i++) {
                var arg_unboxed = unbox_small_structs(HEAPU32[(arg_types_ptr >> 2) + i]);
                var arg_type_ptr = arg_unboxed[0];
                var arg_type_id = arg_unboxed[1];
                unboxed_arg_type_id_list.push(arg_type_id);
                unboxed_arg_type_info_list.push([HEAPU32[(arg_type_ptr >> 2) + 0], HEAPU16[(arg_type_ptr + 4 >> 1) + 0]])
            }
            for (var i = 0; i < nfixedargs; i++) {
                switch (unboxed_arg_type_id_list[i]) {
                case 1:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 14:
                case 13:
                    sig += "i";
                    break;
                case 2:
                    sig += "f";
                    break;
                case 3:
                    sig += "d";
                    break;
                case 4:
                    sig += "jj";
                    break;
                case 11:
                case 12:
                    sig += "j";
                    break;
                case 15:
                    throw new Error("complex marshalling nyi");
                default:
                    throw new Error("Unexpected argtype " + arg_type_id)
                }
            }
            if (nfixedargs < nargs) {
                sig += "i"
            }
            function trampoline() {
                var args = Array.prototype.slice.call(arguments);
                var size = 0;
                var orig_stack_ptr = stackSave();
                var cur_ptr = orig_stack_ptr;
                var ret_ptr;
                var jsarg_idx = 0;
                if (ret_by_arg) {
                    ret_ptr = args[jsarg_idx++]
                } else {
                    cur_ptr -= 8,
                    cur_ptr &= ~(8 - 1);
                    ret_ptr = cur_ptr
                }
                cur_ptr -= 4 * nargs;
                var args_ptr = cur_ptr;
                var carg_idx = -1;
                for (var carg_idx = 0; carg_idx < nfixedargs; carg_idx++) {
                    var cur_arg = args[jsarg_idx++];
                    var arg_type_info = unboxed_arg_type_info_list[carg_idx];
                    var arg_size = arg_type_info[0];
                    var arg_align = arg_type_info[1];
                    var arg_type_id = unboxed_arg_type_id_list[carg_idx];
                    switch (arg_type_id) {
                    case 5:
                    case 6:
                        cur_ptr -= 1,
                        cur_ptr &= ~(4 - 1);
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
                        HEAPU8[cur_ptr + 0] = cur_arg;
                        break;
                    case 7:
                    case 8:
                        cur_ptr -= 2,
                        cur_ptr &= ~(4 - 1);
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
                        HEAPU16[(cur_ptr >> 1) + 0] = cur_arg;
                        break;
                    case 1:
                    case 9:
                    case 10:
                    case 14:
                        cur_ptr -= 4,
                        cur_ptr &= ~(4 - 1);
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
                        HEAPU32[(cur_ptr >> 2) + 0] = cur_arg;
                        break;
                    case 13:
                        cur_ptr -= arg_size,
                        cur_ptr &= ~(arg_align - 1);
                        HEAP8.subarray(cur_ptr, cur_ptr + arg_size).set(HEAP8.subarray(cur_arg, cur_arg + arg_size));
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
                        break;
                    case 2:
                        cur_ptr -= 4,
                        cur_ptr &= ~(4 - 1);
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
                        HEAPF32[(cur_ptr >> 2) + 0] = cur_arg;
                        break;
                    case 3:
                        cur_ptr -= 8,
                        cur_ptr &= ~(8 - 1);
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
                        HEAPF64[(cur_ptr >> 3) + 0] = cur_arg;
                        break;
                    case 11:
                    case 12:
                        cur_ptr -= 8,
                        cur_ptr &= ~(8 - 1);
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
                        HEAPU32[(cur_ptr >> 2) + 0 * 2] = Number(cur_arg & BigInt(4294967295)) | 0,
                        HEAPU32[(cur_ptr >> 2) + 0 * 2 + 1] = Number(cur_arg >> BigInt(32)) | 0;
                        break;
                    case 4:
                        cur_ptr -= 16,
                        cur_ptr &= ~(8 - 1);
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
                        HEAPU32[(cur_ptr >> 2) + 0 * 2] = Number(cur_arg & BigInt(4294967295)) | 0,
                        HEAPU32[(cur_ptr >> 2) + 0 * 2 + 1] = Number(cur_arg >> BigInt(32)) | 0;
                        cur_arg = args[jsarg_idx++];
                        HEAPU32[(cur_ptr >> 2) + 1 * 2] = Number(cur_arg & BigInt(4294967295)) | 0,
                        HEAPU32[(cur_ptr >> 2) + 1 * 2 + 1] = Number(cur_arg >> BigInt(32)) | 0;
                        break
                    }
                }
                var varargs = args[args.length - 1];
                for (var carg_idx = nfixedargs; carg_idx < nargs; carg_idx++) {
                    var arg_type_id = unboxed_arg_type_id_list[carg_idx];
                    var arg_type_info = unboxed_arg_type_info_list[carg_idx];
                    var arg_size = arg_type_info[0];
                    var arg_align = arg_type_info[1];
                    if (arg_type_id === 13) {
                        var struct_ptr = HEAPU32[(varargs >> 2) + 0];
                        cur_ptr -= arg_size,
                        cur_ptr &= ~(arg_align - 1);
                        HEAP8.subarray(cur_ptr, cur_ptr + arg_size).set(HEAP8.subarray(struct_ptr, struct_ptr + arg_size));
                        HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr
                    } else {
                        HEAPU32[(args_ptr >> 2) + carg_idx] = varargs
                    }
                    varargs += 4
                }
                cur_ptr -= 0,
                cur_ptr &= ~(8 - 1);
                stackRestore(cur_ptr);
                wasmTable.get(HEAPU32[(closure >> 2) + 2]).apply(null, [HEAPU32[(closure >> 2) + 1], ret_ptr, args_ptr, HEAPU32[(closure >> 2) + 3]]);
                stackRestore(orig_stack_ptr);
                if (!ret_by_arg) {
                    switch (sig[0]) {
                    case "i":
                        return HEAPU32[(ret_ptr >> 2) + 0];
                    case "j":
                        return BigInt(HEAPU32[(ret_ptr >> 2) + 0 * 2]) | BigInt(HEAPU32[(ret_ptr >> 2) + 0 * 2 + 1]) << BigInt(32);
                    case "d":
                        return HEAPF64[(ret_ptr >> 3) + 0];
                    case "f":
                        return HEAPF32[(ret_ptr >> 2) + 0]
                    }
                }
            }
            try {
                var wasm_trampoline = convertJsFunctionToWasm(trampoline, sig)
            } catch (e) {
                return FFI_BAD_TYPEDEF
            }
            wasmTable.set(codeloc, wasm_trampoline);
            HEAPU32[(closure >> 2) + 1] = cif;
            HEAPU32[(closure >> 2) + 2] = fun;
            HEAPU32[(closure >> 2) + 3] = user_data;
            return 0
        }
        function _emscripten_set_main_loop_timing(mode, value) {
            Browser.mainLoop.timingMode = mode;
            Browser.mainLoop.timingValue = value;
            if (!Browser.mainLoop.func) {
                return 1
            }
            if (!Browser.mainLoop.running) {
                Browser.mainLoop.running = true
            }
            if (mode == 0) {
                Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
                    var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
                    setTimeout(Browser.mainLoop.runner, timeUntilNextTick)
                }
                ;
                Browser.mainLoop.method = "timeout"
            } else if (mode == 1) {
                Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
                    Browser.requestAnimationFrame(Browser.mainLoop.runner)
                }
                ;
                Browser.mainLoop.method = "rAF"
            } else if (mode == 2) {
                if (typeof setImmediate == "undefined") {
                    var setImmediates = [];
                    var emscriptenMainLoopMessageId = "setimmediate";
                    var Browser_setImmediate_messageHandler = event=>{
                        if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
                            event.stopPropagation();
                            setImmediates.shift()()
                        }
                    }
                    ;
                    addEventListener("message", Browser_setImmediate_messageHandler, true);
                    setImmediate = function Browser_emulated_setImmediate(func) {
                        setImmediates.push(func);
                        if (ENVIRONMENT_IS_WORKER) {
                            if (Module["setImmediates"] === undefined)
                                Module["setImmediates"] = [];
                            Module["setImmediates"].push(func);
                            postMessage({
                                target: emscriptenMainLoopMessageId
                            })
                        } else
                            postMessage(emscriptenMainLoopMessageId, "*")
                    }
                }
                Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
                    setImmediate(Browser.mainLoop.runner)
                }
                ;
                Browser.mainLoop.method = "immediate"
            }
            return 0
        }
        Module["_emscripten_set_main_loop_timing"] = _emscripten_set_main_loop_timing;
        _emscripten_set_main_loop_timing.sig = "iii";
        var _emscripten_get_now;
        if (ENVIRONMENT_IS_NODE) {
            _emscripten_get_now = ()=>{
                var t = process["hrtime"]();
                return t[0] * 1e3 + t[1] / 1e6
            }
        } else
            _emscripten_get_now = ()=>performance.now();
        Module["_emscripten_get_now"] = _emscripten_get_now;
        _emscripten_get_now.sig = "d";
        function ExitStatus(status) {
            this.name = "ExitStatus";
            this.message = "Program terminated with exit(" + status + ")";
            this.status = status
        }
        Module["ExitStatus"] = ExitStatus;
        var PATH = {
            isAbs: path=>path.charAt(0) === "/",
            splitPath: filename=>{
                var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
                return splitPathRe.exec(filename).slice(1)
            }
            ,
            normalizeArray: (parts,allowAboveRoot)=>{
                var up = 0;
                for (var i = parts.length - 1; i >= 0; i--) {
                    var last = parts[i];
                    if (last === ".") {
                        parts.splice(i, 1)
                    } else if (last === "..") {
                        parts.splice(i, 1);
                        up++
                    } else if (up) {
                        parts.splice(i, 1);
                        up--
                    }
                }
                if (allowAboveRoot) {
                    for (; up; up--) {
                        parts.unshift("..")
                    }
                }
                return parts
            }
            ,
            normalize: path=>{
                var isAbsolute = PATH.isAbs(path)
                  , trailingSlash = path.substr(-1) === "/";
                path = PATH.normalizeArray(path.split("/").filter(p=>!!p), !isAbsolute).join("/");
                if (!path && !isAbsolute) {
                    path = "."
                }
                if (path && trailingSlash) {
                    path += "/"
                }
                return (isAbsolute ? "/" : "") + path
            }
            ,
            dirname: path=>{
                var result = PATH.splitPath(path)
                  , root = result[0]
                  , dir = result[1];
                if (!root && !dir) {
                    return "."
                }
                if (dir) {
                    dir = dir.substr(0, dir.length - 1)
                }
                return root + dir
            }
            ,
            basename: path=>{
                if (path === "/")
                    return "/";
                path = PATH.normalize(path);
                path = path.replace(/\/$/, "");
                var lastSlash = path.lastIndexOf("/");
                if (lastSlash === -1)
                    return path;
                return path.substr(lastSlash + 1)
            }
            ,
            join: function() {
                var paths = Array.prototype.slice.call(arguments);
                return PATH.normalize(paths.join("/"))
            },
            join2: (l,r)=>{
                return PATH.normalize(l + "/" + r)
            }
        };
        Module["PATH"] = PATH;
        function getRandomDevice() {
            if (typeof crypto == "object" && typeof crypto["getRandomValues"] == "function") {
                var randomBuffer = new Uint8Array(1);
                return ()=>{
                    crypto.getRandomValues(randomBuffer);
                    return randomBuffer[0]
                }
            } else if (ENVIRONMENT_IS_NODE) {
                try {
                    var crypto_module = require("crypto");
                    return ()=>crypto_module["randomBytes"](1)[0]
                } catch (e) {}
            }
            return ()=>abort("randomDevice")
        }
        Module["getRandomDevice"] = getRandomDevice;
        var PATH_FS = {
            resolve: function() {
                var resolvedPath = ""
                  , resolvedAbsolute = false;
                for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                    var path = i >= 0 ? arguments[i] : FS.cwd();
                    if (typeof path != "string") {
                        throw new TypeError("Arguments to path.resolve must be strings")
                    } else if (!path) {
                        return ""
                    }
                    resolvedPath = path + "/" + resolvedPath;
                    resolvedAbsolute = PATH.isAbs(path)
                }
                resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p), !resolvedAbsolute).join("/");
                return (resolvedAbsolute ? "/" : "") + resolvedPath || "."
            },
            relative: (from,to)=>{
                from = PATH_FS.resolve(from).substr(1);
                to = PATH_FS.resolve(to).substr(1);
                function trim(arr) {
                    var start = 0;
                    for (; start < arr.length; start++) {
                        if (arr[start] !== "")
                            break
                    }
                    var end = arr.length - 1;
                    for (; end >= 0; end--) {
                        if (arr[end] !== "")
                            break
                    }
                    if (start > end)
                        return [];
                    return arr.slice(start, end - start + 1)
                }
                var fromParts = trim(from.split("/"));
                var toParts = trim(to.split("/"));
                var length = Math.min(fromParts.length, toParts.length);
                var samePartsLength = length;
                for (var i = 0; i < length; i++) {
                    if (fromParts[i] !== toParts[i]) {
                        samePartsLength = i;
                        break
                    }
                }
                var outputParts = [];
                for (var i = samePartsLength; i < fromParts.length; i++) {
                    outputParts.push("..")
                }
                outputParts = outputParts.concat(toParts.slice(samePartsLength));
                return outputParts.join("/")
            }
        };
        Module["PATH_FS"] = PATH_FS;
        function intArrayFromString(stringy, dontAddNull, length) {
            var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
            var u8array = new Array(len);
            var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
            if (dontAddNull)
                u8array.length = numBytesWritten;
            return u8array
        }
        Module["intArrayFromString"] = intArrayFromString;
        var TTY = {
            ttys: [],
            init: function() {},
            shutdown: function() {},
            register: function(dev, ops) {
                TTY.ttys[dev] = {
                    input: [],
                    output: [],
                    ops: ops
                };
                FS.registerDevice(dev, TTY.stream_ops)
            },
            stream_ops: {
                open: function(stream) {
                    var tty = TTY.ttys[stream.node.rdev];
                    if (!tty) {
                        throw new FS.ErrnoError(43)
                    }
                    stream.tty = tty;
                    stream.seekable = false
                },
                close: function(stream) {
                    stream.tty.ops.fsync(stream.tty)
                },
                fsync: function(stream) {
                    stream.tty.ops.fsync(stream.tty)
                },
                read: function(stream, buffer, offset, length, pos) {
                    if (!stream.tty || !stream.tty.ops.get_char) {
                        throw new FS.ErrnoError(60)
                    }
                    var bytesRead = 0;
                    for (var i = 0; i < length; i++) {
                        var result;
                        try {
                            result = stream.tty.ops.get_char(stream.tty)
                        } catch (e) {
                            throw new FS.ErrnoError(29)
                        }
                        if (result === undefined && bytesRead === 0) {
                            throw new FS.ErrnoError(6)
                        }
                        if (result === null || result === undefined)
                            break;
                        bytesRead++;
                        buffer[offset + i] = result
                    }
                    if (bytesRead) {
                        stream.node.timestamp = Date.now()
                    }
                    return bytesRead
                },
                write: function(stream, buffer, offset, length, pos) {
                    if (!stream.tty || !stream.tty.ops.put_char) {
                        throw new FS.ErrnoError(60)
                    }
                    try {
                        for (var i = 0; i < length; i++) {
                            stream.tty.ops.put_char(stream.tty, buffer[offset + i])
                        }
                    } catch (e) {
                        throw new FS.ErrnoError(29)
                    }
                    if (length) {
                        stream.node.timestamp = Date.now()
                    }
                    return i
                }
            },
            default_tty_ops: {
                get_char: function(tty) {
                    if (!tty.input.length) {
                        var result = null;
                        if (ENVIRONMENT_IS_NODE) {
                            var BUFSIZE = 256;
                            var buf = Buffer.alloc(BUFSIZE);
                            var bytesRead = 0;
                            try {
                                bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, -1)
                            } catch (e) {
                                if (e.toString().includes("EOF"))
                                    bytesRead = 0;
                                else
                                    throw e
                            }
                            if (bytesRead > 0) {
                                result = buf.slice(0, bytesRead).toString("utf-8")
                            } else {
                                result = null
                            }
                        } else if (typeof window != "undefined" && typeof window.prompt == "function") {
                            result = window.prompt("Input: ");
                            if (result !== null) {
                                result += "\n"
                            }
                        } else if (typeof readline == "function") {
                            result = readline();
                            if (result !== null) {
                                result += "\n"
                            }
                        }
                        if (!result) {
                            return null
                        }
                        tty.input = intArrayFromString(result, true)
                    }
                    return tty.input.shift()
                },
                put_char: function(tty, val) {
                    if (val === null || val === 10) {
                        out(UTF8ArrayToString(tty.output, 0));
                        tty.output = []
                    } else {
                        if (val != 0)
                            tty.output.push(val)
                    }
                },
                fsync: function(tty) {
                    if (tty.output && tty.output.length > 0) {
                        out(UTF8ArrayToString(tty.output, 0));
                        tty.output = []
                    }
                }
            },
            default_tty1_ops: {
                put_char: function(tty, val) {
                    if (val === null || val === 10) {
                        err(UTF8ArrayToString(tty.output, 0));
                        tty.output = []
                    } else {
                        if (val != 0)
                            tty.output.push(val)
                    }
                },
                fsync: function(tty) {
                    if (tty.output && tty.output.length > 0) {
                        err(UTF8ArrayToString(tty.output, 0));
                        tty.output = []
                    }
                }
            }
        };
        Module["TTY"] = TTY;
        function zeroMemory(address, size) {
            HEAPU8.fill(0, address, address + size);
            return address
        }
        Module["zeroMemory"] = zeroMemory;
        function alignMemory(size, alignment) {
            return Math.ceil(size / alignment) * alignment
        }
        Module["alignMemory"] = alignMemory;
        function mmapAlloc(size) {
            size = alignMemory(size, 65536);
            var ptr = _emscripten_builtin_memalign(65536, size);
            if (!ptr)
                return 0;
            return zeroMemory(ptr, size)
        }
        Module["mmapAlloc"] = mmapAlloc;
        var MEMFS = {
            ops_table: null,
            mount: function(mount) {
                return MEMFS.createNode(null, "/", 16384 | 511, 0)
            },
            createNode: function(parent, name, mode, dev) {
                if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
                    throw new FS.ErrnoError(63)
                }
                if (!MEMFS.ops_table) {
                    MEMFS.ops_table = {
                        dir: {
                            node: {
                                getattr: MEMFS.node_ops.getattr,
                                setattr: MEMFS.node_ops.setattr,
                                lookup: MEMFS.node_ops.lookup,
                                mknod: MEMFS.node_ops.mknod,
                                rename: MEMFS.node_ops.rename,
                                unlink: MEMFS.node_ops.unlink,
                                rmdir: MEMFS.node_ops.rmdir,
                                readdir: MEMFS.node_ops.readdir,
                                symlink: MEMFS.node_ops.symlink
                            },
                            stream: {
                                llseek: MEMFS.stream_ops.llseek
                            }
                        },
                        file: {
                            node: {
                                getattr: MEMFS.node_ops.getattr,
                                setattr: MEMFS.node_ops.setattr
                            },
                            stream: {
                                llseek: MEMFS.stream_ops.llseek,
                                read: MEMFS.stream_ops.read,
                                write: MEMFS.stream_ops.write,
                                allocate: MEMFS.stream_ops.allocate,
                                mmap: MEMFS.stream_ops.mmap,
                                msync: MEMFS.stream_ops.msync
                            }
                        },
                        link: {
                            node: {
                                getattr: MEMFS.node_ops.getattr,
                                setattr: MEMFS.node_ops.setattr,
                                readlink: MEMFS.node_ops.readlink
                            },
                            stream: {}
                        },
                        chrdev: {
                            node: {
                                getattr: MEMFS.node_ops.getattr,
                                setattr: MEMFS.node_ops.setattr
                            },
                            stream: FS.chrdev_stream_ops
                        }
                    }
                }
                var node = FS.createNode(parent, name, mode, dev);
                if (FS.isDir(node.mode)) {
                    node.node_ops = MEMFS.ops_table.dir.node;
                    node.stream_ops = MEMFS.ops_table.dir.stream;
                    node.contents = {}
                } else if (FS.isFile(node.mode)) {
                    node.node_ops = MEMFS.ops_table.file.node;
                    node.stream_ops = MEMFS.ops_table.file.stream;
                    node.usedBytes = 0;
                    node.contents = null
                } else if (FS.isLink(node.mode)) {
                    node.node_ops = MEMFS.ops_table.link.node;
                    node.stream_ops = MEMFS.ops_table.link.stream
                } else if (FS.isChrdev(node.mode)) {
                    node.node_ops = MEMFS.ops_table.chrdev.node;
                    node.stream_ops = MEMFS.ops_table.chrdev.stream
                }
                node.timestamp = Date.now();
                if (parent) {
                    parent.contents[name] = node;
                    parent.timestamp = node.timestamp
                }
                return node
            },
            getFileDataAsTypedArray: function(node) {
                if (!node.contents)
                    return new Uint8Array(0);
                if (node.contents.subarray)
                    return node.contents.subarray(0, node.usedBytes);
                return new Uint8Array(node.contents)
            },
            expandFileStorage: function(node, newCapacity) {
                var prevCapacity = node.contents ? node.contents.length : 0;
                if (prevCapacity >= newCapacity)
                    return;
                var CAPACITY_DOUBLING_MAX = 1024 * 1024;
                newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
                if (prevCapacity != 0)
                    newCapacity = Math.max(newCapacity, 256);
                var oldContents = node.contents;
                node.contents = new Uint8Array(newCapacity);
                if (node.usedBytes > 0)
                    node.contents.set(oldContents.subarray(0, node.usedBytes), 0)
            },
            resizeFileStorage: function(node, newSize) {
                if (node.usedBytes == newSize)
                    return;
                if (newSize == 0) {
                    node.contents = null;
                    node.usedBytes = 0
                } else {
                    var oldContents = node.contents;
                    node.contents = new Uint8Array(newSize);
                    if (oldContents) {
                        node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)))
                    }
                    node.usedBytes = newSize
                }
            },
            node_ops: {
                getattr: function(node) {
                    var attr = {};
                    attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
                    attr.ino = node.id;
                    attr.mode = node.mode;
                    attr.nlink = 1;
                    attr.uid = 0;
                    attr.gid = 0;
                    attr.rdev = node.rdev;
                    if (FS.isDir(node.mode)) {
                        attr.size = 4096
                    } else if (FS.isFile(node.mode)) {
                        attr.size = node.usedBytes
                    } else if (FS.isLink(node.mode)) {
                        attr.size = node.link.length
                    } else {
                        attr.size = 0
                    }
                    attr.atime = new Date(node.timestamp);
                    attr.mtime = new Date(node.timestamp);
                    attr.ctime = new Date(node.timestamp);
                    attr.blksize = 4096;
                    attr.blocks = Math.ceil(attr.size / attr.blksize);
                    return attr
                },
                setattr: function(node, attr) {
                    if (attr.mode !== undefined) {
                        node.mode = attr.mode
                    }
                    if (attr.timestamp !== undefined) {
                        node.timestamp = attr.timestamp
                    }
                    if (attr.size !== undefined) {
                        MEMFS.resizeFileStorage(node, attr.size)
                    }
                },
                lookup: function(parent, name) {
                    throw FS.genericErrors[44]
                },
                mknod: function(parent, name, mode, dev) {
                    return MEMFS.createNode(parent, name, mode, dev)
                },
                rename: function(old_node, new_dir, new_name) {
                    if (FS.isDir(old_node.mode)) {
                        var new_node;
                        try {
                            new_node = FS.lookupNode(new_dir, new_name)
                        } catch (e) {}
                        if (new_node) {
                            for (var i in new_node.contents) {
                                throw new FS.ErrnoError(55)
                            }
                        }
                    }
                    delete old_node.parent.contents[old_node.name];
                    old_node.parent.timestamp = Date.now();
                    old_node.name = new_name;
                    new_dir.contents[new_name] = old_node;
                    new_dir.timestamp = old_node.parent.timestamp;
                    old_node.parent = new_dir
                },
                unlink: function(parent, name) {
                    delete parent.contents[name];
                    parent.timestamp = Date.now()
                },
                rmdir: function(parent, name) {
                    var node = FS.lookupNode(parent, name);
                    for (var i in node.contents) {
                        throw new FS.ErrnoError(55)
                    }
                    delete parent.contents[name];
                    parent.timestamp = Date.now()
                },
                readdir: function(node) {
                    var entries = [".", ".."];
                    for (var key in node.contents) {
                        if (!node.contents.hasOwnProperty(key)) {
                            continue
                        }
                        entries.push(key)
                    }
                    return entries
                },
                symlink: function(parent, newname, oldpath) {
                    var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
                    node.link = oldpath;
                    return node
                },
                readlink: function(node) {
                    if (!FS.isLink(node.mode)) {
                        throw new FS.ErrnoError(28)
                    }
                    return node.link
                }
            },
            stream_ops: {
                read: function(stream, buffer, offset, length, position) {
                    var contents = stream.node.contents;
                    if (position >= stream.node.usedBytes)
                        return 0;
                    var size = Math.min(stream.node.usedBytes - position, length);
                    if (size > 8 && contents.subarray) {
                        buffer.set(contents.subarray(position, position + size), offset)
                    } else {
                        for (var i = 0; i < size; i++)
                            buffer[offset + i] = contents[position + i]
                    }
                    return size
                },
                write: function(stream, buffer, offset, length, position, canOwn) {
                    if (buffer.buffer === HEAP8.buffer) {
                        canOwn = false
                    }
                    if (!length)
                        return 0;
                    var node = stream.node;
                    node.timestamp = Date.now();
                    if (buffer.subarray && (!node.contents || node.contents.subarray)) {
                        if (canOwn) {
                            node.contents = buffer.subarray(offset, offset + length);
                            node.usedBytes = length;
                            return length
                        } else if (node.usedBytes === 0 && position === 0) {
                            node.contents = buffer.slice(offset, offset + length);
                            node.usedBytes = length;
                            return length
                        } else if (position + length <= node.usedBytes) {
                            node.contents.set(buffer.subarray(offset, offset + length), position);
                            return length
                        }
                    }
                    MEMFS.expandFileStorage(node, position + length);
                    if (node.contents.subarray && buffer.subarray) {
                        node.contents.set(buffer.subarray(offset, offset + length), position)
                    } else {
                        for (var i = 0; i < length; i++) {
                            node.contents[position + i] = buffer[offset + i]
                        }
                    }
                    node.usedBytes = Math.max(node.usedBytes, position + length);
                    return length
                },
                llseek: function(stream, offset, whence) {
                    var position = offset;
                    if (whence === 1) {
                        position += stream.position
                    } else if (whence === 2) {
                        if (FS.isFile(stream.node.mode)) {
                            position += stream.node.usedBytes
                        }
                    }
                    if (position < 0) {
                        throw new FS.ErrnoError(28)
                    }
                    return position
                },
                allocate: function(stream, offset, length) {
                    MEMFS.expandFileStorage(stream.node, offset + length);
                    stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length)
                },
                mmap: function(stream, length, position, prot, flags) {
                    if (!FS.isFile(stream.node.mode)) {
                        throw new FS.ErrnoError(43)
                    }
                    var ptr;
                    var allocated;
                    var contents = stream.node.contents;
                    if (!(flags & 2) && contents.buffer === buffer) {
                        allocated = false;
                        ptr = contents.byteOffset
                    } else {
                        if (position > 0 || position + length < contents.length) {
                            if (contents.subarray) {
                                contents = contents.subarray(position, position + length)
                            } else {
                                contents = Array.prototype.slice.call(contents, position, position + length)
                            }
                        }
                        allocated = true;
                        ptr = mmapAlloc(length);
                        if (!ptr) {
                            throw new FS.ErrnoError(48)
                        }
                        HEAP8.set(contents, ptr)
                    }
                    return {
                        ptr: ptr,
                        allocated: allocated
                    }
                },
                msync: function(stream, buffer, offset, length, mmapFlags) {
                    MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
                    return 0
                }
            }
        };
        Module["MEMFS"] = MEMFS;
        function asyncLoad(url, onload, onerror, noRunDep) {
            var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
            readAsync(url, arrayBuffer=>{
                assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
                onload(new Uint8Array(arrayBuffer));
                if (dep)
                    removeRunDependency(dep)
            }
            , event=>{
                if (onerror) {
                    onerror()
                } else {
                    throw 'Loading data file "' + url + '" failed.'
                }
            }
            );
            if (dep)
                addRunDependency(dep)
        }
        Module["asyncLoad"] = asyncLoad;
        var IDBFS = {
            dbs: {},
            indexedDB: ()=>{
                if (typeof indexedDB != "undefined")
                    return indexedDB;
                var ret = null;
                if (typeof window == "object")
                    ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
                assert(ret, "IDBFS used, but indexedDB not supported");
                return ret
            }
            ,
            DB_VERSION: 21,
            DB_STORE_NAME: "FILE_DATA",
            mount: function(mount) {
                return MEMFS.mount.apply(null, arguments)
            },
            syncfs: (mount,populate,callback)=>{
                IDBFS.getLocalSet(mount, (err,local)=>{
                    if (err)
                        return callback(err);
                    IDBFS.getRemoteSet(mount, (err,remote)=>{
                        if (err)
                            return callback(err);
                        var src = populate ? remote : local;
                        var dst = populate ? local : remote;
                        IDBFS.reconcile(src, dst, callback)
                    }
                    )
                }
                )
            }
            ,
            quit: ()=>{
                Object.values(IDBFS.dbs).forEach(value=>value.close());
                IDBFS.dbs = {}
            }
            ,
            getDB: (name,callback)=>{
                var db = IDBFS.dbs[name];
                if (db) {
                    return callback(null, db)
                }
                var req;
                try {
                    req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION)
                } catch (e) {
                    return callback(e)
                }
                if (!req) {
                    return callback("Unable to connect to IndexedDB")
                }
                req.onupgradeneeded = e=>{
                    var db = e.target.result;
                    var transaction = e.target.transaction;
                    var fileStore;
                    if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                        fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME)
                    } else {
                        fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME)
                    }
                    if (!fileStore.indexNames.contains("timestamp")) {
                        fileStore.createIndex("timestamp", "timestamp", {
                            unique: false
                        })
                    }
                }
                ;
                req.onsuccess = ()=>{
                    db = req.result;
                    IDBFS.dbs[name] = db;
                    callback(null, db)
                }
                ;
                req.onerror = e=>{
                    callback(this.error);
                    e.preventDefault()
                }
            }
            ,
            getLocalSet: (mount,callback)=>{
                var entries = {};
                function isRealDir(p) {
                    return p !== "." && p !== ".."
                }
                function toAbsolute(root) {
                    return p=>{
                        return PATH.join2(root, p)
                    }
                }
                var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
                while (check.length) {
                    var path = check.pop();
                    var stat;
                    try {
                        stat = FS.stat(path)
                    } catch (e) {
                        return callback(e)
                    }
                    if (FS.isDir(stat.mode)) {
                        check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))
                    }
                    entries[path] = {
                        "timestamp": stat.mtime
                    }
                }
                return callback(null, {
                    type: "local",
                    entries: entries
                })
            }
            ,
            getRemoteSet: (mount,callback)=>{
                var entries = {};
                IDBFS.getDB(mount.mountpoint, (err,db)=>{
                    if (err)
                        return callback(err);
                    try {
                        var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readonly");
                        transaction.onerror = e=>{
                            callback(this.error);
                            e.preventDefault()
                        }
                        ;
                        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
                        var index = store.index("timestamp");
                        index.openKeyCursor().onsuccess = event=>{
                            var cursor = event.target.result;
                            if (!cursor) {
                                return callback(null, {
                                    type: "remote",
                                    db: db,
                                    entries: entries
                                })
                            }
                            entries[cursor.primaryKey] = {
                                "timestamp": cursor.key
                            };
                            cursor.continue()
                        }
                    } catch (e) {
                        return callback(e)
                    }
                }
                )
            }
            ,
            loadLocalEntry: (path,callback)=>{
                var stat, node;
                try {
                    var lookup = FS.lookupPath(path);
                    node = lookup.node;
                    stat = FS.stat(path)
                } catch (e) {
                    return callback(e)
                }
                if (FS.isDir(stat.mode)) {
                    return callback(null, {
                        "timestamp": stat.mtime,
                        "mode": stat.mode
                    })
                } else if (FS.isFile(stat.mode)) {
                    node.contents = MEMFS.getFileDataAsTypedArray(node);
                    return callback(null, {
                        "timestamp": stat.mtime,
                        "mode": stat.mode,
                        "contents": node.contents
                    })
                } else {
                    return callback(new Error("node type not supported"))
                }
            }
            ,
            storeLocalEntry: (path,entry,callback)=>{
                try {
                    if (FS.isDir(entry["mode"])) {
                        FS.mkdirTree(path, entry["mode"])
                    } else if (FS.isFile(entry["mode"])) {
                        FS.writeFile(path, entry["contents"], {
                            canOwn: true
                        })
                    } else {
                        return callback(new Error("node type not supported"))
                    }
                    FS.chmod(path, entry["mode"]);
                    FS.utime(path, entry["timestamp"], entry["timestamp"])
                } catch (e) {
                    return callback(e)
                }
                callback(null)
            }
            ,
            removeLocalEntry: (path,callback)=>{
                try {
                    var stat = FS.stat(path);
                    if (FS.isDir(stat.mode)) {
                        FS.rmdir(path)
                    } else if (FS.isFile(stat.mode)) {
                        FS.unlink(path)
                    }
                } catch (e) {
                    return callback(e)
                }
                callback(null)
            }
            ,
            loadRemoteEntry: (store,path,callback)=>{
                var req = store.get(path);
                req.onsuccess = event=>{
                    callback(null, event.target.result)
                }
                ;
                req.onerror = e=>{
                    callback(this.error);
                    e.preventDefault()
                }
            }
            ,
            storeRemoteEntry: (store,path,entry,callback)=>{
                try {
                    var req = store.put(entry, path)
                } catch (e) {
                    callback(e);
                    return
                }
                req.onsuccess = ()=>{
                    callback(null)
                }
                ;
                req.onerror = e=>{
                    callback(this.error);
                    e.preventDefault()
                }
            }
            ,
            removeRemoteEntry: (store,path,callback)=>{
                var req = store.delete(path);
                req.onsuccess = ()=>{
                    callback(null)
                }
                ;
                req.onerror = e=>{
                    callback(this.error);
                    e.preventDefault()
                }
            }
            ,
            reconcile: (src,dst,callback)=>{
                var total = 0;
                var create = [];
                Object.keys(src.entries).forEach(function(key) {
                    var e = src.entries[key];
                    var e2 = dst.entries[key];
                    if (!e2 || e["timestamp"].getTime() != e2["timestamp"].getTime()) {
                        create.push(key);
                        total++
                    }
                });
                var remove = [];
                Object.keys(dst.entries).forEach(function(key) {
                    if (!src.entries[key]) {
                        remove.push(key);
                        total++
                    }
                });
                if (!total) {
                    return callback(null)
                }
                var errored = false;
                var db = src.type === "remote" ? src.db : dst.db;
                var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readwrite");
                var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
                function done(err) {
                    if (err && !errored) {
                        errored = true;
                        return callback(err)
                    }
                }
                transaction.onerror = e=>{
                    done(this.error);
                    e.preventDefault()
                }
                ;
                transaction.oncomplete = e=>{
                    if (!errored) {
                        callback(null)
                    }
                }
                ;
                create.sort().forEach(path=>{
                    if (dst.type === "local") {
                        IDBFS.loadRemoteEntry(store, path, (err,entry)=>{
                            if (err)
                                return done(err);
                            IDBFS.storeLocalEntry(path, entry, done)
                        }
                        )
                    } else {
                        IDBFS.loadLocalEntry(path, (err,entry)=>{
                            if (err)
                                return done(err);
                            IDBFS.storeRemoteEntry(store, path, entry, done)
                        }
                        )
                    }
                }
                );
                remove.sort().reverse().forEach(path=>{
                    if (dst.type === "local") {
                        IDBFS.removeLocalEntry(path, done)
                    } else {
                        IDBFS.removeRemoteEntry(store, path, done)
                    }
                }
                )
            }
        };
        Module["IDBFS"] = IDBFS;
        var ERRNO_CODES = {};
        Module["ERRNO_CODES"] = ERRNO_CODES;
        var NODEFS = {
            isWindows: false,
            staticInit: ()=>{
                NODEFS.isWindows = !!process.platform.match(/^win/);
                var flags = process["binding"]("constants");
                if (flags["fs"]) {
                    flags = flags["fs"]
                }
                NODEFS.flagsForNodeMap = {
                    1024: flags["O_APPEND"],
                    64: flags["O_CREAT"],
                    128: flags["O_EXCL"],
                    256: flags["O_NOCTTY"],
                    0: flags["O_RDONLY"],
                    2: flags["O_RDWR"],
                    4096: flags["O_SYNC"],
                    512: flags["O_TRUNC"],
                    1: flags["O_WRONLY"],
                    131072: flags["O_NOFOLLOW"]
                }
            }
            ,
            convertNodeCode: e=>{
                var code = e.code;
                return ERRNO_CODES[code]
            }
            ,
            mount: mount=>{
                return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0)
            }
            ,
            createNode: (parent,name,mode,dev)=>{
                if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
                    throw new FS.ErrnoError(28)
                }
                var node = FS.createNode(parent, name, mode);
                node.node_ops = NODEFS.node_ops;
                node.stream_ops = NODEFS.stream_ops;
                return node
            }
            ,
            getMode: path=>{
                var stat;
                try {
                    stat = fs.lstatSync(path);
                    if (NODEFS.isWindows) {
                        stat.mode = stat.mode | (stat.mode & 292) >> 2
                    }
                } catch (e) {
                    if (!e.code)
                        throw e;
                    throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                }
                return stat.mode
            }
            ,
            realPath: node=>{
                var parts = [];
                while (node.parent !== node) {
                    parts.push(node.name);
                    node = node.parent
                }
                parts.push(node.mount.opts.root);
                parts.reverse();
                return PATH.join.apply(null, parts)
            }
            ,
            flagsForNode: flags=>{
                flags &= ~2097152;
                flags &= ~2048;
                flags &= ~32768;
                flags &= ~524288;
                flags &= ~65536;
                var newFlags = 0;
                for (var k in NODEFS.flagsForNodeMap) {
                    if (flags & k) {
                        newFlags |= NODEFS.flagsForNodeMap[k];
                        flags ^= k
                    }
                }
                if (flags) {
                    throw new FS.ErrnoError(28)
                }
                return newFlags
            }
            ,
            node_ops: {
                getattr: node=>{
                    var path = NODEFS.realPath(node);
                    var stat;
                    try {
                        stat = fs.lstatSync(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                    if (NODEFS.isWindows && !stat.blksize) {
                        stat.blksize = 4096
                    }
                    if (NODEFS.isWindows && !stat.blocks) {
                        stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0
                    }
                    return {
                        dev: stat.dev,
                        ino: stat.ino,
                        mode: stat.mode,
                        nlink: stat.nlink,
                        uid: stat.uid,
                        gid: stat.gid,
                        rdev: stat.rdev,
                        size: stat.size,
                        atime: stat.atime,
                        mtime: stat.mtime,
                        ctime: stat.ctime,
                        blksize: stat.blksize,
                        blocks: stat.blocks
                    }
                }
                ,
                setattr: (node,attr)=>{
                    var path = NODEFS.realPath(node);
                    try {
                        if (attr.mode !== undefined) {
                            fs.chmodSync(path, attr.mode);
                            node.mode = attr.mode
                        }
                        if (attr.timestamp !== undefined) {
                            var date = new Date(attr.timestamp);
                            fs.utimesSync(path, date, date)
                        }
                        if (attr.size !== undefined) {
                            fs.truncateSync(path, attr.size)
                        }
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                lookup: (parent,name)=>{
                    var path = PATH.join2(NODEFS.realPath(parent), name);
                    var mode = NODEFS.getMode(path);
                    return NODEFS.createNode(parent, name, mode)
                }
                ,
                mknod: (parent,name,mode,dev)=>{
                    var node = NODEFS.createNode(parent, name, mode, dev);
                    var path = NODEFS.realPath(node);
                    try {
                        if (FS.isDir(node.mode)) {
                            fs.mkdirSync(path, node.mode)
                        } else {
                            fs.writeFileSync(path, "", {
                                mode: node.mode
                            })
                        }
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                    return node
                }
                ,
                rename: (oldNode,newDir,newName)=>{
                    var oldPath = NODEFS.realPath(oldNode);
                    var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
                    try {
                        fs.renameSync(oldPath, newPath)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                    oldNode.name = newName
                }
                ,
                unlink: (parent,name)=>{
                    var path = PATH.join2(NODEFS.realPath(parent), name);
                    try {
                        fs.unlinkSync(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                rmdir: (parent,name)=>{
                    var path = PATH.join2(NODEFS.realPath(parent), name);
                    try {
                        fs.rmdirSync(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                readdir: node=>{
                    var path = NODEFS.realPath(node);
                    try {
                        return fs.readdirSync(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                symlink: (parent,newName,oldPath)=>{
                    var newPath = PATH.join2(NODEFS.realPath(parent), newName);
                    try {
                        fs.symlinkSync(oldPath, newPath)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                readlink: node=>{
                    var path = NODEFS.realPath(node);
                    try {
                        path = fs.readlinkSync(path);
                        path = nodePath.relative(nodePath.resolve(node.mount.opts.root), path);
                        return path
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        if (e.code === "UNKNOWN")
                            throw new FS.ErrnoError(28);
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
            },
            stream_ops: {
                open: stream=>{
                    var path = NODEFS.realPath(stream.node);
                    try {
                        if (FS.isFile(stream.node.mode)) {
                            stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags))
                        }
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                close: stream=>{
                    try {
                        if (FS.isFile(stream.node.mode) && stream.nfd) {
                            fs.closeSync(stream.nfd)
                        }
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                read: (stream,buffer,offset,length,position)=>{
                    if (length === 0)
                        return 0;
                    try {
                        return fs.readSync(stream.nfd, Buffer.from(buffer.buffer), offset, length, position)
                    } catch (e) {
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                write: (stream,buffer,offset,length,position)=>{
                    try {
                        return fs.writeSync(stream.nfd, Buffer.from(buffer.buffer), offset, length, position)
                    } catch (e) {
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                    }
                }
                ,
                llseek: (stream,offset,whence)=>{
                    var position = offset;
                    if (whence === 1) {
                        position += stream.position
                    } else if (whence === 2) {
                        if (FS.isFile(stream.node.mode)) {
                            try {
                                var stat = fs.fstatSync(stream.nfd);
                                position += stat.size
                            } catch (e) {
                                throw new FS.ErrnoError(NODEFS.convertNodeCode(e))
                            }
                        }
                    }
                    if (position < 0) {
                        throw new FS.ErrnoError(28)
                    }
                    return position
                }
                ,
                mmap: (stream,length,position,prot,flags)=>{
                    if (!FS.isFile(stream.node.mode)) {
                        throw new FS.ErrnoError(43)
                    }
                    var ptr = mmapAlloc(length);
                    NODEFS.stream_ops.read(stream, HEAP8, ptr, length, position);
                    return {
                        ptr: ptr,
                        allocated: true
                    }
                }
                ,
                msync: (stream,buffer,offset,length,mmapFlags)=>{
                    NODEFS.stream_ops.write(stream, buffer, 0, length, offset, false);
                    return 0
                }
            }
        };
        Module["NODEFS"] = NODEFS;
        var WORKERFS = {
            DIR_MODE: 16895,
            FILE_MODE: 33279,
            reader: null,
            mount: function(mount) {
                assert(ENVIRONMENT_IS_WORKER);
                if (!WORKERFS.reader)
                    WORKERFS.reader = new FileReaderSync;
                var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
                var createdParents = {};
                function ensureParent(path) {
                    var parts = path.split("/");
                    var parent = root;
                    for (var i = 0; i < parts.length - 1; i++) {
                        var curr = parts.slice(0, i + 1).join("/");
                        if (!createdParents[curr]) {
                            createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0)
                        }
                        parent = createdParents[curr]
                    }
                    return parent
                }
                function base(path) {
                    var parts = path.split("/");
                    return parts[parts.length - 1]
                }
                Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
                    WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate)
                });
                (mount.opts["blobs"] || []).forEach(function(obj) {
                    WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"])
                });
                (mount.opts["packages"] || []).forEach(function(pack) {
                    pack["metadata"].files.forEach(function(file) {
                        var name = file.filename.substr(1);
                        WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end))
                    })
                });
                return root
            },
            createNode: function(parent, name, mode, dev, contents, mtime) {
                var node = FS.createNode(parent, name, mode);
                node.mode = mode;
                node.node_ops = WORKERFS.node_ops;
                node.stream_ops = WORKERFS.stream_ops;
                node.timestamp = (mtime || new Date).getTime();
                assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
                if (mode === WORKERFS.FILE_MODE) {
                    node.size = contents.size;
                    node.contents = contents
                } else {
                    node.size = 4096;
                    node.contents = {}
                }
                if (parent) {
                    parent.contents[name] = node
                }
                return node
            },
            node_ops: {
                getattr: function(node) {
                    return {
                        dev: 1,
                        ino: node.id,
                        mode: node.mode,
                        nlink: 1,
                        uid: 0,
                        gid: 0,
                        rdev: undefined,
                        size: node.size,
                        atime: new Date(node.timestamp),
                        mtime: new Date(node.timestamp),
                        ctime: new Date(node.timestamp),
                        blksize: 4096,
                        blocks: Math.ceil(node.size / 4096)
                    }
                },
                setattr: function(node, attr) {
                    if (attr.mode !== undefined) {
                        node.mode = attr.mode
                    }
                    if (attr.timestamp !== undefined) {
                        node.timestamp = attr.timestamp
                    }
                },
                lookup: function(parent, name) {
                    throw new FS.ErrnoError(44)
                },
                mknod: function(parent, name, mode, dev) {
                    throw new FS.ErrnoError(63)
                },
                rename: function(oldNode, newDir, newName) {
                    throw new FS.ErrnoError(63)
                },
                unlink: function(parent, name) {
                    throw new FS.ErrnoError(63)
                },
                rmdir: function(parent, name) {
                    throw new FS.ErrnoError(63)
                },
                readdir: function(node) {
                    var entries = [".", ".."];
                    for (var key in node.contents) {
                        if (!node.contents.hasOwnProperty(key)) {
                            continue
                        }
                        entries.push(key)
                    }
                    return entries
                },
                symlink: function(parent, newName, oldPath) {
                    throw new FS.ErrnoError(63)
                },
                readlink: function(node) {
                    throw new FS.ErrnoError(63)
                }
            },
            stream_ops: {
                read: function(stream, buffer, offset, length, position) {
                    if (position >= stream.node.size)
                        return 0;
                    var chunk = stream.node.contents.slice(position, position + length);
                    var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
                    buffer.set(new Uint8Array(ab), offset);
                    return chunk.size
                },
                write: function(stream, buffer, offset, length, position) {
                    throw new FS.ErrnoError(29)
                },
                llseek: function(stream, offset, whence) {
                    var position = offset;
                    if (whence === 1) {
                        position += stream.position
                    } else if (whence === 2) {
                        if (FS.isFile(stream.node.mode)) {
                            position += stream.node.size
                        }
                    }
                    if (position < 0) {
                        throw new FS.ErrnoError(28)
                    }
                    return position
                }
            }
        };
        Module["WORKERFS"] = WORKERFS;
        var PROXYFS = {
            mount: function(mount) {
                return PROXYFS.createNode(null, "/", mount.opts.fs.lstat(mount.opts.root).mode, 0)
            },
            createNode: function(parent, name, mode, dev) {
                if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                }
                var node = FS.createNode(parent, name, mode);
                node.node_ops = PROXYFS.node_ops;
                node.stream_ops = PROXYFS.stream_ops;
                return node
            },
            realPath: function(node) {
                var parts = [];
                while (node.parent !== node) {
                    parts.push(node.name);
                    node = node.parent
                }
                parts.push(node.mount.opts.root);
                parts.reverse();
                return PATH.join.apply(null, parts)
            },
            node_ops: {
                getattr: function(node) {
                    var path = PROXYFS.realPath(node);
                    var stat;
                    try {
                        stat = node.mount.opts.fs.lstat(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                    return {
                        dev: stat.dev,
                        ino: stat.ino,
                        mode: stat.mode,
                        nlink: stat.nlink,
                        uid: stat.uid,
                        gid: stat.gid,
                        rdev: stat.rdev,
                        size: stat.size,
                        atime: stat.atime,
                        mtime: stat.mtime,
                        ctime: stat.ctime,
                        blksize: stat.blksize,
                        blocks: stat.blocks
                    }
                },
                setattr: function(node, attr) {
                    var path = PROXYFS.realPath(node);
                    try {
                        if (attr.mode !== undefined) {
                            node.mount.opts.fs.chmod(path, attr.mode);
                            node.mode = attr.mode
                        }
                        if (attr.timestamp !== undefined) {
                            var date = new Date(attr.timestamp);
                            node.mount.opts.fs.utime(path, date, date)
                        }
                        if (attr.size !== undefined) {
                            node.mount.opts.fs.truncate(path, attr.size)
                        }
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                lookup: function(parent, name) {
                    try {
                        var path = PATH.join2(PROXYFS.realPath(parent), name);
                        var mode = parent.mount.opts.fs.lstat(path).mode;
                        var node = PROXYFS.createNode(parent, name, mode);
                        return node
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                mknod: function(parent, name, mode, dev) {
                    var node = PROXYFS.createNode(parent, name, mode, dev);
                    var path = PROXYFS.realPath(node);
                    try {
                        if (FS.isDir(node.mode)) {
                            node.mount.opts.fs.mkdir(path, node.mode)
                        } else {
                            node.mount.opts.fs.writeFile(path, "", {
                                mode: node.mode
                            })
                        }
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                    return node
                },
                rename: function(oldNode, newDir, newName) {
                    var oldPath = PROXYFS.realPath(oldNode);
                    var newPath = PATH.join2(PROXYFS.realPath(newDir), newName);
                    try {
                        oldNode.mount.opts.fs.rename(oldPath, newPath)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                unlink: function(parent, name) {
                    var path = PATH.join2(PROXYFS.realPath(parent), name);
                    try {
                        parent.mount.opts.fs.unlink(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                rmdir: function(parent, name) {
                    var path = PATH.join2(PROXYFS.realPath(parent), name);
                    try {
                        parent.mount.opts.fs.rmdir(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                readdir: function(node) {
                    var path = PROXYFS.realPath(node);
                    try {
                        return node.mount.opts.fs.readdir(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                symlink: function(parent, newName, oldPath) {
                    var newPath = PATH.join2(PROXYFS.realPath(parent), newName);
                    try {
                        parent.mount.opts.fs.symlink(oldPath, newPath)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                readlink: function(node) {
                    var path = PROXYFS.realPath(node);
                    try {
                        return node.mount.opts.fs.readlink(path)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                }
            },
            stream_ops: {
                open: function(stream) {
                    var path = PROXYFS.realPath(stream.node);
                    try {
                        stream.nfd = stream.node.mount.opts.fs.open(path, stream.flags)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                close: function(stream) {
                    try {
                        stream.node.mount.opts.fs.close(stream.nfd)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                read: function(stream, buffer, offset, length, position) {
                    try {
                        return stream.node.mount.opts.fs.read(stream.nfd, buffer, offset, length, position)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                write: function(stream, buffer, offset, length, position) {
                    try {
                        return stream.node.mount.opts.fs.write(stream.nfd, buffer, offset, length, position)
                    } catch (e) {
                        if (!e.code)
                            throw e;
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                },
                llseek: function(stream, offset, whence) {
                    var position = offset;
                    if (whence === 1) {
                        position += stream.position
                    } else if (whence === 2) {
                        if (FS.isFile(stream.node.mode)) {
                            try {
                                var stat = stream.node.node_ops.getattr(stream.node);
                                position += stat.size
                            } catch (e) {
                                throw new FS.ErrnoError(ERRNO_CODES[e.code])
                            }
                        }
                    }
                    if (position < 0) {
                        throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                    }
                    return position
                }
            }
        };
        Module["PROXYFS"] = PROXYFS;
        var LZ4 = {
            DIR_MODE: 16895,
            FILE_MODE: 33279,
            CHUNK_SIZE: -1,
            codec: null,
            init: function() {
                if (LZ4.codec)
                    return;
                LZ4.codec = function() {
                    var MiniLZ4 = function() {
                        var exports = {};
                        exports.uncompress = function(input, output, sIdx, eIdx) {
                            sIdx = sIdx || 0;
                            eIdx = eIdx || input.length - sIdx;
                            for (var i = sIdx, n = eIdx, j = 0; i < n; ) {
                                var token = input[i++];
                                var literals_length = token >> 4;
                                if (literals_length > 0) {
                                    var l = literals_length + 240;
                                    while (l === 255) {
                                        l = input[i++];
                                        literals_length += l
                                    }
                                    var end = i + literals_length;
                                    while (i < end)
                                        output[j++] = input[i++];
                                    if (i === n)
                                        return j
                                }
                                var offset = input[i++] | input[i++] << 8;
                                if (offset === 0)
                                    return j;
                                if (offset > j)
                                    return -(i - 2);
                                var match_length = token & 15;
                                var l = match_length + 240;
                                while (l === 255) {
                                    l = input[i++];
                                    match_length += l
                                }
                                var pos = j - offset;
                                var end = j + match_length + 4;
                                while (j < end)
                                    output[j++] = output[pos++]
                            }
                            return j
                        }
                        ;
                        var maxInputSize = 2113929216
                          , minMatch = 4
                          , hashLog = 16
                          , hashShift = minMatch * 8 - hashLog
                          , hashSize = 1 << hashLog
                          , copyLength = 8
                          , lastLiterals = 5
                          , mfLimit = copyLength + minMatch
                          , skipStrength = 6
                          , mlBits = 4
                          , mlMask = (1 << mlBits) - 1
                          , runBits = 8 - mlBits
                          , runMask = (1 << runBits) - 1
                          , hasher = 2654435761;
                        assert(hashShift === 16);
                        var hashTable = new Int16Array(1 << 16);
                        var empty = new Int16Array(hashTable.length);
                        exports.compressBound = function(isize) {
                            return isize > maxInputSize ? 0 : isize + isize / 255 + 16 | 0
                        }
                        ;
                        exports.compress = function(src, dst, sIdx, eIdx) {
                            hashTable.set(empty);
                            return compressBlock(src, dst, 0, sIdx || 0, eIdx || dst.length)
                        }
                        ;
                        function compressBlock(src, dst, pos, sIdx, eIdx) {
                            var dpos = sIdx;
                            var dlen = eIdx - sIdx;
                            var anchor = 0;
                            if (src.length >= maxInputSize)
                                throw new Error("input too large");
                            if (src.length > mfLimit) {
                                var n = exports.compressBound(src.length);
                                if (dlen < n)
                                    throw Error("output too small: " + dlen + " < " + n);
                                var step = 1
                                  , findMatchAttempts = (1 << skipStrength) + 3
                                  , srcLength = src.length - mfLimit;
                                while (pos + minMatch < srcLength) {
                                    var sequenceLowBits = src[pos + 1] << 8 | src[pos];
                                    var sequenceHighBits = src[pos + 3] << 8 | src[pos + 2];
                                    var hash = Math.imul(sequenceLowBits | sequenceHighBits << 16, hasher) >>> hashShift;
                                    var ref = hashTable[hash] - 1;
                                    hashTable[hash] = pos + 1;
                                    if (ref < 0 || pos - ref >>> 16 > 0 || ((src[ref + 3] << 8 | src[ref + 2]) != sequenceHighBits || (src[ref + 1] << 8 | src[ref]) != sequenceLowBits)) {
                                        step = findMatchAttempts++ >> skipStrength;
                                        pos += step;
                                        continue
                                    }
                                    findMatchAttempts = (1 << skipStrength) + 3;
                                    var literals_length = pos - anchor;
                                    var offset = pos - ref;
                                    pos += minMatch;
                                    ref += minMatch;
                                    var match_length = pos;
                                    while (pos < srcLength && src[pos] == src[ref]) {
                                        pos++;
                                        ref++
                                    }
                                    match_length = pos - match_length;
                                    var token = match_length < mlMask ? match_length : mlMask;
                                    if (literals_length >= runMask) {
                                        dst[dpos++] = (runMask << mlBits) + token;
                                        for (var len = literals_length - runMask; len > 254; len -= 255) {
                                            dst[dpos++] = 255
                                        }
                                        dst[dpos++] = len
                                    } else {
                                        dst[dpos++] = (literals_length << mlBits) + token
                                    }
                                    for (var i = 0; i < literals_length; i++) {
                                        dst[dpos++] = src[anchor + i]
                                    }
                                    dst[dpos++] = offset;
                                    dst[dpos++] = offset >> 8;
                                    if (match_length >= mlMask) {
                                        match_length -= mlMask;
                                        while (match_length >= 255) {
                                            match_length -= 255;
                                            dst[dpos++] = 255
                                        }
                                        dst[dpos++] = match_length
                                    }
                                    anchor = pos
                                }
                            }
                            if (anchor == 0)
                                return 0;
                            literals_length = src.length - anchor;
                            if (literals_length >= runMask) {
                                dst[dpos++] = runMask << mlBits;
                                for (var ln = literals_length - runMask; ln > 254; ln -= 255) {
                                    dst[dpos++] = 255
                                }
                                dst[dpos++] = ln
                            } else {
                                dst[dpos++] = literals_length << mlBits
                            }
                            pos = anchor;
                            while (pos < src.length) {
                                dst[dpos++] = src[pos++]
                            }
                            return dpos
                        }
                        exports.CHUNK_SIZE = 2048;
                        exports.compressPackage = function(data, verify) {
                            if (verify) {
                                var temp = new Uint8Array(exports.CHUNK_SIZE)
                            }
                            assert(data instanceof ArrayBuffer);
                            data = new Uint8Array(data);
                            console.log("compressing package of size " + data.length);
                            var compressedChunks = [];
                            var successes = [];
                            var offset = 0;
                            var total = 0;
                            while (offset < data.length) {
                                var chunk = data.subarray(offset, offset + exports.CHUNK_SIZE);
                                offset += exports.CHUNK_SIZE;
                                var bound = exports.compressBound(chunk.length);
                                var compressed = new Uint8Array(bound);
                                var compressedSize = exports.compress(chunk, compressed);
                                if (compressedSize > 0) {
                                    assert(compressedSize <= bound);
                                    compressed = compressed.subarray(0, compressedSize);
                                    compressedChunks.push(compressed);
                                    total += compressedSize;
                                    successes.push(1);
                                    if (verify) {
                                        var back = exports.uncompress(compressed, temp);
                                        assert(back === chunk.length, [back, chunk.length]);
                                        for (var i = 0; i < chunk.length; i++) {
                                            assert(chunk[i] === temp[i])
                                        }
                                    }
                                } else {
                                    assert(compressedSize === 0);
                                    compressedChunks.push(chunk);
                                    total += chunk.length;
                                    successes.push(0)
                                }
                            }
                            data = null;
                            var compressedData = {
                                "data": new Uint8Array(total + exports.CHUNK_SIZE * 2),
                                "cachedOffset": total,
                                "cachedIndexes": [-1, -1],
                                "cachedChunks": [null, null],
                                "offsets": [],
                                "sizes": [],
                                "successes": successes
                            };
                            offset = 0;
                            for (var i = 0; i < compressedChunks.length; i++) {
                                compressedData["data"].set(compressedChunks[i], offset);
                                compressedData["offsets"][i] = offset;
                                compressedData["sizes"][i] = compressedChunks[i].length;
                                offset += compressedChunks[i].length
                            }
                            console.log("compressed package into " + [compressedData["data"].length]);
                            assert(offset === total);
                            return compressedData
                        }
                        ;
                        assert(exports.CHUNK_SIZE < 1 << 15);
                        return exports
                    }();
                    return MiniLZ4
                }();
                LZ4.CHUNK_SIZE = LZ4.codec.CHUNK_SIZE
            },
            loadPackage: function(pack, preloadPlugin) {
                LZ4.init();
                var compressedData = pack["compressedData"];
                if (!compressedData)
                    compressedData = LZ4.codec.compressPackage(pack["data"]);
                assert(compressedData["cachedIndexes"].length === compressedData["cachedChunks"].length);
                for (var i = 0; i < compressedData["cachedIndexes"].length; i++) {
                    compressedData["cachedIndexes"][i] = -1;
                    compressedData["cachedChunks"][i] = compressedData["data"].subarray(compressedData["cachedOffset"] + i * LZ4.CHUNK_SIZE, compressedData["cachedOffset"] + (i + 1) * LZ4.CHUNK_SIZE);
                    assert(compressedData["cachedChunks"][i].length === LZ4.CHUNK_SIZE)
                }
                pack["metadata"].files.forEach(function(file) {
                    var dir = PATH.dirname(file.filename);
                    var name = PATH.basename(file.filename);
                    FS.createPath("", dir, true, true);
                    var parent = FS.analyzePath(dir).object;
                    LZ4.createNode(parent, name, LZ4.FILE_MODE, 0, {
                        compressedData: compressedData,
                        start: file.start,
                        end: file.end
                    })
                });
                if (preloadPlugin) {
                    Browser.init();
                    pack["metadata"].files.forEach(function(file) {
                        var handled = false;
                        var fullname = file.filename;
                        Module["preloadPlugins"].forEach(function(plugin) {
                            if (handled)
                                return;
                            if (plugin["canHandle"](fullname)) {
                                var dep = getUniqueRunDependency("fp " + fullname);
                                addRunDependency(dep);
                                var finish = function() {
                                    removeRunDependency(dep)
                                };
                                var byteArray = FS.readFile(fullname);
                                plugin["handle"](byteArray, fullname, finish, finish);
                                handled = true
                            }
                        })
                    })
                }
            },
            createNode: function(parent, name, mode, dev, contents, mtime) {
                var node = FS.createNode(parent, name, mode);
                node.mode = mode;
                node.node_ops = LZ4.node_ops;
                node.stream_ops = LZ4.stream_ops;
                node.timestamp = (mtime || new Date).getTime();
                assert(LZ4.FILE_MODE !== LZ4.DIR_MODE);
                if (mode === LZ4.FILE_MODE) {
                    node.size = contents.end - contents.start;
                    node.contents = contents
                } else {
                    node.size = 4096;
                    node.contents = {}
                }
                if (parent) {
                    parent.contents[name] = node
                }
                return node
            },
            node_ops: {
                getattr: function(node) {
                    return {
                        dev: 1,
                        ino: node.id,
                        mode: node.mode,
                        nlink: 1,
                        uid: 0,
                        gid: 0,
                        rdev: undefined,
                        size: node.size,
                        atime: new Date(node.timestamp),
                        mtime: new Date(node.timestamp),
                        ctime: new Date(node.timestamp),
                        blksize: 4096,
                        blocks: Math.ceil(node.size / 4096)
                    }
                },
                setattr: function(node, attr) {
                    if (attr.mode !== undefined) {
                        node.mode = attr.mode
                    }
                    if (attr.timestamp !== undefined) {
                        node.timestamp = attr.timestamp
                    }
                },
                lookup: function(parent, name) {
                    throw new FS.ErrnoError(44)
                },
                mknod: function(parent, name, mode, dev) {
                    throw new FS.ErrnoError(63)
                },
                rename: function(oldNode, newDir, newName) {
                    throw new FS.ErrnoError(63)
                },
                unlink: function(parent, name) {
                    throw new FS.ErrnoError(63)
                },
                rmdir: function(parent, name) {
                    throw new FS.ErrnoError(63)
                },
                readdir: function(node) {
                    throw new FS.ErrnoError(63)
                },
                symlink: function(parent, newName, oldPath) {
                    throw new FS.ErrnoError(63)
                },
                readlink: function(node) {
                    throw new FS.ErrnoError(63)
                }
            },
            stream_ops: {
                read: function(stream, buffer, offset, length, position) {
                    length = Math.min(length, stream.node.size - position);
                    if (length <= 0)
                        return 0;
                    var contents = stream.node.contents;
                    var compressedData = contents.compressedData;
                    var written = 0;
                    while (written < length) {
                        var start = contents.start + position + written;
                        var desired = length - written;
                        var chunkIndex = Math.floor(start / LZ4.CHUNK_SIZE);
                        var compressedStart = compressedData["offsets"][chunkIndex];
                        var compressedSize = compressedData["sizes"][chunkIndex];
                        var currChunk;
                        if (compressedData["successes"][chunkIndex]) {
                            var found = compressedData["cachedIndexes"].indexOf(chunkIndex);
                            if (found >= 0) {
                                currChunk = compressedData["cachedChunks"][found]
                            } else {
                                compressedData["cachedIndexes"].pop();
                                compressedData["cachedIndexes"].unshift(chunkIndex);
                                currChunk = compressedData["cachedChunks"].pop();
                                compressedData["cachedChunks"].unshift(currChunk);
                                if (compressedData["debug"]) {
                                    out("decompressing chunk " + chunkIndex);
                                    Module["decompressedChunks"] = (Module["decompressedChunks"] || 0) + 1
                                }
                                var compressed = compressedData["data"].subarray(compressedStart, compressedStart + compressedSize);
                                var originalSize = LZ4.codec.uncompress(compressed, currChunk);
                                if (chunkIndex < compressedData["successes"].length - 1)
                                    assert(originalSize === LZ4.CHUNK_SIZE)
                            }
                        } else {
                            currChunk = compressedData["data"].subarray(compressedStart, compressedStart + LZ4.CHUNK_SIZE)
                        }
                        var startInChunk = start % LZ4.CHUNK_SIZE;
                        var endInChunk = Math.min(startInChunk + desired, LZ4.CHUNK_SIZE);
                        buffer.set(currChunk.subarray(startInChunk, endInChunk), offset + written);
                        var currWritten = endInChunk - startInChunk;
                        written += currWritten
                    }
                    return written
                },
                write: function(stream, buffer, offset, length, position) {
                    throw new FS.ErrnoError(29)
                },
                llseek: function(stream, offset, whence) {
                    var position = offset;
                    if (whence === 1) {
                        position += stream.position
                    } else if (whence === 2) {
                        if (FS.isFile(stream.node.mode)) {
                            position += stream.node.size
                        }
                    }
                    if (position < 0) {
                        throw new FS.ErrnoError(28)
                    }
                    return position
                }
            }
        };
        Module["LZ4"] = LZ4;
        var FS = {
            root: null,
            mounts: [],
            devices: {},
            streams: [],
            nextInode: 1,
            nameTable: null,
            currentPath: "/",
            initialized: false,
            ignorePermissions: true,
            ErrnoError: null,
            genericErrors: {},
            filesystems: null,
            syncFSRequests: 0,
            lookupPath: (path,opts={})=>{
                path = PATH_FS.resolve(FS.cwd(), path);
                if (!path)
                    return {
                        path: "",
                        node: null
                    };
                var defaults = {
                    follow_mount: true,
                    recurse_count: 0
                };
                opts = Object.assign(defaults, opts);
                if (opts.recurse_count > 8) {
                    throw new FS.ErrnoError(32)
                }
                var parts = PATH.normalizeArray(path.split("/").filter(p=>!!p), false);
                var current = FS.root;
                var current_path = "/";
                for (var i = 0; i < parts.length; i++) {
                    var islast = i === parts.length - 1;
                    if (islast && opts.parent) {
                        break
                    }
                    current = FS.lookupNode(current, parts[i]);
                    current_path = PATH.join2(current_path, parts[i]);
                    if (FS.isMountpoint(current)) {
                        if (!islast || islast && opts.follow_mount) {
                            current = current.mounted.root
                        }
                    }
                    if (!islast || opts.follow) {
                        var count = 0;
                        while (FS.isLink(current.mode)) {
                            var link = FS.readlink(current_path);
                            current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                            var lookup = FS.lookupPath(current_path, {
                                recurse_count: opts.recurse_count + 1
                            });
                            current = lookup.node;
                            if (count++ > 40) {
                                throw new FS.ErrnoError(32)
                            }
                        }
                    }
                }
                return {
                    path: current_path,
                    node: current
                }
            }
            ,
            getPath: node=>{
                var path;
                while (true) {
                    if (FS.isRoot(node)) {
                        var mount = node.mount.mountpoint;
                        if (!path)
                            return mount;
                        return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path
                    }
                    path = path ? node.name + "/" + path : node.name;
                    node = node.parent
                }
            }
            ,
            hashName: (parentid,name)=>{
                var hash = 0;
                for (var i = 0; i < name.length; i++) {
                    hash = (hash << 5) - hash + name.charCodeAt(i) | 0
                }
                return (parentid + hash >>> 0) % FS.nameTable.length
            }
            ,
            hashAddNode: node=>{
                var hash = FS.hashName(node.parent.id, node.name);
                node.name_next = FS.nameTable[hash];
                FS.nameTable[hash] = node
            }
            ,
            hashRemoveNode: node=>{
                var hash = FS.hashName(node.parent.id, node.name);
                if (FS.nameTable[hash] === node) {
                    FS.nameTable[hash] = node.name_next
                } else {
                    var current = FS.nameTable[hash];
                    while (current) {
                        if (current.name_next === node) {
                            current.name_next = node.name_next;
                            break
                        }
                        current = current.name_next
                    }
                }
            }
            ,
            lookupNode: (parent,name)=>{
                var errCode = FS.mayLookup(parent);
                if (errCode) {
                    throw new FS.ErrnoError(errCode,parent)
                }
                var hash = FS.hashName(parent.id, name);
                for (var node = FS.nameTable[hash]; node; node = node.name_next) {
                    var nodeName = node.name;
                    if (node.parent.id === parent.id && nodeName === name) {
                        return node
                    }
                }
                return FS.lookup(parent, name)
            }
            ,
            createNode: (parent,name,mode,rdev)=>{
                var node = new FS.FSNode(parent,name,mode,rdev);
                FS.hashAddNode(node);
                return node
            }
            ,
            destroyNode: node=>{
                FS.hashRemoveNode(node)
            }
            ,
            isRoot: node=>{
                return node === node.parent
            }
            ,
            isMountpoint: node=>{
                return !!node.mounted
            }
            ,
            isFile: mode=>{
                return (mode & 61440) === 32768
            }
            ,
            isDir: mode=>{
                return (mode & 61440) === 16384
            }
            ,
            isLink: mode=>{
                return (mode & 61440) === 40960
            }
            ,
            isChrdev: mode=>{
                return (mode & 61440) === 8192
            }
            ,
            isBlkdev: mode=>{
                return (mode & 61440) === 24576
            }
            ,
            isFIFO: mode=>{
                return (mode & 61440) === 4096
            }
            ,
            isSocket: mode=>{
                return (mode & 49152) === 49152
            }
            ,
            flagModes: {
                "r": 0,
                "r+": 2,
                "w": 577,
                "w+": 578,
                "a": 1089,
                "a+": 1090
            },
            modeStringToFlags: str=>{
                var flags = FS.flagModes[str];
                if (typeof flags == "undefined") {
                    throw new Error("Unknown file open mode: " + str)
                }
                return flags
            }
            ,
            flagsToPermissionString: flag=>{
                var perms = ["r", "w", "rw"][flag & 3];
                if (flag & 512) {
                    perms += "w"
                }
                return perms
            }
            ,
            nodePermissions: (node,perms)=>{
                if (FS.ignorePermissions) {
                    return 0
                }
                if (perms.includes("r") && !(node.mode & 292)) {
                    return 2
                } else if (perms.includes("w") && !(node.mode & 146)) {
                    return 2
                } else if (perms.includes("x") && !(node.mode & 73)) {
                    return 2
                }
                return 0
            }
            ,
            mayLookup: dir=>{
                var errCode = FS.nodePermissions(dir, "x");
                if (errCode)
                    return errCode;
                if (!dir.node_ops.lookup)
                    return 2;
                return 0
            }
            ,
            mayCreate: (dir,name)=>{
                try {
                    var node = FS.lookupNode(dir, name);
                    return 20
                } catch (e) {}
                return FS.nodePermissions(dir, "wx")
            }
            ,
            mayDelete: (dir,name,isdir)=>{
                var node;
                try {
                    node = FS.lookupNode(dir, name)
                } catch (e) {
                    return e.errno
                }
                var errCode = FS.nodePermissions(dir, "wx");
                if (errCode) {
                    return errCode
                }
                if (isdir) {
                    if (!FS.isDir(node.mode)) {
                        return 54
                    }
                    if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                        return 10
                    }
                } else {
                    if (FS.isDir(node.mode)) {
                        return 31
                    }
                }
                return 0
            }
            ,
            mayOpen: (node,flags)=>{
                if (!node) {
                    return 44
                }
                if (FS.isLink(node.mode)) {
                    return 32
                } else if (FS.isDir(node.mode)) {
                    if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
                        return 31
                    }
                }
                return FS.nodePermissions(node, FS.flagsToPermissionString(flags))
            }
            ,
            MAX_OPEN_FDS: 4096,
            nextfd: (fd_start=0,fd_end=FS.MAX_OPEN_FDS)=>{
                for (var fd = fd_start; fd <= fd_end; fd++) {
                    if (!FS.streams[fd]) {
                        return fd
                    }
                }
                throw new FS.ErrnoError(33)
            }
            ,
            getStream: fd=>FS.streams[fd],
            createStream: (stream,fd_start,fd_end)=>{
                if (!FS.FSStream) {
                    FS.FSStream = function() {
                        this.shared = {}
                    }
                    ;
                    FS.FSStream.prototype = {};
                    Object.defineProperties(FS.FSStream.prototype, {
                        object: {
                            get: function() {
                                return this.node
                            },
                            set: function(val) {
                                this.node = val
                            }
                        },
                        isRead: {
                            get: function() {
                                return (this.flags & 2097155) !== 1
                            }
                        },
                        isWrite: {
                            get: function() {
                                return (this.flags & 2097155) !== 0
                            }
                        },
                        isAppend: {
                            get: function() {
                                return this.flags & 1024
                            }
                        },
                        flags: {
                            get: function() {
                                return this.shared.flags
                            },
                            set: function(val) {
                                this.shared.flags = val
                            }
                        },
                        position: {
                            get: function() {
                                return this.shared.position
                            },
                            set: function(val) {
                                this.shared.position = val
                            }
                        }
                    })
                }
                stream = Object.assign(new FS.FSStream, stream);
                var fd = FS.nextfd(fd_start, fd_end);
                stream.fd = fd;
                FS.streams[fd] = stream;
                return stream
            }
            ,
            closeStream: fd=>{
                FS.streams[fd] = null
            }
            ,
            chrdev_stream_ops: {
                open: stream=>{
                    var device = FS.getDevice(stream.node.rdev);
                    stream.stream_ops = device.stream_ops;
                    if (stream.stream_ops.open) {
                        stream.stream_ops.open(stream)
                    }
                }
                ,
                llseek: ()=>{
                    throw new FS.ErrnoError(70)
                }
            },
            major: dev=>dev >> 8,
            minor: dev=>dev & 255,
            makedev: (ma,mi)=>ma << 8 | mi,
            registerDevice: (dev,ops)=>{
                FS.devices[dev] = {
                    stream_ops: ops
                }
            }
            ,
            getDevice: dev=>FS.devices[dev],
            getMounts: mount=>{
                var mounts = [];
                var check = [mount];
                while (check.length) {
                    var m = check.pop();
                    mounts.push(m);
                    check.push.apply(check, m.mounts)
                }
                return mounts
            }
            ,
            syncfs: (populate,callback)=>{
                if (typeof populate == "function") {
                    callback = populate;
                    populate = false
                }
                FS.syncFSRequests++;
                if (FS.syncFSRequests > 1) {
                    err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work")
                }
                var mounts = FS.getMounts(FS.root.mount);
                var completed = 0;
                function doCallback(errCode) {
                    FS.syncFSRequests--;
                    return callback(errCode)
                }
                function done(errCode) {
                    if (errCode) {
                        if (!done.errored) {
                            done.errored = true;
                            return doCallback(errCode)
                        }
                        return
                    }
                    if (++completed >= mounts.length) {
                        doCallback(null)
                    }
                }
                mounts.forEach(mount=>{
                    if (!mount.type.syncfs) {
                        return done(null)
                    }
                    mount.type.syncfs(mount, populate, done)
                }
                )
            }
            ,
            mount: (type,opts,mountpoint)=>{
                var root = mountpoint === "/";
                var pseudo = !mountpoint;
                var node;
                if (root && FS.root) {
                    throw new FS.ErrnoError(10)
                } else if (!root && !pseudo) {
                    var lookup = FS.lookupPath(mountpoint, {
                        follow_mount: false
                    });
                    mountpoint = lookup.path;
                    node = lookup.node;
                    if (FS.isMountpoint(node)) {
                        throw new FS.ErrnoError(10)
                    }
                    if (!FS.isDir(node.mode)) {
                        throw new FS.ErrnoError(54)
                    }
                }
                var mount = {
                    type: type,
                    opts: opts,
                    mountpoint: mountpoint,
                    mounts: []
                };
                var mountRoot = type.mount(mount);
                mountRoot.mount = mount;
                mount.root = mountRoot;
                if (root) {
                    FS.root = mountRoot
                } else if (node) {
                    node.mounted = mount;
                    if (node.mount) {
                        node.mount.mounts.push(mount)
                    }
                }
                return mountRoot
            }
            ,
            unmount: mountpoint=>{
                var lookup = FS.lookupPath(mountpoint, {
                    follow_mount: false
                });
                if (!FS.isMountpoint(lookup.node)) {
                    throw new FS.ErrnoError(28)
                }
                var node = lookup.node;
                var mount = node.mounted;
                var mounts = FS.getMounts(mount);
                Object.keys(FS.nameTable).forEach(hash=>{
                    var current = FS.nameTable[hash];
                    while (current) {
                        var next = current.name_next;
                        if (mounts.includes(current.mount)) {
                            FS.destroyNode(current)
                        }
                        current = next
                    }
                }
                );
                node.mounted = null;
                var idx = node.mount.mounts.indexOf(mount);
                node.mount.mounts.splice(idx, 1)
            }
            ,
            lookup: (parent,name)=>{
                return parent.node_ops.lookup(parent, name)
            }
            ,
            mknod: (path,mode,dev)=>{
                var lookup = FS.lookupPath(path, {
                    parent: true
                });
                var parent = lookup.node;
                var name = PATH.basename(path);
                if (!name || name === "." || name === "..") {
                    throw new FS.ErrnoError(28)
                }
                var errCode = FS.mayCreate(parent, name);
                if (errCode) {
                    throw new FS.ErrnoError(errCode)
                }
                if (!parent.node_ops.mknod) {
                    throw new FS.ErrnoError(63)
                }
                return parent.node_ops.mknod(parent, name, mode, dev)
            }
            ,
            create: (path,mode)=>{
                mode = mode !== undefined ? mode : 438;
                mode &= 4095;
                mode |= 32768;
                return FS.mknod(path, mode, 0)
            }
            ,
            mkdir: (path,mode)=>{
                mode = mode !== undefined ? mode : 511;
                mode &= 511 | 512;
                mode |= 16384;
                return FS.mknod(path, mode, 0)
            }
            ,
            mkdirTree: (path,mode)=>{
                var dirs = path.split("/");
                var d = "";
                for (var i = 0; i < dirs.length; ++i) {
                    if (!dirs[i])
                        continue;
                    d += "/" + dirs[i];
                    try {
                        FS.mkdir(d, mode)
                    } catch (e) {
                        if (e.errno != 20)
                            throw e
                    }
                }
            }
            ,
            mkdev: (path,mode,dev)=>{
                if (typeof dev == "undefined") {
                    dev = mode;
                    mode = 438
                }
                mode |= 8192;
                return FS.mknod(path, mode, dev)
            }
            ,
            symlink: (oldpath,newpath)=>{
                if (!PATH_FS.resolve(oldpath)) {
                    throw new FS.ErrnoError(44)
                }
                var lookup = FS.lookupPath(newpath, {
                    parent: true
                });
                var parent = lookup.node;
                if (!parent) {
                    throw new FS.ErrnoError(44)
                }
                var newname = PATH.basename(newpath);
                var errCode = FS.mayCreate(parent, newname);
                if (errCode) {
                    throw new FS.ErrnoError(errCode)
                }
                if (!parent.node_ops.symlink) {
                    throw new FS.ErrnoError(63)
                }
                return parent.node_ops.symlink(parent, newname, oldpath)
            }
            ,
            rename: (old_path,new_path)=>{
                var old_dirname = PATH.dirname(old_path);
                var new_dirname = PATH.dirname(new_path);
                var old_name = PATH.basename(old_path);
                var new_name = PATH.basename(new_path);
                var lookup, old_dir, new_dir;
                lookup = FS.lookupPath(old_path, {
                    parent: true
                });
                old_dir = lookup.node;
                lookup = FS.lookupPath(new_path, {
                    parent: true
                });
                new_dir = lookup.node;
                if (!old_dir || !new_dir)
                    throw new FS.ErrnoError(44);
                if (old_dir.mount !== new_dir.mount) {
                    throw new FS.ErrnoError(75)
                }
                var old_node = FS.lookupNode(old_dir, old_name);
                var relative = PATH_FS.relative(old_path, new_dirname);
                if (relative.charAt(0) !== ".") {
                    throw new FS.ErrnoError(28)
                }
                relative = PATH_FS.relative(new_path, old_dirname);
                if (relative.charAt(0) !== ".") {
                    throw new FS.ErrnoError(55)
                }
                var new_node;
                try {
                    new_node = FS.lookupNode(new_dir, new_name)
                } catch (e) {}
                if (old_node === new_node) {
                    return
                }
                var isdir = FS.isDir(old_node.mode);
                var errCode = FS.mayDelete(old_dir, old_name, isdir);
                if (errCode) {
                    throw new FS.ErrnoError(errCode)
                }
                errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
                if (errCode) {
                    throw new FS.ErrnoError(errCode)
                }
                if (!old_dir.node_ops.rename) {
                    throw new FS.ErrnoError(63)
                }
                if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
                    throw new FS.ErrnoError(10)
                }
                if (new_dir !== old_dir) {
                    errCode = FS.nodePermissions(old_dir, "w");
                    if (errCode) {
                        throw new FS.ErrnoError(errCode)
                    }
                }
                FS.hashRemoveNode(old_node);
                try {
                    old_dir.node_ops.rename(old_node, new_dir, new_name)
                } catch (e) {
                    throw e
                } finally {
                    FS.hashAddNode(old_node)
                }
            }
            ,
            rmdir: path=>{
                var lookup = FS.lookupPath(path, {
                    parent: true
                });
                var parent = lookup.node;
                var name = PATH.basename(path);
                var node = FS.lookupNode(parent, name);
                var errCode = FS.mayDelete(parent, name, true);
                if (errCode) {
                    throw new FS.ErrnoError(errCode)
                }
                if (!parent.node_ops.rmdir) {
                    throw new FS.ErrnoError(63)
                }
                if (FS.isMountpoint(node)) {
                    throw new FS.ErrnoError(10)
                }
                parent.node_ops.rmdir(parent, name);
                FS.destroyNode(node)
            }
            ,
            readdir: path=>{
                var lookup = FS.lookupPath(path, {
                    follow: true
                });
                var node = lookup.node;
                if (!node.node_ops.readdir) {
                    throw new FS.ErrnoError(54)
                }
                return node.node_ops.readdir(node)
            }
            ,
            unlink: path=>{
                var lookup = FS.lookupPath(path, {
                    parent: true
                });
                var parent = lookup.node;
                if (!parent) {
                    throw new FS.ErrnoError(44)
                }
                var name = PATH.basename(path);
                var node = FS.lookupNode(parent, name);
                var errCode = FS.mayDelete(parent, name, false);
                if (errCode) {
                    throw new FS.ErrnoError(errCode)
                }
                if (!parent.node_ops.unlink) {
                    throw new FS.ErrnoError(63)
                }
                if (FS.isMountpoint(node)) {
                    throw new FS.ErrnoError(10)
                }
                parent.node_ops.unlink(parent, name);
                FS.destroyNode(node)
            }
            ,
            readlink: path=>{
                var lookup = FS.lookupPath(path);
                var link = lookup.node;
                if (!link) {
                    throw new FS.ErrnoError(44)
                }
                if (!link.node_ops.readlink) {
                    throw new FS.ErrnoError(28)
                }
                return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link))
            }
            ,
            stat: (path,dontFollow)=>{
                var lookup = FS.lookupPath(path, {
                    follow: !dontFollow
                });
                var node = lookup.node;
                if (!node) {
                    throw new FS.ErrnoError(44)
                }
                if (!node.node_ops.getattr) {
                    throw new FS.ErrnoError(63)
                }
                return node.node_ops.getattr(node)
            }
            ,
            lstat: path=>{
                return FS.stat(path, true)
            }
            ,
            chmod: (path,mode,dontFollow)=>{
                var node;
                if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, {
                        follow: !dontFollow
                    });
                    node = lookup.node
                } else {
                    node = path
                }
                if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63)
                }
                node.node_ops.setattr(node, {
                    mode: mode & 4095 | node.mode & ~4095,
                    timestamp: Date.now()
                })
            }
            ,
            lchmod: (path,mode)=>{
                FS.chmod(path, mode, true)
            }
            ,
            fchmod: (fd,mode)=>{
                var stream = FS.getStream(fd);
                if (!stream) {
                    throw new FS.ErrnoError(8)
                }
                FS.chmod(stream.node, mode)
            }
            ,
            chown: (path,uid,gid,dontFollow)=>{
                var node;
                if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, {
                        follow: !dontFollow
                    });
                    node = lookup.node
                } else {
                    node = path
                }
                if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63)
                }
                node.node_ops.setattr(node, {
                    timestamp: Date.now()
                })
            }
            ,
            lchown: (path,uid,gid)=>{
                FS.chown(path, uid, gid, true)
            }
            ,
            fchown: (fd,uid,gid)=>{
                var stream = FS.getStream(fd);
                if (!stream) {
                    throw new FS.ErrnoError(8)
                }
                FS.chown(stream.node, uid, gid)
            }
            ,
            truncate: (path,len)=>{
                if (len < 0) {
                    throw new FS.ErrnoError(28)
                }
                var node;
                if (typeof path == "string") {
                    var lookup = FS.lookupPath(path, {
                        follow: true
                    });
                    node = lookup.node
                } else {
                    node = path
                }
                if (!node.node_ops.setattr) {
                    throw new FS.ErrnoError(63)
                }
                if (FS.isDir(node.mode)) {
                    throw new FS.ErrnoError(31)
                }
                if (!FS.isFile(node.mode)) {
                    throw new FS.ErrnoError(28)
                }
                var errCode = FS.nodePermissions(node, "w");
                if (errCode) {
                    throw new FS.ErrnoError(errCode)
                }
                node.node_ops.setattr(node, {
                    size: len,
                    timestamp: Date.now()
                })
            }
            ,
            ftruncate: (fd,len)=>{
                var stream = FS.getStream(fd);
                if (!stream) {
                    throw new FS.ErrnoError(8)
                }
                if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(28)
                }
                FS.truncate(stream.node, len)
            }
            ,
            utime: (path,atime,mtime)=>{
                var lookup = FS.lookupPath(path, {
                    follow: true
                });
                var node = lookup.node;
                node.node_ops.setattr(node, {
                    timestamp: Math.max(atime, mtime)
                })
            }
            ,
            open: (path,flags,mode)=>{
                if (path === "") {
                    throw new FS.ErrnoError(44)
                }
                flags = typeof flags == "string" ? FS.modeStringToFlags(flags) : flags;
                mode = typeof mode == "undefined" ? 438 : mode;
                if (flags & 64) {
                    mode = mode & 4095 | 32768
                } else {
                    mode = 0
                }
                var node;
                if (typeof path == "object") {
                    node = path
                } else {
                    path = PATH.normalize(path);
                    try {
                        var lookup = FS.lookupPath(path, {
                            follow: !(flags & 131072)
                        });
                        node = lookup.node
                    } catch (e) {}
                }
                var created = false;
                if (flags & 64) {
                    if (node) {
                        if (flags & 128) {
                            throw new FS.ErrnoError(20)
                        }
                    } else {
                        node = FS.mknod(path, mode, 0);
                        created = true
                    }
                }
                if (!node) {
                    throw new FS.ErrnoError(44)
                }
                if (FS.isChrdev(node.mode)) {
                    flags &= ~512
                }
                if (flags & 65536 && !FS.isDir(node.mode)) {
                    throw new FS.ErrnoError(54)
                }
                if (!created) {
                    var errCode = FS.mayOpen(node, flags);
                    if (errCode) {
                        throw new FS.ErrnoError(errCode)
                    }
                }
                if (flags & 512 && !created) {
                    FS.truncate(node, 0)
                }
                flags &= ~(128 | 512 | 131072);
                var stream = FS.createStream({
                    node: node,
                    path: FS.getPath(node),
                    flags: flags,
                    seekable: true,
                    position: 0,
                    stream_ops: node.stream_ops,
                    ungotten: [],
                    error: false
                });
                if (stream.stream_ops.open) {
                    stream.stream_ops.open(stream)
                }
                if (Module["logReadFiles"] && !(flags & 1)) {
                    if (!FS.readFiles)
                        FS.readFiles = {};
                    if (!(path in FS.readFiles)) {
                        FS.readFiles[path] = 1
                    }
                }
                return stream
            }
            ,
            close: stream=>{
                if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8)
                }
                if (stream.getdents)
                    stream.getdents = null;
                try {
                    if (stream.stream_ops.close) {
                        stream.stream_ops.close(stream)
                    }
                } catch (e) {
                    throw e
                } finally {
                    FS.closeStream(stream.fd)
                }
                stream.fd = null
            }
            ,
            isClosed: stream=>{
                return stream.fd === null
            }
            ,
            llseek: (stream,offset,whence)=>{
                if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8)
                }
                if (!stream.seekable || !stream.stream_ops.llseek) {
                    throw new FS.ErrnoError(70)
                }
                if (whence != 0 && whence != 1 && whence != 2) {
                    throw new FS.ErrnoError(28)
                }
                stream.position = stream.stream_ops.llseek(stream, offset, whence);
                stream.ungotten = [];
                return stream.position
            }
            ,
            read: (stream,buffer,offset,length,position)=>{
                if (length < 0 || position < 0) {
                    throw new FS.ErrnoError(28)
                }
                if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8)
                }
                if ((stream.flags & 2097155) === 1) {
                    throw new FS.ErrnoError(8)
                }
                if (FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(31)
                }
                if (!stream.stream_ops.read) {
                    throw new FS.ErrnoError(28)
                }
                var seeking = typeof position != "undefined";
                if (!seeking) {
                    position = stream.position
                } else if (!stream.seekable) {
                    throw new FS.ErrnoError(70)
                }
                var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
                if (!seeking)
                    stream.position += bytesRead;
                return bytesRead
            }
            ,
            write: (stream,buffer,offset,length,position,canOwn)=>{
                if (length < 0 || position < 0) {
                    throw new FS.ErrnoError(28)
                }
                if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8)
                }
                if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(8)
                }
                if (FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(31)
                }
                if (!stream.stream_ops.write) {
                    throw new FS.ErrnoError(28)
                }
                if (stream.seekable && stream.flags & 1024) {
                    FS.llseek(stream, 0, 2)
                }
                var seeking = typeof position != "undefined";
                if (!seeking) {
                    position = stream.position
                } else if (!stream.seekable) {
                    throw new FS.ErrnoError(70)
                }
                var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
                if (!seeking)
                    stream.position += bytesWritten;
                return bytesWritten
            }
            ,
            allocate: (stream,offset,length)=>{
                if (FS.isClosed(stream)) {
                    throw new FS.ErrnoError(8)
                }
                if (offset < 0 || length <= 0) {
                    throw new FS.ErrnoError(28)
                }
                if ((stream.flags & 2097155) === 0) {
                    throw new FS.ErrnoError(8)
                }
                if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
                    throw new FS.ErrnoError(43)
                }
                if (!stream.stream_ops.allocate) {
                    throw new FS.ErrnoError(138)
                }
                stream.stream_ops.allocate(stream, offset, length)
            }
            ,
            mmap: (stream,length,position,prot,flags)=>{
                if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
                    throw new FS.ErrnoError(2)
                }
                if ((stream.flags & 2097155) === 1) {
                    throw new FS.ErrnoError(2)
                }
                if (!stream.stream_ops.mmap) {
                    throw new FS.ErrnoError(43)
                }
                return stream.stream_ops.mmap(stream, length, position, prot, flags)
            }
            ,
            msync: (stream,buffer,offset,length,mmapFlags)=>{
                if (!stream.stream_ops.msync) {
                    return 0
                }
                return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags)
            }
            ,
            munmap: stream=>0,
            ioctl: (stream,cmd,arg)=>{
                if (!stream.stream_ops.ioctl) {
                    throw new FS.ErrnoError(59)
                }
                return stream.stream_ops.ioctl(stream, cmd, arg)
            }
            ,
            readFile: (path,opts={})=>{
                opts.flags = opts.flags || 0;
                opts.encoding = opts.encoding || "binary";
                if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
                    throw new Error('Invalid encoding type "' + opts.encoding + '"')
                }
                var ret;
                var stream = FS.open(path, opts.flags);
                var stat = FS.stat(path);
                var length = stat.size;
                var buf = new Uint8Array(length);
                FS.read(stream, buf, 0, length, 0);
                if (opts.encoding === "utf8") {
                    ret = UTF8ArrayToString(buf, 0)
                } else if (opts.encoding === "binary") {
                    ret = buf
                }
                FS.close(stream);
                return ret
            }
            ,
            writeFile: (path,data,opts={})=>{
                opts.flags = opts.flags || 577;
                var stream = FS.open(path, opts.flags, opts.mode);
                if (typeof data == "string") {
                    var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
                    var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
                    FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn)
                } else if (ArrayBuffer.isView(data)) {
                    FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn)
                } else {
                    throw new Error("Unsupported data type")
                }
                FS.close(stream)
            }
            ,
            cwd: ()=>FS.currentPath,
            chdir: path=>{
                var lookup = FS.lookupPath(path, {
                    follow: true
                });
                if (lookup.node === null) {
                    throw new FS.ErrnoError(44)
                }
                if (!FS.isDir(lookup.node.mode)) {
                    throw new FS.ErrnoError(54)
                }
                var errCode = FS.nodePermissions(lookup.node, "x");
                if (errCode) {
                    throw new FS.ErrnoError(errCode)
                }
                FS.currentPath = lookup.path
            }
            ,
            createDefaultDirectories: ()=>{
                FS.mkdir("/tmp");
                FS.mkdir("/home");
                FS.mkdir("/home/web_user")
            }
            ,
            createDefaultDevices: ()=>{
                FS.mkdir("/dev");
                FS.registerDevice(FS.makedev(1, 3), {
                    read: ()=>0,
                    write: (stream,buffer,offset,length,pos)=>length
                });
                FS.mkdev("/dev/null", FS.makedev(1, 3));
                TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
                TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
                FS.mkdev("/dev/tty", FS.makedev(5, 0));
                FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                var random_device = getRandomDevice();
                FS.createDevice("/dev", "random", random_device);
                FS.createDevice("/dev", "urandom", random_device);
                FS.mkdir("/dev/shm");
                FS.mkdir("/dev/shm/tmp")
            }
            ,
            createSpecialDirectories: ()=>{
                FS.mkdir("/proc");
                var proc_self = FS.mkdir("/proc/self");
                FS.mkdir("/proc/self/fd");
                FS.mount({
                    mount: ()=>{
                        var node = FS.createNode(proc_self, "fd", 16384 | 511, 73);
                        node.node_ops = {
                            lookup: (parent,name)=>{
                                var fd = +name;
                                var stream = FS.getStream(fd);
                                if (!stream)
                                    throw new FS.ErrnoError(8);
                                var ret = {
                                    parent: null,
                                    mount: {
                                        mountpoint: "fake"
                                    },
                                    node_ops: {
                                        readlink: ()=>stream.path
                                    }
                                };
                                ret.parent = ret;
                                return ret
                            }
                        };
                        return node
                    }
                }, {}, "/proc/self/fd")
            }
            ,
            createStandardStreams: ()=>{
                if (Module["stdin"]) {
                    FS.createDevice("/dev", "stdin", Module["stdin"])
                } else {
                    FS.symlink("/dev/tty", "/dev/stdin")
                }
                if (Module["stdout"]) {
                    FS.createDevice("/dev", "stdout", null, Module["stdout"])
                } else {
                    FS.symlink("/dev/tty", "/dev/stdout")
                }
                if (Module["stderr"]) {
                    FS.createDevice("/dev", "stderr", null, Module["stderr"])
                } else {
                    FS.symlink("/dev/tty1", "/dev/stderr")
                }
                var stdin = FS.open("/dev/stdin", 0);
                var stdout = FS.open("/dev/stdout", 1);
                var stderr = FS.open("/dev/stderr", 1)
            }
            ,
            ensureErrnoError: ()=>{
                if (FS.ErrnoError)
                    return;
                FS.ErrnoError = function ErrnoError(errno, node) {
                    this.node = node;
                    this.setErrno = function(errno) {
                        this.errno = errno
                    }
                    ;
                    this.setErrno(errno);
                    this.message = "FS error"
                }
                ;
                FS.ErrnoError.prototype = new Error;
                FS.ErrnoError.prototype.constructor = FS.ErrnoError;
                [44].forEach(code=>{
                    FS.genericErrors[code] = new FS.ErrnoError(code);
                    FS.genericErrors[code].stack = "<generic error, no stack>"
                }
                )
            }
            ,
            staticInit: ()=>{
                FS.ensureErrnoError();
                FS.nameTable = new Array(4096);
                FS.mount(MEMFS, {}, "/");
                FS.createDefaultDirectories();
                FS.createDefaultDevices();
                FS.createSpecialDirectories();
                FS.filesystems = {
                    "MEMFS": MEMFS,
                    "IDBFS": IDBFS,
                    "NODEFS": NODEFS,
                    "WORKERFS": WORKERFS,
                    "PROXYFS": PROXYFS
                }
            }
            ,
            init: (input,output,error)=>{
                FS.init.initialized = true;
                FS.ensureErrnoError();
                Module["stdin"] = input || Module["stdin"];
                Module["stdout"] = output || Module["stdout"];
                Module["stderr"] = error || Module["stderr"];
                FS.createStandardStreams()
            }
            ,
            quit: ()=>{
                FS.init.initialized = false;
                _fflush(0);
                for (var i = 0; i < FS.streams.length; i++) {
                    var stream = FS.streams[i];
                    if (!stream) {
                        continue
                    }
                    FS.close(stream)
                }
            }
            ,
            getMode: (canRead,canWrite)=>{
                var mode = 0;
                if (canRead)
                    mode |= 292 | 73;
                if (canWrite)
                    mode |= 146;
                return mode
            }
            ,
            findObject: (path,dontResolveLastLink)=>{
                var ret = FS.analyzePath(path, dontResolveLastLink);
                if (!ret.exists) {
                    return null
                }
                return ret.object
            }
            ,
            analyzePath: (path,dontResolveLastLink)=>{
                try {
                    var lookup = FS.lookupPath(path, {
                        follow: !dontResolveLastLink
                    });
                    path = lookup.path
                } catch (e) {}
                var ret = {
                    isRoot: false,
                    exists: false,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: false,
                    parentPath: null,
                    parentObject: null
                };
                try {
                    var lookup = FS.lookupPath(path, {
                        parent: true
                    });
                    ret.parentExists = true;
                    ret.parentPath = lookup.path;
                    ret.parentObject = lookup.node;
                    ret.name = PATH.basename(path);
                    lookup = FS.lookupPath(path, {
                        follow: !dontResolveLastLink
                    });
                    ret.exists = true;
                    ret.path = lookup.path;
                    ret.object = lookup.node;
                    ret.name = lookup.node.name;
                    ret.isRoot = lookup.path === "/"
                } catch (e) {
                    ret.error = e.errno
                }
                return ret
            }
            ,
            createPath: (parent,path,canRead,canWrite)=>{
                parent = typeof parent == "string" ? parent : FS.getPath(parent);
                var parts = path.split("/").reverse();
                while (parts.length) {
                    var part = parts.pop();
                    if (!part)
                        continue;
                    var current = PATH.join2(parent, part);
                    try {
                        FS.mkdir(current)
                    } catch (e) {}
                    parent = current
                }
                return current
            }
            ,
            createFile: (parent,name,properties,canRead,canWrite)=>{
                var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
                var mode = FS.getMode(canRead, canWrite);
                return FS.create(path, mode)
            }
            ,
            createDataFile: (parent,name,data,canRead,canWrite,canOwn)=>{
                var path = name;
                if (parent) {
                    parent = typeof parent == "string" ? parent : FS.getPath(parent);
                    path = name ? PATH.join2(parent, name) : parent
                }
                var mode = FS.getMode(canRead, canWrite);
                var node = FS.create(path, mode);
                if (data) {
                    if (typeof data == "string") {
                        var arr = new Array(data.length);
                        for (var i = 0, len = data.length; i < len; ++i)
                            arr[i] = data.charCodeAt(i);
                        data = arr
                    }
                    FS.chmod(node, mode | 146);
                    var stream = FS.open(node, 577);
                    FS.write(stream, data, 0, data.length, 0, canOwn);
                    FS.close(stream);
                    FS.chmod(node, mode)
                }
                return node
            }
            ,
            createDevice: (parent,name,input,output)=>{
                var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);
                var mode = FS.getMode(!!input, !!output);
                if (!FS.createDevice.major)
                    FS.createDevice.major = 64;
                var dev = FS.makedev(FS.createDevice.major++, 0);
                FS.registerDevice(dev, {
                    open: stream=>{
                        stream.seekable = false
                    }
                    ,
                    close: stream=>{
                        if (output && output.buffer && output.buffer.length) {
                            output(10)
                        }
                    }
                    ,
                    read: (stream,buffer,offset,length,pos)=>{
                        var bytesRead = 0;
                        for (var i = 0; i < length; i++) {
                            var result;
                            try {
                                result = input()
                            } catch (e) {
                                throw new FS.ErrnoError(29)
                            }
                            if (result === undefined && bytesRead === 0) {
                                throw new FS.ErrnoError(6)
                            }
                            if (result === null || result === undefined)
                                break;
                            bytesRead++;
                            buffer[offset + i] = result
                        }
                        if (bytesRead) {
                            stream.node.timestamp = Date.now()
                        }
                        return bytesRead
                    }
                    ,
                    write: (stream,buffer,offset,length,pos)=>{
                        for (var i = 0; i < length; i++) {
                            try {
                                output(buffer[offset + i])
                            } catch (e) {
                                throw new FS.ErrnoError(29)
                            }
                        }
                        if (length) {
                            stream.node.timestamp = Date.now()
                        }
                        return i
                    }
                });
                return FS.mkdev(path, mode, dev)
            }
            ,
            forceLoadFile: obj=>{
                if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
                    return true;
                if (typeof XMLHttpRequest != "undefined") {
                    throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")
                } else if (read_) {
                    try {
                        obj.contents = intArrayFromString(read_(obj.url), true);
                        obj.usedBytes = obj.contents.length
                    } catch (e) {
                        throw new FS.ErrnoError(29)
                    }
                } else {
                    throw new Error("Cannot load without read() or XMLHttpRequest.")
                }
            }
            ,
            createLazyFile: (parent,name,url,canRead,canWrite)=>{
                function LazyUint8Array() {
                    this.lengthKnown = false;
                    this.chunks = []
                }
                LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
                    if (idx > this.length - 1 || idx < 0) {
                        return undefined
                    }
                    var chunkOffset = idx % this.chunkSize;
                    var chunkNum = idx / this.chunkSize | 0;
                    return this.getter(chunkNum)[chunkOffset]
                }
                ;
                LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
                    this.getter = getter
                }
                ;
                LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
                    var xhr = new XMLHttpRequest;
                    xhr.open("HEAD", url, false);
                    xhr.send(null);
                    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
                        throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                    var datalength = Number(xhr.getResponseHeader("Content-length"));
                    var header;
                    var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
                    var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
                    var chunkSize = 1024 * 1024;
                    if (!hasByteServing)
                        chunkSize = datalength;
                    var doXHR = (from,to)=>{
                        if (from > to)
                            throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                        if (to > datalength - 1)
                            throw new Error("only " + datalength + " bytes available! programmer error!");
                        var xhr = new XMLHttpRequest;
                        xhr.open("GET", url, false);
                        if (datalength !== chunkSize)
                            xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                        xhr.responseType = "arraybuffer";
                        if (xhr.overrideMimeType) {
                            xhr.overrideMimeType("text/plain; charset=x-user-defined")
                        }
                        xhr.send(null);
                        if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
                            throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                        if (xhr.response !== undefined) {
                            return new Uint8Array(xhr.response || [])
                        }
                        return intArrayFromString(xhr.responseText || "", true)
                    }
                    ;
                    var lazyArray = this;
                    lazyArray.setDataGetter(chunkNum=>{
                        var start = chunkNum * chunkSize;
                        var end = (chunkNum + 1) * chunkSize - 1;
                        end = Math.min(end, datalength - 1);
                        if (typeof lazyArray.chunks[chunkNum] == "undefined") {
                            lazyArray.chunks[chunkNum] = doXHR(start, end)
                        }
                        if (typeof lazyArray.chunks[chunkNum] == "undefined")
                            throw new Error("doXHR failed!");
                        return lazyArray.chunks[chunkNum]
                    }
                    );
                    if (usesGzip || !datalength) {
                        chunkSize = datalength = 1;
                        datalength = this.getter(0).length;
                        chunkSize = datalength;
                        out("LazyFiles on gzip forces download of the whole file when length is accessed")
                    }
                    this._length = datalength;
                    this._chunkSize = chunkSize;
                    this.lengthKnown = true
                }
                ;
                if (typeof XMLHttpRequest != "undefined") {
                    if (!ENVIRONMENT_IS_WORKER)
                        throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var lazyArray = new LazyUint8Array;
                    Object.defineProperties(lazyArray, {
                        length: {
                            get: function() {
                                if (!this.lengthKnown) {
                                    this.cacheLength()
                                }
                                return this._length
                            }
                        },
                        chunkSize: {
                            get: function() {
                                if (!this.lengthKnown) {
                                    this.cacheLength()
                                }
                                return this._chunkSize
                            }
                        }
                    });
                    var properties = {
                        isDevice: false,
                        contents: lazyArray
                    }
                } else {
                    var properties = {
                        isDevice: false,
                        url: url
                    }
                }
                var node = FS.createFile(parent, name, properties, canRead, canWrite);
                if (properties.contents) {
                    node.contents = properties.contents
                } else if (properties.url) {
                    node.contents = null;
                    node.url = properties.url
                }
                Object.defineProperties(node, {
                    usedBytes: {
                        get: function() {
                            return this.contents.length
                        }
                    }
                });
                var stream_ops = {};
                var keys = Object.keys(node.stream_ops);
                keys.forEach(key=>{
                    var fn = node.stream_ops[key];
                    stream_ops[key] = function forceLoadLazyFile() {
                        FS.forceLoadFile(node);
                        return fn.apply(null, arguments)
                    }
                }
                );
                function writeChunks(stream, buffer, offset, length, position) {
                    var contents = stream.node.contents;
                    if (position >= contents.length)
                        return 0;
                    var size = Math.min(contents.length - position, length);
                    if (contents.slice) {
                        for (var i = 0; i < size; i++) {
                            buffer[offset + i] = contents[position + i]
                        }
                    } else {
                        for (var i = 0; i < size; i++) {
                            buffer[offset + i] = contents.get(position + i)
                        }
                    }
                    return size
                }
                stream_ops.read = (stream,buffer,offset,length,position)=>{
                    FS.forceLoadFile(node);
                    return writeChunks(stream, buffer, offset, length, position)
                }
                ;
                stream_ops.mmap = (stream,length,position,prot,flags)=>{
                    FS.forceLoadFile(node);
                    var ptr = mmapAlloc(length);
                    if (!ptr) {
                        throw new FS.ErrnoError(48)
                    }
                    writeChunks(stream, HEAP8, ptr, length, position);
                    return {
                        ptr: ptr,
                        allocated: true
                    }
                }
                ;
                node.stream_ops = stream_ops;
                return node
            }
            ,
            createPreloadedFile: (parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{
                var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
                var dep = getUniqueRunDependency("cp " + fullname);
                function processData(byteArray) {
                    function finish(byteArray) {
                        if (preFinish)
                            preFinish();
                        if (!dontCreateFile) {
                            FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn)
                        }
                        if (onload)
                            onload();
                        removeRunDependency(dep)
                    }
                    if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, ()=>{
                        if (onerror)
                            onerror();
                        removeRunDependency(dep)
                    }
                    )) {
                        return
                    }
                    finish(byteArray)
                }
                addRunDependency(dep);
                if (typeof url == "string") {
                    asyncLoad(url, byteArray=>processData(byteArray), onerror)
                } else {
                    processData(url)
                }
            }
            ,
            indexedDB: ()=>{
                return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
            }
            ,
            DB_NAME: ()=>{
                return "EM_FS_" + window.location.pathname
            }
            ,
            DB_VERSION: 20,
            DB_STORE_NAME: "FILE_DATA",
            saveFilesToDB: (paths,onload,onerror)=>{
                onload = onload || (()=>{}
                );
                onerror = onerror || (()=>{}
                );
                var indexedDB = FS.indexedDB();
                try {
                    var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION)
                } catch (e) {
                    return onerror(e)
                }
                openRequest.onupgradeneeded = ()=>{
                    out("creating db");
                    var db = openRequest.result;
                    db.createObjectStore(FS.DB_STORE_NAME)
                }
                ;
                openRequest.onsuccess = ()=>{
                    var db = openRequest.result;
                    var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
                    var files = transaction.objectStore(FS.DB_STORE_NAME);
                    var ok = 0
                      , fail = 0
                      , total = paths.length;
                    function finish() {
                        if (fail == 0)
                            onload();
                        else
                            onerror()
                    }
                    paths.forEach(path=>{
                        var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                        putRequest.onsuccess = ()=>{
                            ok++;
                            if (ok + fail == total)
                                finish()
                        }
                        ;
                        putRequest.onerror = ()=>{
                            fail++;
                            if (ok + fail == total)
                                finish()
                        }
                    }
                    );
                    transaction.onerror = onerror
                }
                ;
                openRequest.onerror = onerror
            }
            ,
            loadFilesFromDB: (paths,onload,onerror)=>{
                onload = onload || (()=>{}
                );
                onerror = onerror || (()=>{}
                );
                var indexedDB = FS.indexedDB();
                try {
                    var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION)
                } catch (e) {
                    return onerror(e)
                }
                openRequest.onupgradeneeded = onerror;
                openRequest.onsuccess = ()=>{
                    var db = openRequest.result;
                    try {
                        var transaction = db.transaction([FS.DB_STORE_NAME], "readonly")
                    } catch (e) {
                        onerror(e);
                        return
                    }
                    var files = transaction.objectStore(FS.DB_STORE_NAME);
                    var ok = 0
                      , fail = 0
                      , total = paths.length;
                    function finish() {
                        if (fail == 0)
                            onload();
                        else
                            onerror()
                    }
                    paths.forEach(path=>{
                        var getRequest = files.get(path);
                        getRequest.onsuccess = ()=>{
                            if (FS.analyzePath(path).exists) {
                                FS.unlink(path)
                            }
                            FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                            ok++;
                            if (ok + fail == total)
                                finish()
                        }
                        ;
                        getRequest.onerror = ()=>{
                            fail++;
                            if (ok + fail == total)
                                finish()
                        }
                    }
                    );
                    transaction.onerror = onerror
                }
                ;
                openRequest.onerror = onerror
            }
        };
        Module["FS"] = FS;
        var SYSCALLS = {
            DEFAULT_POLLMASK: 5,
            calculateAt: function(dirfd, path, allowEmpty) {
                if (PATH.isAbs(path)) {
                    return path
                }
                var dir;
                if (dirfd === -100) {
                    dir = FS.cwd()
                } else {
                    var dirstream = SYSCALLS.getStreamFromFD(dirfd);
                    dir = dirstream.path
                }
                if (path.length == 0) {
                    if (!allowEmpty) {
                        throw new FS.ErrnoError(44)
                    }
                    return dir
                }
                return PATH.join2(dir, path)
            },
            doStat: function(func, path, buf) {
                try {
                    var stat = func(path)
                } catch (e) {
                    if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                        return -54
                    }
                    throw e
                }
                HEAP32[buf >> 2] = stat.dev;
                HEAP32[buf + 8 >> 2] = stat.ino;
                HEAP32[buf + 12 >> 2] = stat.mode;
                HEAPU32[buf + 16 >> 2] = stat.nlink;
                HEAP32[buf + 20 >> 2] = stat.uid;
                HEAP32[buf + 24 >> 2] = stat.gid;
                HEAP32[buf + 28 >> 2] = stat.rdev;
                tempI64 = [stat.size >>> 0, (tempDouble = stat.size,
                +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                HEAP32[buf + 40 >> 2] = tempI64[0],
                HEAP32[buf + 44 >> 2] = tempI64[1];
                HEAP32[buf + 48 >> 2] = 4096;
                HEAP32[buf + 52 >> 2] = stat.blocks;
                tempI64 = [Math.floor(stat.atime.getTime() / 1e3) >>> 0, (tempDouble = Math.floor(stat.atime.getTime() / 1e3),
                +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                HEAP32[buf + 56 >> 2] = tempI64[0],
                HEAP32[buf + 60 >> 2] = tempI64[1];
                HEAPU32[buf + 64 >> 2] = 0;
                tempI64 = [Math.floor(stat.mtime.getTime() / 1e3) >>> 0, (tempDouble = Math.floor(stat.mtime.getTime() / 1e3),
                +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                HEAP32[buf + 72 >> 2] = tempI64[0],
                HEAP32[buf + 76 >> 2] = tempI64[1];
                HEAPU32[buf + 80 >> 2] = 0;
                tempI64 = [Math.floor(stat.ctime.getTime() / 1e3) >>> 0, (tempDouble = Math.floor(stat.ctime.getTime() / 1e3),
                +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                HEAP32[buf + 88 >> 2] = tempI64[0],
                HEAP32[buf + 92 >> 2] = tempI64[1];
                HEAPU32[buf + 96 >> 2] = 0;
                tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino,
                +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                HEAP32[buf + 104 >> 2] = tempI64[0],
                HEAP32[buf + 108 >> 2] = tempI64[1];
                return 0
            },
            doMsync: function(addr, stream, len, flags, offset) {
                if (!FS.isFile(stream.node.mode)) {
                    throw new FS.ErrnoError(43)
                }
                if (flags & 2) {
                    return 0
                }
                var buffer = HEAPU8.slice(addr, addr + len);
                FS.msync(stream, buffer, offset, len, flags)
            },
            varargs: undefined,
            get: function() {
                SYSCALLS.varargs += 4;
                var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
                return ret
            },
            getStr: function(ptr) {
                var ret = UTF8ToString(ptr);
                return ret
            },
            getStreamFromFD: function(fd) {
                var stream = FS.getStream(fd);
                if (!stream)
                    throw new FS.ErrnoError(8);
                return stream
            }
        };
        Module["SYSCALLS"] = SYSCALLS;
        function _proc_exit(code) {
            EXITSTATUS = code;
            if (!keepRuntimeAlive()) {
                if (Module["onExit"])
                    Module["onExit"](code);
                ABORT = true
            }
            quit_(code, new ExitStatus(code))
        }
        Module["_proc_exit"] = _proc_exit;
        _proc_exit.sig = "vi";
        function exitJS(status, implicit) {
            EXITSTATUS = status;
            _proc_exit(status)
        }
        Module["exitJS"] = exitJS;
        var _exit = exitJS;
        Module["_exit"] = _exit;
        _exit.sig = "vi";
        function handleException(e) {
            if (e instanceof ExitStatus || e == "unwind") {
                return EXITSTATUS
            }
            quit_(1, e)
        }
        Module["handleException"] = handleException;
        function maybeExit() {}
        Module["maybeExit"] = maybeExit;
        function setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming) {
            assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
            Browser.mainLoop.func = browserIterationFunc;
            Browser.mainLoop.arg = arg;
            var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
            function checkIsRunning() {
                if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) {
                    maybeExit();
                    return false
                }
                return true
            }
            Browser.mainLoop.running = false;
            Browser.mainLoop.runner = function Browser_mainLoop_runner() {
                if (ABORT)
                    return;
                if (Browser.mainLoop.queue.length > 0) {
                    var start = Date.now();
                    var blocker = Browser.mainLoop.queue.shift();
                    blocker.func(blocker.arg);
                    if (Browser.mainLoop.remainingBlockers) {
                        var remaining = Browser.mainLoop.remainingBlockers;
                        var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
                        if (blocker.counted) {
                            Browser.mainLoop.remainingBlockers = next
                        } else {
                            next = next + .5;
                            Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9
                        }
                    }
                    out('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
                    Browser.mainLoop.updateStatus();
                    if (!checkIsRunning())
                        return;
                    setTimeout(Browser.mainLoop.runner, 0);
                    return
                }
                if (!checkIsRunning())
                    return;
                Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
                if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
                    Browser.mainLoop.scheduler();
                    return
                } else if (Browser.mainLoop.timingMode == 0) {
                    Browser.mainLoop.tickStartTime = _emscripten_get_now()
                }
                Browser.mainLoop.runIter(browserIterationFunc);
                if (!checkIsRunning())
                    return;
                if (typeof SDL == "object" && SDL.audio && SDL.audio.queueNewAudioData)
                    SDL.audio.queueNewAudioData();
                Browser.mainLoop.scheduler()
            }
            ;
            if (!noSetTiming) {
                if (fps && fps > 0)
                    _emscripten_set_main_loop_timing(0, 1e3 / fps);
                else
                    _emscripten_set_main_loop_timing(1, 1);
                Browser.mainLoop.scheduler()
            }
            if (simulateInfiniteLoop) {
                throw "unwind"
            }
        }
        Module["setMainLoop"] = setMainLoop;
        function callUserCallback(func) {
            if (ABORT) {
                return
            }
            try {
                func()
            } catch (e) {
                handleException(e)
            }
        }
        Module["callUserCallback"] = callUserCallback;
        function safeSetTimeout(func, timeout) {
            return setTimeout(function() {
                callUserCallback(func)
            }, timeout)
        }
        Module["safeSetTimeout"] = safeSetTimeout;
        function warnOnce(text) {
            if (!warnOnce.shown)
                warnOnce.shown = {};
            if (!warnOnce.shown[text]) {
                warnOnce.shown[text] = 1;
                if (ENVIRONMENT_IS_NODE)
                    text = "warning: " + text;
                err(text)
            }
        }
        Module["warnOnce"] = warnOnce;
        var Browser = {
            mainLoop: {
                running: false,
                scheduler: null,
                method: "",
                currentlyRunningMainloop: 0,
                func: null,
                arg: 0,
                timingMode: 0,
                timingValue: 0,
                currentFrameNumber: 0,
                queue: [],
                pause: function() {
                    Browser.mainLoop.scheduler = null;
                    Browser.mainLoop.currentlyRunningMainloop++
                },
                resume: function() {
                    Browser.mainLoop.currentlyRunningMainloop++;
                    var timingMode = Browser.mainLoop.timingMode;
                    var timingValue = Browser.mainLoop.timingValue;
                    var func = Browser.mainLoop.func;
                    Browser.mainLoop.func = null;
                    setMainLoop(func, 0, false, Browser.mainLoop.arg, true);
                    _emscripten_set_main_loop_timing(timingMode, timingValue);
                    Browser.mainLoop.scheduler()
                },
                updateStatus: function() {
                    if (Module["setStatus"]) {
                        var message = Module["statusMessage"] || "Please wait...";
                        var remaining = Browser.mainLoop.remainingBlockers;
                        var expected = Browser.mainLoop.expectedBlockers;
                        if (remaining) {
                            if (remaining < expected) {
                                Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")")
                            } else {
                                Module["setStatus"](message)
                            }
                        } else {
                            Module["setStatus"]("")
                        }
                    }
                },
                runIter: function(func) {
                    if (ABORT)
                        return;
                    if (Module["preMainLoop"]) {
                        var preRet = Module["preMainLoop"]();
                        if (preRet === false) {
                            return
                        }
                    }
                    callUserCallback(func);
                    if (Module["postMainLoop"])
                        Module["postMainLoop"]()
                }
            },
            isFullscreen: false,
            pointerLock: false,
            moduleContextCreatedCallbacks: [],
            workers: [],
            init: function() {
                if (!Module["preloadPlugins"])
                    Module["preloadPlugins"] = [];
                if (Browser.initted)
                    return;
                Browser.initted = true;
                try {
                    new Blob;
                    Browser.hasBlobConstructor = true
                } catch (e) {
                    Browser.hasBlobConstructor = false;
                    err("warning: no blob constructor, cannot create blobs with mimetypes")
                }
                Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? err("warning: no BlobBuilder") : null;
                Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
                if (!Module.noImageDecoding && typeof Browser.URLObject == "undefined") {
                    err("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
                    Module.noImageDecoding = true
                }
                var imagePlugin = {};
                imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
                    return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name)
                }
                ;
                imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
                    var b = null;
                    if (Browser.hasBlobConstructor) {
                        try {
                            b = new Blob([byteArray],{
                                type: Browser.getMimetype(name)
                            });
                            if (b.size !== byteArray.length) {
                                b = new Blob([new Uint8Array(byteArray).buffer],{
                                    type: Browser.getMimetype(name)
                                })
                            }
                        } catch (e) {
                            warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder")
                        }
                    }
                    if (!b) {
                        var bb = new Browser.BlobBuilder;
                        bb.append(new Uint8Array(byteArray).buffer);
                        b = bb.getBlob()
                    }
                    var url = Browser.URLObject.createObjectURL(b);
                    var img = new Image;
                    img.onload = ()=>{
                        assert(img.complete, "Image " + name + " could not be decoded");
                        var canvas = document.createElement("canvas");
                        canvas.width = img.width;
                        canvas.height = img.height;
                        var ctx = canvas.getContext("2d");
                        ctx.drawImage(img, 0, 0);
                        preloadedImages[name] = canvas;
                        Browser.URLObject.revokeObjectURL(url);
                        if (onload)
                            onload(byteArray)
                    }
                    ;
                    img.onerror = event=>{
                        out("Image " + url + " could not be decoded");
                        if (onerror)
                            onerror()
                    }
                    ;
                    img.src = url
                }
                ;
                Module["preloadPlugins"].push(imagePlugin);
                var audioPlugin = {};
                audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
                    return !Module.noAudioDecoding && name.substr(-4)in {
                        ".ogg": 1,
                        ".wav": 1,
                        ".mp3": 1
                    }
                }
                ;
                audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
                    var done = false;
                    function finish(audio) {
                        if (done)
                            return;
                        done = true;
                        preloadedAudios[name] = audio;
                        if (onload)
                            onload(byteArray)
                    }
                    function fail() {
                        if (done)
                            return;
                        done = true;
                        preloadedAudios[name] = new Audio;
                        if (onerror)
                            onerror()
                    }
                    if (Browser.hasBlobConstructor) {
                        try {
                            var b = new Blob([byteArray],{
                                type: Browser.getMimetype(name)
                            })
                        } catch (e) {
                            return fail()
                        }
                        var url = Browser.URLObject.createObjectURL(b);
                        var audio = new Audio;
                        audio.addEventListener("canplaythrough", ()=>finish(audio), false);
                        audio.onerror = function audio_onerror(event) {
                            if (done)
                                return;
                            err("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
                            function encode64(data) {
                                var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                                var PAD = "=";
                                var ret = "";
                                var leftchar = 0;
                                var leftbits = 0;
                                for (var i = 0; i < data.length; i++) {
                                    leftchar = leftchar << 8 | data[i];
                                    leftbits += 8;
                                    while (leftbits >= 6) {
                                        var curr = leftchar >> leftbits - 6 & 63;
                                        leftbits -= 6;
                                        ret += BASE[curr]
                                    }
                                }
                                if (leftbits == 2) {
                                    ret += BASE[(leftchar & 3) << 4];
                                    ret += PAD + PAD
                                } else if (leftbits == 4) {
                                    ret += BASE[(leftchar & 15) << 2];
                                    ret += PAD
                                }
                                return ret
                            }
                            audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
                            finish(audio)
                        }
                        ;
                        audio.src = url;
                        safeSetTimeout(function() {
                            finish(audio)
                        }, 1e4)
                    } else {
                        return fail()
                    }
                }
                ;
                Module["preloadPlugins"].push(audioPlugin);
                var wasmPlugin = {
                    "asyncWasmLoadPromise": new Promise(function(resolve, reject) {
                        return resolve()
                    }
                    ),
                    "canHandle": function(name) {
                        return !Module.noWasmDecoding && name.endsWith(".so")
                    },
                    "handle": function(byteArray, name, onload, onerror) {
                        wasmPlugin["asyncWasmLoadPromise"] = wasmPlugin["asyncWasmLoadPromise"].then(()=>loadWebAssemblyModule(byteArray, {
                            loadAsync: true,
                            nodelete: true
                        })).then(module=>{
                            preloadedWasm[name] = module;
                            onload()
                        }
                        , err=>{
                            console.warn("Couldn't instantiate wasm: " + name + " '" + err + "'");
                            onerror()
                        }
                        )
                    }
                };
                Module["preloadPlugins"].push(wasmPlugin);
                function pointerLockChange() {
                    Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"]
                }
                var canvas = Module["canvas"];
                if (canvas) {
                    canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (()=>{}
                    );
                    canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (()=>{}
                    );
                    canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
                    document.addEventListener("pointerlockchange", pointerLockChange, false);
                    document.addEventListener("mozpointerlockchange", pointerLockChange, false);
                    document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
                    document.addEventListener("mspointerlockchange", pointerLockChange, false);
                    if (Module["elementPointerLock"]) {
                        canvas.addEventListener("click", ev=>{
                            if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
                                Module["canvas"].requestPointerLock();
                                ev.preventDefault()
                            }
                        }
                        , false)
                    }
                }
            },
            handledByPreloadPlugin: function(byteArray, fullname, finish, onerror) {
                Browser.init();
                var handled = false;
                Module["preloadPlugins"].forEach(function(plugin) {
                    if (handled)
                        return;
                    if (plugin["canHandle"](fullname)) {
                        plugin["handle"](byteArray, fullname, finish, onerror);
                        handled = true
                    }
                });
                return handled
            },
            createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
                if (useWebGL && Module.ctx && canvas == Module.canvas)
                    return Module.ctx;
                var ctx;
                var contextHandle;
                if (useWebGL) {
                    var contextAttributes = {
                        antialias: false,
                        alpha: false,
                        majorVersion: 1
                    };
                    if (webGLContextAttributes) {
                        for (var attribute in webGLContextAttributes) {
                            contextAttributes[attribute] = webGLContextAttributes[attribute]
                        }
                    }
                    if (typeof GL != "undefined") {
                        contextHandle = GL.createContext(canvas, contextAttributes);
                        if (contextHandle) {
                            ctx = GL.getContext(contextHandle).GLctx
                        }
                    }
                } else {
                    ctx = canvas.getContext("2d")
                }
                if (!ctx)
                    return null;
                if (setInModule) {
                    if (!useWebGL)
                        assert(typeof GLctx == "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
                    Module.ctx = ctx;
                    if (useWebGL)
                        GL.makeContextCurrent(contextHandle);
                    Module.useWebGL = useWebGL;
                    Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
                        callback()
                    });
                    Browser.init()
                }
                return ctx
            },
            destroyContext: function(canvas, useWebGL, setInModule) {},
            fullscreenHandlersInstalled: false,
            lockPointer: undefined,
            resizeCanvas: undefined,
            requestFullscreen: function(lockPointer, resizeCanvas) {
                Browser.lockPointer = lockPointer;
                Browser.resizeCanvas = resizeCanvas;
                if (typeof Browser.lockPointer == "undefined")
                    Browser.lockPointer = true;
                if (typeof Browser.resizeCanvas == "undefined")
                    Browser.resizeCanvas = false;
                var canvas = Module["canvas"];
                function fullscreenChange() {
                    Browser.isFullscreen = false;
                    var canvasContainer = canvas.parentNode;
                    if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
                        canvas.exitFullscreen = Browser.exitFullscreen;
                        if (Browser.lockPointer)
                            canvas.requestPointerLock();
                        Browser.isFullscreen = true;
                        if (Browser.resizeCanvas) {
                            Browser.setFullscreenCanvasSize()
                        } else {
                            Browser.updateCanvasDimensions(canvas)
                        }
                    } else {
                        canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
                        canvasContainer.parentNode.removeChild(canvasContainer);
                        if (Browser.resizeCanvas) {
                            Browser.setWindowedCanvasSize()
                        } else {
                            Browser.updateCanvasDimensions(canvas)
                        }
                    }
                    if (Module["onFullScreen"])
                        Module["onFullScreen"](Browser.isFullscreen);
                    if (Module["onFullscreen"])
                        Module["onFullscreen"](Browser.isFullscreen)
                }
                if (!Browser.fullscreenHandlersInstalled) {
                    Browser.fullscreenHandlersInstalled = true;
                    document.addEventListener("fullscreenchange", fullscreenChange, false);
                    document.addEventListener("mozfullscreenchange", fullscreenChange, false);
                    document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
                    document.addEventListener("MSFullscreenChange", fullscreenChange, false)
                }
                var canvasContainer = document.createElement("div");
                canvas.parentNode.insertBefore(canvasContainer, canvas);
                canvasContainer.appendChild(canvas);
                canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? ()=>canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]) : null) || (canvasContainer["webkitRequestFullScreen"] ? ()=>canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]) : null);
                canvasContainer.requestFullscreen()
            },
            exitFullscreen: function() {
                if (!Browser.isFullscreen) {
                    return false
                }
                var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function() {}
                ;
                CFS.apply(document, []);
                return true
            },
            nextRAF: 0,
            fakeRequestAnimationFrame: function(func) {
                var now = Date.now();
                if (Browser.nextRAF === 0) {
                    Browser.nextRAF = now + 1e3 / 60
                } else {
                    while (now + 2 >= Browser.nextRAF) {
                        Browser.nextRAF += 1e3 / 60
                    }
                }
                var delay = Math.max(Browser.nextRAF - now, 0);
                setTimeout(func, delay)
            },
            requestAnimationFrame: function(func) {
                if (typeof requestAnimationFrame == "function") {
                    requestAnimationFrame(func);
                    return
                }
                var RAF = Browser.fakeRequestAnimationFrame;
                RAF(func)
            },
            safeSetTimeout: function(func) {
                return safeSetTimeout(func)
            },
            safeRequestAnimationFrame: function(func) {
                return Browser.requestAnimationFrame(function() {
                    callUserCallback(func)
                })
            },
            getMimetype: function(name) {
                return {
                    "jpg": "image/jpeg",
                    "jpeg": "image/jpeg",
                    "png": "image/png",
                    "bmp": "image/bmp",
                    "ogg": "audio/ogg",
                    "wav": "audio/wav",
                    "mp3": "audio/mpeg"
                }[name.substr(name.lastIndexOf(".") + 1)]
            },
            getUserMedia: function(func) {
                if (!window.getUserMedia) {
                    window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"]
                }
                window.getUserMedia(func)
            },
            getMovementX: function(event) {
                return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0
            },
            getMovementY: function(event) {
                return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0
            },
            getMouseWheelDelta: function(event) {
                var delta = 0;
                switch (event.type) {
                case "DOMMouseScroll":
                    delta = event.detail / 3;
                    break;
                case "mousewheel":
                    delta = event.wheelDelta / 120;
                    break;
                case "wheel":
                    delta = event.deltaY;
                    switch (event.deltaMode) {
                    case 0:
                        delta /= 100;
                        break;
                    case 1:
                        delta /= 3;
                        break;
                    case 2:
                        delta *= 80;
                        break;
                    default:
                        throw "unrecognized mouse wheel delta mode: " + event.deltaMode
                    }
                    break;
                default:
                    throw "unrecognized mouse wheel event: " + event.type
                }
                return delta
            },
            mouseX: 0,
            mouseY: 0,
            mouseMovementX: 0,
            mouseMovementY: 0,
            touches: {},
            lastTouches: {},
            calculateMouseEvent: function(event) {
                if (Browser.pointerLock) {
                    if (event.type != "mousemove" && "mozMovementX"in event) {
                        Browser.mouseMovementX = Browser.mouseMovementY = 0
                    } else {
                        Browser.mouseMovementX = Browser.getMovementX(event);
                        Browser.mouseMovementY = Browser.getMovementY(event)
                    }
                    if (typeof SDL != "undefined") {
                        Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                        Browser.mouseY = SDL.mouseY + Browser.mouseMovementY
                    } else {
                        Browser.mouseX += Browser.mouseMovementX;
                        Browser.mouseY += Browser.mouseMovementY
                    }
                } else {
                    var rect = Module["canvas"].getBoundingClientRect();
                    var cw = Module["canvas"].width;
                    var ch = Module["canvas"].height;
                    var scrollX = typeof window.scrollX != "undefined" ? window.scrollX : window.pageXOffset;
                    var scrollY = typeof window.scrollY != "undefined" ? window.scrollY : window.pageYOffset;
                    if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
                        var touch = event.touch;
                        if (touch === undefined) {
                            return
                        }
                        var adjustedX = touch.pageX - (scrollX + rect.left);
                        var adjustedY = touch.pageY - (scrollY + rect.top);
                        adjustedX = adjustedX * (cw / rect.width);
                        adjustedY = adjustedY * (ch / rect.height);
                        var coords = {
                            x: adjustedX,
                            y: adjustedY
                        };
                        if (event.type === "touchstart") {
                            Browser.lastTouches[touch.identifier] = coords;
                            Browser.touches[touch.identifier] = coords
                        } else if (event.type === "touchend" || event.type === "touchmove") {
                            var last = Browser.touches[touch.identifier];
                            if (!last)
                                last = coords;
                            Browser.lastTouches[touch.identifier] = last;
                            Browser.touches[touch.identifier] = coords
                        }
                        return
                    }
                    var x = event.pageX - (scrollX + rect.left);
                    var y = event.pageY - (scrollY + rect.top);
                    x = x * (cw / rect.width);
                    y = y * (ch / rect.height);
                    Browser.mouseMovementX = x - Browser.mouseX;
                    Browser.mouseMovementY = y - Browser.mouseY;
                    Browser.mouseX = x;
                    Browser.mouseY = y
                }
            },
            resizeListeners: [],
            updateResizeListeners: function() {
                var canvas = Module["canvas"];
                Browser.resizeListeners.forEach(function(listener) {
                    listener(canvas.width, canvas.height)
                })
            },
            setCanvasSize: function(width, height, noUpdates) {
                var canvas = Module["canvas"];
                Browser.updateCanvasDimensions(canvas, width, height);
                if (!noUpdates)
                    Browser.updateResizeListeners()
            },
            windowedWidth: 0,
            windowedHeight: 0,
            setFullscreenCanvasSize: function() {
                if (typeof SDL != "undefined") {
                    var flags = HEAPU32[SDL.screen >> 2];
                    flags = flags | 8388608;
                    HEAP32[SDL.screen >> 2] = flags
                }
                Browser.updateCanvasDimensions(Module["canvas"]);
                Browser.updateResizeListeners()
            },
            setWindowedCanvasSize: function() {
                if (typeof SDL != "undefined") {
                    var flags = HEAPU32[SDL.screen >> 2];
                    flags = flags & ~8388608;
                    HEAP32[SDL.screen >> 2] = flags
                }
                Browser.updateCanvasDimensions(Module["canvas"]);
                Browser.updateResizeListeners()
            },
            updateCanvasDimensions: function(canvas, wNative, hNative) {
                if (wNative && hNative) {
                    canvas.widthNative = wNative;
                    canvas.heightNative = hNative
                } else {
                    wNative = canvas.widthNative;
                    hNative = canvas.heightNative
                }
                var w = wNative;
                var h = hNative;
                if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
                    if (w / h < Module["forcedAspectRatio"]) {
                        w = Math.round(h * Module["forcedAspectRatio"])
                    } else {
                        h = Math.round(w / Module["forcedAspectRatio"])
                    }
                }
                if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
                    var factor = Math.min(screen.width / w, screen.height / h);
                    w = Math.round(w * factor);
                    h = Math.round(h * factor)
                }
                if (Browser.resizeCanvas) {
                    if (canvas.width != w)
                        canvas.width = w;
                    if (canvas.height != h)
                        canvas.height = h;
                    if (typeof canvas.style != "undefined") {
                        canvas.style.removeProperty("width");
                        canvas.style.removeProperty("height")
                    }
                } else {
                    if (canvas.width != wNative)
                        canvas.width = wNative;
                    if (canvas.height != hNative)
                        canvas.height = hNative;
                    if (typeof canvas.style != "undefined") {
                        if (w != wNative || h != hNative) {
                            canvas.style.setProperty("width", w + "px", "important");
                            canvas.style.setProperty("height", h + "px", "important")
                        } else {
                            canvas.style.removeProperty("width");
                            canvas.style.removeProperty("height")
                        }
                    }
                }
            }
        };
        Module["Browser"] = Browser;
        var GOT = {};
        Module["GOT"] = GOT;
        var CurrentModuleWeakSymbols = new Set([]);
        Module["CurrentModuleWeakSymbols"] = CurrentModuleWeakSymbols;
        var GOTHandler = {
            get: function(obj, symName) {
                var rtn = GOT[symName];
                if (!rtn) {
                    rtn = GOT[symName] = new WebAssembly.Global({
                        "value": "i32",
                        "mutable": true
                    })
                }
                if (!CurrentModuleWeakSymbols.has(symName)) {
                    rtn.required = true
                }
                return rtn
            }
        };
        Module["GOTHandler"] = GOTHandler;
        function callRuntimeCallbacks(callbacks) {
            while (callbacks.length > 0) {
                callbacks.shift()(Module)
            }
        }
        Module["callRuntimeCallbacks"] = callRuntimeCallbacks;
        function ExceptionInfo(excPtr) {
            this.excPtr = excPtr;
            this.ptr = excPtr - 24;
            this.set_type = function(type) {
                HEAPU32[this.ptr + 4 >> 2] = type
            }
            ;
            this.get_type = function() {
                return HEAPU32[this.ptr + 4 >> 2]
            }
            ;
            this.set_destructor = function(destructor) {
                HEAPU32[this.ptr + 8 >> 2] = destructor
            }
            ;
            this.get_destructor = function() {
                return HEAPU32[this.ptr + 8 >> 2]
            }
            ;
            this.set_refcount = function(refcount) {
                HEAP32[this.ptr >> 2] = refcount
            }
            ;
            this.set_caught = function(caught) {
                caught = caught ? 1 : 0;
                HEAP8[this.ptr + 12 >> 0] = caught
            }
            ;
            this.get_caught = function() {
                return HEAP8[this.ptr + 12 >> 0] != 0
            }
            ;
            this.set_rethrown = function(rethrown) {
                rethrown = rethrown ? 1 : 0;
                HEAP8[this.ptr + 13 >> 0] = rethrown
            }
            ;
            this.get_rethrown = function() {
                return HEAP8[this.ptr + 13 >> 0] != 0
            }
            ;
            this.init = function(type, destructor) {
                this.set_adjusted_ptr(0);
                this.set_type(type);
                this.set_destructor(destructor);
                this.set_refcount(0);
                this.set_caught(false);
                this.set_rethrown(false)
            }
            ;
            this.add_ref = function() {
                var value = HEAP32[this.ptr >> 2];
                HEAP32[this.ptr >> 2] = value + 1
            }
            ;
            this.release_ref = function() {
                var prev = HEAP32[this.ptr >> 2];
                HEAP32[this.ptr >> 2] = prev - 1;
                return prev === 1
            }
            ;
            this.set_adjusted_ptr = function(adjustedPtr) {
                HEAPU32[this.ptr + 16 >> 2] = adjustedPtr
            }
            ;
            this.get_adjusted_ptr = function() {
                return HEAPU32[this.ptr + 16 >> 2]
            }
            ;
            this.get_exception_ptr = function() {
                var isPointer = Module["___cxa_is_pointer_type"](this.get_type());
                if (isPointer) {
                    return HEAPU32[this.excPtr >> 2]
                }
                var adjusted = this.get_adjusted_ptr();
                if (adjusted !== 0)
                    return adjusted;
                return this.excPtr
            }
        }
        Module["ExceptionInfo"] = ExceptionInfo;
        function ___cxa_free_exception(ptr) {
            return _free(new ExceptionInfo(ptr).ptr)
        }
        Module["___cxa_free_exception"] = ___cxa_free_exception;
        ___cxa_free_exception.sig = "vp";
        var wasmTableMirror = [];
        Module["wasmTableMirror"] = wasmTableMirror;
        function getWasmTableEntry(funcPtr) {
            var func = wasmTableMirror[funcPtr];
            if (!func) {
                if (funcPtr >= wasmTableMirror.length)
                    wasmTableMirror.length = funcPtr + 1;
                wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr)
            }
            return func
        }
        Module["getWasmTableEntry"] = getWasmTableEntry;
        function exception_decRef(info) {
            if (info.release_ref() && !info.get_rethrown()) {
                var destructor = info.get_destructor();
                if (destructor) {
                    getWasmTableEntry(destructor)(info.excPtr)
                }
                ___cxa_free_exception(info.excPtr)
            }
        }
        Module["exception_decRef"] = exception_decRef;
        function ___cxa_decrement_exception_refcount(ptr) {
            if (!ptr)
                return;
            exception_decRef(new ExceptionInfo(ptr))
        }
        Module["___cxa_decrement_exception_refcount"] = ___cxa_decrement_exception_refcount;
        ___cxa_decrement_exception_refcount.sig = "vp";
        function decrementExceptionRefcount(ptr) {
            ___cxa_decrement_exception_refcount(ptr)
        }
        Module["decrementExceptionRefcount"] = decrementExceptionRefcount;
        function withStackSave(f) {
            var stack = stackSave();
            var ret = f();
            stackRestore(stack);
            return ret
        }
        Module["withStackSave"] = withStackSave;
        function demangle(func) {
            demangle.recursionGuard = (demangle.recursionGuard | 0) + 1;
            if (demangle.recursionGuard > 1)
                return func;
            return withStackSave(function() {
                try {
                    var s = func;
                    if (s.startsWith("__Z"))
                        s = s.substr(1);
                    var len = lengthBytesUTF8(s) + 1;
                    var buf = stackAlloc(len);
                    stringToUTF8(s, buf, len);
                    var status = stackAlloc(4);
                    var ret = ___cxa_demangle(buf, 0, 0, status);
                    if (HEAP32[status >> 2] === 0 && ret) {
                        return UTF8ToString(ret)
                    }
                } catch (e) {} finally {
                    _free(ret);
                    if (demangle.recursionGuard < 2)
                        --demangle.recursionGuard
                }
                return func
            })
        }
        Module["demangle"] = demangle;
        function demangleAll(text) {
            var regex = /\b_Z[\w\d_]+/g;
            return text.replace(regex, function(x) {
                var y = demangle(x);
                return x === y ? x : y + " [" + x + "]"
            })
        }
        Module["demangleAll"] = demangleAll;
        function getDylinkMetadata(binary) {
            var offset = 0;
            var end = 0;
            function getU8() {
                return binary[offset++]
            }
            function getLEB() {
                var ret = 0;
                var mul = 1;
                while (1) {
                    var byte = binary[offset++];
                    ret += (byte & 127) * mul;
                    mul *= 128;
                    if (!(byte & 128))
                        break
                }
                return ret
            }
            function getString() {
                var len = getLEB();
                offset += len;
                return UTF8ArrayToString(binary, offset - len, len)
            }
            function failIf(condition, message) {
                if (condition)
                    throw new Error(message)
            }
            var name = "dylink.0";
            if (binary instanceof WebAssembly.Module) {
                var dylinkSection = WebAssembly.Module.customSections(binary, name);
                if (dylinkSection.length === 0) {
                    name = "dylink";
                    dylinkSection = WebAssembly.Module.customSections(binary, name)
                }
                failIf(dylinkSection.length === 0, "need dylink section");
                binary = new Uint8Array(dylinkSection[0]);
                end = binary.length
            } else {
                var int32View = new Uint32Array(new Uint8Array(binary.subarray(0, 24)).buffer);
                var magicNumberFound = int32View[0] == 1836278016;
                failIf(!magicNumberFound, "need to see wasm magic number");
                failIf(binary[8] !== 0, "need the dylink section to be first");
                offset = 9;
                var section_size = getLEB();
                end = offset + section_size;
                name = getString()
            }
            var customSection = {
                neededDynlibs: [],
                tlsExports: new Set,
                weakImports: new Set
            };
            if (name == "dylink") {
                customSection.memorySize = getLEB();
                customSection.memoryAlign = getLEB();
                customSection.tableSize = getLEB();
                customSection.tableAlign = getLEB();
                var neededDynlibsCount = getLEB();
                for (var i = 0; i < neededDynlibsCount; ++i) {
                    var libname = getString();
                    customSection.neededDynlibs.push(libname)
                }
            } else {
                failIf(name !== "dylink.0");
                var WASM_DYLINK_MEM_INFO = 1;
                var WASM_DYLINK_NEEDED = 2;
                var WASM_DYLINK_EXPORT_INFO = 3;
                var WASM_DYLINK_IMPORT_INFO = 4;
                var WASM_SYMBOL_TLS = 256;
                var WASM_SYMBOL_BINDING_MASK = 3;
                var WASM_SYMBOL_BINDING_WEAK = 1;
                while (offset < end) {
                    var subsectionType = getU8();
                    var subsectionSize = getLEB();
                    if (subsectionType === WASM_DYLINK_MEM_INFO) {
                        customSection.memorySize = getLEB();
                        customSection.memoryAlign = getLEB();
                        customSection.tableSize = getLEB();
                        customSection.tableAlign = getLEB()
                    } else if (subsectionType === WASM_DYLINK_NEEDED) {
                        var neededDynlibsCount = getLEB();
                        for (var i = 0; i < neededDynlibsCount; ++i) {
                            libname = getString();
                            customSection.neededDynlibs.push(libname)
                        }
                    } else if (subsectionType === WASM_DYLINK_EXPORT_INFO) {
                        var count = getLEB();
                        while (count--) {
                            var symname = getString();
                            var flags = getLEB();
                            if (flags & WASM_SYMBOL_TLS) {
                                customSection.tlsExports.add(symname)
                            }
                        }
                    } else if (subsectionType === WASM_DYLINK_IMPORT_INFO) {
                        var count = getLEB();
                        while (count--) {
                            var modname = getString();
                            var symname = getString();
                            var flags = getLEB();
                            if ((flags & WASM_SYMBOL_BINDING_MASK) == WASM_SYMBOL_BINDING_WEAK) {
                                customSection.weakImports.add(symname)
                            }
                        }
                    } else {
                        offset += subsectionSize
                    }
                }
            }
            return customSection
        }
        Module["getDylinkMetadata"] = getDylinkMetadata;
        function getExceptionMessageCommon(ptr) {
            return withStackSave(function() {
                var type_addr_addr = stackAlloc(4);
                var message_addr_addr = stackAlloc(4);
                ___get_exception_message(ptr, type_addr_addr, message_addr_addr);
                var type_addr = HEAP32[type_addr_addr >> 2];
                var message_addr = HEAP32[message_addr_addr >> 2];
                var type = UTF8ToString(type_addr);
                _free(type_addr);
                var message;
                if (message_addr) {
                    message = UTF8ToString(message_addr);
                    _free(message_addr)
                }
                return [type, message]
            })
        }
        Module["getExceptionMessageCommon"] = getExceptionMessageCommon;
        function getExceptionMessage(ptr) {
            return getExceptionMessageCommon(ptr)
        }
        Module["getExceptionMessage"] = getExceptionMessage;
        function getValue(ptr, type="i8") {
            if (type.endsWith("*"))
                type = "*";
            switch (type) {
            case "i1":
                return HEAP8[ptr >> 0];
            case "i8":
                return HEAP8[ptr >> 0];
            case "i16":
                return HEAP16[ptr >> 1];
            case "i32":
                return HEAP32[ptr >> 2];
            case "i64":
                return HEAP64[ptr >> 3];
            case "float":
                return HEAPF32[ptr >> 2];
            case "double":
                return HEAPF64[ptr >> 3];
            case "*":
                return HEAPU32[ptr >> 2];
            default:
                abort("invalid type for getValue: " + type)
            }
            return null
        }
        Module["getValue"] = getValue;
        function exception_addRef(info) {
            info.add_ref()
        }
        Module["exception_addRef"] = exception_addRef;
        function ___cxa_increment_exception_refcount(ptr) {
            if (!ptr)
                return;
            exception_addRef(new ExceptionInfo(ptr))
        }
        Module["___cxa_increment_exception_refcount"] = ___cxa_increment_exception_refcount;
        ___cxa_increment_exception_refcount.sig = "vp";
        function incrementExceptionRefcount(ptr) {
            ___cxa_increment_exception_refcount(ptr)
        }
        Module["incrementExceptionRefcount"] = incrementExceptionRefcount;
        function jsStackTrace() {
            var error = new Error;
            if (!error.stack) {
                try {
                    throw new Error
                } catch (e) {
                    error = e
                }
                if (!error.stack) {
                    return "(no stack trace available)"
                }
            }
            return error.stack.toString()
        }
        Module["jsStackTrace"] = jsStackTrace;
        function asmjsMangle(x) {
            var unmangledSymbols = ["stackAlloc", "stackSave", "stackRestore", "getTempRet0", "setTempRet0"];
            return x.indexOf("dynCall_") == 0 || unmangledSymbols.includes(x) ? x : "_" + x
        }
        Module["asmjsMangle"] = asmjsMangle;
        function mergeLibSymbols(exports, libName) {
            for (var sym in exports) {
                if (!exports.hasOwnProperty(sym)) {
                    continue
                }
                if (!asmLibraryArg.hasOwnProperty(sym)) {
                    asmLibraryArg[sym] = exports[sym]
                }
                var module_sym = asmjsMangle(sym);
                if (!Module.hasOwnProperty(module_sym)) {
                    Module[module_sym] = exports[sym]
                }
                if (sym == "__main_argc_argv") {
                    Module["_main"] = exports[sym]
                }
            }
        }
        Module["mergeLibSymbols"] = mergeLibSymbols;
        var LDSO = {
            loadedLibsByName: {},
            loadedLibsByHandle: {}
        };
        Module["LDSO"] = LDSO;
        function dynCall(sig, ptr, args) {
            var rtn = getWasmTableEntry(ptr).apply(null, args);
            return rtn
        }
        Module["dynCall"] = dynCall;
        function createInvokeFunction(sig) {
            return function() {
                var sp = stackSave();
                try {
                    return dynCall(sig, arguments[0], Array.prototype.slice.call(arguments, 1))
                } catch (e) {
                    stackRestore(sp);
                    if (e !== e + 0)
                        throw e;
                    _setThrew(1, 0)
                }
            }
        }
        Module["createInvokeFunction"] = createInvokeFunction;
        var ___heap_base = 8392608;
        Module["___heap_base"] = ___heap_base;
        function getMemory(size) {
            if (runtimeInitialized) {
                return zeroMemory(_malloc(size), size)
            }
            var ret = ___heap_base;
            var end = ret + size + 15 & -16;
            ___heap_base = end;
            GOT["__heap_base"].value = end;
            return ret
        }
        Module["getMemory"] = getMemory;
        function isInternalSym(symName) {
            return ["__cpp_exception", "__c_longjmp", "__wasm_apply_data_relocs", "__dso_handle", "__tls_size", "__tls_align", "__set_stack_limits", "_emscripten_tls_init", "__wasm_init_tls", "__wasm_call_ctors"].includes(symName)
        }
        Module["isInternalSym"] = isInternalSym;
        function uleb128Encode(n, target) {
            if (n < 128) {
                target.push(n)
            } else {
                target.push(n % 128 | 128, n >> 7)
            }
        }
        Module["uleb128Encode"] = uleb128Encode;
        function sigToWasmTypes(sig) {
            var typeNames = {
                "i": "i32",
                "j": "i64",
                "f": "f32",
                "d": "f64",
                "p": "i32"
            };
            var type = {
                parameters: [],
                results: sig[0] == "v" ? [] : [typeNames[sig[0]]]
            };
            for (var i = 1; i < sig.length; ++i) {
                type.parameters.push(typeNames[sig[i]])
            }
            return type
        }
        Module["sigToWasmTypes"] = sigToWasmTypes;
        function generateFuncType(sig, target) {
            var sigRet = sig.slice(0, 1);
            var sigParam = sig.slice(1);
            var typeCodes = {
                "i": 127,
                "p": 127,
                "j": 126,
                "f": 125,
                "d": 124
            };
            target.push(96);
            uleb128Encode(sigParam.length, target);
            for (var i = 0; i < sigParam.length; ++i) {
                target.push(typeCodes[sigParam[i]])
            }
            if (sigRet == "v") {
                target.push(0)
            } else {
                target.push(1, typeCodes[sigRet])
            }
        }
        Module["generateFuncType"] = generateFuncType;
        function convertJsFunctionToWasm(func, sig) {
            if (typeof WebAssembly.Function == "function") {
                return new WebAssembly.Function(sigToWasmTypes(sig),func)
            }
            var typeSectionBody = [1];
            generateFuncType(sig, typeSectionBody);
            var bytes = [0, 97, 115, 109, 1, 0, 0, 0, 1];
            uleb128Encode(typeSectionBody.length, bytes);
            bytes.push.apply(bytes, typeSectionBody);
            bytes.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);
            var module = new WebAssembly.Module(new Uint8Array(bytes));
            var instance = new WebAssembly.Instance(module,{
                "e": {
                    "f": func
                }
            });
            var wrappedFunc = instance.exports["f"];
            return wrappedFunc
        }
        Module["convertJsFunctionToWasm"] = convertJsFunctionToWasm;
        function updateTableMap(offset, count) {
            if (functionsInTableMap) {
                for (var i = offset; i < offset + count; i++) {
                    var item = getWasmTableEntry(i);
                    if (item) {
                        functionsInTableMap.set(item, i)
                    }
                }
            }
        }
        Module["updateTableMap"] = updateTableMap;
        var functionsInTableMap = undefined;
        Module["functionsInTableMap"] = functionsInTableMap;
        var freeTableIndexes = [];
        Module["freeTableIndexes"] = freeTableIndexes;
        function getEmptyTableSlot() {
            if (freeTableIndexes.length) {
                return freeTableIndexes.pop()
            }
            try {
                wasmTable.grow(1)
            } catch (err) {
                if (!(err instanceof RangeError)) {
                    throw err
                }
                throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH."
            }
            return wasmTable.length - 1
        }
        Module["getEmptyTableSlot"] = getEmptyTableSlot;
        function setWasmTableEntry(idx, func) {
            wasmTable.set(idx, func);
            wasmTableMirror[idx] = wasmTable.get(idx)
        }
        Module["setWasmTableEntry"] = setWasmTableEntry;
        function addFunction(func, sig) {
            if (!functionsInTableMap) {
                functionsInTableMap = new WeakMap;
                updateTableMap(0, wasmTable.length)
            }
            if (functionsInTableMap.has(func)) {
                return functionsInTableMap.get(func)
            }
            var ret = getEmptyTableSlot();
            try {
                setWasmTableEntry(ret, func)
            } catch (err) {
                if (!(err instanceof TypeError)) {
                    throw err
                }
                var wrapped = convertJsFunctionToWasm(func, sig);
                setWasmTableEntry(ret, wrapped)
            }
            functionsInTableMap.set(func, ret);
            return ret
        }
        Module["addFunction"] = addFunction;
        function updateGOT(exports, replace) {
            for (var symName in exports) {
                if (isInternalSym(symName)) {
                    continue
                }
                var value = exports[symName];
                if (!GOT[symName]) {
                    GOT[symName] = new WebAssembly.Global({
                        "value": "i32",
                        "mutable": true
                    })
                }
                if (replace || GOT[symName].value == 0) {
                    if (typeof value == "function") {
                        GOT[symName].value = addFunction(value)
                    } else if (typeof value == "number") {
                        GOT[symName].value = value
                    } else if (typeof value == "bigint") {
                        GOT[symName].value = Number(value)
                    } else {
                        err("unhandled export type for `" + symName + "`: " + typeof value)
                    }
                }
            }
        }
        Module["updateGOT"] = updateGOT;
        function relocateExports(exports, memoryBase, replace) {
            var relocated = {};
            for (var e in exports) {
                var value = exports[e];
                if (typeof value == "object") {
                    value = value.value
                }
                if (typeof value == "number") {
                    value += memoryBase
                }
                relocated[e] = value
            }
            updateGOT(relocated, replace);
            return relocated
        }
        Module["relocateExports"] = relocateExports;
        function resolveGlobalSymbol(symName, direct) {
            var sym;
            if (!sym) {
                sym = asmLibraryArg[symName];
                if (sym && sym.stub)
                    sym = undefined
            }
            if (!sym) {
                sym = Module[asmjsMangle(symName)]
            }
            if (!sym && symName.startsWith("invoke_")) {
                sym = createInvokeFunction(symName.split("_")[1])
            }
            if (!sym && symName.startsWith("__cxa_find_matching_catch")) {
                sym = Module["___cxa_find_matching_catch"]
            }
            return sym
        }
        Module["resolveGlobalSymbol"] = resolveGlobalSymbol;
        function loadWebAssemblyModule(binary, flags, handle) {
            var metadata = getDylinkMetadata(binary);
            CurrentModuleWeakSymbols = metadata.weakImports;
            function loadModule() {
                var needsAllocation = !handle || !HEAP8[handle + 24 >> 0];
                if (needsAllocation) {
                    var memAlign = Math.pow(2, metadata.memoryAlign);
                    memAlign = Math.max(memAlign, STACK_ALIGN);
                    var memoryBase = metadata.memorySize ? alignMemory(getMemory(metadata.memorySize + memAlign), memAlign) : 0;
                    var tableBase = metadata.tableSize ? wasmTable.length : 0;
                    if (handle) {
                        HEAP8[handle + 24 >> 0] = 1;
                        HEAPU32[handle + 28 >> 2] = memoryBase;
                        HEAP32[handle + 32 >> 2] = metadata.memorySize;
                        HEAPU32[handle + 36 >> 2] = tableBase;
                        HEAP32[handle + 40 >> 2] = metadata.tableSize
                    }
                } else {
                    memoryBase = HEAPU32[handle + 28 >> 2];
                    tableBase = HEAPU32[handle + 36 >> 2]
                }
                var tableGrowthNeeded = tableBase + metadata.tableSize - wasmTable.length;
                if (tableGrowthNeeded > 0) {
                    wasmTable.grow(tableGrowthNeeded)
                }
                var moduleExports;
                function resolveSymbol(sym) {
                    var resolved = resolveGlobalSymbol(sym, false);
                    if (!resolved) {
                        resolved = moduleExports[sym]
                    }
                    return resolved
                }
                var proxyHandler = {
                    "get": function(stubs, prop) {
                        switch (prop) {
                        case "__memory_base":
                            return memoryBase;
                        case "__table_base":
                            return tableBase
                        }
                        if (prop in asmLibraryArg) {
                            return asmLibraryArg[prop]
                        }
                        if (!(prop in stubs)) {
                            var resolved;
                            stubs[prop] = function() {
                                if (!resolved)
                                    resolved = resolveSymbol(prop);
                                return resolved.apply(null, arguments)
                            }
                        }
                        return stubs[prop]
                    }
                };
                var proxy = new Proxy({},proxyHandler);
                var info = {
                    "GOT.mem": new Proxy({},GOTHandler),
                    "GOT.func": new Proxy({},GOTHandler),
                    "env": proxy,
                    wasi_snapshot_preview1: proxy
                };
                function postInstantiation(instance) {
                    updateTableMap(tableBase, metadata.tableSize);
                    moduleExports = relocateExports(instance.exports, memoryBase);
                    if (!flags.allowUndefined) {
                        reportUndefinedSymbols()
                    }
                    var applyRelocs = moduleExports["__wasm_apply_data_relocs"];
                    if (applyRelocs) {
                        if (runtimeInitialized) {
                            applyRelocs()
                        } else {
                            __RELOC_FUNCS__.push(applyRelocs)
                        }
                    }
                    var init = moduleExports["__wasm_call_ctors"];
                    if (init) {
                        if (runtimeInitialized) {
                            init()
                        } else {
                            __ATINIT__.push(init)
                        }
                    }
                    return moduleExports
                }
                if (flags.loadAsync) {
                    if (binary instanceof WebAssembly.Module) {
                        var instance = new WebAssembly.Instance(binary,info);
                        return Promise.resolve(postInstantiation(instance))
                    }
                    return WebAssembly.instantiate(binary, info).then(function(result) {
                        return postInstantiation(result.instance)
                    })
                }
                var module = binary instanceof WebAssembly.Module ? binary : new WebAssembly.Module(binary);
                var instance = new WebAssembly.Instance(module,info);
                return postInstantiation(instance)
            }
            if (flags.loadAsync) {
                return metadata.neededDynlibs.reduce(function(chain, dynNeeded) {
                    return chain.then(function() {
                        return loadDynamicLibrary(dynNeeded, flags)
                    })
                }, Promise.resolve()).then(function() {
                    return loadModule()
                })
            }
            metadata.neededDynlibs.forEach(function(dynNeeded) {
                loadDynamicLibrary(dynNeeded, flags)
            });
            return loadModule()
        }
        Module["loadWebAssemblyModule"] = loadWebAssemblyModule;
        function loadDynamicLibrary(lib, flags, handle) {
            flags = flags || {
                global: true,
                nodelete: true
            };
            var dso = LDSO.loadedLibsByName[lib];
            if (dso) {
                if (flags.global && !dso.global) {
                    dso.global = true;
                    if (dso.module !== "loading") {
                        mergeLibSymbols(dso.module, lib)
                    }
                }
                if (flags.nodelete && dso.refcount !== Infinity) {
                    dso.refcount = Infinity
                }
                dso.refcount++;
                if (handle) {
                    LDSO.loadedLibsByHandle[handle] = dso
                }
                return flags.loadAsync ? Promise.resolve(true) : true
            }
            dso = {
                refcount: flags.nodelete ? Infinity : 1,
                name: lib,
                module: "loading",
                global: flags.global
            };
            LDSO.loadedLibsByName[lib] = dso;
            if (handle) {
                LDSO.loadedLibsByHandle[handle] = dso
            }
            function loadLibData(libFile) {
                if (flags.fs && flags.fs.findObject(libFile)) {
                    var libData = flags.fs.readFile(libFile, {
                        encoding: "binary"
                    });
                    if (!(libData instanceof Uint8Array)) {
                        libData = new Uint8Array(libData)
                    }
                    return flags.loadAsync ? Promise.resolve(libData) : libData
                }
                if (flags.loadAsync) {
                    return new Promise(function(resolve, reject) {
                        readAsync(libFile, data=>resolve(new Uint8Array(data)), reject)
                    }
                    )
                }
                if (!readBinary) {
                    throw new Error(libFile + ": file not found, and synchronous loading of external files is not available")
                }
                return readBinary(libFile)
            }
            function getLibModule() {
                if (typeof preloadedWasm != "undefined" && preloadedWasm[lib]) {
                    var libModule = preloadedWasm[lib];
                    return flags.loadAsync ? Promise.resolve(libModule) : libModule
                }
                if (flags.loadAsync) {
                    return loadLibData(lib).then(function(libData) {
                        return loadWebAssemblyModule(libData, flags, handle)
                    })
                }
                return loadWebAssemblyModule(loadLibData(lib), flags, handle)
            }
            function moduleLoaded(libModule) {
                if (dso.global) {
                    mergeLibSymbols(libModule, lib)
                }
                dso.module = libModule
            }
            if (flags.loadAsync) {
                return getLibModule().then(function(libModule) {
                    moduleLoaded(libModule);
                    return true
                })
            }
            moduleLoaded(getLibModule());
            return true
        }
        Module["loadDynamicLibrary"] = loadDynamicLibrary;
        function reportUndefinedSymbols() {
            for (var symName in GOT) {
                if (GOT[symName].value == 0) {
                    var value = resolveGlobalSymbol(symName, true);
                    if (!value && !GOT[symName].required) {
                        continue
                    }
                    if (typeof value == "function") {
                        GOT[symName].value = addFunction(value, value.sig)
                    } else if (typeof value == "number") {
                        GOT[symName].value = value
                    } else {
                        throw new Error("bad export type for `" + symName + "`: " + typeof value)
                    }
                }
            }
        }
        Module["reportUndefinedSymbols"] = reportUndefinedSymbols;
        function preloadDylibs() {
            if (!dynamicLibraries.length) {
                reportUndefinedSymbols();
                return
            }
            addRunDependency("preloadDylibs");
            dynamicLibraries.reduce(function(chain, lib) {
                return chain.then(function() {
                    return loadDynamicLibrary(lib, {
                        loadAsync: true,
                        global: true,
                        nodelete: true,
                        allowUndefined: true
                    })
                })
            }, Promise.resolve()).then(function() {
                reportUndefinedSymbols();
                removeRunDependency("preloadDylibs")
            })
        }
        Module["preloadDylibs"] = preloadDylibs;
        function setValue(ptr, value, type="i8") {
            if (type.endsWith("*"))
                type = "*";
            switch (type) {
            case "i1":
                HEAP8[ptr >> 0] = value;
                break;
            case "i8":
                HEAP8[ptr >> 0] = value;
                break;
            case "i16":
                HEAP16[ptr >> 1] = value;
                break;
            case "i32":
                HEAP32[ptr >> 2] = value;
                break;
            case "i64":
                tempI64 = [value >>> 0, (tempDouble = value,
                +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                HEAP32[ptr >> 2] = tempI64[0],
                HEAP32[ptr + 4 >> 2] = tempI64[1];
                break;
            case "float":
                HEAPF32[ptr >> 2] = value;
                break;
            case "double":
                HEAPF64[ptr >> 3] = value;
                break;
            case "*":
                HEAPU32[ptr >> 2] = value;
                break;
            default:
                abort("invalid type for setValue: " + type)
            }
        }
        Module["setValue"] = setValue;
        function stackTrace() {
            var js = jsStackTrace();
            if (Module["extraStackTrace"])
                js += "\n" + Module["extraStackTrace"]();
            return demangleAll(js)
        }
        Module["stackTrace"] = stackTrace;
        function writeArrayToMemory(array, buffer) {
            HEAP8.set(array, buffer)
        }
        Module["writeArrayToMemory"] = writeArrayToMemory;
        function ___assert_fail(condition, filename, line, func) {
            abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"])
        }
        Module["___assert_fail"] = ___assert_fail;
        ___assert_fail.sig = "vppip";
        function ___call_sighandler(fp, sig) {
            getWasmTableEntry(fp)(sig)
        }
        Module["___call_sighandler"] = ___call_sighandler;
        ___call_sighandler.sig = "vpi";
        function ___cxa_allocate_exception(size) {
            return _malloc(size + 24) + 24
        }
        Module["___cxa_allocate_exception"] = ___cxa_allocate_exception;
        ___cxa_allocate_exception.sig = "pp";
        var exceptionCaught = [];
        Module["exceptionCaught"] = exceptionCaught;
        var uncaughtExceptionCount = 0;
        Module["uncaughtExceptionCount"] = uncaughtExceptionCount;
        function ___cxa_begin_catch(ptr) {
            var info = new ExceptionInfo(ptr);
            if (!info.get_caught()) {
                info.set_caught(true);
                uncaughtExceptionCount--
            }
            info.set_rethrown(false);
            exceptionCaught.push(info);
            exception_addRef(info);
            return info.get_exception_ptr()
        }
        Module["___cxa_begin_catch"] = ___cxa_begin_catch;
        ___cxa_begin_catch.sig = "pp";
        function ___cxa_call_unexpected(exception) {
            err("Unexpected exception thrown, this is not properly supported - aborting");
            ABORT = true;
            throw exception
        }
        Module["___cxa_call_unexpected"] = ___cxa_call_unexpected;
        function ___cxa_current_primary_exception() {
            if (!exceptionCaught.length) {
                return 0
            }
            var info = exceptionCaught[exceptionCaught.length - 1];
            exception_addRef(info);
            return info.excPtr
        }
        Module["___cxa_current_primary_exception"] = ___cxa_current_primary_exception;
        var exceptionLast = 0;
        Module["exceptionLast"] = exceptionLast;
        function ___cxa_end_catch() {
            _setThrew(0);
            var info = exceptionCaught.pop();
            exception_decRef(info);
            exceptionLast = 0
        }
        Module["___cxa_end_catch"] = ___cxa_end_catch;
        ___cxa_end_catch.sig = "v";
        function ___resumeException(ptr) {
            if (!exceptionLast) {
                exceptionLast = ptr
            }
            throw ptr
        }
        Module["___resumeException"] = ___resumeException;
        ___resumeException.sig = "vp";
        function ___cxa_find_matching_catch_2() {
            var thrown = exceptionLast;
            if (!thrown) {
                setTempRet0(0);
                return 0
            }
            var info = new ExceptionInfo(thrown);
            info.set_adjusted_ptr(thrown);
            var thrownType = info.get_type();
            if (!thrownType) {
                setTempRet0(0);
                return thrown
            }
            for (var i = 0; i < arguments.length; i++) {
                var caughtType = arguments[i];
                if (caughtType === 0 || caughtType === thrownType) {
                    break
                }
                var adjusted_ptr_addr = info.ptr + 16;
                if (Module["___cxa_can_catch"](caughtType, thrownType, adjusted_ptr_addr)) {
                    setTempRet0(caughtType);
                    return thrown
                }
            }
            setTempRet0(thrownType);
            return thrown
        }
        Module["___cxa_find_matching_catch_2"] = ___cxa_find_matching_catch_2;
        ___cxa_find_matching_catch_2.sig = "ppp";
        function ___cxa_find_matching_catch_3() {
            var thrown = exceptionLast;
            if (!thrown) {
                setTempRet0(0);
                return 0
            }
            var info = new ExceptionInfo(thrown);
            info.set_adjusted_ptr(thrown);
            var thrownType = info.get_type();
            if (!thrownType) {
                setTempRet0(0);
                return thrown
            }
            for (var i = 0; i < arguments.length; i++) {
                var caughtType = arguments[i];
                if (caughtType === 0 || caughtType === thrownType) {
                    break
                }
                var adjusted_ptr_addr = info.ptr + 16;
                if (Module["___cxa_can_catch"](caughtType, thrownType, adjusted_ptr_addr)) {
                    setTempRet0(caughtType);
                    return thrown
                }
            }
            setTempRet0(thrownType);
            return thrown
        }
        Module["___cxa_find_matching_catch_3"] = ___cxa_find_matching_catch_3;
        ___cxa_find_matching_catch_3.sig = "pppp";
        function ___cxa_rethrow() {
            var info = exceptionCaught.pop();
            if (!info) {
                abort("no exception to throw")
            }
            var ptr = info.excPtr;
            if (!info.get_rethrown()) {
                exceptionCaught.push(info);
                info.set_rethrown(true);
                info.set_caught(false);
                uncaughtExceptionCount++
            }
            exceptionLast = ptr;
            throw ptr
        }
        Module["___cxa_rethrow"] = ___cxa_rethrow;
        ___cxa_rethrow.sig = "v";
        function ___cxa_rethrow_primary_exception(ptr) {
            if (!ptr)
                return;
            var info = new ExceptionInfo(ptr);
            exceptionCaught.push(info);
            info.set_rethrown(true);
            ___cxa_rethrow()
        }
        Module["___cxa_rethrow_primary_exception"] = ___cxa_rethrow_primary_exception;
        function ___cxa_throw(ptr, type, destructor) {
            var info = new ExceptionInfo(ptr);
            info.init(type, destructor);
            exceptionLast = ptr;
            uncaughtExceptionCount++;
            throw ptr
        }
        Module["___cxa_throw"] = ___cxa_throw;
        ___cxa_throw.sig = "vppp";
        function ___cxa_uncaught_exceptions() {
            return uncaughtExceptionCount
        }
        Module["___cxa_uncaught_exceptions"] = ___cxa_uncaught_exceptions;
        var ___memory_base = new WebAssembly.Global({
            "value": "i32",
            "mutable": false
        },1024);
        Module["___memory_base"] = ___memory_base;
        var ___stack_pointer = new WebAssembly.Global({
            "value": "i32",
            "mutable": true
        },8392608);
        Module["___stack_pointer"] = ___stack_pointer;
        function ___syscall__newselect(nfds, readfds, writefds, exceptfds, timeout) {
            try {
                var total = 0;
                var srcReadLow = readfds ? HEAP32[readfds >> 2] : 0
                  , srcReadHigh = readfds ? HEAP32[readfds + 4 >> 2] : 0;
                var srcWriteLow = writefds ? HEAP32[writefds >> 2] : 0
                  , srcWriteHigh = writefds ? HEAP32[writefds + 4 >> 2] : 0;
                var srcExceptLow = exceptfds ? HEAP32[exceptfds >> 2] : 0
                  , srcExceptHigh = exceptfds ? HEAP32[exceptfds + 4 >> 2] : 0;
                var dstReadLow = 0
                  , dstReadHigh = 0;
                var dstWriteLow = 0
                  , dstWriteHigh = 0;
                var dstExceptLow = 0
                  , dstExceptHigh = 0;
                var allLow = (readfds ? HEAP32[readfds >> 2] : 0) | (writefds ? HEAP32[writefds >> 2] : 0) | (exceptfds ? HEAP32[exceptfds >> 2] : 0);
                var allHigh = (readfds ? HEAP32[readfds + 4 >> 2] : 0) | (writefds ? HEAP32[writefds + 4 >> 2] : 0) | (exceptfds ? HEAP32[exceptfds + 4 >> 2] : 0);
                var check = function(fd, low, high, val) {
                    return fd < 32 ? low & val : high & val
                };
                for (var fd = 0; fd < nfds; fd++) {
                    var mask = 1 << fd % 32;
                    if (!check(fd, allLow, allHigh, mask)) {
                        continue
                    }
                    var stream = SYSCALLS.getStreamFromFD(fd);
                    var flags = SYSCALLS.DEFAULT_POLLMASK;
                    if (stream.stream_ops.poll) {
                        flags = stream.stream_ops.poll(stream)
                    }
                    if (flags & 1 && check(fd, srcReadLow, srcReadHigh, mask)) {
                        fd < 32 ? dstReadLow = dstReadLow | mask : dstReadHigh = dstReadHigh | mask;
                        total++
                    }
                    if (flags & 4 && check(fd, srcWriteLow, srcWriteHigh, mask)) {
                        fd < 32 ? dstWriteLow = dstWriteLow | mask : dstWriteHigh = dstWriteHigh | mask;
                        total++
                    }
                    if (flags & 2 && check(fd, srcExceptLow, srcExceptHigh, mask)) {
                        fd < 32 ? dstExceptLow = dstExceptLow | mask : dstExceptHigh = dstExceptHigh | mask;
                        total++
                    }
                }
                if (readfds) {
                    HEAP32[readfds >> 2] = dstReadLow;
                    HEAP32[readfds + 4 >> 2] = dstReadHigh
                }
                if (writefds) {
                    HEAP32[writefds >> 2] = dstWriteLow;
                    HEAP32[writefds + 4 >> 2] = dstWriteHigh
                }
                if (exceptfds) {
                    HEAP32[exceptfds >> 2] = dstExceptLow;
                    HEAP32[exceptfds + 4 >> 2] = dstExceptHigh
                }
                return total
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall__newselect"] = ___syscall__newselect;
        var SOCKFS = {
            mount: function(mount) {
                Module["websocket"] = Module["websocket"] && "object" === typeof Module["websocket"] ? Module["websocket"] : {};
                Module["websocket"]._callbacks = {};
                Module["websocket"]["on"] = function(event, callback) {
                    if ("function" === typeof callback) {
                        this._callbacks[event] = callback
                    }
                    return this
                }
                ;
                Module["websocket"].emit = function(event, param) {
                    if ("function" === typeof this._callbacks[event]) {
                        this._callbacks[event].call(this, param)
                    }
                }
                ;
                return FS.createNode(null, "/", 16384 | 511, 0)
            },
            createSocket: function(family, type, protocol) {
                type &= ~526336;
                var streaming = type == 1;
                if (streaming && protocol && protocol != 6) {
                    throw new FS.ErrnoError(66)
                }
                var sock = {
                    family: family,
                    type: type,
                    protocol: protocol,
                    server: null,
                    error: null,
                    peers: {},
                    pending: [],
                    recv_queue: [],
                    sock_ops: SOCKFS.websocket_sock_ops
                };
                var name = SOCKFS.nextname();
                var node = FS.createNode(SOCKFS.root, name, 49152, 0);
                node.sock = sock;
                var stream = FS.createStream({
                    path: name,
                    node: node,
                    flags: 2,
                    seekable: false,
                    stream_ops: SOCKFS.stream_ops
                });
                sock.stream = stream;
                return sock
            },
            getSocket: function(fd) {
                var stream = FS.getStream(fd);
                if (!stream || !FS.isSocket(stream.node.mode)) {
                    return null
                }
                return stream.node.sock
            },
            stream_ops: {
                poll: function(stream) {
                    var sock = stream.node.sock;
                    return sock.sock_ops.poll(sock)
                },
                ioctl: function(stream, request, varargs) {
                    var sock = stream.node.sock;
                    return sock.sock_ops.ioctl(sock, request, varargs)
                },
                read: function(stream, buffer, offset, length, position) {
                    var sock = stream.node.sock;
                    var msg = sock.sock_ops.recvmsg(sock, length);
                    if (!msg) {
                        return 0
                    }
                    buffer.set(msg.buffer, offset);
                    return msg.buffer.length
                },
                write: function(stream, buffer, offset, length, position) {
                    var sock = stream.node.sock;
                    return sock.sock_ops.sendmsg(sock, buffer, offset, length)
                },
                close: function(stream) {
                    var sock = stream.node.sock;
                    sock.sock_ops.close(sock)
                }
            },
            nextname: function() {
                if (!SOCKFS.nextname.current) {
                    SOCKFS.nextname.current = 0
                }
                return "socket[" + SOCKFS.nextname.current++ + "]"
            },
            websocket_sock_ops: {
                createPeer: function(sock, addr, port) {
                    var ws;
                    if (typeof addr == "object") {
                        ws = addr;
                        addr = null;
                        port = null
                    }
                    if (ws) {
                        if (ws._socket) {
                            addr = ws._socket.remoteAddress;
                            port = ws._socket.remotePort
                        } else {
                            var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
                            if (!result) {
                                throw new Error("WebSocket URL must be in the format ws(s)://address:port")
                            }
                            addr = result[1];
                            port = parseInt(result[2], 10)
                        }
                    } else {
                        try {
                            var runtimeConfig = Module["websocket"] && "object" === typeof Module["websocket"];
                            var url = "ws:#".replace("#", "//");
                            if (runtimeConfig) {
                                if ("string" === typeof Module["websocket"]["url"]) {
                                    url = Module["websocket"]["url"]
                                }
                            }
                            if (url === "ws://" || url === "wss://") {
                                var parts = addr.split("/");
                                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join("/")
                            }
                            var subProtocols = "binary";
                            if (runtimeConfig) {
                                if ("string" === typeof Module["websocket"]["subprotocol"]) {
                                    subProtocols = Module["websocket"]["subprotocol"]
                                }
                            }
                            var opts = undefined;
                            if (subProtocols !== "null") {
                                subProtocols = subProtocols.replace(/^ +| +$/g, "").split(/ *, */);
                                opts = subProtocols
                            }
                            if (runtimeConfig && null === Module["websocket"]["subprotocol"]) {
                                subProtocols = "null";
                                opts = undefined
                            }
                            var WebSocketConstructor;
                            if (ENVIRONMENT_IS_NODE) {
                                WebSocketConstructor = require("ws")
                            } else {
                                WebSocketConstructor = WebSocket
                            }
                            ws = new WebSocketConstructor(url,opts);
                            ws.binaryType = "arraybuffer"
                        } catch (e) {
                            throw new FS.ErrnoError(23)
                        }
                    }
                    var peer = {
                        addr: addr,
                        port: port,
                        socket: ws,
                        dgram_send_queue: []
                    };
                    SOCKFS.websocket_sock_ops.addPeer(sock, peer);
                    SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
                    if (sock.type === 2 && typeof sock.sport != "undefined") {
                        peer.dgram_send_queue.push(new Uint8Array([255, 255, 255, 255, "p".charCodeAt(0), "o".charCodeAt(0), "r".charCodeAt(0), "t".charCodeAt(0), (sock.sport & 65280) >> 8, sock.sport & 255]))
                    }
                    return peer
                },
                getPeer: function(sock, addr, port) {
                    return sock.peers[addr + ":" + port]
                },
                addPeer: function(sock, peer) {
                    sock.peers[peer.addr + ":" + peer.port] = peer
                },
                removePeer: function(sock, peer) {
                    delete sock.peers[peer.addr + ":" + peer.port]
                },
                handlePeerEvents: function(sock, peer) {
                    var first = true;
                    var handleOpen = function() {
                        Module["websocket"].emit("open", sock.stream.fd);
                        try {
                            var queued = peer.dgram_send_queue.shift();
                            while (queued) {
                                peer.socket.send(queued);
                                queued = peer.dgram_send_queue.shift()
                            }
                        } catch (e) {
                            peer.socket.close()
                        }
                    };
                    function handleMessage(data) {
                        if (typeof data == "string") {
                            var encoder = new TextEncoder;
                            data = encoder.encode(data)
                        } else {
                            assert(data.byteLength !== undefined);
                            if (data.byteLength == 0) {
                                return
                            }
                            data = new Uint8Array(data)
                        }
                        var wasfirst = first;
                        first = false;
                        if (wasfirst && data.length === 10 && data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 && data[4] === "p".charCodeAt(0) && data[5] === "o".charCodeAt(0) && data[6] === "r".charCodeAt(0) && data[7] === "t".charCodeAt(0)) {
                            var newport = data[8] << 8 | data[9];
                            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
                            peer.port = newport;
                            SOCKFS.websocket_sock_ops.addPeer(sock, peer);
                            return
                        }
                        sock.recv_queue.push({
                            addr: peer.addr,
                            port: peer.port,
                            data: data
                        });
                        Module["websocket"].emit("message", sock.stream.fd)
                    }
                    if (ENVIRONMENT_IS_NODE) {
                        peer.socket.on("open", handleOpen);
                        peer.socket.on("message", function(data, isBinary) {
                            if (!isBinary) {
                                return
                            }
                            handleMessage(new Uint8Array(data).buffer)
                        });
                        peer.socket.on("close", function() {
                            Module["websocket"].emit("close", sock.stream.fd)
                        });
                        peer.socket.on("error", function(error) {
                            sock.error = 14;
                            Module["websocket"].emit("error", [sock.stream.fd, sock.error, "ECONNREFUSED: Connection refused"])
                        })
                    } else {
                        peer.socket.onopen = handleOpen;
                        peer.socket.onclose = function() {
                            Module["websocket"].emit("close", sock.stream.fd)
                        }
                        ;
                        peer.socket.onmessage = function peer_socket_onmessage(event) {
                            handleMessage(event.data)
                        }
                        ;
                        peer.socket.onerror = function(error) {
                            sock.error = 14;
                            Module["websocket"].emit("error", [sock.stream.fd, sock.error, "ECONNREFUSED: Connection refused"])
                        }
                    }
                },
                poll: function(sock) {
                    if (sock.type === 1 && sock.server) {
                        return sock.pending.length ? 64 | 1 : 0
                    }
                    var mask = 0;
                    var dest = sock.type === 1 ? SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) : null;
                    if (sock.recv_queue.length || !dest || dest && dest.socket.readyState === dest.socket.CLOSING || dest && dest.socket.readyState === dest.socket.CLOSED) {
                        mask |= 64 | 1
                    }
                    if (!dest || dest && dest.socket.readyState === dest.socket.OPEN) {
                        mask |= 4
                    }
                    if (dest && dest.socket.readyState === dest.socket.CLOSING || dest && dest.socket.readyState === dest.socket.CLOSED) {
                        mask |= 16
                    }
                    return mask
                },
                ioctl: function(sock, request, arg) {
                    switch (request) {
                    case 21531:
                        var bytes = 0;
                        if (sock.recv_queue.length) {
                            bytes = sock.recv_queue[0].data.length
                        }
                        HEAP32[arg >> 2] = bytes;
                        return 0;
                    default:
                        return 28
                    }
                },
                close: function(sock) {
                    if (sock.server) {
                        try {
                            sock.server.close()
                        } catch (e) {}
                        sock.server = null
                    }
                    var peers = Object.keys(sock.peers);
                    for (var i = 0; i < peers.length; i++) {
                        var peer = sock.peers[peers[i]];
                        try {
                            peer.socket.close()
                        } catch (e) {}
                        SOCKFS.websocket_sock_ops.removePeer(sock, peer)
                    }
                    return 0
                },
                bind: function(sock, addr, port) {
                    if (typeof sock.saddr != "undefined" || typeof sock.sport != "undefined") {
                        throw new FS.ErrnoError(28)
                    }
                    sock.saddr = addr;
                    sock.sport = port;
                    if (sock.type === 2) {
                        if (sock.server) {
                            sock.server.close();
                            sock.server = null
                        }
                        try {
                            sock.sock_ops.listen(sock, 0)
                        } catch (e) {
                            if (!(e instanceof FS.ErrnoError))
                                throw e;
                            if (e.errno !== 138)
                                throw e
                        }
                    }
                },
                connect: function(sock, addr, port) {
                    if (sock.server) {
                        throw new FS.ErrnoError(138)
                    }
                    if (typeof sock.daddr != "undefined" && typeof sock.dport != "undefined") {
                        var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
                        if (dest) {
                            if (dest.socket.readyState === dest.socket.CONNECTING) {
                                throw new FS.ErrnoError(7)
                            } else {
                                throw new FS.ErrnoError(30)
                            }
                        }
                    }
                    var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
                    sock.daddr = peer.addr;
                    sock.dport = peer.port;
                    throw new FS.ErrnoError(26)
                },
                listen: function(sock, backlog) {
                    if (!ENVIRONMENT_IS_NODE) {
                        throw new FS.ErrnoError(138)
                    }
                    if (sock.server) {
                        throw new FS.ErrnoError(28)
                    }
                    var WebSocketServer = require("ws").Server;
                    var host = sock.saddr;
                    sock.server = new WebSocketServer({
                        host: host,
                        port: sock.sport
                    });
                    Module["websocket"].emit("listen", sock.stream.fd);
                    sock.server.on("connection", function(ws) {
                        if (sock.type === 1) {
                            var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
                            var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
                            newsock.daddr = peer.addr;
                            newsock.dport = peer.port;
                            sock.pending.push(newsock);
                            Module["websocket"].emit("connection", newsock.stream.fd)
                        } else {
                            SOCKFS.websocket_sock_ops.createPeer(sock, ws);
                            Module["websocket"].emit("connection", sock.stream.fd)
                        }
                    });
                    sock.server.on("close", function() {
                        Module["websocket"].emit("close", sock.stream.fd);
                        sock.server = null
                    });
                    sock.server.on("error", function(error) {
                        sock.error = 23;
                        Module["websocket"].emit("error", [sock.stream.fd, sock.error, "EHOSTUNREACH: Host is unreachable"])
                    })
                },
                accept: function(listensock) {
                    if (!listensock.server || !listensock.pending.length) {
                        throw new FS.ErrnoError(28)
                    }
                    var newsock = listensock.pending.shift();
                    newsock.stream.flags = listensock.stream.flags;
                    return newsock
                },
                getname: function(sock, peer) {
                    var addr, port;
                    if (peer) {
                        if (sock.daddr === undefined || sock.dport === undefined) {
                            throw new FS.ErrnoError(53)
                        }
                        addr = sock.daddr;
                        port = sock.dport
                    } else {
                        addr = sock.saddr || 0;
                        port = sock.sport || 0
                    }
                    return {
                        addr: addr,
                        port: port
                    }
                },
                sendmsg: function(sock, buffer, offset, length, addr, port) {
                    if (sock.type === 2) {
                        if (addr === undefined || port === undefined) {
                            addr = sock.daddr;
                            port = sock.dport
                        }
                        if (addr === undefined || port === undefined) {
                            throw new FS.ErrnoError(17)
                        }
                    } else {
                        addr = sock.daddr;
                        port = sock.dport
                    }
                    var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
                    if (sock.type === 1) {
                        if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                            throw new FS.ErrnoError(53)
                        } else if (dest.socket.readyState === dest.socket.CONNECTING) {
                            throw new FS.ErrnoError(6)
                        }
                    }
                    if (ArrayBuffer.isView(buffer)) {
                        offset += buffer.byteOffset;
                        buffer = buffer.buffer
                    }
                    var data;
                    data = buffer.slice(offset, offset + length);
                    if (sock.type === 2) {
                        if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
                            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port)
                            }
                            dest.dgram_send_queue.push(data);
                            return length
                        }
                    }
                    try {
                        dest.socket.send(data);
                        return length
                    } catch (e) {
                        throw new FS.ErrnoError(28)
                    }
                },
                recvmsg: function(sock, length) {
                    if (sock.type === 1 && sock.server) {
                        throw new FS.ErrnoError(53)
                    }
                    var queued = sock.recv_queue.shift();
                    if (!queued) {
                        if (sock.type === 1) {
                            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
                            if (!dest) {
                                throw new FS.ErrnoError(53)
                            }
                            if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                                return null
                            }
                            throw new FS.ErrnoError(6)
                        }
                        throw new FS.ErrnoError(6)
                    }
                    var queuedLength = queued.data.byteLength || queued.data.length;
                    var queuedOffset = queued.data.byteOffset || 0;
                    var queuedBuffer = queued.data.buffer || queued.data;
                    var bytesRead = Math.min(length, queuedLength);
                    var res = {
                        buffer: new Uint8Array(queuedBuffer,queuedOffset,bytesRead),
                        addr: queued.addr,
                        port: queued.port
                    };
                    if (sock.type === 1 && bytesRead < queuedLength) {
                        var bytesRemaining = queuedLength - bytesRead;
                        queued.data = new Uint8Array(queuedBuffer,queuedOffset + bytesRead,bytesRemaining);
                        sock.recv_queue.unshift(queued)
                    }
                    return res
                }
            }
        };
        Module["SOCKFS"] = SOCKFS;
        function getSocketFromFD(fd) {
            var socket = SOCKFS.getSocket(fd);
            if (!socket)
                throw new FS.ErrnoError(8);
            return socket
        }
        Module["getSocketFromFD"] = getSocketFromFD;
        function setErrNo(value) {
            HEAP32[___errno_location() >> 2] = value;
            return value
        }
        Module["setErrNo"] = setErrNo;
        var Sockets = {
            BUFFER_SIZE: 10240,
            MAX_BUFFER_SIZE: 10485760,
            nextFd: 1,
            fds: {},
            nextport: 1,
            maxport: 65535,
            peer: null,
            connections: {},
            portmap: {},
            localAddr: 4261412874,
            addrPool: [33554442, 50331658, 67108874, 83886090, 100663306, 117440522, 134217738, 150994954, 167772170, 184549386, 201326602, 218103818, 234881034]
        };
        Module["Sockets"] = Sockets;
        function inetPton4(str) {
            var b = str.split(".");
            for (var i = 0; i < 4; i++) {
                var tmp = Number(b[i]);
                if (isNaN(tmp))
                    return null;
                b[i] = tmp
            }
            return (b[0] | b[1] << 8 | b[2] << 16 | b[3] << 24) >>> 0
        }
        Module["inetPton4"] = inetPton4;
        function jstoi_q(str) {
            return parseInt(str)
        }
        Module["jstoi_q"] = jstoi_q;
        function inetPton6(str) {
            var words;
            var w, offset, z, i;
            var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i;
            var parts = [];
            if (!valid6regx.test(str)) {
                return null
            }
            if (str === "::") {
                return [0, 0, 0, 0, 0, 0, 0, 0]
            }
            if (str.startsWith("::")) {
                str = str.replace("::", "Z:")
            } else {
                str = str.replace("::", ":Z:")
            }
            if (str.indexOf(".") > 0) {
                str = str.replace(new RegExp("[.]","g"), ":");
                words = str.split(":");
                words[words.length - 4] = jstoi_q(words[words.length - 4]) + jstoi_q(words[words.length - 3]) * 256;
                words[words.length - 3] = jstoi_q(words[words.length - 2]) + jstoi_q(words[words.length - 1]) * 256;
                words = words.slice(0, words.length - 2)
            } else {
                words = str.split(":")
            }
            offset = 0;
            z = 0;
            for (w = 0; w < words.length; w++) {
                if (typeof words[w] == "string") {
                    if (words[w] === "Z") {
                        for (z = 0; z < 8 - words.length + 1; z++) {
                            parts[w + z] = 0
                        }
                        offset = z - 1
                    } else {
                        parts[w + offset] = _htons(parseInt(words[w], 16))
                    }
                } else {
                    parts[w + offset] = words[w]
                }
            }
            return [parts[1] << 16 | parts[0], parts[3] << 16 | parts[2], parts[5] << 16 | parts[4], parts[7] << 16 | parts[6]]
        }
        Module["inetPton6"] = inetPton6;
        function writeSockaddr(sa, family, addr, port, addrlen) {
            switch (family) {
            case 2:
                addr = inetPton4(addr);
                zeroMemory(sa, 16);
                if (addrlen) {
                    HEAP32[addrlen >> 2] = 16
                }
                HEAP16[sa >> 1] = family;
                HEAP32[sa + 4 >> 2] = addr;
                HEAP16[sa + 2 >> 1] = _htons(port);
                break;
            case 10:
                addr = inetPton6(addr);
                zeroMemory(sa, 28);
                if (addrlen) {
                    HEAP32[addrlen >> 2] = 28
                }
                HEAP32[sa >> 2] = family;
                HEAP32[sa + 8 >> 2] = addr[0];
                HEAP32[sa + 12 >> 2] = addr[1];
                HEAP32[sa + 16 >> 2] = addr[2];
                HEAP32[sa + 20 >> 2] = addr[3];
                HEAP16[sa + 2 >> 1] = _htons(port);
                break;
            default:
                return 5
            }
            return 0
        }
        Module["writeSockaddr"] = writeSockaddr;
        var DNS = {
            address_map: {
                id: 1,
                addrs: {},
                names: {}
            },
            lookup_name: function(name) {
                var res = inetPton4(name);
                if (res !== null) {
                    return name
                }
                res = inetPton6(name);
                if (res !== null) {
                    return name
                }
                var addr;
                if (DNS.address_map.addrs[name]) {
                    addr = DNS.address_map.addrs[name]
                } else {
                    var id = DNS.address_map.id++;
                    assert(id < 65535, "exceeded max address mappings of 65535");
                    addr = "172.29." + (id & 255) + "." + (id & 65280);
                    DNS.address_map.names[addr] = name;
                    DNS.address_map.addrs[name] = addr
                }
                return addr
            },
            lookup_addr: function(addr) {
                if (DNS.address_map.names[addr]) {
                    return DNS.address_map.names[addr]
                }
                return null
            }
        };
        Module["DNS"] = DNS;
        function ___syscall_accept4(fd, addr, addrlen, flags) {
            try {
                var sock = getSocketFromFD(fd);
                var newsock = sock.sock_ops.accept(sock);
                if (addr) {
                    var errno = writeSockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport, addrlen)
                }
                return newsock.stream.fd
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_accept4"] = ___syscall_accept4;
        function inetNtop4(addr) {
            return (addr & 255) + "." + (addr >> 8 & 255) + "." + (addr >> 16 & 255) + "." + (addr >> 24 & 255)
        }
        Module["inetNtop4"] = inetNtop4;
        function inetNtop6(ints) {
            var str = "";
            var word = 0;
            var longest = 0;
            var lastzero = 0;
            var zstart = 0;
            var len = 0;
            var i = 0;
            var parts = [ints[0] & 65535, ints[0] >> 16, ints[1] & 65535, ints[1] >> 16, ints[2] & 65535, ints[2] >> 16, ints[3] & 65535, ints[3] >> 16];
            var hasipv4 = true;
            var v4part = "";
            for (i = 0; i < 5; i++) {
                if (parts[i] !== 0) {
                    hasipv4 = false;
                    break
                }
            }
            if (hasipv4) {
                v4part = inetNtop4(parts[6] | parts[7] << 16);
                if (parts[5] === -1) {
                    str = "::ffff:";
                    str += v4part;
                    return str
                }
                if (parts[5] === 0) {
                    str = "::";
                    if (v4part === "0.0.0.0")
                        v4part = "";
                    if (v4part === "0.0.0.1")
                        v4part = "1";
                    str += v4part;
                    return str
                }
            }
            for (word = 0; word < 8; word++) {
                if (parts[word] === 0) {
                    if (word - lastzero > 1) {
                        len = 0
                    }
                    lastzero = word;
                    len++
                }
                if (len > longest) {
                    longest = len;
                    zstart = word - longest + 1
                }
            }
            for (word = 0; word < 8; word++) {
                if (longest > 1) {
                    if (parts[word] === 0 && word >= zstart && word < zstart + longest) {
                        if (word === zstart) {
                            str += ":";
                            if (zstart === 0)
                                str += ":"
                        }
                        continue
                    }
                }
                str += Number(_ntohs(parts[word] & 65535)).toString(16);
                str += word < 7 ? ":" : ""
            }
            return str
        }
        Module["inetNtop6"] = inetNtop6;
        function readSockaddr(sa, salen) {
            var family = HEAP16[sa >> 1];
            var port = _ntohs(HEAPU16[sa + 2 >> 1]);
            var addr;
            switch (family) {
            case 2:
                if (salen !== 16) {
                    return {
                        errno: 28
                    }
                }
                addr = HEAP32[sa + 4 >> 2];
                addr = inetNtop4(addr);
                break;
            case 10:
                if (salen !== 28) {
                    return {
                        errno: 28
                    }
                }
                addr = [HEAP32[sa + 8 >> 2], HEAP32[sa + 12 >> 2], HEAP32[sa + 16 >> 2], HEAP32[sa + 20 >> 2]];
                addr = inetNtop6(addr);
                break;
            default:
                return {
                    errno: 5
                }
            }
            return {
                family: family,
                addr: addr,
                port: port
            }
        }
        Module["readSockaddr"] = readSockaddr;
        function getSocketAddress(addrp, addrlen, allowNull) {
            if (allowNull && addrp === 0)
                return null;
            var info = readSockaddr(addrp, addrlen);
            if (info.errno)
                throw new FS.ErrnoError(info.errno);
            info.addr = DNS.lookup_addr(info.addr) || info.addr;
            return info
        }
        Module["getSocketAddress"] = getSocketAddress;
        function ___syscall_bind(fd, addr, addrlen) {
            try {
                var sock = getSocketFromFD(fd);
                var info = getSocketAddress(addr, addrlen);
                sock.sock_ops.bind(sock, info.addr, info.port);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_bind"] = ___syscall_bind;
        ___syscall_bind.sig = "iipi";
        function ___syscall_chdir(path) {
            try {
                path = SYSCALLS.getStr(path);
                FS.chdir(path);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_chdir"] = ___syscall_chdir;
        ___syscall_chdir.sig = "ip";
        function ___syscall_chmod(path, mode) {
            try {
                path = SYSCALLS.getStr(path);
                FS.chmod(path, mode);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_chmod"] = ___syscall_chmod;
        ___syscall_chmod.sig = "ipi";
        function ___syscall_connect(fd, addr, addrlen) {
            try {
                var sock = getSocketFromFD(fd);
                var info = getSocketAddress(addr, addrlen);
                sock.sock_ops.connect(sock, info.addr, info.port);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_connect"] = ___syscall_connect;
        ___syscall_connect.sig = "iipi";
        function ___syscall_dup(fd) {
            try {
                var old = SYSCALLS.getStreamFromFD(fd);
                return FS.createStream(old, 0).fd
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_dup"] = ___syscall_dup;
        ___syscall_dup.sig = "ii";
        function ___syscall_dup3(fd, suggestFD, flags) {
            try {
                var old = SYSCALLS.getStreamFromFD(fd);
                if (old.fd === suggestFD)
                    return -28;
                var suggest = FS.getStream(suggestFD);
                if (suggest)
                    FS.close(suggest);
                return FS.createStream(old, suggestFD, suggestFD + 1).fd
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_dup3"] = ___syscall_dup3;
        function ___syscall_faccessat(dirfd, path, amode, flags) {
            try {
                path = SYSCALLS.getStr(path);
                path = SYSCALLS.calculateAt(dirfd, path);
                if (amode & ~7) {
                    return -28
                }
                var lookup = FS.lookupPath(path, {
                    follow: true
                });
                var node = lookup.node;
                if (!node) {
                    return -44
                }
                var perms = "";
                if (amode & 4)
                    perms += "r";
                if (amode & 2)
                    perms += "w";
                if (amode & 1)
                    perms += "x";
                if (perms && FS.nodePermissions(node, perms)) {
                    return -2
                }
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_faccessat"] = ___syscall_faccessat;
        ___syscall_faccessat.sig = "iipii";
        function ___syscall_fadvise64(fd, offset, len, advice) {
            return 0
        }
        Module["___syscall_fadvise64"] = ___syscall_fadvise64;
        var MAX_INT53 = 9007199254740992;
        Module["MAX_INT53"] = MAX_INT53;
        var MIN_INT53 = -9007199254740992;
        Module["MIN_INT53"] = MIN_INT53;
        function bigintToI53Checked(num) {
            return num < MIN_INT53 || num > MAX_INT53 ? NaN : Number(num)
        }
        Module["bigintToI53Checked"] = bigintToI53Checked;
        function ___syscall_fallocate(fd, mode, offset, len) {
            try {
                offset = bigintToI53Checked(offset);
                if (isNaN(offset))
                    return -61;
                len = bigintToI53Checked(len);
                if (isNaN(len))
                    return -61;
                var stream = SYSCALLS.getStreamFromFD(fd);
                FS.allocate(stream, offset, len);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fallocate"] = ___syscall_fallocate;
        function ___syscall_fchdir(fd) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                FS.chdir(stream.path);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fchdir"] = ___syscall_fchdir;
        function ___syscall_fchmod(fd, mode) {
            try {
                FS.fchmod(fd, mode);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fchmod"] = ___syscall_fchmod;
        function ___syscall_fchmodat(dirfd, path, mode, varargs) {
            SYSCALLS.varargs = varargs;
            try {
                path = SYSCALLS.getStr(path);
                path = SYSCALLS.calculateAt(dirfd, path);
                FS.chmod(path, mode);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fchmodat"] = ___syscall_fchmodat;
        ___syscall_fchmodat.sig = "iipip";
        function ___syscall_fchown32(fd, owner, group) {
            try {
                FS.fchown(fd, owner, group);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fchown32"] = ___syscall_fchown32;
        function ___syscall_fchownat(dirfd, path, owner, group, flags) {
            try {
                path = SYSCALLS.getStr(path);
                var nofollow = flags & 256;
                flags = flags & ~256;
                path = SYSCALLS.calculateAt(dirfd, path);
                (nofollow ? FS.lchown : FS.chown)(path, owner, group);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fchownat"] = ___syscall_fchownat;
        ___syscall_fchownat.sig = "iipiii";
        function ___syscall_fcntl64(fd, cmd, varargs) {
            SYSCALLS.varargs = varargs;
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                switch (cmd) {
                case 0:
                    {
                        var arg = SYSCALLS.get();
                        if (arg < 0) {
                            return -28
                        }
                        var newStream;
                        newStream = FS.createStream(stream, arg);
                        return newStream.fd
                    }
                case 1:
                case 2:
                    return 0;
                case 3:
                    return stream.flags;
                case 4:
                    {
                        var arg = SYSCALLS.get();
                        stream.flags |= arg;
                        return 0
                    }
                case 5:
                    {
                        var arg = SYSCALLS.get();
                        var offset = 0;
                        HEAP16[arg + offset >> 1] = 2;
                        return 0
                    }
                case 6:
                case 7:
                    return 0;
                case 16:
                case 8:
                    return -28;
                case 9:
                    setErrNo(28);
                    return -1;
                default:
                    {
                        return -28
                    }
                }
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fcntl64"] = ___syscall_fcntl64;
        ___syscall_fcntl64.sig = "iiip";
        function ___syscall_fdatasync(fd) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fdatasync"] = ___syscall_fdatasync;
        function ___syscall_fstat64(fd, buf) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                return SYSCALLS.doStat(FS.stat, stream.path, buf)
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fstat64"] = ___syscall_fstat64;
        ___syscall_fstat64.sig = "iip";
        function ___syscall_statfs64(path, size, buf) {
            try {
                path = SYSCALLS.getStr(path);
                HEAP32[buf + 4 >> 2] = 4096;
                HEAP32[buf + 40 >> 2] = 4096;
                HEAP32[buf + 8 >> 2] = 1e6;
                HEAP32[buf + 12 >> 2] = 5e5;
                HEAP32[buf + 16 >> 2] = 5e5;
                HEAP32[buf + 20 >> 2] = FS.nextInode;
                HEAP32[buf + 24 >> 2] = 1e6;
                HEAP32[buf + 28 >> 2] = 42;
                HEAP32[buf + 44 >> 2] = 2;
                HEAP32[buf + 36 >> 2] = 255;
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_statfs64"] = ___syscall_statfs64;
        ___syscall_statfs64.sig = "ippp";
        function ___syscall_fstatfs64(fd, size, buf) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                return ___syscall_statfs64(0, size, buf)
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_fstatfs64"] = ___syscall_fstatfs64;
        function ___syscall_ftruncate64(fd, length) {
            try {
                length = bigintToI53Checked(length);
                if (isNaN(length))
                    return -61;
                FS.ftruncate(fd, length);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_ftruncate64"] = ___syscall_ftruncate64;
        ___syscall_ftruncate64.sig = "iij";
        function ___syscall_getcwd(buf, size) {
            try {
                if (size === 0)
                    return -28;
                var cwd = FS.cwd();
                var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;
                if (size < cwdLengthInBytes)
                    return -68;
                stringToUTF8(cwd, buf, size);
                return cwdLengthInBytes
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_getcwd"] = ___syscall_getcwd;
        ___syscall_getcwd.sig = "ipp";
        function ___syscall_getdents64(fd, dirp, count) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                if (!stream.getdents) {
                    stream.getdents = FS.readdir(stream.path)
                }
                var struct_size = 280;
                var pos = 0;
                var off = FS.llseek(stream, 0, 1);
                var idx = Math.floor(off / struct_size);
                while (idx < stream.getdents.length && pos + struct_size <= count) {
                    var id;
                    var type;
                    var name = stream.getdents[idx];
                    if (name === ".") {
                        id = stream.node.id;
                        type = 4
                    } else if (name === "..") {
                        var lookup = FS.lookupPath(stream.path, {
                            parent: true
                        });
                        id = lookup.node.id;
                        type = 4
                    } else {
                        var child = FS.lookupNode(stream.node, name);
                        id = child.id;
                        type = FS.isChrdev(child.mode) ? 2 : FS.isDir(child.mode) ? 4 : FS.isLink(child.mode) ? 10 : 8
                    }
                    tempI64 = [id >>> 0, (tempDouble = id,
                    +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                    HEAP32[dirp + pos >> 2] = tempI64[0],
                    HEAP32[dirp + pos + 4 >> 2] = tempI64[1];
                    tempI64 = [(idx + 1) * struct_size >>> 0, (tempDouble = (idx + 1) * struct_size,
                    +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                    HEAP32[dirp + pos + 8 >> 2] = tempI64[0],
                    HEAP32[dirp + pos + 12 >> 2] = tempI64[1];
                    HEAP16[dirp + pos + 16 >> 1] = 280;
                    HEAP8[dirp + pos + 18 >> 0] = type;
                    stringToUTF8(name, dirp + pos + 19, 256);
                    pos += struct_size;
                    idx += 1
                }
                FS.llseek(stream, idx * struct_size, 0);
                return pos
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_getdents64"] = ___syscall_getdents64;
        ___syscall_getdents64.sig = "iipi";
        function ___syscall_getpeername(fd, addr, addrlen) {
            try {
                var sock = getSocketFromFD(fd);
                if (!sock.daddr) {
                    return -53
                }
                var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport, addrlen);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_getpeername"] = ___syscall_getpeername;
        function ___syscall_getsockname(fd, addr, addrlen) {
            try {
                err("__syscall_getsockname " + fd);
                var sock = getSocketFromFD(fd);
                var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || "0.0.0.0"), sock.sport, addrlen);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_getsockname"] = ___syscall_getsockname;
        function ___syscall_getsockopt(fd, level, optname, optval, optlen) {
            try {
                var sock = getSocketFromFD(fd);
                if (level === 1) {
                    if (optname === 4) {
                        HEAP32[optval >> 2] = sock.error;
                        HEAP32[optlen >> 2] = 4;
                        sock.error = null;
                        return 0
                    }
                }
                return -50
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_getsockopt"] = ___syscall_getsockopt;
        function ___syscall_ioctl(fd, op, varargs) {
            SYSCALLS.varargs = varargs;
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                switch (op) {
                case 21509:
                case 21505:
                    {
                        if (!stream.tty)
                            return -59;
                        return 0
                    }
                case 21510:
                case 21511:
                case 21512:
                case 21506:
                case 21507:
                case 21508:
                    {
                        if (!stream.tty)
                            return -59;
                        return 0
                    }
                case 21519:
                    {
                        if (!stream.tty)
                            return -59;
                        var argp = SYSCALLS.get();
                        HEAP32[argp >> 2] = 0;
                        return 0
                    }
                case 21520:
                    {
                        if (!stream.tty)
                            return -59;
                        return -28
                    }
                case 21531:
                    {
                        var argp = SYSCALLS.get();
                        return FS.ioctl(stream, op, argp)
                    }
                case 21523:
                    {
                        if (!stream.tty)
                            return -59;
                        return 0
                    }
                case 21524:
                    {
                        if (!stream.tty)
                            return -59;
                        return 0
                    }
                default:
                    return -28
                }
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_ioctl"] = ___syscall_ioctl;
        ___syscall_ioctl.sig = "iiip";
        function ___syscall_linkat(olddirfd, oldpath, newdirfd, newpath, flags) {
            return -34
        }
        Module["___syscall_linkat"] = ___syscall_linkat;
        function ___syscall_listen(fd, backlog) {
            try {
                var sock = getSocketFromFD(fd);
                sock.sock_ops.listen(sock, backlog);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_listen"] = ___syscall_listen;
        function ___syscall_lstat64(path, buf) {
            try {
                path = SYSCALLS.getStr(path);
                return SYSCALLS.doStat(FS.lstat, path, buf)
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_lstat64"] = ___syscall_lstat64;
        ___syscall_lstat64.sig = "ipp";
        function ___syscall_mkdirat(dirfd, path, mode) {
            try {
                path = SYSCALLS.getStr(path);
                path = SYSCALLS.calculateAt(dirfd, path);
                path = PATH.normalize(path);
                if (path[path.length - 1] === "/")
                    path = path.substr(0, path.length - 1);
                FS.mkdir(path, mode, 0);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_mkdirat"] = ___syscall_mkdirat;
        ___syscall_mkdirat.sig = "iipi";
        function ___syscall_mknodat(dirfd, path, mode, dev) {
            try {
                path = SYSCALLS.getStr(path);
                path = SYSCALLS.calculateAt(dirfd, path);
                switch (mode & 61440) {
                case 32768:
                case 8192:
                case 24576:
                case 4096:
                case 49152:
                    break;
                default:
                    return -28
                }
                FS.mknod(path, mode, dev);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_mknodat"] = ___syscall_mknodat;
        ___syscall_mknodat.sig = "iipii";
        function ___syscall_newfstatat(dirfd, path, buf, flags) {
            try {
                path = SYSCALLS.getStr(path);
                var nofollow = flags & 256;
                var allowEmpty = flags & 4096;
                flags = flags & ~4352;
                path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);
                return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf)
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_newfstatat"] = ___syscall_newfstatat;
        ___syscall_newfstatat.sig = "iippi";
        function ___syscall_openat(dirfd, path, flags, varargs) {
            SYSCALLS.varargs = varargs;
            try {
                path = SYSCALLS.getStr(path);
                path = SYSCALLS.calculateAt(dirfd, path);
                var mode = varargs ? SYSCALLS.get() : 0;
                return FS.open(path, flags, mode).fd
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_openat"] = ___syscall_openat;
        ___syscall_openat.sig = "iipip";
        var PIPEFS = {
            BUCKET_BUFFER_SIZE: 8192,
            mount: function(mount) {
                return FS.createNode(null, "/", 16384 | 511, 0)
            },
            createPipe: function() {
                var pipe = {
                    buckets: [],
                    refcnt: 2
                };
                pipe.buckets.push({
                    buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
                    offset: 0,
                    roffset: 0
                });
                var rName = PIPEFS.nextname();
                var wName = PIPEFS.nextname();
                var rNode = FS.createNode(PIPEFS.root, rName, 4096, 0);
                var wNode = FS.createNode(PIPEFS.root, wName, 4096, 0);
                rNode.pipe = pipe;
                wNode.pipe = pipe;
                var readableStream = FS.createStream({
                    path: rName,
                    node: rNode,
                    flags: 0,
                    seekable: false,
                    stream_ops: PIPEFS.stream_ops
                });
                rNode.stream = readableStream;
                var writableStream = FS.createStream({
                    path: wName,
                    node: wNode,
                    flags: 1,
                    seekable: false,
                    stream_ops: PIPEFS.stream_ops
                });
                wNode.stream = writableStream;
                return {
                    readable_fd: readableStream.fd,
                    writable_fd: writableStream.fd
                }
            },
            stream_ops: {
                poll: function(stream) {
                    var pipe = stream.node.pipe;
                    if ((stream.flags & 2097155) === 1) {
                        return 256 | 4
                    }
                    if (pipe.buckets.length > 0) {
                        for (var i = 0; i < pipe.buckets.length; i++) {
                            var bucket = pipe.buckets[i];
                            if (bucket.offset - bucket.roffset > 0) {
                                return 64 | 1
                            }
                        }
                    }
                    return 0
                },
                ioctl: function(stream, request, varargs) {
                    return 28
                },
                fsync: function(stream) {
                    return 28
                },
                read: function(stream, buffer, offset, length, position) {
                    var pipe = stream.node.pipe;
                    var currentLength = 0;
                    for (var i = 0; i < pipe.buckets.length; i++) {
                        var bucket = pipe.buckets[i];
                        currentLength += bucket.offset - bucket.roffset
                    }
                    assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
                    var data = buffer.subarray(offset, offset + length);
                    if (length <= 0) {
                        return 0
                    }
                    if (currentLength == 0) {
                        throw new FS.ErrnoError(6)
                    }
                    var toRead = Math.min(currentLength, length);
                    var totalRead = toRead;
                    var toRemove = 0;
                    for (var i = 0; i < pipe.buckets.length; i++) {
                        var currBucket = pipe.buckets[i];
                        var bucketSize = currBucket.offset - currBucket.roffset;
                        if (toRead <= bucketSize) {
                            var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
                            if (toRead < bucketSize) {
                                tmpSlice = tmpSlice.subarray(0, toRead);
                                currBucket.roffset += toRead
                            } else {
                                toRemove++
                            }
                            data.set(tmpSlice);
                            break
                        } else {
                            var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
                            data.set(tmpSlice);
                            data = data.subarray(tmpSlice.byteLength);
                            toRead -= tmpSlice.byteLength;
                            toRemove++
                        }
                    }
                    if (toRemove && toRemove == pipe.buckets.length) {
                        toRemove--;
                        pipe.buckets[toRemove].offset = 0;
                        pipe.buckets[toRemove].roffset = 0
                    }
                    pipe.buckets.splice(0, toRemove);
                    return totalRead
                },
                write: function(stream, buffer, offset, length, position) {
                    var pipe = stream.node.pipe;
                    assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
                    var data = buffer.subarray(offset, offset + length);
                    var dataLen = data.byteLength;
                    if (dataLen <= 0) {
                        return 0
                    }
                    var currBucket = null;
                    if (pipe.buckets.length == 0) {
                        currBucket = {
                            buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
                            offset: 0,
                            roffset: 0
                        };
                        pipe.buckets.push(currBucket)
                    } else {
                        currBucket = pipe.buckets[pipe.buckets.length - 1]
                    }
                    assert(currBucket.offset <= PIPEFS.BUCKET_BUFFER_SIZE);
                    var freeBytesInCurrBuffer = PIPEFS.BUCKET_BUFFER_SIZE - currBucket.offset;
                    if (freeBytesInCurrBuffer >= dataLen) {
                        currBucket.buffer.set(data, currBucket.offset);
                        currBucket.offset += dataLen;
                        return dataLen
                    } else if (freeBytesInCurrBuffer > 0) {
                        currBucket.buffer.set(data.subarray(0, freeBytesInCurrBuffer), currBucket.offset);
                        currBucket.offset += freeBytesInCurrBuffer;
                        data = data.subarray(freeBytesInCurrBuffer, data.byteLength)
                    }
                    var numBuckets = data.byteLength / PIPEFS.BUCKET_BUFFER_SIZE | 0;
                    var remElements = data.byteLength % PIPEFS.BUCKET_BUFFER_SIZE;
                    for (var i = 0; i < numBuckets; i++) {
                        var newBucket = {
                            buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
                            offset: PIPEFS.BUCKET_BUFFER_SIZE,
                            roffset: 0
                        };
                        pipe.buckets.push(newBucket);
                        newBucket.buffer.set(data.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE));
                        data = data.subarray(PIPEFS.BUCKET_BUFFER_SIZE, data.byteLength)
                    }
                    if (remElements > 0) {
                        var newBucket = {
                            buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
                            offset: data.byteLength,
                            roffset: 0
                        };
                        pipe.buckets.push(newBucket);
                        newBucket.buffer.set(data)
                    }
                    return dataLen
                },
                close: function(stream) {
                    var pipe = stream.node.pipe;
                    pipe.refcnt--;
                    if (pipe.refcnt === 0) {
                        pipe.buckets = null
                    }
                }
            },
            nextname: function() {
                if (!PIPEFS.nextname.current) {
                    PIPEFS.nextname.current = 0
                }
                return "pipe[" + PIPEFS.nextname.current++ + "]"
            }
        };
        Module["PIPEFS"] = PIPEFS;
        function ___syscall_pipe(fdPtr) {
            try {
                if (fdPtr == 0) {
                    throw new FS.ErrnoError(21)
                }
                var res = PIPEFS.createPipe();
                HEAP32[fdPtr >> 2] = res.readable_fd;
                HEAP32[fdPtr + 4 >> 2] = res.writable_fd;
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_pipe"] = ___syscall_pipe;
        ___syscall_pipe.sig = "ip";
        function ___syscall_poll(fds, nfds, timeout) {
            try {
                var nonzero = 0;
                for (var i = 0; i < nfds; i++) {
                    var pollfd = fds + 8 * i;
                    var fd = HEAP32[pollfd >> 2];
                    var events = HEAP16[pollfd + 4 >> 1];
                    var mask = 32;
                    var stream = FS.getStream(fd);
                    if (stream) {
                        mask = SYSCALLS.DEFAULT_POLLMASK;
                        if (stream.stream_ops.poll) {
                            mask = stream.stream_ops.poll(stream)
                        }
                    }
                    mask &= events | 8 | 16;
                    if (mask)
                        nonzero++;
                    HEAP16[pollfd + 6 >> 1] = mask
                }
                return nonzero
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_poll"] = ___syscall_poll;
        ___syscall_poll.sig = "ipii";
        function ___syscall_readlinkat(dirfd, path, buf, bufsize) {
            try {
                path = SYSCALLS.getStr(path);
                path = SYSCALLS.calculateAt(dirfd, path);
                if (bufsize <= 0)
                    return -28;
                var ret = FS.readlink(path);
                var len = Math.min(bufsize, lengthBytesUTF8(ret));
                var endChar = HEAP8[buf + len];
                stringToUTF8(ret, buf, bufsize + 1);
                HEAP8[buf + len] = endChar;
                return len
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_readlinkat"] = ___syscall_readlinkat;
        ___syscall_readlinkat.sig = "vippp";
        function ___syscall_recvfrom(fd, buf, len, flags, addr, addrlen) {
            try {
                var sock = getSocketFromFD(fd);
                var msg = sock.sock_ops.recvmsg(sock, len);
                if (!msg)
                    return 0;
                if (addr) {
                    var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port, addrlen)
                }
                HEAPU8.set(msg.buffer, buf);
                return msg.buffer.byteLength
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_recvfrom"] = ___syscall_recvfrom;
        function ___syscall_recvmsg(fd, message, flags) {
            try {
                var sock = getSocketFromFD(fd);
                var iov = HEAPU32[message + 8 >> 2];
                var num = HEAP32[message + 12 >> 2];
                var total = 0;
                for (var i = 0; i < num; i++) {
                    total += HEAP32[iov + (8 * i + 4) >> 2]
                }
                var msg = sock.sock_ops.recvmsg(sock, total);
                if (!msg)
                    return 0;
                var name = HEAPU32[message >> 2];
                if (name) {
                    var errno = writeSockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port)
                }
                var bytesRead = 0;
                var bytesRemaining = msg.buffer.byteLength;
                for (var i = 0; bytesRemaining > 0 && i < num; i++) {
                    var iovbase = HEAPU32[iov + (8 * i + 0) >> 2];
                    var iovlen = HEAP32[iov + (8 * i + 4) >> 2];
                    if (!iovlen) {
                        continue
                    }
                    var length = Math.min(iovlen, bytesRemaining);
                    var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
                    HEAPU8.set(buf, iovbase + bytesRead);
                    bytesRead += length;
                    bytesRemaining -= length
                }
                return bytesRead
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_recvmsg"] = ___syscall_recvmsg;
        function ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {
            try {
                oldpath = SYSCALLS.getStr(oldpath);
                newpath = SYSCALLS.getStr(newpath);
                oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);
                newpath = SYSCALLS.calculateAt(newdirfd, newpath);
                FS.rename(oldpath, newpath);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_renameat"] = ___syscall_renameat;
        ___syscall_renameat.sig = "iipip";
        function ___syscall_rmdir(path) {
            try {
                path = SYSCALLS.getStr(path);
                FS.rmdir(path);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_rmdir"] = ___syscall_rmdir;
        ___syscall_rmdir.sig = "ip";
        function ___syscall_sendmsg(fd, message, flags) {
            try {
                var sock = getSocketFromFD(fd);
                var iov = HEAPU32[message + 8 >> 2];
                var num = HEAP32[message + 12 >> 2];
                var addr, port;
                var name = HEAPU32[message >> 2];
                var namelen = HEAP32[message + 4 >> 2];
                if (name) {
                    var info = readSockaddr(name, namelen);
                    if (info.errno)
                        return -info.errno;
                    port = info.port;
                    addr = DNS.lookup_addr(info.addr) || info.addr
                }
                var total = 0;
                for (var i = 0; i < num; i++) {
                    total += HEAP32[iov + (8 * i + 4) >> 2]
                }
                var view = new Uint8Array(total);
                var offset = 0;
                for (var i = 0; i < num; i++) {
                    var iovbase = HEAPU32[iov + (8 * i + 0) >> 2];
                    var iovlen = HEAP32[iov + (8 * i + 4) >> 2];
                    for (var j = 0; j < iovlen; j++) {
                        view[offset++] = HEAP8[iovbase + j >> 0]
                    }
                }
                return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port)
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_sendmsg"] = ___syscall_sendmsg;
        function ___syscall_sendto(fd, message, length, flags, addr, addr_len) {
            try {
                var sock = getSocketFromFD(fd);
                var dest = getSocketAddress(addr, addr_len, true);
                if (!dest) {
                    return FS.write(sock.stream, HEAP8, message, length)
                }
                return sock.sock_ops.sendmsg(sock, HEAP8, message, length, dest.addr, dest.port)
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_sendto"] = ___syscall_sendto;
        ___syscall_sendto.sig = "iipiipi";
        function ___syscall_socket(domain, type, protocol) {
            try {
                var sock = SOCKFS.createSocket(domain, type, protocol);
                return sock.stream.fd
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_socket"] = ___syscall_socket;
        function ___syscall_stat64(path, buf) {
            try {
                path = SYSCALLS.getStr(path);
                return SYSCALLS.doStat(FS.stat, path, buf)
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_stat64"] = ___syscall_stat64;
        ___syscall_stat64.sig = "ipp";
        function ___syscall_symlink(target, linkpath) {
            try {
                target = SYSCALLS.getStr(target);
                linkpath = SYSCALLS.getStr(linkpath);
                FS.symlink(target, linkpath);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_symlink"] = ___syscall_symlink;
        ___syscall_symlink.sig = "ipp";
        function ___syscall_symlinkat(target, newdirfd, linkpath) {
            try {
                linkpath = SYSCALLS.calculateAt(newdirfd, linkpath);
                FS.symlink(target, linkpath);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_symlinkat"] = ___syscall_symlinkat;
        function ___syscall_truncate64(path, length) {
            try {
                length = bigintToI53Checked(length);
                if (isNaN(length))
                    return -61;
                path = SYSCALLS.getStr(path);
                FS.truncate(path, length);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_truncate64"] = ___syscall_truncate64;
        ___syscall_truncate64.sig = "ipj";
        function ___syscall_unlinkat(dirfd, path, flags) {
            try {
                path = SYSCALLS.getStr(path);
                path = SYSCALLS.calculateAt(dirfd, path);
                if (flags === 0) {
                    FS.unlink(path)
                } else if (flags === 512) {
                    FS.rmdir(path)
                } else {
                    abort("Invalid flags passed to unlinkat")
                }
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_unlinkat"] = ___syscall_unlinkat;
        ___syscall_unlinkat.sig = "iipi";
        function readI53FromI64(ptr) {
            return HEAPU32[ptr >> 2] + HEAP32[ptr + 4 >> 2] * 4294967296
        }
        Module["readI53FromI64"] = readI53FromI64;
        function ___syscall_utimensat(dirfd, path, times, flags) {
            try {
                path = SYSCALLS.getStr(path);
                path = SYSCALLS.calculateAt(dirfd, path, true);
                if (!times) {
                    var atime = Date.now();
                    var mtime = atime
                } else {
                    var seconds = readI53FromI64(times);
                    var nanoseconds = HEAP32[times + 8 >> 2];
                    atime = seconds * 1e3 + nanoseconds / (1e3 * 1e3);
                    times += 16;
                    seconds = readI53FromI64(times);
                    nanoseconds = HEAP32[times + 8 >> 2];
                    mtime = seconds * 1e3 + nanoseconds / (1e3 * 1e3)
                }
                FS.utime(path, atime, mtime);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_utimensat"] = ___syscall_utimensat;
        ___syscall_utimensat.sig = "iippi";
        var ___table_base = new WebAssembly.Global({
            "value": "i32",
            "mutable": false
        },1);
        Module["___table_base"] = ___table_base;
        function __dlinit(main_dso_handle) {
            var dso = {
                refcount: Infinity,
                name: "__main__",
                module: Module["asm"],
                global: true
            };
            LDSO.loadedLibsByName[dso.name] = dso;
            LDSO.loadedLibsByHandle[main_dso_handle] = dso
        }
        Module["__dlinit"] = __dlinit;
        var ENV = {};
        Module["ENV"] = ENV;
        function allocateUTF8OnStack(str) {
            var size = lengthBytesUTF8(str) + 1;
            var ret = stackAlloc(size);
            stringToUTF8Array(str, HEAP8, ret, size);
            return ret
        }
        Module["allocateUTF8OnStack"] = allocateUTF8OnStack;
        function dlSetError(msg) {
            withStackSave(function() {
                var cmsg = allocateUTF8OnStack(msg);
                ___dl_seterr(cmsg)
            })
        }
        Module["dlSetError"] = dlSetError;
        function dlopenInternal(handle, jsflags) {
            var filename = UTF8ToString(handle + 44);
            var flags = HEAP32[handle + 20 >> 2];
            filename = PATH.normalize(filename);
            var searchpaths = [];
            var isValidFile = filename=>{
                var target = FS.findObject(filename);
                return target && !target.isFolder && !target.isDevice
            }
            ;
            if (!isValidFile(filename)) {
                if (ENV["LD_LIBRARY_PATH"]) {
                    searchpaths = ENV["LD_LIBRARY_PATH"].split(":")
                }
                for (var ident in searchpaths) {
                    var searchfile = PATH.join2(searchpaths[ident], filename);
                    if (isValidFile(searchfile)) {
                        filename = searchfile;
                        break
                    }
                }
            }
            var combinedFlags = {
                global: Boolean(flags & 256),
                nodelete: Boolean(flags & 4096),
                loadAsync: jsflags.loadAsync,
                fs: jsflags.fs
            };
            if (jsflags.loadAsync) {
                return loadDynamicLibrary(filename, combinedFlags, handle)
            }
            try {
                return loadDynamicLibrary(filename, combinedFlags, handle)
            } catch (e) {
                dlSetError("Could not load dynamic lib: " + filename + "\n" + e);
                return 0
            }
        }
        Module["dlopenInternal"] = dlopenInternal;
        function __dlopen_js(handle) {
            var jsflags = {
                loadAsync: false,
                fs: FS
            };
            return dlopenInternal(handle, jsflags)
        }
        Module["__dlopen_js"] = __dlopen_js;
        __dlopen_js.sig = "iiii";
        function __dlsym_js(handle, symbol) {
            symbol = UTF8ToString(symbol);
            var result;
            if (handle == 0) {
                result = resolveGlobalSymbol(symbol, true);
                if (!result) {
                    dlSetError('Tried to lookup unknown symbol "' + symbol + '" in dynamic lib: RTLD_DEFAULT');
                    return 0
                }
            } else {
                var lib = LDSO.loadedLibsByHandle[handle];
                if (!lib.module.hasOwnProperty(symbol)) {
                    dlSetError('Tried to lookup unknown symbol "' + symbol + '" in dynamic lib: ' + lib.name);
                    return 0
                }
                result = lib.module[symbol]
            }
            if (typeof result == "function") {
                result = addFunction(result, result.sig)
            }
            return result
        }
        Module["__dlsym_js"] = __dlsym_js;
        __dlsym_js.sig = "iii";
        function __emscripten_dlopen_js(handle, onsuccess, onerror) {
            function errorCallback(e) {
                var filename = UTF8ToString(HEAPU32[handle + 44 >> 2]);
                dlSetError("Could not load dynamic lib: " + filename + "\n" + e);
                callUserCallback(function() {
                    getWasmTableEntry(onerror)(handle)
                })
            }
            function successCallback() {
                callUserCallback(function() {
                    getWasmTableEntry(onsuccess)(handle)
                })
            }
            var promise = dlopenInternal(handle, {
                loadAsync: true
            });
            if (promise) {
                promise.then(successCallback, errorCallback)
            } else {
                errorCallback()
            }
        }
        Module["__emscripten_dlopen_js"] = __emscripten_dlopen_js;
        __emscripten_dlopen_js.sig = "viiiii";
        function __emscripten_err(str) {
            err(UTF8ToString(str))
        }
        Module["__emscripten_err"] = __emscripten_err;
        __emscripten_err.sig = "vp";
        var nowIsMonotonic = true;
        Module["nowIsMonotonic"] = nowIsMonotonic;
        function __emscripten_get_now_is_monotonic() {
            return nowIsMonotonic
        }
        Module["__emscripten_get_now_is_monotonic"] = __emscripten_get_now_is_monotonic;
        function __emscripten_get_progname(str, len) {
            stringToUTF8(thisProgram, str, len)
        }
        Module["__emscripten_get_progname"] = __emscripten_get_progname;
        __emscripten_get_progname.sig = "vpp";
        function __emscripten_out(str) {
            out(UTF8ToString(str))
        }
        Module["__emscripten_out"] = __emscripten_out;
        __emscripten_out.sig = "vp";
        function __emscripten_throw_longjmp() {
            throw Infinity
        }
        Module["__emscripten_throw_longjmp"] = __emscripten_throw_longjmp;
        __emscripten_throw_longjmp.sig = "v";
        function __gmtime_js(time, tmPtr) {
            var date = new Date(readI53FromI64(time) * 1e3);
            HEAP32[tmPtr >> 2] = date.getUTCSeconds();
            HEAP32[tmPtr + 4 >> 2] = date.getUTCMinutes();
            HEAP32[tmPtr + 8 >> 2] = date.getUTCHours();
            HEAP32[tmPtr + 12 >> 2] = date.getUTCDate();
            HEAP32[tmPtr + 16 >> 2] = date.getUTCMonth();
            HEAP32[tmPtr + 20 >> 2] = date.getUTCFullYear() - 1900;
            HEAP32[tmPtr + 24 >> 2] = date.getUTCDay();
            var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
            var yday = (date.getTime() - start) / (1e3 * 60 * 60 * 24) | 0;
            HEAP32[tmPtr + 28 >> 2] = yday
        }
        Module["__gmtime_js"] = __gmtime_js;
        __gmtime_js.sig = "ipp";
        function __localtime_js(time, tmPtr) {
            var date = new Date(readI53FromI64(time) * 1e3);
            HEAP32[tmPtr >> 2] = date.getSeconds();
            HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
            HEAP32[tmPtr + 8 >> 2] = date.getHours();
            HEAP32[tmPtr + 12 >> 2] = date.getDate();
            HEAP32[tmPtr + 16 >> 2] = date.getMonth();
            HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
            HEAP32[tmPtr + 24 >> 2] = date.getDay();
            var start = new Date(date.getFullYear(),0,1);
            var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
            HEAP32[tmPtr + 28 >> 2] = yday;
            HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
            var summerOffset = new Date(date.getFullYear(),6,1).getTimezoneOffset();
            var winterOffset = start.getTimezoneOffset();
            var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
            HEAP32[tmPtr + 32 >> 2] = dst
        }
        Module["__localtime_js"] = __localtime_js;
        __localtime_js.sig = "ipp";
        function __mktime_js(tmPtr) {
            var date = new Date(HEAP32[tmPtr + 20 >> 2] + 1900,HEAP32[tmPtr + 16 >> 2],HEAP32[tmPtr + 12 >> 2],HEAP32[tmPtr + 8 >> 2],HEAP32[tmPtr + 4 >> 2],HEAP32[tmPtr >> 2],0);
            var dst = HEAP32[tmPtr + 32 >> 2];
            var guessedOffset = date.getTimezoneOffset();
            var start = new Date(date.getFullYear(),0,1);
            var summerOffset = new Date(date.getFullYear(),6,1).getTimezoneOffset();
            var winterOffset = start.getTimezoneOffset();
            var dstOffset = Math.min(winterOffset, summerOffset);
            if (dst < 0) {
                HEAP32[tmPtr + 32 >> 2] = Number(summerOffset != winterOffset && dstOffset == guessedOffset)
            } else if (dst > 0 != (dstOffset == guessedOffset)) {
                var nonDstOffset = Math.max(winterOffset, summerOffset);
                var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
                date.setTime(date.getTime() + (trueOffset - guessedOffset) * 6e4)
            }
            HEAP32[tmPtr + 24 >> 2] = date.getDay();
            var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
            HEAP32[tmPtr + 28 >> 2] = yday;
            HEAP32[tmPtr >> 2] = date.getSeconds();
            HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
            HEAP32[tmPtr + 8 >> 2] = date.getHours();
            HEAP32[tmPtr + 12 >> 2] = date.getDate();
            HEAP32[tmPtr + 16 >> 2] = date.getMonth();
            HEAP32[tmPtr + 20 >> 2] = date.getYear();
            return date.getTime() / 1e3 | 0
        }
        Module["__mktime_js"] = __mktime_js;
        __mktime_js.sig = "ip";
        function __mmap_js(len, prot, flags, fd, off, allocated) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                var res = FS.mmap(stream, len, off, prot, flags);
                var ptr = res.ptr;
                HEAP32[allocated >> 2] = res.allocated;
                return ptr
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["__mmap_js"] = __mmap_js;
        __mmap_js.sig = "ppiiipp";
        function __msync_js(addr, len, flags, fd) {
            try {
                SYSCALLS.doMsync(addr, SYSCALLS.getStreamFromFD(fd), len, flags, 0);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["__msync_js"] = __msync_js;
        __msync_js.sig = "ippii";
        function __munmap_js(addr, len, prot, flags, fd, offset) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                if (prot & 2) {
                    SYSCALLS.doMsync(addr, stream, len, flags, offset)
                }
                FS.munmap(stream)
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["__munmap_js"] = __munmap_js;
        __munmap_js.sig = "vppiiip";
        function __timegm_js(tmPtr) {
            var time = Date.UTC(HEAP32[tmPtr + 20 >> 2] + 1900, HEAP32[tmPtr + 16 >> 2], HEAP32[tmPtr + 12 >> 2], HEAP32[tmPtr + 8 >> 2], HEAP32[tmPtr + 4 >> 2], HEAP32[tmPtr >> 2], 0);
            var date = new Date(time);
            HEAP32[tmPtr + 24 >> 2] = date.getUTCDay();
            var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
            var yday = (date.getTime() - start) / (1e3 * 60 * 60 * 24) | 0;
            HEAP32[tmPtr + 28 >> 2] = yday;
            return date.getTime() / 1e3 | 0
        }
        Module["__timegm_js"] = __timegm_js;
        __timegm_js.sig = "ip";
        function allocateUTF8(str) {
            var size = lengthBytesUTF8(str) + 1;
            var ret = _malloc(size);
            if (ret)
                stringToUTF8Array(str, HEAP8, ret, size);
            return ret
        }
        Module["allocateUTF8"] = allocateUTF8;
        function _tzset_impl(timezone, daylight, tzname) {
            var currentYear = (new Date).getFullYear();
            var winter = new Date(currentYear,0,1);
            var summer = new Date(currentYear,6,1);
            var winterOffset = winter.getTimezoneOffset();
            var summerOffset = summer.getTimezoneOffset();
            var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
            HEAP32[timezone >> 2] = stdTimezoneOffset * 60;
            HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);
            function extractZone(date) {
                var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
                return match ? match[1] : "GMT"
            }
            var winterName = extractZone(winter);
            var summerName = extractZone(summer);
            var winterNamePtr = allocateUTF8(winterName);
            var summerNamePtr = allocateUTF8(summerName);
            if (summerOffset < winterOffset) {
                HEAPU32[tzname >> 2] = winterNamePtr;
                HEAPU32[tzname + 4 >> 2] = summerNamePtr
            } else {
                HEAPU32[tzname >> 2] = summerNamePtr;
                HEAPU32[tzname + 4 >> 2] = winterNamePtr
            }
        }
        Module["_tzset_impl"] = _tzset_impl;
        _tzset_impl.sig = "viii";
        function __tzset_js(timezone, daylight, tzname) {
            if (__tzset_js.called)
                return;
            __tzset_js.called = true;
            _tzset_impl(timezone, daylight, tzname)
        }
        Module["__tzset_js"] = __tzset_js;
        __tzset_js.sig = "vppp";
        function _abort() {
            abort("")
        }
        Module["_abort"] = _abort;
        _abort.sig = "v";
        var AL = {
            QUEUE_INTERVAL: 25,
            QUEUE_LOOKAHEAD: .1,
            DEVICE_NAME: "Emscripten OpenAL",
            CAPTURE_DEVICE_NAME: "Emscripten OpenAL capture",
            ALC_EXTENSIONS: {
                ALC_SOFT_pause_device: true,
                ALC_SOFT_HRTF: true
            },
            AL_EXTENSIONS: {
                AL_EXT_float32: true,
                AL_SOFT_loop_points: true,
                AL_SOFT_source_length: true,
                AL_EXT_source_distance_model: true,
                AL_SOFT_source_spatialize: true
            },
            _alcErr: 0,
            alcErr: 0,
            deviceRefCounts: {},
            alcStringCache: {},
            paused: false,
            stringCache: {},
            contexts: {},
            currentCtx: null,
            buffers: {
                0: {
                    id: 0,
                    refCount: 0,
                    audioBuf: null,
                    frequency: 0,
                    bytesPerSample: 2,
                    channels: 1,
                    length: 0
                }
            },
            paramArray: [],
            _nextId: 1,
            newId: function() {
                return AL.freeIds.length > 0 ? AL.freeIds.pop() : AL._nextId++
            },
            freeIds: [],
            scheduleContextAudio: function(ctx) {
                if (Browser.mainLoop.timingMode === 1 && document["visibilityState"] != "visible") {
                    return
                }
                for (var i in ctx.sources) {
                    AL.scheduleSourceAudio(ctx.sources[i])
                }
            },
            scheduleSourceAudio: function(src, lookahead) {
                if (Browser.mainLoop.timingMode === 1 && document["visibilityState"] != "visible") {
                    return
                }
                if (src.state !== 4114) {
                    return
                }
                var currentTime = AL.updateSourceTime(src);
                var startTime = src.bufStartTime;
                var startOffset = src.bufOffset;
                var bufCursor = src.bufsProcessed;
                for (var i = 0; i < src.audioQueue.length; i++) {
                    var audioSrc = src.audioQueue[i];
                    startTime = audioSrc._startTime + audioSrc._duration;
                    startOffset = 0;
                    bufCursor += audioSrc._skipCount + 1
                }
                if (!lookahead) {
                    lookahead = AL.QUEUE_LOOKAHEAD
                }
                var lookaheadTime = currentTime + lookahead;
                var skipCount = 0;
                while (startTime < lookaheadTime) {
                    if (bufCursor >= src.bufQueue.length) {
                        if (src.looping) {
                            bufCursor %= src.bufQueue.length
                        } else {
                            break
                        }
                    }
                    var buf = src.bufQueue[bufCursor % src.bufQueue.length];
                    if (buf.length === 0) {
                        skipCount++;
                        if (skipCount === src.bufQueue.length) {
                            break
                        }
                    } else {
                        var audioSrc = src.context.audioCtx.createBufferSource();
                        audioSrc.buffer = buf.audioBuf;
                        audioSrc.playbackRate.value = src.playbackRate;
                        if (buf.audioBuf._loopStart || buf.audioBuf._loopEnd) {
                            audioSrc.loopStart = buf.audioBuf._loopStart;
                            audioSrc.loopEnd = buf.audioBuf._loopEnd
                        }
                        var duration = 0;
                        if (src.type === 4136 && src.looping) {
                            duration = Number.POSITIVE_INFINITY;
                            audioSrc.loop = true;
                            if (buf.audioBuf._loopStart) {
                                audioSrc.loopStart = buf.audioBuf._loopStart
                            }
                            if (buf.audioBuf._loopEnd) {
                                audioSrc.loopEnd = buf.audioBuf._loopEnd
                            }
                        } else {
                            duration = (buf.audioBuf.duration - startOffset) / src.playbackRate
                        }
                        audioSrc._startOffset = startOffset;
                        audioSrc._duration = duration;
                        audioSrc._skipCount = skipCount;
                        skipCount = 0;
                        audioSrc.connect(src.gain);
                        if (typeof audioSrc.start != "undefined") {
                            startTime = Math.max(startTime, src.context.audioCtx.currentTime);
                            audioSrc.start(startTime, startOffset)
                        } else if (typeof audioSrc.noteOn != "undefined") {
                            startTime = Math.max(startTime, src.context.audioCtx.currentTime);
                            audioSrc.noteOn(startTime)
                        }
                        audioSrc._startTime = startTime;
                        src.audioQueue.push(audioSrc);
                        startTime += duration
                    }
                    startOffset = 0;
                    bufCursor++
                }
            },
            updateSourceTime: function(src) {
                var currentTime = src.context.audioCtx.currentTime;
                if (src.state !== 4114) {
                    return currentTime
                }
                if (!isFinite(src.bufStartTime)) {
                    src.bufStartTime = currentTime - src.bufOffset / src.playbackRate;
                    src.bufOffset = 0
                }
                var nextStartTime = 0;
                while (src.audioQueue.length) {
                    var audioSrc = src.audioQueue[0];
                    src.bufsProcessed += audioSrc._skipCount;
                    nextStartTime = audioSrc._startTime + audioSrc._duration;
                    if (currentTime < nextStartTime) {
                        break
                    }
                    src.audioQueue.shift();
                    src.bufStartTime = nextStartTime;
                    src.bufOffset = 0;
                    src.bufsProcessed++
                }
                if (src.bufsProcessed >= src.bufQueue.length && !src.looping) {
                    AL.setSourceState(src, 4116)
                } else if (src.type === 4136 && src.looping) {
                    var buf = src.bufQueue[0];
                    if (buf.length === 0) {
                        src.bufOffset = 0
                    } else {
                        var delta = (currentTime - src.bufStartTime) * src.playbackRate;
                        var loopStart = buf.audioBuf._loopStart || 0;
                        var loopEnd = buf.audioBuf._loopEnd || buf.audioBuf.duration;
                        if (loopEnd <= loopStart) {
                            loopEnd = buf.audioBuf.duration
                        }
                        if (delta < loopEnd) {
                            src.bufOffset = delta
                        } else {
                            src.bufOffset = loopStart + (delta - loopStart) % (loopEnd - loopStart)
                        }
                    }
                } else if (src.audioQueue[0]) {
                    src.bufOffset = (currentTime - src.audioQueue[0]._startTime) * src.playbackRate
                } else {
                    if (src.type !== 4136 && src.looping) {
                        var srcDuration = AL.sourceDuration(src) / src.playbackRate;
                        if (srcDuration > 0) {
                            src.bufStartTime += Math.floor((currentTime - src.bufStartTime) / srcDuration) * srcDuration
                        }
                    }
                    for (var i = 0; i < src.bufQueue.length; i++) {
                        if (src.bufsProcessed >= src.bufQueue.length) {
                            if (src.looping) {
                                src.bufsProcessed %= src.bufQueue.length
                            } else {
                                AL.setSourceState(src, 4116);
                                break
                            }
                        }
                        var buf = src.bufQueue[src.bufsProcessed];
                        if (buf.length > 0) {
                            nextStartTime = src.bufStartTime + buf.audioBuf.duration / src.playbackRate;
                            if (currentTime < nextStartTime) {
                                src.bufOffset = (currentTime - src.bufStartTime) * src.playbackRate;
                                break
                            }
                            src.bufStartTime = nextStartTime
                        }
                        src.bufOffset = 0;
                        src.bufsProcessed++
                    }
                }
                return currentTime
            },
            cancelPendingSourceAudio: function(src) {
                AL.updateSourceTime(src);
                for (var i = 1; i < src.audioQueue.length; i++) {
                    var audioSrc = src.audioQueue[i];
                    audioSrc.stop()
                }
                if (src.audioQueue.length > 1) {
                    src.audioQueue.length = 1
                }
            },
            stopSourceAudio: function(src) {
                for (var i = 0; i < src.audioQueue.length; i++) {
                    src.audioQueue[i].stop()
                }
                src.audioQueue.length = 0
            },
            setSourceState: function(src, state) {
                if (state === 4114) {
                    if (src.state === 4114 || src.state == 4116) {
                        src.bufsProcessed = 0;
                        src.bufOffset = 0
                    } else {}
                    AL.stopSourceAudio(src);
                    src.state = 4114;
                    src.bufStartTime = Number.NEGATIVE_INFINITY;
                    AL.scheduleSourceAudio(src)
                } else if (state === 4115) {
                    if (src.state === 4114) {
                        AL.updateSourceTime(src);
                        AL.stopSourceAudio(src);
                        src.state = 4115
                    }
                } else if (state === 4116) {
                    if (src.state !== 4113) {
                        src.state = 4116;
                        src.bufsProcessed = src.bufQueue.length;
                        src.bufStartTime = Number.NEGATIVE_INFINITY;
                        src.bufOffset = 0;
                        AL.stopSourceAudio(src)
                    }
                } else if (state === 4113) {
                    if (src.state !== 4113) {
                        src.state = 4113;
                        src.bufsProcessed = 0;
                        src.bufStartTime = Number.NEGATIVE_INFINITY;
                        src.bufOffset = 0;
                        AL.stopSourceAudio(src)
                    }
                }
            },
            initSourcePanner: function(src) {
                if (src.type === 4144) {
                    return
                }
                var templateBuf = AL.buffers[0];
                for (var i = 0; i < src.bufQueue.length; i++) {
                    if (src.bufQueue[i].id !== 0) {
                        templateBuf = src.bufQueue[i];
                        break
                    }
                }
                if (src.spatialize === 1 || src.spatialize === 2 && templateBuf.channels === 1) {
                    if (src.panner) {
                        return
                    }
                    src.panner = src.context.audioCtx.createPanner();
                    AL.updateSourceGlobal(src);
                    AL.updateSourceSpace(src);
                    src.panner.connect(src.context.gain);
                    src.gain.disconnect();
                    src.gain.connect(src.panner)
                } else {
                    if (!src.panner) {
                        return
                    }
                    src.panner.disconnect();
                    src.gain.disconnect();
                    src.gain.connect(src.context.gain);
                    src.panner = null
                }
            },
            updateContextGlobal: function(ctx) {
                for (var i in ctx.sources) {
                    AL.updateSourceGlobal(ctx.sources[i])
                }
            },
            updateSourceGlobal: function(src) {
                var panner = src.panner;
                if (!panner) {
                    return
                }
                panner.refDistance = src.refDistance;
                panner.maxDistance = src.maxDistance;
                panner.rolloffFactor = src.rolloffFactor;
                panner.panningModel = src.context.hrtf ? "HRTF" : "equalpower";
                var distanceModel = src.context.sourceDistanceModel ? src.distanceModel : src.context.distanceModel;
                switch (distanceModel) {
                case 0:
                    panner.distanceModel = "inverse";
                    panner.refDistance = 340282e33;
                    break;
                case 53249:
                case 53250:
                    panner.distanceModel = "inverse";
                    break;
                case 53251:
                case 53252:
                    panner.distanceModel = "linear";
                    break;
                case 53253:
                case 53254:
                    panner.distanceModel = "exponential";
                    break
                }
            },
            updateListenerSpace: function(ctx) {
                var listener = ctx.audioCtx.listener;
                if (listener.positionX) {
                    listener.positionX.value = ctx.listener.position[0];
                    listener.positionY.value = ctx.listener.position[1];
                    listener.positionZ.value = ctx.listener.position[2]
                } else {
                    listener.setPosition(ctx.listener.position[0], ctx.listener.position[1], ctx.listener.position[2])
                }
                if (listener.forwardX) {
                    listener.forwardX.value = ctx.listener.direction[0];
                    listener.forwardY.value = ctx.listener.direction[1];
                    listener.forwardZ.value = ctx.listener.direction[2];
                    listener.upX.value = ctx.listener.up[0];
                    listener.upY.value = ctx.listener.up[1];
                    listener.upZ.value = ctx.listener.up[2]
                } else {
                    listener.setOrientation(ctx.listener.direction[0], ctx.listener.direction[1], ctx.listener.direction[2], ctx.listener.up[0], ctx.listener.up[1], ctx.listener.up[2])
                }
                for (var i in ctx.sources) {
                    AL.updateSourceSpace(ctx.sources[i])
                }
            },
            updateSourceSpace: function(src) {
                if (!src.panner) {
                    return
                }
                var panner = src.panner;
                var posX = src.position[0];
                var posY = src.position[1];
                var posZ = src.position[2];
                var dirX = src.direction[0];
                var dirY = src.direction[1];
                var dirZ = src.direction[2];
                var listener = src.context.listener;
                var lPosX = listener.position[0];
                var lPosY = listener.position[1];
                var lPosZ = listener.position[2];
                if (src.relative) {
                    var lBackX = -listener.direction[0];
                    var lBackY = -listener.direction[1];
                    var lBackZ = -listener.direction[2];
                    var lUpX = listener.up[0];
                    var lUpY = listener.up[1];
                    var lUpZ = listener.up[2];
                    var inverseMagnitude = function(x, y, z) {
                        var length = Math.sqrt(x * x + y * y + z * z);
                        if (length < Number.EPSILON) {
                            return 0
                        }
                        return 1 / length
                    };
                    var invMag = inverseMagnitude(lBackX, lBackY, lBackZ);
                    lBackX *= invMag;
                    lBackY *= invMag;
                    lBackZ *= invMag;
                    invMag = inverseMagnitude(lUpX, lUpY, lUpZ);
                    lUpX *= invMag;
                    lUpY *= invMag;
                    lUpZ *= invMag;
                    var lRightX = lUpY * lBackZ - lUpZ * lBackY;
                    var lRightY = lUpZ * lBackX - lUpX * lBackZ;
                    var lRightZ = lUpX * lBackY - lUpY * lBackX;
                    invMag = inverseMagnitude(lRightX, lRightY, lRightZ);
                    lRightX *= invMag;
                    lRightY *= invMag;
                    lRightZ *= invMag;
                    lUpX = lBackY * lRightZ - lBackZ * lRightY;
                    lUpY = lBackZ * lRightX - lBackX * lRightZ;
                    lUpZ = lBackX * lRightY - lBackY * lRightX;
                    var oldX = dirX;
                    var oldY = dirY;
                    var oldZ = dirZ;
                    dirX = oldX * lRightX + oldY * lUpX + oldZ * lBackX;
                    dirY = oldX * lRightY + oldY * lUpY + oldZ * lBackY;
                    dirZ = oldX * lRightZ + oldY * lUpZ + oldZ * lBackZ;
                    oldX = posX;
                    oldY = posY;
                    oldZ = posZ;
                    posX = oldX * lRightX + oldY * lUpX + oldZ * lBackX;
                    posY = oldX * lRightY + oldY * lUpY + oldZ * lBackY;
                    posZ = oldX * lRightZ + oldY * lUpZ + oldZ * lBackZ;
                    posX += lPosX;
                    posY += lPosY;
                    posZ += lPosZ
                }
                if (panner.positionX) {
                    if (posX != panner.positionX.value)
                        panner.positionX.value = posX;
                    if (posY != panner.positionY.value)
                        panner.positionY.value = posY;
                    if (posZ != panner.positionZ.value)
                        panner.positionZ.value = posZ
                } else {
                    panner.setPosition(posX, posY, posZ)
                }
                if (panner.orientationX) {
                    if (dirX != panner.orientationX.value)
                        panner.orientationX.value = dirX;
                    if (dirY != panner.orientationY.value)
                        panner.orientationY.value = dirY;
                    if (dirZ != panner.orientationZ.value)
                        panner.orientationZ.value = dirZ
                } else {
                    panner.setOrientation(dirX, dirY, dirZ)
                }
                var oldShift = src.dopplerShift;
                var velX = src.velocity[0];
                var velY = src.velocity[1];
                var velZ = src.velocity[2];
                var lVelX = listener.velocity[0];
                var lVelY = listener.velocity[1];
                var lVelZ = listener.velocity[2];
                if (posX === lPosX && posY === lPosY && posZ === lPosZ || velX === lVelX && velY === lVelY && velZ === lVelZ) {
                    src.dopplerShift = 1
                } else {
                    var speedOfSound = src.context.speedOfSound;
                    var dopplerFactor = src.context.dopplerFactor;
                    var slX = lPosX - posX;
                    var slY = lPosY - posY;
                    var slZ = lPosZ - posZ;
                    var magSl = Math.sqrt(slX * slX + slY * slY + slZ * slZ);
                    var vls = (slX * lVelX + slY * lVelY + slZ * lVelZ) / magSl;
                    var vss = (slX * velX + slY * velY + slZ * velZ) / magSl;
                    vls = Math.min(vls, speedOfSound / dopplerFactor);
                    vss = Math.min(vss, speedOfSound / dopplerFactor);
                    src.dopplerShift = (speedOfSound - dopplerFactor * vls) / (speedOfSound - dopplerFactor * vss)
                }
                if (src.dopplerShift !== oldShift) {
                    AL.updateSourceRate(src)
                }
            },
            updateSourceRate: function(src) {
                if (src.state === 4114) {
                    AL.cancelPendingSourceAudio(src);
                    var audioSrc = src.audioQueue[0];
                    if (!audioSrc) {
                        return
                    }
                    var duration;
                    if (src.type === 4136 && src.looping) {
                        duration = Number.POSITIVE_INFINITY
                    } else {
                        duration = (audioSrc.buffer.duration - audioSrc._startOffset) / src.playbackRate
                    }
                    audioSrc._duration = duration;
                    audioSrc.playbackRate.value = src.playbackRate;
                    AL.scheduleSourceAudio(src)
                }
            },
            sourceDuration: function(src) {
                var length = 0;
                for (var i = 0; i < src.bufQueue.length; i++) {
                    var audioBuf = src.bufQueue[i].audioBuf;
                    length += audioBuf ? audioBuf.duration : 0
                }
                return length
            },
            sourceTell: function(src) {
                AL.updateSourceTime(src);
                var offset = 0;
                for (var i = 0; i < src.bufsProcessed; i++) {
                    if (src.bufQueue[i].audioBuf) {
                        offset += src.bufQueue[i].audioBuf.duration
                    }
                }
                offset += src.bufOffset;
                return offset
            },
            sourceSeek: function(src, offset) {
                var playing = src.state == 4114;
                if (playing) {
                    AL.setSourceState(src, 4113)
                }
                if (src.bufQueue[src.bufsProcessed].audioBuf !== null) {
                    src.bufsProcessed = 0;
                    while (offset > src.bufQueue[src.bufsProcessed].audioBuf.duration) {
                        offset -= src.bufQueue[src.bufsProcessed].audiobuf.duration;
                        src.bufsProcessed++
                    }
                    src.bufOffset = offset
                }
                if (playing) {
                    AL.setSourceState(src, 4114)
                }
            },
            getGlobalParam: function(funcname, param) {
                if (!AL.currentCtx) {
                    return null
                }
                switch (param) {
                case 49152:
                    return AL.currentCtx.dopplerFactor;
                case 49155:
                    return AL.currentCtx.speedOfSound;
                case 53248:
                    return AL.currentCtx.distanceModel;
                default:
                    AL.currentCtx.err = 40962;
                    return null
                }
            },
            setGlobalParam: function(funcname, param, value) {
                if (!AL.currentCtx) {
                    return
                }
                switch (param) {
                case 49152:
                    if (!Number.isFinite(value) || value < 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    AL.currentCtx.dopplerFactor = value;
                    AL.updateListenerSpace(AL.currentCtx);
                    break;
                case 49155:
                    if (!Number.isFinite(value) || value <= 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    AL.currentCtx.speedOfSound = value;
                    AL.updateListenerSpace(AL.currentCtx);
                    break;
                case 53248:
                    switch (value) {
                    case 0:
                    case 53249:
                    case 53250:
                    case 53251:
                    case 53252:
                    case 53253:
                    case 53254:
                        AL.currentCtx.distanceModel = value;
                        AL.updateContextGlobal(AL.currentCtx);
                        break;
                    default:
                        AL.currentCtx.err = 40963;
                        return
                    }
                    break;
                default:
                    AL.currentCtx.err = 40962;
                    return
                }
            },
            getListenerParam: function(funcname, param) {
                if (!AL.currentCtx) {
                    return null
                }
                switch (param) {
                case 4100:
                    return AL.currentCtx.listener.position;
                case 4102:
                    return AL.currentCtx.listener.velocity;
                case 4111:
                    return AL.currentCtx.listener.direction.concat(AL.currentCtx.listener.up);
                case 4106:
                    return AL.currentCtx.gain.gain.value;
                default:
                    AL.currentCtx.err = 40962;
                    return null
                }
            },
            setListenerParam: function(funcname, param, value) {
                if (!AL.currentCtx) {
                    return
                }
                if (value === null) {
                    AL.currentCtx.err = 40962;
                    return
                }
                var listener = AL.currentCtx.listener;
                switch (param) {
                case 4100:
                    if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    listener.position[0] = value[0];
                    listener.position[1] = value[1];
                    listener.position[2] = value[2];
                    AL.updateListenerSpace(AL.currentCtx);
                    break;
                case 4102:
                    if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    listener.velocity[0] = value[0];
                    listener.velocity[1] = value[1];
                    listener.velocity[2] = value[2];
                    AL.updateListenerSpace(AL.currentCtx);
                    break;
                case 4106:
                    if (!Number.isFinite(value) || value < 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    AL.currentCtx.gain.gain.value = value;
                    break;
                case 4111:
                    if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2]) || !Number.isFinite(value[3]) || !Number.isFinite(value[4]) || !Number.isFinite(value[5])) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    listener.direction[0] = value[0];
                    listener.direction[1] = value[1];
                    listener.direction[2] = value[2];
                    listener.up[0] = value[3];
                    listener.up[1] = value[4];
                    listener.up[2] = value[5];
                    AL.updateListenerSpace(AL.currentCtx);
                    break;
                default:
                    AL.currentCtx.err = 40962;
                    return
                }
            },
            getBufferParam: function(funcname, bufferId, param) {
                if (!AL.currentCtx) {
                    return
                }
                var buf = AL.buffers[bufferId];
                if (!buf || bufferId === 0) {
                    AL.currentCtx.err = 40961;
                    return
                }
                switch (param) {
                case 8193:
                    return buf.frequency;
                case 8194:
                    return buf.bytesPerSample * 8;
                case 8195:
                    return buf.channels;
                case 8196:
                    return buf.length * buf.bytesPerSample * buf.channels;
                case 8213:
                    if (buf.length === 0) {
                        return [0, 0]
                    }
                    return [(buf.audioBuf._loopStart || 0) * buf.frequency, (buf.audioBuf._loopEnd || buf.length) * buf.frequency];
                default:
                    AL.currentCtx.err = 40962;
                    return null
                }
            },
            setBufferParam: function(funcname, bufferId, param, value) {
                if (!AL.currentCtx) {
                    return
                }
                var buf = AL.buffers[bufferId];
                if (!buf || bufferId === 0) {
                    AL.currentCtx.err = 40961;
                    return
                }
                if (value === null) {
                    AL.currentCtx.err = 40962;
                    return
                }
                switch (param) {
                case 8196:
                    if (value !== 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    break;
                case 8213:
                    if (value[0] < 0 || value[0] > buf.length || value[1] < 0 || value[1] > buf.Length || value[0] >= value[1]) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    if (buf.refCount > 0) {
                        AL.currentCtx.err = 40964;
                        return
                    }
                    if (buf.audioBuf) {
                        buf.audioBuf._loopStart = value[0] / buf.frequency;
                        buf.audioBuf._loopEnd = value[1] / buf.frequency
                    }
                    break;
                default:
                    AL.currentCtx.err = 40962;
                    return
                }
            },
            getSourceParam: function(funcname, sourceId, param) {
                if (!AL.currentCtx) {
                    return null
                }
                var src = AL.currentCtx.sources[sourceId];
                if (!src) {
                    AL.currentCtx.err = 40961;
                    return null
                }
                switch (param) {
                case 514:
                    return src.relative;
                case 4097:
                    return src.coneInnerAngle;
                case 4098:
                    return src.coneOuterAngle;
                case 4099:
                    return src.pitch;
                case 4100:
                    return src.position;
                case 4101:
                    return src.direction;
                case 4102:
                    return src.velocity;
                case 4103:
                    return src.looping;
                case 4105:
                    if (src.type === 4136) {
                        return src.bufQueue[0].id
                    }
                    return 0;
                case 4106:
                    return src.gain.gain.value;
                case 4109:
                    return src.minGain;
                case 4110:
                    return src.maxGain;
                case 4112:
                    return src.state;
                case 4117:
                    if (src.bufQueue.length === 1 && src.bufQueue[0].id === 0) {
                        return 0
                    }
                    return src.bufQueue.length;
                case 4118:
                    if (src.bufQueue.length === 1 && src.bufQueue[0].id === 0 || src.looping) {
                        return 0
                    }
                    return src.bufsProcessed;
                case 4128:
                    return src.refDistance;
                case 4129:
                    return src.rolloffFactor;
                case 4130:
                    return src.coneOuterGain;
                case 4131:
                    return src.maxDistance;
                case 4132:
                    return AL.sourceTell(src);
                case 4133:
                    var offset = AL.sourceTell(src);
                    if (offset > 0) {
                        offset *= src.bufQueue[0].frequency
                    }
                    return offset;
                case 4134:
                    var offset = AL.sourceTell(src);
                    if (offset > 0) {
                        offset *= src.bufQueue[0].frequency * src.bufQueue[0].bytesPerSample
                    }
                    return offset;
                case 4135:
                    return src.type;
                case 4628:
                    return src.spatialize;
                case 8201:
                    var length = 0;
                    var bytesPerFrame = 0;
                    for (var i = 0; i < src.bufQueue.length; i++) {
                        length += src.bufQueue[i].length;
                        if (src.bufQueue[i].id !== 0) {
                            bytesPerFrame = src.bufQueue[i].bytesPerSample * src.bufQueue[i].channels
                        }
                    }
                    return length * bytesPerFrame;
                case 8202:
                    var length = 0;
                    for (var i = 0; i < src.bufQueue.length; i++) {
                        length += src.bufQueue[i].length
                    }
                    return length;
                case 8203:
                    return AL.sourceDuration(src);
                case 53248:
                    return src.distanceModel;
                default:
                    AL.currentCtx.err = 40962;
                    return null
                }
            },
            setSourceParam: function(funcname, sourceId, param, value) {
                if (!AL.currentCtx) {
                    return
                }
                var src = AL.currentCtx.sources[sourceId];
                if (!src) {
                    AL.currentCtx.err = 40961;
                    return
                }
                if (value === null) {
                    AL.currentCtx.err = 40962;
                    return
                }
                switch (param) {
                case 514:
                    if (value === 1) {
                        src.relative = true;
                        AL.updateSourceSpace(src)
                    } else if (value === 0) {
                        src.relative = false;
                        AL.updateSourceSpace(src)
                    } else {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    break;
                case 4097:
                    if (!Number.isFinite(value)) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.coneInnerAngle = value;
                    if (src.panner) {
                        src.panner.coneInnerAngle = value % 360
                    }
                    break;
                case 4098:
                    if (!Number.isFinite(value)) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.coneOuterAngle = value;
                    if (src.panner) {
                        src.panner.coneOuterAngle = value % 360
                    }
                    break;
                case 4099:
                    if (!Number.isFinite(value) || value <= 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    if (src.pitch === value) {
                        break
                    }
                    src.pitch = value;
                    AL.updateSourceRate(src);
                    break;
                case 4100:
                    if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.position[0] = value[0];
                    src.position[1] = value[1];
                    src.position[2] = value[2];
                    AL.updateSourceSpace(src);
                    break;
                case 4101:
                    if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.direction[0] = value[0];
                    src.direction[1] = value[1];
                    src.direction[2] = value[2];
                    AL.updateSourceSpace(src);
                    break;
                case 4102:
                    if (!Number.isFinite(value[0]) || !Number.isFinite(value[1]) || !Number.isFinite(value[2])) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.velocity[0] = value[0];
                    src.velocity[1] = value[1];
                    src.velocity[2] = value[2];
                    AL.updateSourceSpace(src);
                    break;
                case 4103:
                    if (value === 1) {
                        src.looping = true;
                        AL.updateSourceTime(src);
                        if (src.type === 4136 && src.audioQueue.length > 0) {
                            var audioSrc = src.audioQueue[0];
                            audioSrc.loop = true;
                            audioSrc._duration = Number.POSITIVE_INFINITY
                        }
                    } else if (value === 0) {
                        src.looping = false;
                        var currentTime = AL.updateSourceTime(src);
                        if (src.type === 4136 && src.audioQueue.length > 0) {
                            var audioSrc = src.audioQueue[0];
                            audioSrc.loop = false;
                            audioSrc._duration = src.bufQueue[0].audioBuf.duration / src.playbackRate;
                            audioSrc._startTime = currentTime - src.bufOffset / src.playbackRate
                        }
                    } else {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    break;
                case 4105:
                    if (src.state === 4114 || src.state === 4115) {
                        AL.currentCtx.err = 40964;
                        return
                    }
                    if (value === 0) {
                        for (var i in src.bufQueue) {
                            src.bufQueue[i].refCount--
                        }
                        src.bufQueue.length = 1;
                        src.bufQueue[0] = AL.buffers[0];
                        src.bufsProcessed = 0;
                        src.type = 4144
                    } else {
                        var buf = AL.buffers[value];
                        if (!buf) {
                            AL.currentCtx.err = 40963;
                            return
                        }
                        for (var i in src.bufQueue) {
                            src.bufQueue[i].refCount--
                        }
                        src.bufQueue.length = 0;
                        buf.refCount++;
                        src.bufQueue = [buf];
                        src.bufsProcessed = 0;
                        src.type = 4136
                    }
                    AL.initSourcePanner(src);
                    AL.scheduleSourceAudio(src);
                    break;
                case 4106:
                    if (!Number.isFinite(value) || value < 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.gain.gain.value = value;
                    break;
                case 4109:
                    if (!Number.isFinite(value) || value < 0 || value > Math.min(src.maxGain, 1)) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.minGain = value;
                    break;
                case 4110:
                    if (!Number.isFinite(value) || value < Math.max(0, src.minGain) || value > 1) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.maxGain = value;
                    break;
                case 4128:
                    if (!Number.isFinite(value) || value < 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.refDistance = value;
                    if (src.panner) {
                        src.panner.refDistance = value
                    }
                    break;
                case 4129:
                    if (!Number.isFinite(value) || value < 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.rolloffFactor = value;
                    if (src.panner) {
                        src.panner.rolloffFactor = value
                    }
                    break;
                case 4130:
                    if (!Number.isFinite(value) || value < 0 || value > 1) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.coneOuterGain = value;
                    if (src.panner) {
                        src.panner.coneOuterGain = value
                    }
                    break;
                case 4131:
                    if (!Number.isFinite(value) || value < 0) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.maxDistance = value;
                    if (src.panner) {
                        src.panner.maxDistance = value
                    }
                    break;
                case 4132:
                    if (value < 0 || value > AL.sourceDuration(src)) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    AL.sourceSeek(src, value);
                    break;
                case 4133:
                    var srcLen = AL.sourceDuration(src);
                    if (srcLen > 0) {
                        var frequency;
                        for (var bufId in src.bufQueue) {
                            if (bufId) {
                                frequency = src.bufQueue[bufId].frequency;
                                break
                            }
                        }
                        value /= frequency
                    }
                    if (value < 0 || value > srcLen) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    AL.sourceSeek(src, value);
                    break;
                case 4134:
                    var srcLen = AL.sourceDuration(src);
                    if (srcLen > 0) {
                        var bytesPerSec;
                        for (var bufId in src.bufQueue) {
                            if (bufId) {
                                var buf = src.bufQueue[bufId];
                                bytesPerSec = buf.frequency * buf.bytesPerSample * buf.channels;
                                break
                            }
                        }
                        value /= bytesPerSec
                    }
                    if (value < 0 || value > srcLen) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    AL.sourceSeek(src, value);
                    break;
                case 4628:
                    if (value !== 0 && value !== 1 && value !== 2) {
                        AL.currentCtx.err = 40963;
                        return
                    }
                    src.spatialize = value;
                    AL.initSourcePanner(src);
                    break;
                case 8201:
                case 8202:
                case 8203:
                    AL.currentCtx.err = 40964;
                    break;
                case 53248:
                    switch (value) {
                    case 0:
                    case 53249:
                    case 53250:
                    case 53251:
                    case 53252:
                    case 53253:
                    case 53254:
                        src.distanceModel = value;
                        if (AL.currentCtx.sourceDistanceModel) {
                            AL.updateContextGlobal(AL.currentCtx)
                        }
                        break;
                    default:
                        AL.currentCtx.err = 40963;
                        return
                    }
                    break;
                default:
                    AL.currentCtx.err = 40962;
                    return
                }
            },
            captures: {},
            sharedCaptureAudioCtx: null,
            requireValidCaptureDevice: function(deviceId, funcname) {
                if (deviceId === 0) {
                    AL.alcErr = 40961;
                    return null
                }
                var c = AL.captures[deviceId];
                if (!c) {
                    AL.alcErr = 40961;
                    return null
                }
                var err = c.mediaStreamError;
                if (err) {
                    AL.alcErr = 40961;
                    return null
                }
                return c
            }
        };
        Module["AL"] = AL;
        function _alBuffer3f(bufferId, param, value0, value1, value2) {
            AL.setBufferParam("alBuffer3f", bufferId, param, null)
        }
        Module["_alBuffer3f"] = _alBuffer3f;
        _alBuffer3f.sig = "viifff";
        function _alBuffer3i(bufferId, param, value0, value1, value2) {
            AL.setBufferParam("alBuffer3i", bufferId, param, null)
        }
        Module["_alBuffer3i"] = _alBuffer3i;
        _alBuffer3i.sig = "viiiii";
        function _alBufferData(bufferId, format, pData, size, freq) {
            if (!AL.currentCtx) {
                return
            }
            var buf = AL.buffers[bufferId];
            if (!buf) {
                AL.currentCtx.err = 40963;
                return
            }
            if (freq <= 0) {
                AL.currentCtx.err = 40963;
                return
            }
            var audioBuf = null;
            try {
                switch (format) {
                case 4352:
                    if (size > 0) {
                        audioBuf = AL.currentCtx.audioCtx.createBuffer(1, size, freq);
                        var channel0 = audioBuf.getChannelData(0);
                        for (var i = 0; i < size; ++i) {
                            channel0[i] = HEAPU8[pData++] * .0078125 - 1
                        }
                    }
                    buf.bytesPerSample = 1;
                    buf.channels = 1;
                    buf.length = size;
                    break;
                case 4353:
                    if (size > 0) {
                        audioBuf = AL.currentCtx.audioCtx.createBuffer(1, size >> 1, freq);
                        var channel0 = audioBuf.getChannelData(0);
                        pData >>= 1;
                        for (var i = 0; i < size >> 1; ++i) {
                            channel0[i] = HEAP16[pData++] * 30517578125e-15
                        }
                    }
                    buf.bytesPerSample = 2;
                    buf.channels = 1;
                    buf.length = size >> 1;
                    break;
                case 4354:
                    if (size > 0) {
                        audioBuf = AL.currentCtx.audioCtx.createBuffer(2, size >> 1, freq);
                        var channel0 = audioBuf.getChannelData(0);
                        var channel1 = audioBuf.getChannelData(1);
                        for (var i = 0; i < size >> 1; ++i) {
                            channel0[i] = HEAPU8[pData++] * .0078125 - 1;
                            channel1[i] = HEAPU8[pData++] * .0078125 - 1
                        }
                    }
                    buf.bytesPerSample = 1;
                    buf.channels = 2;
                    buf.length = size >> 1;
                    break;
                case 4355:
                    if (size > 0) {
                        audioBuf = AL.currentCtx.audioCtx.createBuffer(2, size >> 2, freq);
                        var channel0 = audioBuf.getChannelData(0);
                        var channel1 = audioBuf.getChannelData(1);
                        pData >>= 1;
                        for (var i = 0; i < size >> 2; ++i) {
                            channel0[i] = HEAP16[pData++] * 30517578125e-15;
                            channel1[i] = HEAP16[pData++] * 30517578125e-15
                        }
                    }
                    buf.bytesPerSample = 2;
                    buf.channels = 2;
                    buf.length = size >> 2;
                    break;
                case 65552:
                    if (size > 0) {
                        audioBuf = AL.currentCtx.audioCtx.createBuffer(1, size >> 2, freq);
                        var channel0 = audioBuf.getChannelData(0);
                        pData >>= 2;
                        for (var i = 0; i < size >> 2; ++i) {
                            channel0[i] = HEAPF32[pData++]
                        }
                    }
                    buf.bytesPerSample = 4;
                    buf.channels = 1;
                    buf.length = size >> 2;
                    break;
                case 65553:
                    if (size > 0) {
                        audioBuf = AL.currentCtx.audioCtx.createBuffer(2, size >> 3, freq);
                        var channel0 = audioBuf.getChannelData(0);
                        var channel1 = audioBuf.getChannelData(1);
                        pData >>= 2;
                        for (var i = 0; i < size >> 3; ++i) {
                            channel0[i] = HEAPF32[pData++];
                            channel1[i] = HEAPF32[pData++]
                        }
                    }
                    buf.bytesPerSample = 4;
                    buf.channels = 2;
                    buf.length = size >> 3;
                    break;
                default:
                    AL.currentCtx.err = 40963;
                    return
                }
                buf.frequency = freq;
                buf.audioBuf = audioBuf
            } catch (e) {
                AL.currentCtx.err = 40963;
                return
            }
        }
        Module["_alBufferData"] = _alBufferData;
        _alBufferData.sig = "viiiii";
        function _alBufferf(bufferId, param, value) {
            AL.setBufferParam("alBufferf", bufferId, param, null)
        }
        Module["_alBufferf"] = _alBufferf;
        _alBufferf.sig = "viif";
        function _alBufferfv(bufferId, param, pValues) {
            if (!AL.currentCtx) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            AL.setBufferParam("alBufferfv", bufferId, param, null)
        }
        Module["_alBufferfv"] = _alBufferfv;
        _alBufferfv.sig = "viii";
        function _alBufferi(bufferId, param, value) {
            AL.setBufferParam("alBufferi", bufferId, param, null)
        }
        Module["_alBufferi"] = _alBufferi;
        _alBufferi.sig = "viii";
        function _alBufferiv(bufferId, param, pValues) {
            if (!AL.currentCtx) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 8213:
                AL.paramArray[0] = HEAP32[pValues >> 2];
                AL.paramArray[1] = HEAP32[pValues + 4 >> 2];
                AL.setBufferParam("alBufferiv", bufferId, param, AL.paramArray);
                break;
            default:
                AL.setBufferParam("alBufferiv", bufferId, param, null);
                break
            }
        }
        Module["_alBufferiv"] = _alBufferiv;
        _alBufferiv.sig = "viii";
        function _alDeleteBuffers(count, pBufferIds) {
            if (!AL.currentCtx) {
                return
            }
            for (var i = 0; i < count; ++i) {
                var bufId = HEAP32[pBufferIds + i * 4 >> 2];
                if (bufId === 0) {
                    continue
                }
                if (!AL.buffers[bufId]) {
                    AL.currentCtx.err = 40961;
                    return
                }
                if (AL.buffers[bufId].refCount) {
                    AL.currentCtx.err = 40964;
                    return
                }
            }
            for (var i = 0; i < count; ++i) {
                var bufId = HEAP32[pBufferIds + i * 4 >> 2];
                if (bufId === 0) {
                    continue
                }
                AL.deviceRefCounts[AL.buffers[bufId].deviceId]--;
                delete AL.buffers[bufId];
                AL.freeIds.push(bufId)
            }
        }
        Module["_alDeleteBuffers"] = _alDeleteBuffers;
        _alDeleteBuffers.sig = "vii";
        function _alSourcei(sourceId, param, value) {
            switch (param) {
            case 514:
            case 4097:
            case 4098:
            case 4103:
            case 4105:
            case 4128:
            case 4129:
            case 4131:
            case 4132:
            case 4133:
            case 4134:
            case 4628:
            case 8201:
            case 8202:
            case 53248:
                AL.setSourceParam("alSourcei", sourceId, param, value);
                break;
            default:
                AL.setSourceParam("alSourcei", sourceId, param, null);
                break
            }
        }
        Module["_alSourcei"] = _alSourcei;
        _alSourcei.sig = "viii";
        function _alDeleteSources(count, pSourceIds) {
            if (!AL.currentCtx) {
                return
            }
            for (var i = 0; i < count; ++i) {
                var srcId = HEAP32[pSourceIds + i * 4 >> 2];
                if (!AL.currentCtx.sources[srcId]) {
                    AL.currentCtx.err = 40961;
                    return
                }
            }
            for (var i = 0; i < count; ++i) {
                var srcId = HEAP32[pSourceIds + i * 4 >> 2];
                AL.setSourceState(AL.currentCtx.sources[srcId], 4116);
                _alSourcei(srcId, 4105, 0);
                delete AL.currentCtx.sources[srcId];
                AL.freeIds.push(srcId)
            }
        }
        Module["_alDeleteSources"] = _alDeleteSources;
        _alDeleteSources.sig = "vii";
        function _alDisable(param) {
            if (!AL.currentCtx) {
                return
            }
            switch (param) {
            case "AL_SOURCE_DISTANCE_MODEL":
                AL.currentCtx.sourceDistanceModel = false;
                AL.updateContextGlobal(AL.currentCtx);
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alDisable"] = _alDisable;
        _alDisable.sig = "vi";
        function _alDistanceModel(model) {
            AL.setGlobalParam("alDistanceModel", 53248, model)
        }
        Module["_alDistanceModel"] = _alDistanceModel;
        _alDistanceModel.sig = "vi";
        function _alDopplerFactor(value) {
            AL.setGlobalParam("alDopplerFactor", 49152, value)
        }
        Module["_alDopplerFactor"] = _alDopplerFactor;
        _alDopplerFactor.sig = "vi";
        function _alDopplerVelocity(value) {
            warnOnce("alDopplerVelocity() is deprecated, and only kept for compatibility with OpenAL 1.0. Use alSpeedOfSound() instead.");
            if (!AL.currentCtx) {
                return
            }
            if (value <= 0) {
                AL.currentCtx.err = 40963;
                return
            }
        }
        Module["_alDopplerVelocity"] = _alDopplerVelocity;
        _alDopplerVelocity.sig = "vi";
        function _alEnable(param) {
            if (!AL.currentCtx) {
                return
            }
            switch (param) {
            case "AL_SOURCE_DISTANCE_MODEL":
                AL.currentCtx.sourceDistanceModel = true;
                AL.updateContextGlobal(AL.currentCtx);
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alEnable"] = _alEnable;
        _alEnable.sig = "vi";
        function _alGenBuffers(count, pBufferIds) {
            if (!AL.currentCtx) {
                return
            }
            for (var i = 0; i < count; ++i) {
                var buf = {
                    deviceId: AL.currentCtx.deviceId,
                    id: AL.newId(),
                    refCount: 0,
                    audioBuf: null,
                    frequency: 0,
                    bytesPerSample: 2,
                    channels: 1,
                    length: 0
                };
                AL.deviceRefCounts[buf.deviceId]++;
                AL.buffers[buf.id] = buf;
                HEAP32[pBufferIds + i * 4 >> 2] = buf.id
            }
        }
        Module["_alGenBuffers"] = _alGenBuffers;
        _alGenBuffers.sig = "vii";
        function _alGenSources(count, pSourceIds) {
            if (!AL.currentCtx) {
                return
            }
            for (var i = 0; i < count; ++i) {
                var gain = AL.currentCtx.audioCtx.createGain();
                gain.connect(AL.currentCtx.gain);
                var src = {
                    context: AL.currentCtx,
                    id: AL.newId(),
                    type: 4144,
                    state: 4113,
                    bufQueue: [AL.buffers[0]],
                    audioQueue: [],
                    looping: false,
                    pitch: 1,
                    dopplerShift: 1,
                    gain: gain,
                    minGain: 0,
                    maxGain: 1,
                    panner: null,
                    bufsProcessed: 0,
                    bufStartTime: Number.NEGATIVE_INFINITY,
                    bufOffset: 0,
                    relative: false,
                    refDistance: 1,
                    maxDistance: 340282e33,
                    rolloffFactor: 1,
                    position: [0, 0, 0],
                    velocity: [0, 0, 0],
                    direction: [0, 0, 0],
                    coneOuterGain: 0,
                    coneInnerAngle: 360,
                    coneOuterAngle: 360,
                    distanceModel: 53250,
                    spatialize: 2,
                    get playbackRate() {
                        return this.pitch * this.dopplerShift
                    }
                };
                AL.currentCtx.sources[src.id] = src;
                HEAP32[pSourceIds + i * 4 >> 2] = src.id
            }
        }
        Module["_alGenSources"] = _alGenSources;
        _alGenSources.sig = "vii";
        function _alGetBoolean(param) {
            var val = AL.getGlobalParam("alGetBoolean", param);
            if (val === null) {
                return 0
            }
            switch (param) {
            case 49152:
            case 49155:
            case 53248:
                return val !== 0 ? 1 : 0;
            default:
                AL.currentCtx.err = 40962;
                return 0
            }
        }
        Module["_alGetBoolean"] = _alGetBoolean;
        _alGetBoolean.sig = "ii";
        function _alGetBooleanv(param, pValues) {
            var val = AL.getGlobalParam("alGetBooleanv", param);
            if (val === null || !pValues) {
                return
            }
            switch (param) {
            case 49152:
            case 49155:
            case 53248:
                HEAP8[pValues >> 0] = val;
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetBooleanv"] = _alGetBooleanv;
        _alGetBooleanv.sig = "vii";
        function _alGetBuffer3f(bufferId, param, pValue0, pValue1, pValue2) {
            var val = AL.getBufferParam("alGetBuffer3f", bufferId, param);
            if (val === null) {
                return
            }
            if (!pValue0 || !pValue1 || !pValue2) {
                AL.currentCtx.err = 40963;
                return
            }
            AL.currentCtx.err = 40962
        }
        Module["_alGetBuffer3f"] = _alGetBuffer3f;
        _alGetBuffer3f.sig = "viiiii";
        function _alGetBuffer3i(bufferId, param, pValue0, pValue1, pValue2) {
            var val = AL.getBufferParam("alGetBuffer3i", bufferId, param);
            if (val === null) {
                return
            }
            if (!pValue0 || !pValue1 || !pValue2) {
                AL.currentCtx.err = 40963;
                return
            }
            AL.currentCtx.err = 40962
        }
        Module["_alGetBuffer3i"] = _alGetBuffer3i;
        _alGetBuffer3i.sig = "viiiii";
        function _alGetBufferf(bufferId, param, pValue) {
            var val = AL.getBufferParam("alGetBufferf", bufferId, param);
            if (val === null) {
                return
            }
            if (!pValue) {
                AL.currentCtx.err = 40963;
                return
            }
            AL.currentCtx.err = 40962
        }
        Module["_alGetBufferf"] = _alGetBufferf;
        _alGetBufferf.sig = "viii";
        function _alGetBufferfv(bufferId, param, pValues) {
            var val = AL.getBufferParam("alGetBufferfv", bufferId, param);
            if (val === null) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            AL.currentCtx.err = 40962
        }
        Module["_alGetBufferfv"] = _alGetBufferfv;
        _alGetBufferfv.sig = "viii";
        function _alGetBufferi(bufferId, param, pValue) {
            var val = AL.getBufferParam("alGetBufferi", bufferId, param);
            if (val === null) {
                return
            }
            if (!pValue) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 8193:
            case 8194:
            case 8195:
            case 8196:
                HEAP32[pValue >> 2] = val;
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetBufferi"] = _alGetBufferi;
        _alGetBufferi.sig = "viii";
        function _alGetBufferiv(bufferId, param, pValues) {
            var val = AL.getBufferParam("alGetBufferiv", bufferId, param);
            if (val === null) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 8193:
            case 8194:
            case 8195:
            case 8196:
                HEAP32[pValues >> 2] = val;
                break;
            case 8213:
                HEAP32[pValues >> 2] = val[0];
                HEAP32[pValues + 4 >> 2] = val[1];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetBufferiv"] = _alGetBufferiv;
        _alGetBufferiv.sig = "viii";
        function _alGetDouble(param) {
            var val = AL.getGlobalParam("alGetDouble", param);
            if (val === null) {
                return 0
            }
            switch (param) {
            case 49152:
            case 49155:
            case 53248:
                return val;
            default:
                AL.currentCtx.err = 40962;
                return 0
            }
        }
        Module["_alGetDouble"] = _alGetDouble;
        _alGetDouble.sig = "di";
        function _alGetDoublev(param, pValues) {
            var val = AL.getGlobalParam("alGetDoublev", param);
            if (val === null || !pValues) {
                return
            }
            switch (param) {
            case 49152:
            case 49155:
            case 53248:
                HEAPF64[pValues >> 3] = val;
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetDoublev"] = _alGetDoublev;
        _alGetDoublev.sig = "vii";
        function _alGetEnumValue(pEnumName) {
            if (!AL.currentCtx) {
                return 0
            }
            if (!pEnumName) {
                AL.currentCtx.err = 40963;
                return 0
            }
            var name = UTF8ToString(pEnumName);
            switch (name) {
            case "AL_BITS":
                return 8194;
            case "AL_BUFFER":
                return 4105;
            case "AL_BUFFERS_PROCESSED":
                return 4118;
            case "AL_BUFFERS_QUEUED":
                return 4117;
            case "AL_BYTE_OFFSET":
                return 4134;
            case "AL_CHANNELS":
                return 8195;
            case "AL_CONE_INNER_ANGLE":
                return 4097;
            case "AL_CONE_OUTER_ANGLE":
                return 4098;
            case "AL_CONE_OUTER_GAIN":
                return 4130;
            case "AL_DIRECTION":
                return 4101;
            case "AL_DISTANCE_MODEL":
                return 53248;
            case "AL_DOPPLER_FACTOR":
                return 49152;
            case "AL_DOPPLER_VELOCITY":
                return 49153;
            case "AL_EXPONENT_DISTANCE":
                return 53253;
            case "AL_EXPONENT_DISTANCE_CLAMPED":
                return 53254;
            case "AL_EXTENSIONS":
                return 45060;
            case "AL_FORMAT_MONO16":
                return 4353;
            case "AL_FORMAT_MONO8":
                return 4352;
            case "AL_FORMAT_STEREO16":
                return 4355;
            case "AL_FORMAT_STEREO8":
                return 4354;
            case "AL_FREQUENCY":
                return 8193;
            case "AL_GAIN":
                return 4106;
            case "AL_INITIAL":
                return 4113;
            case "AL_INVALID":
                return -1;
            case "AL_ILLEGAL_ENUM":
            case "AL_INVALID_ENUM":
                return 40962;
            case "AL_INVALID_NAME":
                return 40961;
            case "AL_ILLEGAL_COMMAND":
            case "AL_INVALID_OPERATION":
                return 40964;
            case "AL_INVALID_VALUE":
                return 40963;
            case "AL_INVERSE_DISTANCE":
                return 53249;
            case "AL_INVERSE_DISTANCE_CLAMPED":
                return 53250;
            case "AL_LINEAR_DISTANCE":
                return 53251;
            case "AL_LINEAR_DISTANCE_CLAMPED":
                return 53252;
            case "AL_LOOPING":
                return 4103;
            case "AL_MAX_DISTANCE":
                return 4131;
            case "AL_MAX_GAIN":
                return 4110;
            case "AL_MIN_GAIN":
                return 4109;
            case "AL_NONE":
                return 0;
            case "AL_NO_ERROR":
                return 0;
            case "AL_ORIENTATION":
                return 4111;
            case "AL_OUT_OF_MEMORY":
                return 40965;
            case "AL_PAUSED":
                return 4115;
            case "AL_PENDING":
                return 8209;
            case "AL_PITCH":
                return 4099;
            case "AL_PLAYING":
                return 4114;
            case "AL_POSITION":
                return 4100;
            case "AL_PROCESSED":
                return 8210;
            case "AL_REFERENCE_DISTANCE":
                return 4128;
            case "AL_RENDERER":
                return 45059;
            case "AL_ROLLOFF_FACTOR":
                return 4129;
            case "AL_SAMPLE_OFFSET":
                return 4133;
            case "AL_SEC_OFFSET":
                return 4132;
            case "AL_SIZE":
                return 8196;
            case "AL_SOURCE_RELATIVE":
                return 514;
            case "AL_SOURCE_STATE":
                return 4112;
            case "AL_SOURCE_TYPE":
                return 4135;
            case "AL_SPEED_OF_SOUND":
                return 49155;
            case "AL_STATIC":
                return 4136;
            case "AL_STOPPED":
                return 4116;
            case "AL_STREAMING":
                return 4137;
            case "AL_UNDETERMINED":
                return 4144;
            case "AL_UNUSED":
                return 8208;
            case "AL_VELOCITY":
                return 4102;
            case "AL_VENDOR":
                return 45057;
            case "AL_VERSION":
                return 45058;
            case "AL_AUTO_SOFT":
                return 2;
            case "AL_SOURCE_DISTANCE_MODEL":
                return 512;
            case "AL_SOURCE_SPATIALIZE_SOFT":
                return 4628;
            case "AL_LOOP_POINTS_SOFT":
                return 8213;
            case "AL_BYTE_LENGTH_SOFT":
                return 8201;
            case "AL_SAMPLE_LENGTH_SOFT":
                return 8202;
            case "AL_SEC_LENGTH_SOFT":
                return 8203;
            case "AL_FORMAT_MONO_FLOAT32":
                return 65552;
            case "AL_FORMAT_STEREO_FLOAT32":
                return 65553;
            default:
                AL.currentCtx.err = 40963;
                return 0
            }
        }
        Module["_alGetEnumValue"] = _alGetEnumValue;
        _alGetEnumValue.sig = "ii";
        function _alGetError() {
            if (!AL.currentCtx) {
                return 40964
            }
            var err = AL.currentCtx.err;
            AL.currentCtx.err = 0;
            return err
        }
        Module["_alGetError"] = _alGetError;
        _alGetError.sig = "i";
        function _alGetFloat(param) {
            var val = AL.getGlobalParam("alGetFloat", param);
            if (val === null) {
                return 0
            }
            switch (param) {
            case 49152:
            case 49155:
            case 53248:
                return val;
            default:
                return 0
            }
        }
        Module["_alGetFloat"] = _alGetFloat;
        _alGetFloat.sig = "fi";
        function _alGetFloatv(param, pValues) {
            var val = AL.getGlobalParam("alGetFloatv", param);
            if (val === null || !pValues) {
                return
            }
            switch (param) {
            case 49152:
            case 49155:
            case 53248:
                HEAPF32[pValues >> 2] = val;
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetFloatv"] = _alGetFloatv;
        _alGetFloatv.sig = "vii";
        function _alGetInteger(param) {
            var val = AL.getGlobalParam("alGetInteger", param);
            if (val === null) {
                return 0
            }
            switch (param) {
            case 49152:
            case 49155:
            case 53248:
                return val;
            default:
                AL.currentCtx.err = 40962;
                return 0
            }
        }
        Module["_alGetInteger"] = _alGetInteger;
        _alGetInteger.sig = "ii";
        function _alGetIntegerv(param, pValues) {
            var val = AL.getGlobalParam("alGetIntegerv", param);
            if (val === null || !pValues) {
                return
            }
            switch (param) {
            case 49152:
            case 49155:
            case 53248:
                HEAP32[pValues >> 2] = val;
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetIntegerv"] = _alGetIntegerv;
        _alGetIntegerv.sig = "vii";
        function _alGetListener3f(param, pValue0, pValue1, pValue2) {
            var val = AL.getListenerParam("alGetListener3f", param);
            if (val === null) {
                return
            }
            if (!pValue0 || !pValue1 || !pValue2) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4100:
            case 4102:
                HEAPF32[pValue0 >> 2] = val[0];
                HEAPF32[pValue1 >> 2] = val[1];
                HEAPF32[pValue2 >> 2] = val[2];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetListener3f"] = _alGetListener3f;
        _alGetListener3f.sig = "viiii";
        function _alGetListener3i(param, pValue0, pValue1, pValue2) {
            var val = AL.getListenerParam("alGetListener3i", param);
            if (val === null) {
                return
            }
            if (!pValue0 || !pValue1 || !pValue2) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4100:
            case 4102:
                HEAP32[pValue0 >> 2] = val[0];
                HEAP32[pValue1 >> 2] = val[1];
                HEAP32[pValue2 >> 2] = val[2];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetListener3i"] = _alGetListener3i;
        _alGetListener3i.sig = "viiii";
        function _alGetListenerf(param, pValue) {
            var val = AL.getListenerParam("alGetListenerf", param);
            if (val === null) {
                return
            }
            if (!pValue) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4106:
                HEAPF32[pValue >> 2] = val;
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetListenerf"] = _alGetListenerf;
        _alGetListenerf.sig = "vii";
        function _alGetListenerfv(param, pValues) {
            var val = AL.getListenerParam("alGetListenerfv", param);
            if (val === null) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4100:
            case 4102:
                HEAPF32[pValues >> 2] = val[0];
                HEAPF32[pValues + 4 >> 2] = val[1];
                HEAPF32[pValues + 8 >> 2] = val[2];
                break;
            case 4111:
                HEAPF32[pValues >> 2] = val[0];
                HEAPF32[pValues + 4 >> 2] = val[1];
                HEAPF32[pValues + 8 >> 2] = val[2];
                HEAPF32[pValues + 12 >> 2] = val[3];
                HEAPF32[pValues + 16 >> 2] = val[4];
                HEAPF32[pValues + 20 >> 2] = val[5];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetListenerfv"] = _alGetListenerfv;
        _alGetListenerfv.sig = "vii";
        function _alGetListeneri(param, pValue) {
            var val = AL.getListenerParam("alGetListeneri", param);
            if (val === null) {
                return
            }
            if (!pValue) {
                AL.currentCtx.err = 40963;
                return
            }
            AL.currentCtx.err = 40962
        }
        Module["_alGetListeneri"] = _alGetListeneri;
        _alGetListeneri.sig = "vii";
        function _alGetListeneriv(param, pValues) {
            var val = AL.getListenerParam("alGetListeneriv", param);
            if (val === null) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4100:
            case 4102:
                HEAP32[pValues >> 2] = val[0];
                HEAP32[pValues + 4 >> 2] = val[1];
                HEAP32[pValues + 8 >> 2] = val[2];
                break;
            case 4111:
                HEAP32[pValues >> 2] = val[0];
                HEAP32[pValues + 4 >> 2] = val[1];
                HEAP32[pValues + 8 >> 2] = val[2];
                HEAP32[pValues + 12 >> 2] = val[3];
                HEAP32[pValues + 16 >> 2] = val[4];
                HEAP32[pValues + 20 >> 2] = val[5];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetListeneriv"] = _alGetListeneriv;
        _alGetListeneriv.sig = "vii";
        function _alGetSource3f(sourceId, param, pValue0, pValue1, pValue2) {
            var val = AL.getSourceParam("alGetSource3f", sourceId, param);
            if (val === null) {
                return
            }
            if (!pValue0 || !pValue1 || !pValue2) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4100:
            case 4101:
            case 4102:
                HEAPF32[pValue0 >> 2] = val[0];
                HEAPF32[pValue1 >> 2] = val[1];
                HEAPF32[pValue2 >> 2] = val[2];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetSource3f"] = _alGetSource3f;
        _alGetSource3f.sig = "viiiii";
        function _alGetSource3i(sourceId, param, pValue0, pValue1, pValue2) {
            var val = AL.getSourceParam("alGetSource3i", sourceId, param);
            if (val === null) {
                return
            }
            if (!pValue0 || !pValue1 || !pValue2) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4100:
            case 4101:
            case 4102:
                HEAP32[pValue0 >> 2] = val[0];
                HEAP32[pValue1 >> 2] = val[1];
                HEAP32[pValue2 >> 2] = val[2];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetSource3i"] = _alGetSource3i;
        _alGetSource3i.sig = "viiiii";
        function _alGetSourcef(sourceId, param, pValue) {
            var val = AL.getSourceParam("alGetSourcef", sourceId, param);
            if (val === null) {
                return
            }
            if (!pValue) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4097:
            case 4098:
            case 4099:
            case 4106:
            case 4109:
            case 4110:
            case 4128:
            case 4129:
            case 4130:
            case 4131:
            case 4132:
            case 4133:
            case 4134:
            case 8203:
                HEAPF32[pValue >> 2] = val;
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetSourcef"] = _alGetSourcef;
        _alGetSourcef.sig = "viii";
        function _alGetSourcefv(sourceId, param, pValues) {
            var val = AL.getSourceParam("alGetSourcefv", sourceId, param);
            if (val === null) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4097:
            case 4098:
            case 4099:
            case 4106:
            case 4109:
            case 4110:
            case 4128:
            case 4129:
            case 4130:
            case 4131:
            case 4132:
            case 4133:
            case 4134:
            case 8203:
                HEAPF32[pValues >> 2] = val[0];
                break;
            case 4100:
            case 4101:
            case 4102:
                HEAPF32[pValues >> 2] = val[0];
                HEAPF32[pValues + 4 >> 2] = val[1];
                HEAPF32[pValues + 8 >> 2] = val[2];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetSourcefv"] = _alGetSourcefv;
        _alGetSourcefv.sig = "viii";
        function _alGetSourcei(sourceId, param, pValue) {
            var val = AL.getSourceParam("alGetSourcei", sourceId, param);
            if (val === null) {
                return
            }
            if (!pValue) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 514:
            case 4097:
            case 4098:
            case 4103:
            case 4105:
            case 4112:
            case 4117:
            case 4118:
            case 4128:
            case 4129:
            case 4131:
            case 4132:
            case 4133:
            case 4134:
            case 4135:
            case 4628:
            case 8201:
            case 8202:
            case 53248:
                HEAP32[pValue >> 2] = val;
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetSourcei"] = _alGetSourcei;
        _alGetSourcei.sig = "viii";
        function _alGetSourceiv(sourceId, param, pValues) {
            var val = AL.getSourceParam("alGetSourceiv", sourceId, param);
            if (val === null) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 514:
            case 4097:
            case 4098:
            case 4103:
            case 4105:
            case 4112:
            case 4117:
            case 4118:
            case 4128:
            case 4129:
            case 4131:
            case 4132:
            case 4133:
            case 4134:
            case 4135:
            case 4628:
            case 8201:
            case 8202:
            case 53248:
                HEAP32[pValues >> 2] = val;
                break;
            case 4100:
            case 4101:
            case 4102:
                HEAP32[pValues >> 2] = val[0];
                HEAP32[pValues + 4 >> 2] = val[1];
                HEAP32[pValues + 8 >> 2] = val[2];
                break;
            default:
                AL.currentCtx.err = 40962;
                return
            }
        }
        Module["_alGetSourceiv"] = _alGetSourceiv;
        _alGetSourceiv.sig = "viii";
        function _alGetString(param) {
            if (AL.stringCache[param]) {
                return AL.stringCache[param]
            }
            var ret;
            switch (param) {
            case 0:
                ret = "No Error";
                break;
            case 40961:
                ret = "Invalid Name";
                break;
            case 40962:
                ret = "Invalid Enum";
                break;
            case 40963:
                ret = "Invalid Value";
                break;
            case 40964:
                ret = "Invalid Operation";
                break;
            case 40965:
                ret = "Out of Memory";
                break;
            case 45057:
                ret = "Emscripten";
                break;
            case 45058:
                ret = "1.1";
                break;
            case 45059:
                ret = "WebAudio";
                break;
            case 45060:
                ret = "";
                for (var ext in AL.AL_EXTENSIONS) {
                    ret = ret.concat(ext);
                    ret = ret.concat(" ")
                }
                ret = ret.trim();
                break;
            default:
                if (AL.currentCtx) {
                    AL.currentCtx.err = 40962
                } else {}
                return 0
            }
            ret = allocateUTF8(ret);
            AL.stringCache[param] = ret;
            return ret
        }
        Module["_alGetString"] = _alGetString;
        _alGetString.sig = "ii";
        function _alIsBuffer(bufferId) {
            if (!AL.currentCtx) {
                return false
            }
            if (bufferId > AL.buffers.length) {
                return false
            }
            if (!AL.buffers[bufferId]) {
                return false
            }
            return true
        }
        Module["_alIsBuffer"] = _alIsBuffer;
        _alIsBuffer.sig = "ii";
        function _alIsEnabled(param) {
            if (!AL.currentCtx) {
                return 0
            }
            switch (param) {
            case "AL_SOURCE_DISTANCE_MODEL":
                return AL.currentCtx.sourceDistanceModel ? 0 : 1;
            default:
                AL.currentCtx.err = 40962;
                return 0
            }
        }
        Module["_alIsEnabled"] = _alIsEnabled;
        _alIsEnabled.sig = "ii";
        function _alIsExtensionPresent(pExtName) {
            var name = UTF8ToString(pExtName);
            return AL.AL_EXTENSIONS[name] ? 1 : 0
        }
        Module["_alIsExtensionPresent"] = _alIsExtensionPresent;
        _alIsExtensionPresent.sig = "ii";
        function _alIsSource(sourceId) {
            if (!AL.currentCtx) {
                return false
            }
            if (!AL.currentCtx.sources[sourceId]) {
                return false
            }
            return true
        }
        Module["_alIsSource"] = _alIsSource;
        _alIsSource.sig = "ii";
        function _alListener3f(param, value0, value1, value2) {
            switch (param) {
            case 4100:
            case 4102:
                AL.paramArray[0] = value0;
                AL.paramArray[1] = value1;
                AL.paramArray[2] = value2;
                AL.setListenerParam("alListener3f", param, AL.paramArray);
                break;
            default:
                AL.setListenerParam("alListener3f", param, null);
                break
            }
        }
        Module["_alListener3f"] = _alListener3f;
        _alListener3f.sig = "vifff";
        function _alListener3i(param, value0, value1, value2) {
            switch (param) {
            case 4100:
            case 4102:
                AL.paramArray[0] = value0;
                AL.paramArray[1] = value1;
                AL.paramArray[2] = value2;
                AL.setListenerParam("alListener3i", param, AL.paramArray);
                break;
            default:
                AL.setListenerParam("alListener3i", param, null);
                break
            }
        }
        Module["_alListener3i"] = _alListener3i;
        _alListener3i.sig = "viiii";
        function _alListenerf(param, value) {
            switch (param) {
            case 4106:
                AL.setListenerParam("alListenerf", param, value);
                break;
            default:
                AL.setListenerParam("alListenerf", param, null);
                break
            }
        }
        Module["_alListenerf"] = _alListenerf;
        _alListenerf.sig = "vif";
        function _alListenerfv(param, pValues) {
            if (!AL.currentCtx) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4100:
            case 4102:
                AL.paramArray[0] = HEAPF32[pValues >> 2];
                AL.paramArray[1] = HEAPF32[pValues + 4 >> 2];
                AL.paramArray[2] = HEAPF32[pValues + 8 >> 2];
                AL.setListenerParam("alListenerfv", param, AL.paramArray);
                break;
            case 4111:
                AL.paramArray[0] = HEAPF32[pValues >> 2];
                AL.paramArray[1] = HEAPF32[pValues + 4 >> 2];
                AL.paramArray[2] = HEAPF32[pValues + 8 >> 2];
                AL.paramArray[3] = HEAPF32[pValues + 12 >> 2];
                AL.paramArray[4] = HEAPF32[pValues + 16 >> 2];
                AL.paramArray[5] = HEAPF32[pValues + 20 >> 2];
                AL.setListenerParam("alListenerfv", param, AL.paramArray);
                break;
            default:
                AL.setListenerParam("alListenerfv", param, null);
                break
            }
        }
        Module["_alListenerfv"] = _alListenerfv;
        _alListenerfv.sig = "vii";
        function _alListeneri(param, value) {
            AL.setListenerParam("alListeneri", param, null)
        }
        Module["_alListeneri"] = _alListeneri;
        _alListeneri.sig = "vii";
        function _alListeneriv(param, pValues) {
            if (!AL.currentCtx) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4100:
            case 4102:
                AL.paramArray[0] = HEAP32[pValues >> 2];
                AL.paramArray[1] = HEAP32[pValues + 4 >> 2];
                AL.paramArray[2] = HEAP32[pValues + 8 >> 2];
                AL.setListenerParam("alListeneriv", param, AL.paramArray);
                break;
            case 4111:
                AL.paramArray[0] = HEAP32[pValues >> 2];
                AL.paramArray[1] = HEAP32[pValues + 4 >> 2];
                AL.paramArray[2] = HEAP32[pValues + 8 >> 2];
                AL.paramArray[3] = HEAP32[pValues + 12 >> 2];
                AL.paramArray[4] = HEAP32[pValues + 16 >> 2];
                AL.paramArray[5] = HEAP32[pValues + 20 >> 2];
                AL.setListenerParam("alListeneriv", param, AL.paramArray);
                break;
            default:
                AL.setListenerParam("alListeneriv", param, null);
                break
            }
        }
        Module["_alListeneriv"] = _alListeneriv;
        _alListeneriv.sig = "vii";
        function _alSource3f(sourceId, param, value0, value1, value2) {
            switch (param) {
            case 4100:
            case 4101:
            case 4102:
                AL.paramArray[0] = value0;
                AL.paramArray[1] = value1;
                AL.paramArray[2] = value2;
                AL.setSourceParam("alSource3f", sourceId, param, AL.paramArray);
                break;
            default:
                AL.setSourceParam("alSource3f", sourceId, param, null);
                break
            }
        }
        Module["_alSource3f"] = _alSource3f;
        _alSource3f.sig = "viifff";
        function _alSource3i(sourceId, param, value0, value1, value2) {
            switch (param) {
            case 4100:
            case 4101:
            case 4102:
                AL.paramArray[0] = value0;
                AL.paramArray[1] = value1;
                AL.paramArray[2] = value2;
                AL.setSourceParam("alSource3i", sourceId, param, AL.paramArray);
                break;
            default:
                AL.setSourceParam("alSource3i", sourceId, param, null);
                break
            }
        }
        Module["_alSource3i"] = _alSource3i;
        _alSource3i.sig = "viiiii";
        function _alSourcePause(sourceId) {
            if (!AL.currentCtx) {
                return
            }
            var src = AL.currentCtx.sources[sourceId];
            if (!src) {
                AL.currentCtx.err = 40961;
                return
            }
            AL.setSourceState(src, 4115)
        }
        Module["_alSourcePause"] = _alSourcePause;
        _alSourcePause.sig = "vi";
        function _alSourcePausev(count, pSourceIds) {
            if (!AL.currentCtx) {
                return
            }
            if (!pSourceIds) {
                AL.currentCtx.err = 40963
            }
            for (var i = 0; i < count; ++i) {
                if (!AL.currentCtx.sources[HEAP32[pSourceIds + i * 4 >> 2]]) {
                    AL.currentCtx.err = 40961;
                    return
                }
            }
            for (var i = 0; i < count; ++i) {
                var srcId = HEAP32[pSourceIds + i * 4 >> 2];
                AL.setSourceState(AL.currentCtx.sources[srcId], 4115)
            }
        }
        Module["_alSourcePausev"] = _alSourcePausev;
        _alSourcePausev.sig = "vii";
        function _alSourcePlay(sourceId) {
            if (!AL.currentCtx) {
                return
            }
            var src = AL.currentCtx.sources[sourceId];
            if (!src) {
                AL.currentCtx.err = 40961;
                return
            }
            AL.setSourceState(src, 4114)
        }
        Module["_alSourcePlay"] = _alSourcePlay;
        _alSourcePlay.sig = "vi";
        function _alSourcePlayv(count, pSourceIds) {
            if (!AL.currentCtx) {
                return
            }
            if (!pSourceIds) {
                AL.currentCtx.err = 40963
            }
            for (var i = 0; i < count; ++i) {
                if (!AL.currentCtx.sources[HEAP32[pSourceIds + i * 4 >> 2]]) {
                    AL.currentCtx.err = 40961;
                    return
                }
            }
            for (var i = 0; i < count; ++i) {
                var srcId = HEAP32[pSourceIds + i * 4 >> 2];
                AL.setSourceState(AL.currentCtx.sources[srcId], 4114)
            }
        }
        Module["_alSourcePlayv"] = _alSourcePlayv;
        _alSourcePlayv.sig = "vii";
        function _alSourceQueueBuffers(sourceId, count, pBufferIds) {
            if (!AL.currentCtx) {
                return
            }
            var src = AL.currentCtx.sources[sourceId];
            if (!src) {
                AL.currentCtx.err = 40961;
                return
            }
            if (src.type === 4136) {
                AL.currentCtx.err = 40964;
                return
            }
            if (count === 0) {
                return
            }
            var templateBuf = AL.buffers[0];
            for (var i = 0; i < src.bufQueue.length; i++) {
                if (src.bufQueue[i].id !== 0) {
                    templateBuf = src.bufQueue[i];
                    break
                }
            }
            for (var i = 0; i < count; ++i) {
                var bufId = HEAP32[pBufferIds + i * 4 >> 2];
                var buf = AL.buffers[bufId];
                if (!buf) {
                    AL.currentCtx.err = 40961;
                    return
                }
                if (templateBuf.id !== 0 && (buf.frequency !== templateBuf.frequency || buf.bytesPerSample !== templateBuf.bytesPerSample || buf.channels !== templateBuf.channels)) {
                    AL.currentCtx.err = 40964
                }
            }
            if (src.bufQueue.length === 1 && src.bufQueue[0].id === 0) {
                src.bufQueue.length = 0
            }
            src.type = 4137;
            for (var i = 0; i < count; ++i) {
                var bufId = HEAP32[pBufferIds + i * 4 >> 2];
                var buf = AL.buffers[bufId];
                buf.refCount++;
                src.bufQueue.push(buf)
            }
            if (src.looping) {
                AL.cancelPendingSourceAudio(src)
            }
            AL.initSourcePanner(src);
            AL.scheduleSourceAudio(src)
        }
        Module["_alSourceQueueBuffers"] = _alSourceQueueBuffers;
        _alSourceQueueBuffers.sig = "viii";
        function _alSourceRewind(sourceId) {
            if (!AL.currentCtx) {
                return
            }
            var src = AL.currentCtx.sources[sourceId];
            if (!src) {
                AL.currentCtx.err = 40961;
                return
            }
            AL.setSourceState(src, 4116);
            AL.setSourceState(src, 4113)
        }
        Module["_alSourceRewind"] = _alSourceRewind;
        _alSourceRewind.sig = "vi";
        function _alSourceRewindv(count, pSourceIds) {
            if (!AL.currentCtx) {
                return
            }
            if (!pSourceIds) {
                AL.currentCtx.err = 40963
            }
            for (var i = 0; i < count; ++i) {
                if (!AL.currentCtx.sources[HEAP32[pSourceIds + i * 4 >> 2]]) {
                    AL.currentCtx.err = 40961;
                    return
                }
            }
            for (var i = 0; i < count; ++i) {
                var srcId = HEAP32[pSourceIds + i * 4 >> 2];
                AL.setSourceState(AL.currentCtx.sources[srcId], 4113)
            }
        }
        Module["_alSourceRewindv"] = _alSourceRewindv;
        _alSourceRewindv.sig = "vii";
        function _alSourceStop(sourceId) {
            if (!AL.currentCtx) {
                return
            }
            var src = AL.currentCtx.sources[sourceId];
            if (!src) {
                AL.currentCtx.err = 40961;
                return
            }
            AL.setSourceState(src, 4116)
        }
        Module["_alSourceStop"] = _alSourceStop;
        _alSourceStop.sig = "vi";
        function _alSourceStopv(count, pSourceIds) {
            if (!AL.currentCtx) {
                return
            }
            if (!pSourceIds) {
                AL.currentCtx.err = 40963
            }
            for (var i = 0; i < count; ++i) {
                if (!AL.currentCtx.sources[HEAP32[pSourceIds + i * 4 >> 2]]) {
                    AL.currentCtx.err = 40961;
                    return
                }
            }
            for (var i = 0; i < count; ++i) {
                var srcId = HEAP32[pSourceIds + i * 4 >> 2];
                AL.setSourceState(AL.currentCtx.sources[srcId], 4116)
            }
        }
        Module["_alSourceStopv"] = _alSourceStopv;
        _alSourceStopv.sig = "vii";
        function _alSourceUnqueueBuffers(sourceId, count, pBufferIds) {
            if (!AL.currentCtx) {
                return
            }
            var src = AL.currentCtx.sources[sourceId];
            if (!src) {
                AL.currentCtx.err = 40961;
                return
            }
            if (count > (src.bufQueue.length === 1 && src.bufQueue[0].id === 0 ? 0 : src.bufsProcessed)) {
                AL.currentCtx.err = 40963;
                return
            }
            if (count === 0) {
                return
            }
            for (var i = 0; i < count; i++) {
                var buf = src.bufQueue.shift();
                buf.refCount--;
                HEAP32[pBufferIds + i * 4 >> 2] = buf.id;
                src.bufsProcessed--
            }
            if (src.bufQueue.length === 0) {
                src.bufQueue.push(AL.buffers[0])
            }
            AL.initSourcePanner(src);
            AL.scheduleSourceAudio(src)
        }
        Module["_alSourceUnqueueBuffers"] = _alSourceUnqueueBuffers;
        _alSourceUnqueueBuffers.sig = "viii";
        function _alSourcef(sourceId, param, value) {
            switch (param) {
            case 4097:
            case 4098:
            case 4099:
            case 4106:
            case 4109:
            case 4110:
            case 4128:
            case 4129:
            case 4130:
            case 4131:
            case 4132:
            case 4133:
            case 4134:
            case 8203:
                AL.setSourceParam("alSourcef", sourceId, param, value);
                break;
            default:
                AL.setSourceParam("alSourcef", sourceId, param, null);
                break
            }
        }
        Module["_alSourcef"] = _alSourcef;
        _alSourcef.sig = "viif";
        function _alSourcefv(sourceId, param, pValues) {
            if (!AL.currentCtx) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 4097:
            case 4098:
            case 4099:
            case 4106:
            case 4109:
            case 4110:
            case 4128:
            case 4129:
            case 4130:
            case 4131:
            case 4132:
            case 4133:
            case 4134:
            case 8203:
                var val = HEAPF32[pValues >> 2];
                AL.setSourceParam("alSourcefv", sourceId, param, val);
                break;
            case 4100:
            case 4101:
            case 4102:
                AL.paramArray[0] = HEAPF32[pValues >> 2];
                AL.paramArray[1] = HEAPF32[pValues + 4 >> 2];
                AL.paramArray[2] = HEAPF32[pValues + 8 >> 2];
                AL.setSourceParam("alSourcefv", sourceId, param, AL.paramArray);
                break;
            default:
                AL.setSourceParam("alSourcefv", sourceId, param, null);
                break
            }
        }
        Module["_alSourcefv"] = _alSourcefv;
        _alSourcefv.sig = "viii";
        function _alSourceiv(sourceId, param, pValues) {
            if (!AL.currentCtx) {
                return
            }
            if (!pValues) {
                AL.currentCtx.err = 40963;
                return
            }
            switch (param) {
            case 514:
            case 4097:
            case 4098:
            case 4103:
            case 4105:
            case 4128:
            case 4129:
            case 4131:
            case 4132:
            case 4133:
            case 4134:
            case 4628:
            case 8201:
            case 8202:
            case 53248:
                var val = HEAP32[pValues >> 2];
                AL.setSourceParam("alSourceiv", sourceId, param, val);
                break;
            case 4100:
            case 4101:
            case 4102:
                AL.paramArray[0] = HEAP32[pValues >> 2];
                AL.paramArray[1] = HEAP32[pValues + 4 >> 2];
                AL.paramArray[2] = HEAP32[pValues + 8 >> 2];
                AL.setSourceParam("alSourceiv", sourceId, param, AL.paramArray);
                break;
            default:
                AL.setSourceParam("alSourceiv", sourceId, param, null);
                break
            }
        }
        Module["_alSourceiv"] = _alSourceiv;
        _alSourceiv.sig = "viii";
        function _alSpeedOfSound(value) {
            AL.setGlobalParam("alSpeedOfSound", 49155, value)
        }
        Module["_alSpeedOfSound"] = _alSpeedOfSound;
        _alSpeedOfSound.sig = "vi";
        function _alarm(seconds) {
            setTimeout(function() {
                callUserCallback(function() {
                    _raise(14)
                })
            }, seconds * 1e3)
        }
        Module["_alarm"] = _alarm;
        function _alcCaptureCloseDevice(deviceId) {
            var c = AL.requireValidCaptureDevice(deviceId, "alcCaptureCloseDevice");
            if (!c)
                return false;
            delete AL.captures[deviceId];
            AL.freeIds.push(deviceId);
            if (c.mediaStreamSourceNode)
                c.mediaStreamSourceNode.disconnect();
            if (c.mergerNode)
                c.mergerNode.disconnect();
            if (c.splitterNode)
                c.splitterNode.disconnect();
            if (c.scriptProcessorNode)
                c.scriptProcessorNode.disconnect();
            if (c.mediaStream) {
                c.mediaStream.getTracks().forEach(function(track) {
                    track.stop()
                })
            }
            delete c.buffers;
            c.capturedFrameCount = 0;
            c.isCapturing = false;
            return true
        }
        Module["_alcCaptureCloseDevice"] = _alcCaptureCloseDevice;
        _alcCaptureCloseDevice.sig = "ii";
        function listenOnce(object, event, func) {
            object.addEventListener(event, func, {
                "once": true
            })
        }
        Module["listenOnce"] = listenOnce;
        function autoResumeAudioContext(ctx, elements) {
            if (!elements) {
                elements = [document, document.getElementById("canvas")]
            }
            ["keydown", "mousedown", "touchstart"].forEach(function(event) {
                elements.forEach(function(element) {
                    if (element) {
                        listenOnce(element, event, ()=>{
                            if (ctx.state === "suspended")
                                ctx.resume()
                        }
                        )
                    }
                })
            })
        }
        Module["autoResumeAudioContext"] = autoResumeAudioContext;
        function _alcCaptureOpenDevice(pDeviceName, requestedSampleRate, format, bufferFrameCapacity) {
            var resolvedDeviceName = AL.CAPTURE_DEVICE_NAME;
            if (pDeviceName !== 0) {
                resolvedDeviceName = UTF8ToString(pDeviceName);
                if (resolvedDeviceName !== AL.CAPTURE_DEVICE_NAME) {
                    AL.alcErr = 40965;
                    return 0
                }
            }
            if (bufferFrameCapacity < 0) {
                AL.alcErr = 40964;
                return 0
            }
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
            var has_getUserMedia = navigator.getUserMedia || navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
            if (!has_getUserMedia) {
                AL.alcErr = 40965;
                return 0
            }
            var AudioContext = window.AudioContext || window.webkitAudioContext;
            if (!AL.sharedCaptureAudioCtx) {
                try {
                    AL.sharedCaptureAudioCtx = new AudioContext
                } catch (e) {
                    AL.alcErr = 40965;
                    return 0
                }
            }
            autoResumeAudioContext(AL.sharedCaptureAudioCtx);
            var outputChannelCount;
            switch (format) {
            case 65552:
            case 4353:
            case 4352:
                outputChannelCount = 1;
                break;
            case 65553:
            case 4355:
            case 4354:
                outputChannelCount = 2;
                break;
            default:
                AL.alcErr = 40964;
                return 0
            }
            function newF32Array(cap) {
                return new Float32Array(cap)
            }
            function newI16Array(cap) {
                return new Int16Array(cap)
            }
            function newU8Array(cap) {
                return new Uint8Array(cap)
            }
            var requestedSampleType;
            var newSampleArray;
            switch (format) {
            case 65552:
            case 65553:
                requestedSampleType = "f32";
                newSampleArray = newF32Array;
                break;
            case 4353:
            case 4355:
                requestedSampleType = "i16";
                newSampleArray = newI16Array;
                break;
            case 4352:
            case 4354:
                requestedSampleType = "u8";
                newSampleArray = newU8Array;
                break
            }
            var buffers = [];
            try {
                for (var chan = 0; chan < outputChannelCount; ++chan) {
                    buffers[chan] = newSampleArray(bufferFrameCapacity)
                }
            } catch (e) {
                AL.alcErr = 40965;
                return 0
            }
            var newCapture = {
                audioCtx: AL.sharedCaptureAudioCtx,
                deviceName: resolvedDeviceName,
                requestedSampleRate: requestedSampleRate,
                requestedSampleType: requestedSampleType,
                outputChannelCount: outputChannelCount,
                inputChannelCount: null,
                mediaStreamError: null,
                mediaStreamSourceNode: null,
                mediaStream: null,
                mergerNode: null,
                splitterNode: null,
                scriptProcessorNode: null,
                isCapturing: false,
                buffers: buffers,
                get bufferFrameCapacity() {
                    return buffers[0].length
                },
                capturePlayhead: 0,
                captureReadhead: 0,
                capturedFrameCount: 0
            };
            var onError = function(mediaStreamError) {
                newCapture.mediaStreamError = mediaStreamError
            };
            var onSuccess = function(mediaStream) {
                newCapture.mediaStreamSourceNode = newCapture.audioCtx.createMediaStreamSource(mediaStream);
                newCapture.mediaStream = mediaStream;
                var inputChannelCount = 1;
                switch (newCapture.mediaStreamSourceNode.channelCountMode) {
                case "max":
                    inputChannelCount = outputChannelCount;
                    break;
                case "clamped-max":
                    inputChannelCount = Math.min(outputChannelCount, newCapture.mediaStreamSourceNode.channelCount);
                    break;
                case "explicit":
                    inputChannelCount = newCapture.mediaStreamSourceNode.channelCount;
                    break
                }
                newCapture.inputChannelCount = inputChannelCount;
                var processorFrameCount = 512;
                newCapture.scriptProcessorNode = newCapture.audioCtx.createScriptProcessor(processorFrameCount, inputChannelCount, outputChannelCount);
                if (inputChannelCount > outputChannelCount) {
                    newCapture.mergerNode = newCapture.audioCtx.createChannelMerger(inputChannelCount);
                    newCapture.mediaStreamSourceNode.connect(newCapture.mergerNode);
                    newCapture.mergerNode.connect(newCapture.scriptProcessorNode)
                } else if (inputChannelCount < outputChannelCount) {
                    newCapture.splitterNode = newCapture.audioCtx.createChannelSplitter(outputChannelCount);
                    newCapture.mediaStreamSourceNode.connect(newCapture.splitterNode);
                    newCapture.splitterNode.connect(newCapture.scriptProcessorNode)
                } else {
                    newCapture.mediaStreamSourceNode.connect(newCapture.scriptProcessorNode)
                }
                newCapture.scriptProcessorNode.connect(newCapture.audioCtx.destination);
                newCapture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {
                    if (!newCapture.isCapturing) {
                        return
                    }
                    var c = newCapture;
                    var srcBuf = audioProcessingEvent.inputBuffer;
                    switch (format) {
                    case 65552:
                        var channel0 = srcBuf.getChannelData(0);
                        for (var i = 0; i < srcBuf.length; ++i) {
                            var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
                            c.buffers[0][wi] = channel0[i]
                        }
                        break;
                    case 65553:
                        var channel0 = srcBuf.getChannelData(0);
                        var channel1 = srcBuf.getChannelData(1);
                        for (var i = 0; i < srcBuf.length; ++i) {
                            var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
                            c.buffers[0][wi] = channel0[i];
                            c.buffers[1][wi] = channel1[i]
                        }
                        break;
                    case 4353:
                        var channel0 = srcBuf.getChannelData(0);
                        for (var i = 0; i < srcBuf.length; ++i) {
                            var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
                            c.buffers[0][wi] = channel0[i] * 32767
                        }
                        break;
                    case 4355:
                        var channel0 = srcBuf.getChannelData(0);
                        var channel1 = srcBuf.getChannelData(1);
                        for (var i = 0; i < srcBuf.length; ++i) {
                            var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
                            c.buffers[0][wi] = channel0[i] * 32767;
                            c.buffers[1][wi] = channel1[i] * 32767
                        }
                        break;
                    case 4352:
                        var channel0 = srcBuf.getChannelData(0);
                        for (var i = 0; i < srcBuf.length; ++i) {
                            var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
                            c.buffers[0][wi] = (channel0[i] + 1) * 127
                        }
                        break;
                    case 4354:
                        var channel0 = srcBuf.getChannelData(0);
                        var channel1 = srcBuf.getChannelData(1);
                        for (var i = 0; i < srcBuf.length; ++i) {
                            var wi = (c.capturePlayhead + i) % c.bufferFrameCapacity;
                            c.buffers[0][wi] = (channel0[i] + 1) * 127;
                            c.buffers[1][wi] = (channel1[i] + 1) * 127
                        }
                        break
                    }
                    c.capturePlayhead += srcBuf.length;
                    c.capturePlayhead %= c.bufferFrameCapacity;
                    c.capturedFrameCount += srcBuf.length;
                    c.capturedFrameCount = Math.min(c.capturedFrameCount, c.bufferFrameCapacity)
                }
            };
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({
                    audio: true
                }).then(onSuccess).catch(onError)
            } else {
                navigator.getUserMedia({
                    audio: true
                }, onSuccess, onError)
            }
            var id = AL.newId();
            AL.captures[id] = newCapture;
            return id
        }
        Module["_alcCaptureOpenDevice"] = _alcCaptureOpenDevice;
        _alcCaptureOpenDevice.sig = "iiiii";
        function _alcCaptureSamples(deviceId, pFrames, requestedFrameCount) {
            var c = AL.requireValidCaptureDevice(deviceId, "alcCaptureSamples");
            if (!c)
                return;
            var dstfreq = c.requestedSampleRate;
            var srcfreq = c.audioCtx.sampleRate;
            var fratio = srcfreq / dstfreq;
            if (requestedFrameCount < 0 || requestedFrameCount > c.capturedFrameCount / fratio) {
                err("alcCaptureSamples() with invalid bufferSize");
                AL.alcErr = 40964;
                return
            }
            function setF32Sample(i, sample) {
                HEAPF32[pFrames + 4 * i >> 2] = sample
            }
            function setI16Sample(i, sample) {
                HEAP16[pFrames + 2 * i >> 1] = sample
            }
            function setU8Sample(i, sample) {
                HEAP8[pFrames + i >> 0] = sample
            }
            var setSample;
            switch (c.requestedSampleType) {
            case "f32":
                setSample = setF32Sample;
                break;
            case "i16":
                setSample = setI16Sample;
                break;
            case "u8":
                setSample = setU8Sample;
                break;
            default:
                return
            }
            if (Math.floor(fratio) == fratio) {
                for (var i = 0, frame_i = 0; frame_i < requestedFrameCount; ++frame_i) {
                    for (var chan = 0; chan < c.buffers.length; ++chan,
                    ++i) {
                        setSample(i, c.buffers[chan][c.captureReadhead])
                    }
                    c.captureReadhead = (fratio + c.captureReadhead) % c.bufferFrameCapacity
                }
            } else {
                for (var i = 0, frame_i = 0; frame_i < requestedFrameCount; ++frame_i) {
                    var lefti = Math.floor(c.captureReadhead);
                    var righti = Math.ceil(c.captureReadhead);
                    var d = c.captureReadhead - lefti;
                    for (var chan = 0; chan < c.buffers.length; ++chan,
                    ++i) {
                        var lefts = c.buffers[chan][lefti];
                        var rights = c.buffers[chan][righti];
                        setSample(i, (1 - d) * lefts + d * rights)
                    }
                    c.captureReadhead = (c.captureReadhead + fratio) % c.bufferFrameCapacity
                }
            }
            c.capturedFrameCount = 0
        }
        Module["_alcCaptureSamples"] = _alcCaptureSamples;
        _alcCaptureSamples.sig = "viii";
        function _alcCaptureStart(deviceId) {
            var c = AL.requireValidCaptureDevice(deviceId, "alcCaptureStart");
            if (!c)
                return;
            if (c.isCapturing) {
                return
            }
            c.isCapturing = true;
            c.capturedFrameCount = 0;
            c.capturePlayhead = 0
        }
        Module["_alcCaptureStart"] = _alcCaptureStart;
        _alcCaptureStart.sig = "vi";
        function _alcCaptureStop(deviceId) {
            var c = AL.requireValidCaptureDevice(deviceId, "alcCaptureStop");
            if (!c)
                return;
            c.isCapturing = false
        }
        Module["_alcCaptureStop"] = _alcCaptureStop;
        _alcCaptureStop.sig = "vi";
        function _alcCloseDevice(deviceId) {
            if (!(deviceId in AL.deviceRefCounts) || AL.deviceRefCounts[deviceId] > 0) {
                return 0
            }
            delete AL.deviceRefCounts[deviceId];
            AL.freeIds.push(deviceId);
            return 1
        }
        Module["_alcCloseDevice"] = _alcCloseDevice;
        _alcCloseDevice.sig = "ii";
        function _alcCreateContext(deviceId, pAttrList) {
            if (!(deviceId in AL.deviceRefCounts)) {
                AL.alcErr = 40961;
                return 0
            }
            var options = null;
            var attrs = [];
            var hrtf = null;
            pAttrList >>= 2;
            if (pAttrList) {
                var attr = 0;
                var val = 0;
                while (true) {
                    attr = HEAP32[pAttrList++];
                    attrs.push(attr);
                    if (attr === 0) {
                        break
                    }
                    val = HEAP32[pAttrList++];
                    attrs.push(val);
                    switch (attr) {
                    case 4103:
                        if (!options) {
                            options = {}
                        }
                        options.sampleRate = val;
                        break;
                    case 4112:
                    case 4113:
                        break;
                    case 6546:
                        switch (val) {
                        case 0:
                            hrtf = false;
                            break;
                        case 1:
                            hrtf = true;
                            break;
                        case 2:
                            break;
                        default:
                            AL.alcErr = 40964;
                            return 0
                        }
                        break;
                    case 6550:
                        if (val !== 0) {
                            AL.alcErr = 40964;
                            return 0
                        }
                        break;
                    default:
                        AL.alcErr = 40964;
                        return 0
                    }
                }
            }
            var AudioContext = window.AudioContext || window.webkitAudioContext;
            var ac = null;
            try {
                if (options) {
                    ac = new AudioContext(options)
                } else {
                    ac = new AudioContext
                }
            } catch (e) {
                if (e.name === "NotSupportedError") {
                    AL.alcErr = 40964
                } else {
                    AL.alcErr = 40961
                }
                return 0
            }
            autoResumeAudioContext(ac);
            if (typeof ac.createGain == "undefined") {
                ac.createGain = ac.createGainNode
            }
            var gain = ac.createGain();
            gain.connect(ac.destination);
            var ctx = {
                deviceId: deviceId,
                id: AL.newId(),
                attrs: attrs,
                audioCtx: ac,
                listener: {
                    position: [0, 0, 0],
                    velocity: [0, 0, 0],
                    direction: [0, 0, 0],
                    up: [0, 0, 0]
                },
                sources: [],
                interval: setInterval(function() {
                    AL.scheduleContextAudio(ctx)
                }, AL.QUEUE_INTERVAL),
                gain: gain,
                distanceModel: 53250,
                speedOfSound: 343.3,
                dopplerFactor: 1,
                sourceDistanceModel: false,
                hrtf: hrtf || false,
                _err: 0,
                get err() {
                    return this._err
                },
                set err(val) {
                    if (this._err === 0 || val === 0) {
                        this._err = val
                    }
                }
            };
            AL.deviceRefCounts[deviceId]++;
            AL.contexts[ctx.id] = ctx;
            if (hrtf !== null) {
                for (var ctxId in AL.contexts) {
                    var c = AL.contexts[ctxId];
                    if (c.deviceId === deviceId) {
                        c.hrtf = hrtf;
                        AL.updateContextGlobal(c)
                    }
                }
            }
            return ctx.id
        }
        Module["_alcCreateContext"] = _alcCreateContext;
        _alcCreateContext.sig = "iii";
        function _alcDestroyContext(contextId) {
            var ctx = AL.contexts[contextId];
            if (AL.currentCtx === ctx) {
                AL.alcErr = 40962;
                return
            }
            if (AL.contexts[contextId].interval) {
                clearInterval(AL.contexts[contextId].interval)
            }
            AL.deviceRefCounts[ctx.deviceId]--;
            delete AL.contexts[contextId];
            AL.freeIds.push(contextId)
        }
        Module["_alcDestroyContext"] = _alcDestroyContext;
        _alcDestroyContext.sig = "vi";
        function _alcGetContextsDevice(contextId) {
            if (contextId in AL.contexts) {
                return AL.contexts[contextId].deviceId
            }
            return 0
        }
        Module["_alcGetContextsDevice"] = _alcGetContextsDevice;
        _alcGetContextsDevice.sig = "ii";
        function _alcGetCurrentContext() {
            if (AL.currentCtx !== null) {
                return AL.currentCtx.id
            }
            return 0
        }
        Module["_alcGetCurrentContext"] = _alcGetCurrentContext;
        _alcGetCurrentContext.sig = "i";
        function _alcGetEnumValue(deviceId, pEnumName) {
            if (deviceId !== 0 && !(deviceId in AL.deviceRefCounts)) {
                return 0
            } else if (!pEnumName) {
                AL.alcErr = 40964;
                return 0
            }
            var name = UTF8ToString(pEnumName);
            switch (name) {
            case "ALC_NO_ERROR":
                return 0;
            case "ALC_INVALID_DEVICE":
                return 40961;
            case "ALC_INVALID_CONTEXT":
                return 40962;
            case "ALC_INVALID_ENUM":
                return 40963;
            case "ALC_INVALID_VALUE":
                return 40964;
            case "ALC_OUT_OF_MEMORY":
                return 40965;
            case "ALC_MAJOR_VERSION":
                return 4096;
            case "ALC_MINOR_VERSION":
                return 4097;
            case "ALC_ATTRIBUTES_SIZE":
                return 4098;
            case "ALC_ALL_ATTRIBUTES":
                return 4099;
            case "ALC_DEFAULT_DEVICE_SPECIFIER":
                return 4100;
            case "ALC_DEVICE_SPECIFIER":
                return 4101;
            case "ALC_EXTENSIONS":
                return 4102;
            case "ALC_FREQUENCY":
                return 4103;
            case "ALC_REFRESH":
                return 4104;
            case "ALC_SYNC":
                return 4105;
            case "ALC_MONO_SOURCES":
                return 4112;
            case "ALC_STEREO_SOURCES":
                return 4113;
            case "ALC_CAPTURE_DEVICE_SPECIFIER":
                return 784;
            case "ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER":
                return 785;
            case "ALC_CAPTURE_SAMPLES":
                return 786;
            case "ALC_HRTF_SOFT":
                return 6546;
            case "ALC_HRTF_ID_SOFT":
                return 6550;
            case "ALC_DONT_CARE_SOFT":
                return 2;
            case "ALC_HRTF_STATUS_SOFT":
                return 6547;
            case "ALC_NUM_HRTF_SPECIFIERS_SOFT":
                return 6548;
            case "ALC_HRTF_SPECIFIER_SOFT":
                return 6549;
            case "ALC_HRTF_DISABLED_SOFT":
                return 0;
            case "ALC_HRTF_ENABLED_SOFT":
                return 1;
            case "ALC_HRTF_DENIED_SOFT":
                return 2;
            case "ALC_HRTF_REQUIRED_SOFT":
                return 3;
            case "ALC_HRTF_HEADPHONES_DETECTED_SOFT":
                return 4;
            case "ALC_HRTF_UNSUPPORTED_FORMAT_SOFT":
                return 5;
            default:
                AL.alcErr = 40964;
                return 0
            }
        }
        Module["_alcGetEnumValue"] = _alcGetEnumValue;
        _alcGetEnumValue.sig = "iii";
        function _alcGetError(deviceId) {
            var err = AL.alcErr;
            AL.alcErr = 0;
            return err
        }
        Module["_alcGetError"] = _alcGetError;
        _alcGetError.sig = "ii";
        function _alcGetIntegerv(deviceId, param, size, pValues) {
            if (size === 0 || !pValues) {
                return
            }
            switch (param) {
            case 4096:
                HEAP32[pValues >> 2] = 1;
                break;
            case 4097:
                HEAP32[pValues >> 2] = 1;
                break;
            case 4098:
                if (!(deviceId in AL.deviceRefCounts)) {
                    AL.alcErr = 40961;
                    return
                }
                if (!AL.currentCtx) {
                    AL.alcErr = 40962;
                    return
                }
                HEAP32[pValues >> 2] = AL.currentCtx.attrs.length;
                break;
            case 4099:
                if (!(deviceId in AL.deviceRefCounts)) {
                    AL.alcErr = 40961;
                    return
                }
                if (!AL.currentCtx) {
                    AL.alcErr = 40962;
                    return
                }
                for (var i = 0; i < AL.currentCtx.attrs.length; i++) {
                    HEAP32[pValues + i * 4 >> 2] = AL.currentCtx.attrs[i]
                }
                break;
            case 4103:
                if (!(deviceId in AL.deviceRefCounts)) {
                    AL.alcErr = 40961;
                    return
                }
                if (!AL.currentCtx) {
                    AL.alcErr = 40962;
                    return
                }
                HEAP32[pValues >> 2] = AL.currentCtx.audioCtx.sampleRate;
                break;
            case 4112:
            case 4113:
                if (!(deviceId in AL.deviceRefCounts)) {
                    AL.alcErr = 40961;
                    return
                }
                if (!AL.currentCtx) {
                    AL.alcErr = 40962;
                    return
                }
                HEAP32[pValues >> 2] = 2147483647;
                break;
            case 6546:
            case 6547:
                if (!(deviceId in AL.deviceRefCounts)) {
                    AL.alcErr = 40961;
                    return
                }
                var hrtfStatus = 0;
                for (var ctxId in AL.contexts) {
                    var ctx = AL.contexts[ctxId];
                    if (ctx.deviceId === deviceId) {
                        hrtfStatus = ctx.hrtf ? 1 : 0
                    }
                }
                HEAP32[pValues >> 2] = hrtfStatus;
                break;
            case 6548:
                if (!(deviceId in AL.deviceRefCounts)) {
                    AL.alcErr = 40961;
                    return
                }
                HEAP32[pValues >> 2] = 1;
                break;
            case 131075:
                if (!(deviceId in AL.deviceRefCounts)) {
                    AL.alcErr = 40961;
                    return
                }
                if (!AL.currentCtx) {
                    AL.alcErr = 40962;
                    return
                }
                HEAP32[pValues >> 2] = 1;
            case 786:
                var c = AL.requireValidCaptureDevice(deviceId, "alcGetIntegerv");
                if (!c) {
                    return
                }
                var n = c.capturedFrameCount;
                var dstfreq = c.requestedSampleRate;
                var srcfreq = c.audioCtx.sampleRate;
                var nsamples = Math.floor(n * (dstfreq / srcfreq));
                HEAP32[pValues >> 2] = nsamples;
                break;
            default:
                AL.alcErr = 40963;
                return
            }
        }
        Module["_alcGetIntegerv"] = _alcGetIntegerv;
        _alcGetIntegerv.sig = "viiii";
        function _alcGetString(deviceId, param) {
            if (AL.alcStringCache[param]) {
                return AL.alcStringCache[param]
            }
            var ret;
            switch (param) {
            case 0:
                ret = "No Error";
                break;
            case 40961:
                ret = "Invalid Device";
                break;
            case 40962:
                ret = "Invalid Context";
                break;
            case 40963:
                ret = "Invalid Enum";
                break;
            case 40964:
                ret = "Invalid Value";
                break;
            case 40965:
                ret = "Out of Memory";
                break;
            case 4100:
                if (typeof AudioContext != "undefined" || typeof webkitAudioContext != "undefined") {
                    ret = AL.DEVICE_NAME
                } else {
                    return 0
                }
                break;
            case 4101:
                if (typeof AudioContext != "undefined" || typeof webkitAudioContext != "undefined") {
                    ret = AL.DEVICE_NAME.concat("\0")
                } else {
                    ret = "\0"
                }
                break;
            case 785:
                ret = AL.CAPTURE_DEVICE_NAME;
                break;
            case 784:
                if (deviceId === 0)
                    ret = AL.CAPTURE_DEVICE_NAME.concat("\0");
                else {
                    var c = AL.requireValidCaptureDevice(deviceId, "alcGetString");
                    if (!c) {
                        return 0
                    }
                    ret = c.deviceName
                }
                break;
            case 4102:
                if (!deviceId) {
                    AL.alcErr = 40961;
                    return 0
                }
                ret = "";
                for (var ext in AL.ALC_EXTENSIONS) {
                    ret = ret.concat(ext);
                    ret = ret.concat(" ")
                }
                ret = ret.trim();
                break;
            default:
                AL.alcErr = 40963;
                return 0
            }
            ret = allocateUTF8(ret);
            AL.alcStringCache[param] = ret;
            return ret
        }
        Module["_alcGetString"] = _alcGetString;
        _alcGetString.sig = "iii";
        function _alcIsExtensionPresent(deviceId, pExtName) {
            var name = UTF8ToString(pExtName);
            return AL.ALC_EXTENSIONS[name] ? 1 : 0
        }
        Module["_alcIsExtensionPresent"] = _alcIsExtensionPresent;
        _alcIsExtensionPresent.sig = "iii";
        function _alcMakeContextCurrent(contextId) {
            if (contextId === 0) {
                AL.currentCtx = null
            } else {
                AL.currentCtx = AL.contexts[contextId]
            }
            return 1
        }
        Module["_alcMakeContextCurrent"] = _alcMakeContextCurrent;
        _alcMakeContextCurrent.sig = "ii";
        function _alcOpenDevice(pDeviceName) {
            if (pDeviceName) {
                var name = UTF8ToString(pDeviceName);
                if (name !== AL.DEVICE_NAME) {
                    return 0
                }
            }
            if (typeof AudioContext != "undefined" || typeof webkitAudioContext != "undefined") {
                var deviceId = AL.newId();
                AL.deviceRefCounts[deviceId] = 0;
                return deviceId
            }
            return 0
        }
        Module["_alcOpenDevice"] = _alcOpenDevice;
        _alcOpenDevice.sig = "ii";
        function _alcProcessContext(contextId) {}
        Module["_alcProcessContext"] = _alcProcessContext;
        _alcProcessContext.sig = "vi";
        function _alcSuspendContext(contextId) {}
        Module["_alcSuspendContext"] = _alcSuspendContext;
        _alcSuspendContext.sig = "vi";
        function _emscripten_alcDevicePauseSOFT(deviceId) {
            if (!(deviceId in AL.deviceRefCounts)) {
                AL.alcErr = 40961;
                return
            }
            if (AL.paused) {
                return
            }
            AL.paused = true;
            for (var ctxId in AL.contexts) {
                var ctx = AL.contexts[ctxId];
                if (ctx.deviceId !== deviceId) {
                    continue
                }
                ctx.audioCtx.suspend();
                clearInterval(ctx.interval);
                ctx.interval = null
            }
        }
        Module["_emscripten_alcDevicePauseSOFT"] = _emscripten_alcDevicePauseSOFT;
        _emscripten_alcDevicePauseSOFT.sig = "vi";
        function _emscripten_alcDeviceResumeSOFT(deviceId) {
            if (!(deviceId in AL.deviceRefCounts)) {
                AL.alcErr = 40961;
                return
            }
            if (!AL.paused) {
                return
            }
            AL.paused = false;
            for (var ctxId in AL.contexts) {
                var ctx = AL.contexts[ctxId];
                if (ctx.deviceId !== deviceId) {
                    continue
                }
                ctx.interval = setInterval(function() {
                    AL.scheduleContextAudio(ctx)
                }, AL.QUEUE_INTERVAL);
                ctx.audioCtx.resume()
            }
        }
        Module["_emscripten_alcDeviceResumeSOFT"] = _emscripten_alcDeviceResumeSOFT;
        _emscripten_alcDeviceResumeSOFT.sig = "vi";
        function _emscripten_alcGetStringiSOFT(deviceId, param, index) {
            if (!(deviceId in AL.deviceRefCounts)) {
                AL.alcErr = 40961;
                return 0
            }
            if (AL.alcStringCache[param]) {
                return AL.alcStringCache[param]
            }
            var ret;
            switch (param) {
            case 6549:
                if (index === 0) {
                    ret = "Web Audio HRTF"
                } else {
                    AL.alcErr = 40964;
                    return 0
                }
                break;
            default:
                if (index !== 0) {
                    AL.alcErr = 40963;
                    return 0
                }
                return _alcGetString(deviceId, param)
            }
            ret = allocateUTF8(ret);
            AL.alcStringCache[param] = ret;
            return ret
        }
        Module["_emscripten_alcGetStringiSOFT"] = _emscripten_alcGetStringiSOFT;
        _emscripten_alcGetStringiSOFT.sig = "iiii";
        function _emscripten_alcResetDeviceSOFT(deviceId, pAttrList) {
            if (!(deviceId in AL.deviceRefCounts)) {
                AL.alcErr = 40961;
                return 0
            }
            var hrtf = null;
            pAttrList >>= 2;
            if (pAttrList) {
                var attr = 0;
                var val = 0;
                while (true) {
                    attr = HEAP32[pAttrList++];
                    if (attr === 0) {
                        break
                    }
                    val = HEAP32[pAttrList++];
                    switch (attr) {
                    case 6546:
                        if (val === 1) {
                            hrtf = true
                        } else if (val === 0) {
                            hrtf = false
                        }
                        break
                    }
                }
            }
            if (hrtf !== null) {
                for (var ctxId in AL.contexts) {
                    var ctx = AL.contexts[ctxId];
                    if (ctx.deviceId === deviceId) {
                        ctx.hrtf = hrtf;
                        AL.updateContextGlobal(ctx)
                    }
                }
            }
            return 1
        }
        Module["_emscripten_alcResetDeviceSOFT"] = _emscripten_alcResetDeviceSOFT;
        _emscripten_alcResetDeviceSOFT.sig = "iii";
        var readAsmConstArgsArray = [];
        Module["readAsmConstArgsArray"] = readAsmConstArgsArray;
        function readAsmConstArgs(sigPtr, buf) {
            readAsmConstArgsArray.length = 0;
            var ch;
            buf >>= 2;
            while (ch = HEAPU8[sigPtr++]) {
                buf += ch != 105 & buf;
                readAsmConstArgsArray.push(ch == 105 ? HEAP32[buf] : (ch == 106 ? HEAP64 : HEAPF64)[buf++ >> 1]);
                ++buf
            }
            return readAsmConstArgsArray
        }
        Module["readAsmConstArgs"] = readAsmConstArgs;
        function _emscripten_asm_const_int(code, sigPtr, argbuf) {
            code -= 1024;
            var args = readAsmConstArgs(sigPtr, argbuf);
            return ASM_CONSTS[code].apply(null, args)
        }
        Module["_emscripten_asm_const_int"] = _emscripten_asm_const_int;
        _emscripten_asm_const_int.sig = "ippp";
        function _emscripten_console_error(str) {
            console.error(UTF8ToString(str))
        }
        Module["_emscripten_console_error"] = _emscripten_console_error;
        _emscripten_console_error.sig = "vp";
        function _emscripten_console_log(str) {
            console.log(UTF8ToString(str))
        }
        Module["_emscripten_console_log"] = _emscripten_console_log;
        _emscripten_console_log.sig = "vp";
        function _emscripten_console_warn(str) {
            console.warn(UTF8ToString(str))
        }
        Module["_emscripten_console_warn"] = _emscripten_console_warn;
        _emscripten_console_warn.sig = "vp";
        function _emscripten_date_now() {
            return Date.now()
        }
        Module["_emscripten_date_now"] = _emscripten_date_now;
        _emscripten_date_now.sig = "d";
        function _emscripten_exit_with_live_runtime() {
            throw "unwind"
        }
        Module["_emscripten_exit_with_live_runtime"] = _emscripten_exit_with_live_runtime;
        _emscripten_exit_with_live_runtime.sig = "v";
        function getHeapMax() {
            return 2147483648
        }
        Module["getHeapMax"] = getHeapMax;
        function _emscripten_get_heap_max() {
            return getHeapMax()
        }
        Module["_emscripten_get_heap_max"] = _emscripten_get_heap_max;
        _emscripten_get_heap_max.sig = "p";
        function _emscripten_get_now_res() {
            if (ENVIRONMENT_IS_NODE) {
                return 1
            } else
                return 1e3
        }
        Module["_emscripten_get_now_res"] = _emscripten_get_now_res;
        function __webgl_enable_ANGLE_instanced_arrays(ctx) {
            var ext = ctx.getExtension("ANGLE_instanced_arrays");
            if (ext) {
                ctx["vertexAttribDivisor"] = function(index, divisor) {
                    ext["vertexAttribDivisorANGLE"](index, divisor)
                }
                ;
                ctx["drawArraysInstanced"] = function(mode, first, count, primcount) {
                    ext["drawArraysInstancedANGLE"](mode, first, count, primcount)
                }
                ;
                ctx["drawElementsInstanced"] = function(mode, count, type, indices, primcount) {
                    ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount)
                }
                ;
                return 1
            }
        }
        Module["__webgl_enable_ANGLE_instanced_arrays"] = __webgl_enable_ANGLE_instanced_arrays;
        function __webgl_enable_OES_vertex_array_object(ctx) {
            var ext = ctx.getExtension("OES_vertex_array_object");
            if (ext) {
                ctx["createVertexArray"] = function() {
                    return ext["createVertexArrayOES"]()
                }
                ;
                ctx["deleteVertexArray"] = function(vao) {
                    ext["deleteVertexArrayOES"](vao)
                }
                ;
                ctx["bindVertexArray"] = function(vao) {
                    ext["bindVertexArrayOES"](vao)
                }
                ;
                ctx["isVertexArray"] = function(vao) {
                    return ext["isVertexArrayOES"](vao)
                }
                ;
                return 1
            }
        }
        Module["__webgl_enable_OES_vertex_array_object"] = __webgl_enable_OES_vertex_array_object;
        function __webgl_enable_WEBGL_draw_buffers(ctx) {
            var ext = ctx.getExtension("WEBGL_draw_buffers");
            if (ext) {
                ctx["drawBuffers"] = function(n, bufs) {
                    ext["drawBuffersWEBGL"](n, bufs)
                }
                ;
                return 1
            }
        }
        Module["__webgl_enable_WEBGL_draw_buffers"] = __webgl_enable_WEBGL_draw_buffers;
        function __webgl_enable_WEBGL_multi_draw(ctx) {
            return !!(ctx.multiDrawWebgl = ctx.getExtension("WEBGL_multi_draw"))
        }
        Module["__webgl_enable_WEBGL_multi_draw"] = __webgl_enable_WEBGL_multi_draw;
        var GL = {
            counter: 1,
            buffers: [],
            programs: [],
            framebuffers: [],
            renderbuffers: [],
            textures: [],
            shaders: [],
            vaos: [],
            contexts: [],
            offscreenCanvases: {},
            queries: [],
            stringCache: {},
            unpackAlignment: 4,
            recordError: function recordError(errorCode) {
                if (!GL.lastError) {
                    GL.lastError = errorCode
                }
            },
            getNewId: function(table) {
                var ret = GL.counter++;
                for (var i = table.length; i < ret; i++) {
                    table[i] = null
                }
                return ret
            },
            getSource: function(shader, count, string, length) {
                var source = "";
                for (var i = 0; i < count; ++i) {
                    var len = length ? HEAP32[length + i * 4 >> 2] : -1;
                    source += UTF8ToString(HEAP32[string + i * 4 >> 2], len < 0 ? undefined : len)
                }
                return source
            },
            createContext: function(canvas, webGLContextAttributes) {
                if (!canvas.getContextSafariWebGL2Fixed) {
                    canvas.getContextSafariWebGL2Fixed = canvas.getContext;
                    function fixedGetContext(ver, attrs) {
                        var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
                        return ver == "webgl" == gl instanceof WebGLRenderingContext ? gl : null
                    }
                    canvas.getContext = fixedGetContext
                }
                var ctx = canvas.getContext("webgl", webGLContextAttributes);
                if (!ctx)
                    return 0;
                var handle = GL.registerContext(ctx, webGLContextAttributes);
                return handle
            },
            registerContext: function(ctx, webGLContextAttributes) {
                var handle = GL.getNewId(GL.contexts);
                var context = {
                    handle: handle,
                    attributes: webGLContextAttributes,
                    version: webGLContextAttributes.majorVersion,
                    GLctx: ctx
                };
                if (ctx.canvas)
                    ctx.canvas.GLctxObject = context;
                GL.contexts[handle] = context;
                if (typeof webGLContextAttributes.enableExtensionsByDefault == "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
                    GL.initExtensions(context)
                }
                return handle
            },
            makeContextCurrent: function(contextHandle) {
                GL.currentContext = GL.contexts[contextHandle];
                Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx;
                return !(contextHandle && !GLctx)
            },
            getContext: function(contextHandle) {
                return GL.contexts[contextHandle]
            },
            deleteContext: function(contextHandle) {
                if (GL.currentContext === GL.contexts[contextHandle])
                    GL.currentContext = null;
                if (typeof JSEvents == "object")
                    JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
                if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas)
                    GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
                GL.contexts[contextHandle] = null
            },
            initExtensions: function(context) {
                if (!context)
                    context = GL.currentContext;
                if (context.initExtensionsDone)
                    return;
                context.initExtensionsDone = true;
                var GLctx = context.GLctx;
                __webgl_enable_ANGLE_instanced_arrays(GLctx);
                __webgl_enable_OES_vertex_array_object(GLctx);
                __webgl_enable_WEBGL_draw_buffers(GLctx);
                {
                    GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query")
                }
                __webgl_enable_WEBGL_multi_draw(GLctx);
                var exts = GLctx.getSupportedExtensions() || [];
                exts.forEach(function(ext) {
                    if (!ext.includes("lose_context") && !ext.includes("debug")) {
                        GLctx.getExtension(ext)
                    }
                })
            }
        };
        Module["GL"] = GL;
        function _emscripten_glActiveTexture(x0) {
            GLctx["activeTexture"](x0)
        }
        Module["_emscripten_glActiveTexture"] = _emscripten_glActiveTexture;
        _emscripten_glActiveTexture.sig = "vi";
        function _emscripten_glAttachShader(program, shader) {
            GLctx.attachShader(GL.programs[program], GL.shaders[shader])
        }
        Module["_emscripten_glAttachShader"] = _emscripten_glAttachShader;
        _emscripten_glAttachShader.sig = "vii";
        function _emscripten_glBeginQueryEXT(target, id) {
            GLctx.disjointTimerQueryExt["beginQueryEXT"](target, GL.queries[id])
        }
        Module["_emscripten_glBeginQueryEXT"] = _emscripten_glBeginQueryEXT;
        _emscripten_glBeginQueryEXT.sig = "vii";
        function _emscripten_glBindAttribLocation(program, index, name) {
            GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name))
        }
        Module["_emscripten_glBindAttribLocation"] = _emscripten_glBindAttribLocation;
        _emscripten_glBindAttribLocation.sig = "viii";
        function _emscripten_glBindBuffer(target, buffer) {
            GLctx.bindBuffer(target, GL.buffers[buffer])
        }
        Module["_emscripten_glBindBuffer"] = _emscripten_glBindBuffer;
        _emscripten_glBindBuffer.sig = "vii";
        function _emscripten_glBindFramebuffer(target, framebuffer) {
            GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer])
        }
        Module["_emscripten_glBindFramebuffer"] = _emscripten_glBindFramebuffer;
        _emscripten_glBindFramebuffer.sig = "vii";
        function _emscripten_glBindRenderbuffer(target, renderbuffer) {
            GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer])
        }
        Module["_emscripten_glBindRenderbuffer"] = _emscripten_glBindRenderbuffer;
        _emscripten_glBindRenderbuffer.sig = "vii";
        function _emscripten_glBindTexture(target, texture) {
            GLctx.bindTexture(target, GL.textures[texture])
        }
        Module["_emscripten_glBindTexture"] = _emscripten_glBindTexture;
        _emscripten_glBindTexture.sig = "vii";
        function _emscripten_glBindVertexArrayOES(vao) {
            GLctx["bindVertexArray"](GL.vaos[vao])
        }
        Module["_emscripten_glBindVertexArrayOES"] = _emscripten_glBindVertexArrayOES;
        _emscripten_glBindVertexArrayOES.sig = "vi";
        function _emscripten_glBlendColor(x0, x1, x2, x3) {
            GLctx["blendColor"](x0, x1, x2, x3)
        }
        Module["_emscripten_glBlendColor"] = _emscripten_glBlendColor;
        _emscripten_glBlendColor.sig = "vffff";
        function _emscripten_glBlendEquation(x0) {
            GLctx["blendEquation"](x0)
        }
        Module["_emscripten_glBlendEquation"] = _emscripten_glBlendEquation;
        _emscripten_glBlendEquation.sig = "vi";
        function _emscripten_glBlendEquationSeparate(x0, x1) {
            GLctx["blendEquationSeparate"](x0, x1)
        }
        Module["_emscripten_glBlendEquationSeparate"] = _emscripten_glBlendEquationSeparate;
        _emscripten_glBlendEquationSeparate.sig = "vii";
        function _emscripten_glBlendFunc(x0, x1) {
            GLctx["blendFunc"](x0, x1)
        }
        Module["_emscripten_glBlendFunc"] = _emscripten_glBlendFunc;
        _emscripten_glBlendFunc.sig = "vii";
        function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) {
            GLctx["blendFuncSeparate"](x0, x1, x2, x3)
        }
        Module["_emscripten_glBlendFuncSeparate"] = _emscripten_glBlendFuncSeparate;
        _emscripten_glBlendFuncSeparate.sig = "viiii";
        function _emscripten_glBufferData(target, size, data, usage) {
            GLctx.bufferData(target, data ? HEAPU8.subarray(data, data + size) : size, usage)
        }
        Module["_emscripten_glBufferData"] = _emscripten_glBufferData;
        _emscripten_glBufferData.sig = "viiii";
        function _emscripten_glBufferSubData(target, offset, size, data) {
            GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size))
        }
        Module["_emscripten_glBufferSubData"] = _emscripten_glBufferSubData;
        _emscripten_glBufferSubData.sig = "viiii";
        function _emscripten_glCheckFramebufferStatus(x0) {
            return GLctx["checkFramebufferStatus"](x0)
        }
        Module["_emscripten_glCheckFramebufferStatus"] = _emscripten_glCheckFramebufferStatus;
        _emscripten_glCheckFramebufferStatus.sig = "ii";
        function _emscripten_glClear(x0) {
            GLctx["clear"](x0)
        }
        Module["_emscripten_glClear"] = _emscripten_glClear;
        _emscripten_glClear.sig = "vi";
        function _emscripten_glClearColor(x0, x1, x2, x3) {
            GLctx["clearColor"](x0, x1, x2, x3)
        }
        Module["_emscripten_glClearColor"] = _emscripten_glClearColor;
        _emscripten_glClearColor.sig = "vffff";
        function _emscripten_glClearDepthf(x0) {
            GLctx["clearDepth"](x0)
        }
        Module["_emscripten_glClearDepthf"] = _emscripten_glClearDepthf;
        _emscripten_glClearDepthf.sig = "vf";
        function _emscripten_glClearStencil(x0) {
            GLctx["clearStencil"](x0)
        }
        Module["_emscripten_glClearStencil"] = _emscripten_glClearStencil;
        _emscripten_glClearStencil.sig = "vi";
        function _emscripten_glColorMask(red, green, blue, alpha) {
            GLctx.colorMask(!!red, !!green, !!blue, !!alpha)
        }
        Module["_emscripten_glColorMask"] = _emscripten_glColorMask;
        _emscripten_glColorMask.sig = "viiii";
        function _emscripten_glCompileShader(shader) {
            GLctx.compileShader(GL.shaders[shader])
        }
        Module["_emscripten_glCompileShader"] = _emscripten_glCompileShader;
        _emscripten_glCompileShader.sig = "vi";
        function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
            GLctx["compressedTexImage2D"](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray(data, data + imageSize) : null)
        }
        Module["_emscripten_glCompressedTexImage2D"] = _emscripten_glCompressedTexImage2D;
        _emscripten_glCompressedTexImage2D.sig = "viiiiiiii";
        function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
            GLctx["compressedTexSubImage2D"](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray(data, data + imageSize) : null)
        }
        Module["_emscripten_glCompressedTexSubImage2D"] = _emscripten_glCompressedTexSubImage2D;
        _emscripten_glCompressedTexSubImage2D.sig = "viiiiiiiii";
        function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
            GLctx["copyTexImage2D"](x0, x1, x2, x3, x4, x5, x6, x7)
        }
        Module["_emscripten_glCopyTexImage2D"] = _emscripten_glCopyTexImage2D;
        _emscripten_glCopyTexImage2D.sig = "viiiiiiii";
        function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
            GLctx["copyTexSubImage2D"](x0, x1, x2, x3, x4, x5, x6, x7)
        }
        Module["_emscripten_glCopyTexSubImage2D"] = _emscripten_glCopyTexSubImage2D;
        _emscripten_glCopyTexSubImage2D.sig = "viiiiiiii";
        function _emscripten_glCreateProgram() {
            var id = GL.getNewId(GL.programs);
            var program = GLctx.createProgram();
            program.name = id;
            program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
            program.uniformIdCounter = 1;
            GL.programs[id] = program;
            return id
        }
        Module["_emscripten_glCreateProgram"] = _emscripten_glCreateProgram;
        _emscripten_glCreateProgram.sig = "i";
        function _emscripten_glCreateShader(shaderType) {
            var id = GL.getNewId(GL.shaders);
            GL.shaders[id] = GLctx.createShader(shaderType);
            return id
        }
        Module["_emscripten_glCreateShader"] = _emscripten_glCreateShader;
        _emscripten_glCreateShader.sig = "ii";
        function _emscripten_glCullFace(x0) {
            GLctx["cullFace"](x0)
        }
        Module["_emscripten_glCullFace"] = _emscripten_glCullFace;
        _emscripten_glCullFace.sig = "vi";
        function _emscripten_glDeleteBuffers(n, buffers) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[buffers + i * 4 >> 2];
                var buffer = GL.buffers[id];
                if (!buffer)
                    continue;
                GLctx.deleteBuffer(buffer);
                buffer.name = 0;
                GL.buffers[id] = null
            }
        }
        Module["_emscripten_glDeleteBuffers"] = _emscripten_glDeleteBuffers;
        _emscripten_glDeleteBuffers.sig = "vii";
        function _emscripten_glDeleteFramebuffers(n, framebuffers) {
            for (var i = 0; i < n; ++i) {
                var id = HEAP32[framebuffers + i * 4 >> 2];
                var framebuffer = GL.framebuffers[id];
                if (!framebuffer)
                    continue;
                GLctx.deleteFramebuffer(framebuffer);
                framebuffer.name = 0;
                GL.framebuffers[id] = null
            }
        }
        Module["_emscripten_glDeleteFramebuffers"] = _emscripten_glDeleteFramebuffers;
        _emscripten_glDeleteFramebuffers.sig = "vii";
        function _emscripten_glDeleteProgram(id) {
            if (!id)
                return;
            var program = GL.programs[id];
            if (!program) {
                GL.recordError(1281);
                return
            }
            GLctx.deleteProgram(program);
            program.name = 0;
            GL.programs[id] = null
        }
        Module["_emscripten_glDeleteProgram"] = _emscripten_glDeleteProgram;
        _emscripten_glDeleteProgram.sig = "vi";
        function _emscripten_glDeleteQueriesEXT(n, ids) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[ids + i * 4 >> 2];
                var query = GL.queries[id];
                if (!query)
                    continue;
                GLctx.disjointTimerQueryExt["deleteQueryEXT"](query);
                GL.queries[id] = null
            }
        }
        Module["_emscripten_glDeleteQueriesEXT"] = _emscripten_glDeleteQueriesEXT;
        _emscripten_glDeleteQueriesEXT.sig = "vii";
        function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[renderbuffers + i * 4 >> 2];
                var renderbuffer = GL.renderbuffers[id];
                if (!renderbuffer)
                    continue;
                GLctx.deleteRenderbuffer(renderbuffer);
                renderbuffer.name = 0;
                GL.renderbuffers[id] = null
            }
        }
        Module["_emscripten_glDeleteRenderbuffers"] = _emscripten_glDeleteRenderbuffers;
        _emscripten_glDeleteRenderbuffers.sig = "vii";
        function _emscripten_glDeleteShader(id) {
            if (!id)
                return;
            var shader = GL.shaders[id];
            if (!shader) {
                GL.recordError(1281);
                return
            }
            GLctx.deleteShader(shader);
            GL.shaders[id] = null
        }
        Module["_emscripten_glDeleteShader"] = _emscripten_glDeleteShader;
        _emscripten_glDeleteShader.sig = "vi";
        function _emscripten_glDeleteTextures(n, textures) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[textures + i * 4 >> 2];
                var texture = GL.textures[id];
                if (!texture)
                    continue;
                GLctx.deleteTexture(texture);
                texture.name = 0;
                GL.textures[id] = null
            }
        }
        Module["_emscripten_glDeleteTextures"] = _emscripten_glDeleteTextures;
        _emscripten_glDeleteTextures.sig = "vii";
        function _emscripten_glDeleteVertexArraysOES(n, vaos) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[vaos + i * 4 >> 2];
                GLctx["deleteVertexArray"](GL.vaos[id]);
                GL.vaos[id] = null
            }
        }
        Module["_emscripten_glDeleteVertexArraysOES"] = _emscripten_glDeleteVertexArraysOES;
        _emscripten_glDeleteVertexArraysOES.sig = "vii";
        function _emscripten_glDepthFunc(x0) {
            GLctx["depthFunc"](x0)
        }
        Module["_emscripten_glDepthFunc"] = _emscripten_glDepthFunc;
        _emscripten_glDepthFunc.sig = "vi";
        function _emscripten_glDepthMask(flag) {
            GLctx.depthMask(!!flag)
        }
        Module["_emscripten_glDepthMask"] = _emscripten_glDepthMask;
        _emscripten_glDepthMask.sig = "vi";
        function _emscripten_glDepthRangef(x0, x1) {
            GLctx["depthRange"](x0, x1)
        }
        Module["_emscripten_glDepthRangef"] = _emscripten_glDepthRangef;
        _emscripten_glDepthRangef.sig = "vii";
        function _emscripten_glDetachShader(program, shader) {
            GLctx.detachShader(GL.programs[program], GL.shaders[shader])
        }
        Module["_emscripten_glDetachShader"] = _emscripten_glDetachShader;
        _emscripten_glDetachShader.sig = "vii";
        function _emscripten_glDisable(x0) {
            GLctx["disable"](x0)
        }
        Module["_emscripten_glDisable"] = _emscripten_glDisable;
        _emscripten_glDisable.sig = "vi";
        function _emscripten_glDisableVertexAttribArray(index) {
            GLctx.disableVertexAttribArray(index)
        }
        Module["_emscripten_glDisableVertexAttribArray"] = _emscripten_glDisableVertexAttribArray;
        _emscripten_glDisableVertexAttribArray.sig = "vi";
        function _emscripten_glDrawArrays(mode, first, count) {
            GLctx.drawArrays(mode, first, count)
        }
        Module["_emscripten_glDrawArrays"] = _emscripten_glDrawArrays;
        _emscripten_glDrawArrays.sig = "viii";
        function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_emscripten_glDrawArraysInstancedANGLE"] = _emscripten_glDrawArraysInstancedANGLE;
        _emscripten_glDrawArraysInstancedANGLE.sig = "viiii";
        var tempFixedLengthArray = [];
        Module["tempFixedLengthArray"] = tempFixedLengthArray;
        function _emscripten_glDrawBuffersWEBGL(n, bufs) {
            var bufArray = tempFixedLengthArray[n];
            for (var i = 0; i < n; i++) {
                bufArray[i] = HEAP32[bufs + i * 4 >> 2]
            }
            GLctx["drawBuffers"](bufArray)
        }
        Module["_emscripten_glDrawBuffersWEBGL"] = _emscripten_glDrawBuffersWEBGL;
        _emscripten_glDrawBuffersWEBGL.sig = "vii";
        function _emscripten_glDrawElements(mode, count, type, indices) {
            GLctx.drawElements(mode, count, type, indices)
        }
        Module["_emscripten_glDrawElements"] = _emscripten_glDrawElements;
        _emscripten_glDrawElements.sig = "viiii";
        function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_emscripten_glDrawElementsInstancedANGLE"] = _emscripten_glDrawElementsInstancedANGLE;
        _emscripten_glDrawElementsInstancedANGLE.sig = "viiiii";
        function _emscripten_glEnable(x0) {
            GLctx["enable"](x0)
        }
        Module["_emscripten_glEnable"] = _emscripten_glEnable;
        _emscripten_glEnable.sig = "vi";
        function _emscripten_glEnableVertexAttribArray(index) {
            GLctx.enableVertexAttribArray(index)
        }
        Module["_emscripten_glEnableVertexAttribArray"] = _emscripten_glEnableVertexAttribArray;
        _emscripten_glEnableVertexAttribArray.sig = "vi";
        function _emscripten_glEndQueryEXT(target) {
            GLctx.disjointTimerQueryExt["endQueryEXT"](target)
        }
        Module["_emscripten_glEndQueryEXT"] = _emscripten_glEndQueryEXT;
        _emscripten_glEndQueryEXT.sig = "vi";
        function _emscripten_glFinish() {
            GLctx["finish"]()
        }
        Module["_emscripten_glFinish"] = _emscripten_glFinish;
        _emscripten_glFinish.sig = "v";
        function _emscripten_glFlush() {
            GLctx["flush"]()
        }
        Module["_emscripten_glFlush"] = _emscripten_glFlush;
        _emscripten_glFlush.sig = "v";
        function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
            GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer])
        }
        Module["_emscripten_glFramebufferRenderbuffer"] = _emscripten_glFramebufferRenderbuffer;
        _emscripten_glFramebufferRenderbuffer.sig = "viiii";
        function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
            GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level)
        }
        Module["_emscripten_glFramebufferTexture2D"] = _emscripten_glFramebufferTexture2D;
        _emscripten_glFramebufferTexture2D.sig = "viiiii";
        function _emscripten_glFrontFace(x0) {
            GLctx["frontFace"](x0)
        }
        Module["_emscripten_glFrontFace"] = _emscripten_glFrontFace;
        _emscripten_glFrontFace.sig = "vi";
        function __glGenObject(n, buffers, createFunction, objectTable) {
            for (var i = 0; i < n; i++) {
                var buffer = GLctx[createFunction]();
                var id = buffer && GL.getNewId(objectTable);
                if (buffer) {
                    buffer.name = id;
                    objectTable[id] = buffer
                } else {
                    GL.recordError(1282)
                }
                HEAP32[buffers + i * 4 >> 2] = id
            }
        }
        Module["__glGenObject"] = __glGenObject;
        __glGenObject.sig = "vii";
        function _emscripten_glGenBuffers(n, buffers) {
            __glGenObject(n, buffers, "createBuffer", GL.buffers)
        }
        Module["_emscripten_glGenBuffers"] = _emscripten_glGenBuffers;
        _emscripten_glGenBuffers.sig = "vii";
        function _emscripten_glGenFramebuffers(n, ids) {
            __glGenObject(n, ids, "createFramebuffer", GL.framebuffers)
        }
        Module["_emscripten_glGenFramebuffers"] = _emscripten_glGenFramebuffers;
        _emscripten_glGenFramebuffers.sig = "vii";
        function _emscripten_glGenQueriesEXT(n, ids) {
            for (var i = 0; i < n; i++) {
                var query = GLctx.disjointTimerQueryExt["createQueryEXT"]();
                if (!query) {
                    GL.recordError(1282);
                    while (i < n)
                        HEAP32[ids + i++ * 4 >> 2] = 0;
                    return
                }
                var id = GL.getNewId(GL.queries);
                query.name = id;
                GL.queries[id] = query;
                HEAP32[ids + i * 4 >> 2] = id
            }
        }
        Module["_emscripten_glGenQueriesEXT"] = _emscripten_glGenQueriesEXT;
        _emscripten_glGenQueriesEXT.sig = "vii";
        function _emscripten_glGenRenderbuffers(n, renderbuffers) {
            __glGenObject(n, renderbuffers, "createRenderbuffer", GL.renderbuffers)
        }
        Module["_emscripten_glGenRenderbuffers"] = _emscripten_glGenRenderbuffers;
        _emscripten_glGenRenderbuffers.sig = "vii";
        function _emscripten_glGenTextures(n, textures) {
            __glGenObject(n, textures, "createTexture", GL.textures)
        }
        Module["_emscripten_glGenTextures"] = _emscripten_glGenTextures;
        _emscripten_glGenTextures.sig = "vii";
        function _emscripten_glGenVertexArraysOES(n, arrays) {
            __glGenObject(n, arrays, "createVertexArray", GL.vaos)
        }
        Module["_emscripten_glGenVertexArraysOES"] = _emscripten_glGenVertexArraysOES;
        _emscripten_glGenVertexArraysOES.sig = "vii";
        function _emscripten_glGenerateMipmap(x0) {
            GLctx["generateMipmap"](x0)
        }
        Module["_emscripten_glGenerateMipmap"] = _emscripten_glGenerateMipmap;
        _emscripten_glGenerateMipmap.sig = "vi";
        function __glGetActiveAttribOrUniform(funcName, program, index, bufSize, length, size, type, name) {
            program = GL.programs[program];
            var info = GLctx[funcName](program, index);
            if (info) {
                var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
                if (length)
                    HEAP32[length >> 2] = numBytesWrittenExclNull;
                if (size)
                    HEAP32[size >> 2] = info.size;
                if (type)
                    HEAP32[type >> 2] = info.type
            }
        }
        Module["__glGetActiveAttribOrUniform"] = __glGetActiveAttribOrUniform;
        function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
            __glGetActiveAttribOrUniform("getActiveAttrib", program, index, bufSize, length, size, type, name)
        }
        Module["_emscripten_glGetActiveAttrib"] = _emscripten_glGetActiveAttrib;
        _emscripten_glGetActiveAttrib.sig = "viiiiiii";
        function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
            __glGetActiveAttribOrUniform("getActiveUniform", program, index, bufSize, length, size, type, name)
        }
        Module["_emscripten_glGetActiveUniform"] = _emscripten_glGetActiveUniform;
        _emscripten_glGetActiveUniform.sig = "viiiiiii";
        function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
            var result = GLctx.getAttachedShaders(GL.programs[program]);
            var len = result.length;
            if (len > maxCount) {
                len = maxCount
            }
            HEAP32[count >> 2] = len;
            for (var i = 0; i < len; ++i) {
                var id = GL.shaders.indexOf(result[i]);
                HEAP32[shaders + i * 4 >> 2] = id
            }
        }
        Module["_emscripten_glGetAttachedShaders"] = _emscripten_glGetAttachedShaders;
        _emscripten_glGetAttachedShaders.sig = "viiii";
        function _emscripten_glGetAttribLocation(program, name) {
            return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name))
        }
        Module["_emscripten_glGetAttribLocation"] = _emscripten_glGetAttribLocation;
        _emscripten_glGetAttribLocation.sig = "iii";
        function writeI53ToI64(ptr, num) {
            HEAPU32[ptr >> 2] = num;
            HEAPU32[ptr + 4 >> 2] = (num - HEAPU32[ptr >> 2]) / 4294967296
        }
        Module["writeI53ToI64"] = writeI53ToI64;
        function emscriptenWebGLGet(name_, p, type) {
            if (!p) {
                GL.recordError(1281);
                return
            }
            var ret = undefined;
            switch (name_) {
            case 36346:
                ret = 1;
                break;
            case 36344:
                if (type != 0 && type != 1) {
                    GL.recordError(1280)
                }
                return;
            case 36345:
                ret = 0;
                break;
            case 34466:
                var formats = GLctx.getParameter(34467);
                ret = formats ? formats.length : 0;
                break
            }
            if (ret === undefined) {
                var result = GLctx.getParameter(name_);
                switch (typeof result) {
                case "number":
                    ret = result;
                    break;
                case "boolean":
                    ret = result ? 1 : 0;
                    break;
                case "string":
                    GL.recordError(1280);
                    return;
                case "object":
                    if (result === null) {
                        switch (name_) {
                        case 34964:
                        case 35725:
                        case 34965:
                        case 36006:
                        case 36007:
                        case 32873:
                        case 34229:
                        case 34068:
                            {
                                ret = 0;
                                break
                            }
                        default:
                            {
                                GL.recordError(1280);
                                return
                            }
                        }
                    } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
                        for (var i = 0; i < result.length; ++i) {
                            switch (type) {
                            case 0:
                                HEAP32[p + i * 4 >> 2] = result[i];
                                break;
                            case 2:
                                HEAPF32[p + i * 4 >> 2] = result[i];
                                break;
                            case 4:
                                HEAP8[p + i >> 0] = result[i] ? 1 : 0;
                                break
                            }
                        }
                        return
                    } else {
                        try {
                            ret = result.name | 0
                        } catch (e) {
                            GL.recordError(1280);
                            err("GL_INVALID_ENUM in glGet" + type + "v: Unknown object returned from WebGL getParameter(" + name_ + ")! (error: " + e + ")");
                            return
                        }
                    }
                    break;
                default:
                    GL.recordError(1280);
                    err("GL_INVALID_ENUM in glGet" + type + "v: Native code calling glGet" + type + "v(" + name_ + ") and it returns " + result + " of type " + typeof result + "!");
                    return
                }
            }
            switch (type) {
            case 1:
                writeI53ToI64(p, ret);
                break;
            case 0:
                HEAP32[p >> 2] = ret;
                break;
            case 2:
                HEAPF32[p >> 2] = ret;
                break;
            case 4:
                HEAP8[p >> 0] = ret ? 1 : 0;
                break
            }
        }
        Module["emscriptenWebGLGet"] = emscriptenWebGLGet;
        function _emscripten_glGetBooleanv(name_, p) {
            emscriptenWebGLGet(name_, p, 4)
        }
        Module["_emscripten_glGetBooleanv"] = _emscripten_glGetBooleanv;
        _emscripten_glGetBooleanv.sig = "vii";
        function _emscripten_glGetBufferParameteriv(target, value, data) {
            if (!data) {
                GL.recordError(1281);
                return
            }
            HEAP32[data >> 2] = GLctx.getBufferParameter(target, value)
        }
        Module["_emscripten_glGetBufferParameteriv"] = _emscripten_glGetBufferParameteriv;
        _emscripten_glGetBufferParameteriv.sig = "viii";
        function _emscripten_glGetError() {
            var error = GLctx.getError() || GL.lastError;
            GL.lastError = 0;
            return error
        }
        Module["_emscripten_glGetError"] = _emscripten_glGetError;
        _emscripten_glGetError.sig = "i";
        function _emscripten_glGetFloatv(name_, p) {
            emscriptenWebGLGet(name_, p, 2)
        }
        Module["_emscripten_glGetFloatv"] = _emscripten_glGetFloatv;
        _emscripten_glGetFloatv.sig = "vii";
        function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
            var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
            if (result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
                result = result.name | 0
            }
            HEAP32[params >> 2] = result
        }
        Module["_emscripten_glGetFramebufferAttachmentParameteriv"] = _emscripten_glGetFramebufferAttachmentParameteriv;
        _emscripten_glGetFramebufferAttachmentParameteriv.sig = "viiii";
        function _emscripten_glGetIntegerv(name_, p) {
            emscriptenWebGLGet(name_, p, 0)
        }
        Module["_emscripten_glGetIntegerv"] = _emscripten_glGetIntegerv;
        _emscripten_glGetIntegerv.sig = "vii";
        function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
            var log = GLctx.getProgramInfoLog(GL.programs[program]);
            if (log === null)
                log = "(unknown error)";
            var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
            if (length)
                HEAP32[length >> 2] = numBytesWrittenExclNull
        }
        Module["_emscripten_glGetProgramInfoLog"] = _emscripten_glGetProgramInfoLog;
        _emscripten_glGetProgramInfoLog.sig = "viiii";
        function _emscripten_glGetProgramiv(program, pname, p) {
            if (!p) {
                GL.recordError(1281);
                return
            }
            if (program >= GL.counter) {
                GL.recordError(1281);
                return
            }
            program = GL.programs[program];
            if (pname == 35716) {
                var log = GLctx.getProgramInfoLog(program);
                if (log === null)
                    log = "(unknown error)";
                HEAP32[p >> 2] = log.length + 1
            } else if (pname == 35719) {
                if (!program.maxUniformLength) {
                    for (var i = 0; i < GLctx.getProgramParameter(program, 35718); ++i) {
                        program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length + 1)
                    }
                }
                HEAP32[p >> 2] = program.maxUniformLength
            } else if (pname == 35722) {
                if (!program.maxAttributeLength) {
                    for (var i = 0; i < GLctx.getProgramParameter(program, 35721); ++i) {
                        program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length + 1)
                    }
                }
                HEAP32[p >> 2] = program.maxAttributeLength
            } else if (pname == 35381) {
                if (!program.maxUniformBlockNameLength) {
                    for (var i = 0; i < GLctx.getProgramParameter(program, 35382); ++i) {
                        program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length + 1)
                    }
                }
                HEAP32[p >> 2] = program.maxUniformBlockNameLength
            } else {
                HEAP32[p >> 2] = GLctx.getProgramParameter(program, pname)
            }
        }
        Module["_emscripten_glGetProgramiv"] = _emscripten_glGetProgramiv;
        _emscripten_glGetProgramiv.sig = "viii";
        function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var query = GL.queries[id];
            var param;
            {
                param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname)
            }
            var ret;
            if (typeof param == "boolean") {
                ret = param ? 1 : 0
            } else {
                ret = param
            }
            writeI53ToI64(params, ret)
        }
        Module["_emscripten_glGetQueryObjecti64vEXT"] = _emscripten_glGetQueryObjecti64vEXT;
        _emscripten_glGetQueryObjecti64vEXT.sig = "viii";
        function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var query = GL.queries[id];
            var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
            var ret;
            if (typeof param == "boolean") {
                ret = param ? 1 : 0
            } else {
                ret = param
            }
            HEAP32[params >> 2] = ret
        }
        Module["_emscripten_glGetQueryObjectivEXT"] = _emscripten_glGetQueryObjectivEXT;
        _emscripten_glGetQueryObjectivEXT.sig = "viii";
        function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var query = GL.queries[id];
            var param;
            {
                param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname)
            }
            var ret;
            if (typeof param == "boolean") {
                ret = param ? 1 : 0
            } else {
                ret = param
            }
            writeI53ToI64(params, ret)
        }
        Module["_emscripten_glGetQueryObjectui64vEXT"] = _emscripten_glGetQueryObjectui64vEXT;
        _emscripten_glGetQueryObjectui64vEXT.sig = "viii";
        function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var query = GL.queries[id];
            var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
            var ret;
            if (typeof param == "boolean") {
                ret = param ? 1 : 0
            } else {
                ret = param
            }
            HEAP32[params >> 2] = ret
        }
        Module["_emscripten_glGetQueryObjectuivEXT"] = _emscripten_glGetQueryObjectuivEXT;
        _emscripten_glGetQueryObjectuivEXT.sig = "viii";
        function _emscripten_glGetQueryivEXT(target, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            HEAP32[params >> 2] = GLctx.disjointTimerQueryExt["getQueryEXT"](target, pname)
        }
        Module["_emscripten_glGetQueryivEXT"] = _emscripten_glGetQueryivEXT;
        _emscripten_glGetQueryivEXT.sig = "viii";
        function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            HEAP32[params >> 2] = GLctx.getRenderbufferParameter(target, pname)
        }
        Module["_emscripten_glGetRenderbufferParameteriv"] = _emscripten_glGetRenderbufferParameteriv;
        _emscripten_glGetRenderbufferParameteriv.sig = "viii";
        function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
            var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
            if (log === null)
                log = "(unknown error)";
            var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
            if (length)
                HEAP32[length >> 2] = numBytesWrittenExclNull
        }
        Module["_emscripten_glGetShaderInfoLog"] = _emscripten_glGetShaderInfoLog;
        _emscripten_glGetShaderInfoLog.sig = "viiii";
        function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
            var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
            HEAP32[range >> 2] = result.rangeMin;
            HEAP32[range + 4 >> 2] = result.rangeMax;
            HEAP32[precision >> 2] = result.precision
        }
        Module["_emscripten_glGetShaderPrecisionFormat"] = _emscripten_glGetShaderPrecisionFormat;
        _emscripten_glGetShaderPrecisionFormat.sig = "viiii";
        function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
            var result = GLctx.getShaderSource(GL.shaders[shader]);
            if (!result)
                return;
            var numBytesWrittenExclNull = bufSize > 0 && source ? stringToUTF8(result, source, bufSize) : 0;
            if (length)
                HEAP32[length >> 2] = numBytesWrittenExclNull
        }
        Module["_emscripten_glGetShaderSource"] = _emscripten_glGetShaderSource;
        _emscripten_glGetShaderSource.sig = "viiii";
        function _emscripten_glGetShaderiv(shader, pname, p) {
            if (!p) {
                GL.recordError(1281);
                return
            }
            if (pname == 35716) {
                var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
                if (log === null)
                    log = "(unknown error)";
                var logLength = log ? log.length + 1 : 0;
                HEAP32[p >> 2] = logLength
            } else if (pname == 35720) {
                var source = GLctx.getShaderSource(GL.shaders[shader]);
                var sourceLength = source ? source.length + 1 : 0;
                HEAP32[p >> 2] = sourceLength
            } else {
                HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname)
            }
        }
        Module["_emscripten_glGetShaderiv"] = _emscripten_glGetShaderiv;
        _emscripten_glGetShaderiv.sig = "viii";
        function stringToNewUTF8(jsString) {
            var length = lengthBytesUTF8(jsString) + 1;
            var cString = _malloc(length);
            stringToUTF8(jsString, cString, length);
            return cString
        }
        Module["stringToNewUTF8"] = stringToNewUTF8;
        function _emscripten_glGetString(name_) {
            var ret = GL.stringCache[name_];
            if (!ret) {
                switch (name_) {
                case 7939:
                    var exts = GLctx.getSupportedExtensions() || [];
                    exts = exts.concat(exts.map(function(e) {
                        return "GL_" + e
                    }));
                    ret = stringToNewUTF8(exts.join(" "));
                    break;
                case 7936:
                case 7937:
                case 37445:
                case 37446:
                    var s = GLctx.getParameter(name_);
                    if (!s) {
                        GL.recordError(1280)
                    }
                    ret = s && stringToNewUTF8(s);
                    break;
                case 7938:
                    var glVersion = GLctx.getParameter(7938);
                    {
                        glVersion = "OpenGL ES 2.0 (" + glVersion + ")"
                    }
                    ret = stringToNewUTF8(glVersion);
                    break;
                case 35724:
                    var glslVersion = GLctx.getParameter(35724);
                    var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
                    var ver_num = glslVersion.match(ver_re);
                    if (ver_num !== null) {
                        if (ver_num[1].length == 3)
                            ver_num[1] = ver_num[1] + "0";
                        glslVersion = "OpenGL ES GLSL ES " + ver_num[1] + " (" + glslVersion + ")"
                    }
                    ret = stringToNewUTF8(glslVersion);
                    break;
                default:
                    GL.recordError(1280)
                }
                GL.stringCache[name_] = ret
            }
            return ret
        }
        Module["_emscripten_glGetString"] = _emscripten_glGetString;
        _emscripten_glGetString.sig = "ii";
        function _emscripten_glGetTexParameterfv(target, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            HEAPF32[params >> 2] = GLctx.getTexParameter(target, pname)
        }
        Module["_emscripten_glGetTexParameterfv"] = _emscripten_glGetTexParameterfv;
        _emscripten_glGetTexParameterfv.sig = "viii";
        function _emscripten_glGetTexParameteriv(target, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            HEAP32[params >> 2] = GLctx.getTexParameter(target, pname)
        }
        Module["_emscripten_glGetTexParameteriv"] = _emscripten_glGetTexParameteriv;
        _emscripten_glGetTexParameteriv.sig = "viii";
        function webglGetLeftBracePos(name) {
            return name.slice(-1) == "]" && name.lastIndexOf("[")
        }
        Module["webglGetLeftBracePos"] = webglGetLeftBracePos;
        function webglPrepareUniformLocationsBeforeFirstUse(program) {
            var uniformLocsById = program.uniformLocsById, uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, i, j;
            if (!uniformLocsById) {
                program.uniformLocsById = uniformLocsById = {};
                program.uniformArrayNamesById = {};
                for (i = 0; i < GLctx.getProgramParameter(program, 35718); ++i) {
                    var u = GLctx.getActiveUniform(program, i);
                    var nm = u.name;
                    var sz = u.size;
                    var lb = webglGetLeftBracePos(nm);
                    var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
                    var id = program.uniformIdCounter;
                    program.uniformIdCounter += sz;
                    uniformSizeAndIdsByName[arrayName] = [sz, id];
                    for (j = 0; j < sz; ++j) {
                        uniformLocsById[id] = j;
                        program.uniformArrayNamesById[id++] = arrayName
                    }
                }
            }
        }
        Module["webglPrepareUniformLocationsBeforeFirstUse"] = webglPrepareUniformLocationsBeforeFirstUse;
        function _emscripten_glGetUniformLocation(program, name) {
            name = UTF8ToString(name);
            if (program = GL.programs[program]) {
                webglPrepareUniformLocationsBeforeFirstUse(program);
                var uniformLocsById = program.uniformLocsById;
                var arrayIndex = 0;
                var uniformBaseName = name;
                var leftBrace = webglGetLeftBracePos(name);
                if (leftBrace > 0) {
                    arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0;
                    uniformBaseName = name.slice(0, leftBrace)
                }
                var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
                if (sizeAndId && arrayIndex < sizeAndId[0]) {
                    arrayIndex += sizeAndId[1];
                    if (uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name)) {
                        return arrayIndex
                    }
                }
            } else {
                GL.recordError(1281)
            }
            return -1
        }
        Module["_emscripten_glGetUniformLocation"] = _emscripten_glGetUniformLocation;
        _emscripten_glGetUniformLocation.sig = "iii";
        function webglGetUniformLocation(location) {
            var p = GLctx.currentProgram;
            if (p) {
                var webglLoc = p.uniformLocsById[location];
                if (typeof webglLoc == "number") {
                    p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? "[" + webglLoc + "]" : ""))
                }
                return webglLoc
            } else {
                GL.recordError(1282)
            }
        }
        Module["webglGetUniformLocation"] = webglGetUniformLocation;
        function emscriptenWebGLGetUniform(program, location, params, type) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            program = GL.programs[program];
            webglPrepareUniformLocationsBeforeFirstUse(program);
            var data = GLctx.getUniform(program, webglGetUniformLocation(location));
            if (typeof data == "number" || typeof data == "boolean") {
                switch (type) {
                case 0:
                    HEAP32[params >> 2] = data;
                    break;
                case 2:
                    HEAPF32[params >> 2] = data;
                    break
                }
            } else {
                for (var i = 0; i < data.length; i++) {
                    switch (type) {
                    case 0:
                        HEAP32[params + i * 4 >> 2] = data[i];
                        break;
                    case 2:
                        HEAPF32[params + i * 4 >> 2] = data[i];
                        break
                    }
                }
            }
        }
        Module["emscriptenWebGLGetUniform"] = emscriptenWebGLGetUniform;
        function _emscripten_glGetUniformfv(program, location, params) {
            emscriptenWebGLGetUniform(program, location, params, 2)
        }
        Module["_emscripten_glGetUniformfv"] = _emscripten_glGetUniformfv;
        _emscripten_glGetUniformfv.sig = "viii";
        function _emscripten_glGetUniformiv(program, location, params) {
            emscriptenWebGLGetUniform(program, location, params, 0)
        }
        Module["_emscripten_glGetUniformiv"] = _emscripten_glGetUniformiv;
        _emscripten_glGetUniformiv.sig = "viii";
        function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
            if (!pointer) {
                GL.recordError(1281);
                return
            }
            HEAP32[pointer >> 2] = GLctx.getVertexAttribOffset(index, pname)
        }
        Module["_emscripten_glGetVertexAttribPointerv"] = _emscripten_glGetVertexAttribPointerv;
        _emscripten_glGetVertexAttribPointerv.sig = "viii";
        function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var data = GLctx.getVertexAttrib(index, pname);
            if (pname == 34975) {
                HEAP32[params >> 2] = data && data["name"]
            } else if (typeof data == "number" || typeof data == "boolean") {
                switch (type) {
                case 0:
                    HEAP32[params >> 2] = data;
                    break;
                case 2:
                    HEAPF32[params >> 2] = data;
                    break;
                case 5:
                    HEAP32[params >> 2] = Math.fround(data);
                    break
                }
            } else {
                for (var i = 0; i < data.length; i++) {
                    switch (type) {
                    case 0:
                        HEAP32[params + i * 4 >> 2] = data[i];
                        break;
                    case 2:
                        HEAPF32[params + i * 4 >> 2] = data[i];
                        break;
                    case 5:
                        HEAP32[params + i * 4 >> 2] = Math.fround(data[i]);
                        break
                    }
                }
            }
        }
        Module["emscriptenWebGLGetVertexAttrib"] = emscriptenWebGLGetVertexAttrib;
        function _emscripten_glGetVertexAttribfv(index, pname, params) {
            emscriptenWebGLGetVertexAttrib(index, pname, params, 2)
        }
        Module["_emscripten_glGetVertexAttribfv"] = _emscripten_glGetVertexAttribfv;
        _emscripten_glGetVertexAttribfv.sig = "viii";
        function _emscripten_glGetVertexAttribiv(index, pname, params) {
            emscriptenWebGLGetVertexAttrib(index, pname, params, 5)
        }
        Module["_emscripten_glGetVertexAttribiv"] = _emscripten_glGetVertexAttribiv;
        _emscripten_glGetVertexAttribiv.sig = "viii";
        function _emscripten_glHint(x0, x1) {
            GLctx["hint"](x0, x1)
        }
        Module["_emscripten_glHint"] = _emscripten_glHint;
        _emscripten_glHint.sig = "vii";
        function _emscripten_glIsBuffer(buffer) {
            var b = GL.buffers[buffer];
            if (!b)
                return 0;
            return GLctx.isBuffer(b)
        }
        Module["_emscripten_glIsBuffer"] = _emscripten_glIsBuffer;
        _emscripten_glIsBuffer.sig = "ii";
        function _emscripten_glIsEnabled(x0) {
            return GLctx["isEnabled"](x0)
        }
        Module["_emscripten_glIsEnabled"] = _emscripten_glIsEnabled;
        _emscripten_glIsEnabled.sig = "ii";
        function _emscripten_glIsFramebuffer(framebuffer) {
            var fb = GL.framebuffers[framebuffer];
            if (!fb)
                return 0;
            return GLctx.isFramebuffer(fb)
        }
        Module["_emscripten_glIsFramebuffer"] = _emscripten_glIsFramebuffer;
        _emscripten_glIsFramebuffer.sig = "ii";
        function _emscripten_glIsProgram(program) {
            program = GL.programs[program];
            if (!program)
                return 0;
            return GLctx.isProgram(program)
        }
        Module["_emscripten_glIsProgram"] = _emscripten_glIsProgram;
        _emscripten_glIsProgram.sig = "ii";
        function _emscripten_glIsQueryEXT(id) {
            var query = GL.queries[id];
            if (!query)
                return 0;
            return GLctx.disjointTimerQueryExt["isQueryEXT"](query)
        }
        Module["_emscripten_glIsQueryEXT"] = _emscripten_glIsQueryEXT;
        _emscripten_glIsQueryEXT.sig = "ii";
        function _emscripten_glIsRenderbuffer(renderbuffer) {
            var rb = GL.renderbuffers[renderbuffer];
            if (!rb)
                return 0;
            return GLctx.isRenderbuffer(rb)
        }
        Module["_emscripten_glIsRenderbuffer"] = _emscripten_glIsRenderbuffer;
        _emscripten_glIsRenderbuffer.sig = "ii";
        function _emscripten_glIsShader(shader) {
            var s = GL.shaders[shader];
            if (!s)
                return 0;
            return GLctx.isShader(s)
        }
        Module["_emscripten_glIsShader"] = _emscripten_glIsShader;
        _emscripten_glIsShader.sig = "ii";
        function _emscripten_glIsTexture(id) {
            var texture = GL.textures[id];
            if (!texture)
                return 0;
            return GLctx.isTexture(texture)
        }
        Module["_emscripten_glIsTexture"] = _emscripten_glIsTexture;
        _emscripten_glIsTexture.sig = "ii";
        function _emscripten_glIsVertexArrayOES(array) {
            var vao = GL.vaos[array];
            if (!vao)
                return 0;
            return GLctx["isVertexArray"](vao)
        }
        Module["_emscripten_glIsVertexArrayOES"] = _emscripten_glIsVertexArrayOES;
        _emscripten_glIsVertexArrayOES.sig = "ii";
        function _emscripten_glLineWidth(x0) {
            GLctx["lineWidth"](x0)
        }
        Module["_emscripten_glLineWidth"] = _emscripten_glLineWidth;
        _emscripten_glLineWidth.sig = "vf";
        function _emscripten_glLinkProgram(program) {
            program = GL.programs[program];
            GLctx.linkProgram(program);
            program.uniformLocsById = 0;
            program.uniformSizeAndIdsByName = {}
        }
        Module["_emscripten_glLinkProgram"] = _emscripten_glLinkProgram;
        _emscripten_glLinkProgram.sig = "vi";
        function _emscripten_glPixelStorei(pname, param) {
            if (pname == 3317) {
                GL.unpackAlignment = param
            }
            GLctx.pixelStorei(pname, param)
        }
        Module["_emscripten_glPixelStorei"] = _emscripten_glPixelStorei;
        _emscripten_glPixelStorei.sig = "vii";
        function _emscripten_glPolygonOffset(x0, x1) {
            GLctx["polygonOffset"](x0, x1)
        }
        Module["_emscripten_glPolygonOffset"] = _emscripten_glPolygonOffset;
        _emscripten_glPolygonOffset.sig = "vff";
        function _emscripten_glQueryCounterEXT(id, target) {
            GLctx.disjointTimerQueryExt["queryCounterEXT"](GL.queries[id], target)
        }
        Module["_emscripten_glQueryCounterEXT"] = _emscripten_glQueryCounterEXT;
        _emscripten_glQueryCounterEXT.sig = "vii";
        function computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
            function roundedToNextMultipleOf(x, y) {
                return x + y - 1 & -y
            }
            var plainRowSize = width * sizePerPixel;
            var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
            return height * alignedRowSize
        }
        Module["computeUnpackAlignedImageSize"] = computeUnpackAlignedImageSize;
        function __colorChannelsInGlTextureFormat(format) {
            var colorChannels = {
                5: 3,
                6: 4,
                8: 2,
                29502: 3,
                29504: 4
            };
            return colorChannels[format - 6402] || 1
        }
        Module["__colorChannelsInGlTextureFormat"] = __colorChannelsInGlTextureFormat;
        function heapObjectForWebGLType(type) {
            type -= 5120;
            if (type == 1)
                return HEAPU8;
            if (type == 4)
                return HEAP32;
            if (type == 6)
                return HEAPF32;
            if (type == 5 || type == 28922)
                return HEAPU32;
            return HEAPU16
        }
        Module["heapObjectForWebGLType"] = heapObjectForWebGLType;
        function heapAccessShiftForWebGLHeap(heap) {
            return 31 - Math.clz32(heap.BYTES_PER_ELEMENT)
        }
        Module["heapAccessShiftForWebGLHeap"] = heapAccessShiftForWebGLHeap;
        function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
            var heap = heapObjectForWebGLType(type);
            var shift = heapAccessShiftForWebGLHeap(heap);
            var byteSize = 1 << shift;
            var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
            var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
            return heap.subarray(pixels >> shift, pixels + bytes >> shift)
        }
        Module["emscriptenWebGLGetTexPixelData"] = emscriptenWebGLGetTexPixelData;
        function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
            var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
            if (!pixelData) {
                GL.recordError(1280);
                return
            }
            GLctx.readPixels(x, y, width, height, format, type, pixelData)
        }
        Module["_emscripten_glReadPixels"] = _emscripten_glReadPixels;
        _emscripten_glReadPixels.sig = "viiiiiii";
        function _emscripten_glReleaseShaderCompiler() {}
        Module["_emscripten_glReleaseShaderCompiler"] = _emscripten_glReleaseShaderCompiler;
        _emscripten_glReleaseShaderCompiler.sig = "v";
        function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) {
            GLctx["renderbufferStorage"](x0, x1, x2, x3)
        }
        Module["_emscripten_glRenderbufferStorage"] = _emscripten_glRenderbufferStorage;
        _emscripten_glRenderbufferStorage.sig = "viiii";
        function _emscripten_glSampleCoverage(value, invert) {
            GLctx.sampleCoverage(value, !!invert)
        }
        Module["_emscripten_glSampleCoverage"] = _emscripten_glSampleCoverage;
        _emscripten_glSampleCoverage.sig = "vii";
        function _emscripten_glScissor(x0, x1, x2, x3) {
            GLctx["scissor"](x0, x1, x2, x3)
        }
        Module["_emscripten_glScissor"] = _emscripten_glScissor;
        _emscripten_glScissor.sig = "viiii";
        function _emscripten_glShaderBinary() {
            GL.recordError(1280)
        }
        Module["_emscripten_glShaderBinary"] = _emscripten_glShaderBinary;
        _emscripten_glShaderBinary.sig = "v";
        function _emscripten_glShaderSource(shader, count, string, length) {
            var source = GL.getSource(shader, count, string, length);
            GLctx.shaderSource(GL.shaders[shader], source)
        }
        Module["_emscripten_glShaderSource"] = _emscripten_glShaderSource;
        _emscripten_glShaderSource.sig = "viiii";
        function _emscripten_glStencilFunc(x0, x1, x2) {
            GLctx["stencilFunc"](x0, x1, x2)
        }
        Module["_emscripten_glStencilFunc"] = _emscripten_glStencilFunc;
        _emscripten_glStencilFunc.sig = "viii";
        function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) {
            GLctx["stencilFuncSeparate"](x0, x1, x2, x3)
        }
        Module["_emscripten_glStencilFuncSeparate"] = _emscripten_glStencilFuncSeparate;
        _emscripten_glStencilFuncSeparate.sig = "viiii";
        function _emscripten_glStencilMask(x0) {
            GLctx["stencilMask"](x0)
        }
        Module["_emscripten_glStencilMask"] = _emscripten_glStencilMask;
        _emscripten_glStencilMask.sig = "vi";
        function _emscripten_glStencilMaskSeparate(x0, x1) {
            GLctx["stencilMaskSeparate"](x0, x1)
        }
        Module["_emscripten_glStencilMaskSeparate"] = _emscripten_glStencilMaskSeparate;
        _emscripten_glStencilMaskSeparate.sig = "vii";
        function _emscripten_glStencilOp(x0, x1, x2) {
            GLctx["stencilOp"](x0, x1, x2)
        }
        Module["_emscripten_glStencilOp"] = _emscripten_glStencilOp;
        _emscripten_glStencilOp.sig = "viii";
        function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) {
            GLctx["stencilOpSeparate"](x0, x1, x2, x3)
        }
        Module["_emscripten_glStencilOpSeparate"] = _emscripten_glStencilOpSeparate;
        _emscripten_glStencilOpSeparate.sig = "viiii";
        function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
            GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null)
        }
        Module["_emscripten_glTexImage2D"] = _emscripten_glTexImage2D;
        _emscripten_glTexImage2D.sig = "viiiiiiiii";
        function _emscripten_glTexParameterf(x0, x1, x2) {
            GLctx["texParameterf"](x0, x1, x2)
        }
        Module["_emscripten_glTexParameterf"] = _emscripten_glTexParameterf;
        _emscripten_glTexParameterf.sig = "viii";
        function _emscripten_glTexParameterfv(target, pname, params) {
            var param = HEAPF32[params >> 2];
            GLctx.texParameterf(target, pname, param)
        }
        Module["_emscripten_glTexParameterfv"] = _emscripten_glTexParameterfv;
        _emscripten_glTexParameterfv.sig = "viii";
        function _emscripten_glTexParameteri(x0, x1, x2) {
            GLctx["texParameteri"](x0, x1, x2)
        }
        Module["_emscripten_glTexParameteri"] = _emscripten_glTexParameteri;
        _emscripten_glTexParameteri.sig = "viii";
        function _emscripten_glTexParameteriv(target, pname, params) {
            var param = HEAP32[params >> 2];
            GLctx.texParameteri(target, pname, param)
        }
        Module["_emscripten_glTexParameteriv"] = _emscripten_glTexParameteriv;
        _emscripten_glTexParameteriv.sig = "viii";
        function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
            var pixelData = null;
            if (pixels)
                pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
            GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData)
        }
        Module["_emscripten_glTexSubImage2D"] = _emscripten_glTexSubImage2D;
        _emscripten_glTexSubImage2D.sig = "viiiiiiiii";
        function _emscripten_glUniform1f(location, v0) {
            GLctx.uniform1f(webglGetUniformLocation(location), v0)
        }
        Module["_emscripten_glUniform1f"] = _emscripten_glUniform1f;
        _emscripten_glUniform1f.sig = "vif";
        var miniTempWebGLFloatBuffers = [];
        Module["miniTempWebGLFloatBuffers"] = miniTempWebGLFloatBuffers;
        function _emscripten_glUniform1fv(location, count, value) {
            if (count <= 288) {
                var view = miniTempWebGLFloatBuffers[count - 1];
                for (var i = 0; i < count; ++i) {
                    view[i] = HEAPF32[value + 4 * i >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 4 >> 2)
            }
            GLctx.uniform1fv(webglGetUniformLocation(location), view)
        }
        Module["_emscripten_glUniform1fv"] = _emscripten_glUniform1fv;
        _emscripten_glUniform1fv.sig = "viii";
        function _emscripten_glUniform1i(location, v0) {
            GLctx.uniform1i(webglGetUniformLocation(location), v0)
        }
        Module["_emscripten_glUniform1i"] = _emscripten_glUniform1i;
        _emscripten_glUniform1i.sig = "vii";
        var __miniTempWebGLIntBuffers = [];
        Module["__miniTempWebGLIntBuffers"] = __miniTempWebGLIntBuffers;
        function _emscripten_glUniform1iv(location, count, value) {
            if (count <= 288) {
                var view = __miniTempWebGLIntBuffers[count - 1];
                for (var i = 0; i < count; ++i) {
                    view[i] = HEAP32[value + 4 * i >> 2]
                }
            } else {
                var view = HEAP32.subarray(value >> 2, value + count * 4 >> 2)
            }
            GLctx.uniform1iv(webglGetUniformLocation(location), view)
        }
        Module["_emscripten_glUniform1iv"] = _emscripten_glUniform1iv;
        _emscripten_glUniform1iv.sig = "viii";
        function _emscripten_glUniform2f(location, v0, v1) {
            GLctx.uniform2f(webglGetUniformLocation(location), v0, v1)
        }
        Module["_emscripten_glUniform2f"] = _emscripten_glUniform2f;
        _emscripten_glUniform2f.sig = "viff";
        function _emscripten_glUniform2fv(location, count, value) {
            if (count <= 144) {
                var view = miniTempWebGLFloatBuffers[2 * count - 1];
                for (var i = 0; i < 2 * count; i += 2) {
                    view[i] = HEAPF32[value + 4 * i >> 2];
                    view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 8 >> 2)
            }
            GLctx.uniform2fv(webglGetUniformLocation(location), view)
        }
        Module["_emscripten_glUniform2fv"] = _emscripten_glUniform2fv;
        _emscripten_glUniform2fv.sig = "viii";
        function _emscripten_glUniform2i(location, v0, v1) {
            GLctx.uniform2i(webglGetUniformLocation(location), v0, v1)
        }
        Module["_emscripten_glUniform2i"] = _emscripten_glUniform2i;
        _emscripten_glUniform2i.sig = "viii";
        function _emscripten_glUniform2iv(location, count, value) {
            if (count <= 144) {
                var view = __miniTempWebGLIntBuffers[2 * count - 1];
                for (var i = 0; i < 2 * count; i += 2) {
                    view[i] = HEAP32[value + 4 * i >> 2];
                    view[i + 1] = HEAP32[value + (4 * i + 4) >> 2]
                }
            } else {
                var view = HEAP32.subarray(value >> 2, value + count * 8 >> 2)
            }
            GLctx.uniform2iv(webglGetUniformLocation(location), view)
        }
        Module["_emscripten_glUniform2iv"] = _emscripten_glUniform2iv;
        _emscripten_glUniform2iv.sig = "viii";
        function _emscripten_glUniform3f(location, v0, v1, v2) {
            GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2)
        }
        Module["_emscripten_glUniform3f"] = _emscripten_glUniform3f;
        _emscripten_glUniform3f.sig = "vifff";
        function _emscripten_glUniform3fv(location, count, value) {
            if (count <= 96) {
                var view = miniTempWebGLFloatBuffers[3 * count - 1];
                for (var i = 0; i < 3 * count; i += 3) {
                    view[i] = HEAPF32[value + 4 * i >> 2];
                    view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 12 >> 2)
            }
            GLctx.uniform3fv(webglGetUniformLocation(location), view)
        }
        Module["_emscripten_glUniform3fv"] = _emscripten_glUniform3fv;
        _emscripten_glUniform3fv.sig = "viii";
        function _emscripten_glUniform3i(location, v0, v1, v2) {
            GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2)
        }
        Module["_emscripten_glUniform3i"] = _emscripten_glUniform3i;
        _emscripten_glUniform3i.sig = "viiii";
        function _emscripten_glUniform3iv(location, count, value) {
            if (count <= 96) {
                var view = __miniTempWebGLIntBuffers[3 * count - 1];
                for (var i = 0; i < 3 * count; i += 3) {
                    view[i] = HEAP32[value + 4 * i >> 2];
                    view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAP32[value + (4 * i + 8) >> 2]
                }
            } else {
                var view = HEAP32.subarray(value >> 2, value + count * 12 >> 2)
            }
            GLctx.uniform3iv(webglGetUniformLocation(location), view)
        }
        Module["_emscripten_glUniform3iv"] = _emscripten_glUniform3iv;
        _emscripten_glUniform3iv.sig = "viii";
        function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
            GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3)
        }
        Module["_emscripten_glUniform4f"] = _emscripten_glUniform4f;
        _emscripten_glUniform4f.sig = "viffff";
        function _emscripten_glUniform4fv(location, count, value) {
            if (count <= 72) {
                var view = miniTempWebGLFloatBuffers[4 * count - 1];
                var heap = HEAPF32;
                value >>= 2;
                for (var i = 0; i < 4 * count; i += 4) {
                    var dst = value + i;
                    view[i] = heap[dst];
                    view[i + 1] = heap[dst + 1];
                    view[i + 2] = heap[dst + 2];
                    view[i + 3] = heap[dst + 3]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2)
            }
            GLctx.uniform4fv(webglGetUniformLocation(location), view)
        }
        Module["_emscripten_glUniform4fv"] = _emscripten_glUniform4fv;
        _emscripten_glUniform4fv.sig = "viii";
        function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
            GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3)
        }
        Module["_emscripten_glUniform4i"] = _emscripten_glUniform4i;
        _emscripten_glUniform4i.sig = "viiiii";
        function _emscripten_glUniform4iv(location, count, value) {
            if (count <= 72) {
                var view = __miniTempWebGLIntBuffers[4 * count - 1];
                for (var i = 0; i < 4 * count; i += 4) {
                    view[i] = HEAP32[value + 4 * i >> 2];
                    view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAP32[value + (4 * i + 8) >> 2];
                    view[i + 3] = HEAP32[value + (4 * i + 12) >> 2]
                }
            } else {
                var view = HEAP32.subarray(value >> 2, value + count * 16 >> 2)
            }
            GLctx.uniform4iv(webglGetUniformLocation(location), view)
        }
        Module["_emscripten_glUniform4iv"] = _emscripten_glUniform4iv;
        _emscripten_glUniform4iv.sig = "viii";
        function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
            if (count <= 72) {
                var view = miniTempWebGLFloatBuffers[4 * count - 1];
                for (var i = 0; i < 4 * count; i += 4) {
                    view[i] = HEAPF32[value + 4 * i >> 2];
                    view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
                    view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2)
            }
            GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, view)
        }
        Module["_emscripten_glUniformMatrix2fv"] = _emscripten_glUniformMatrix2fv;
        _emscripten_glUniformMatrix2fv.sig = "viiii";
        function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
            if (count <= 32) {
                var view = miniTempWebGLFloatBuffers[9 * count - 1];
                for (var i = 0; i < 9 * count; i += 9) {
                    view[i] = HEAPF32[value + 4 * i >> 2];
                    view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
                    view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
                    view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
                    view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
                    view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
                    view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
                    view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2)
            }
            GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, view)
        }
        Module["_emscripten_glUniformMatrix3fv"] = _emscripten_glUniformMatrix3fv;
        _emscripten_glUniformMatrix3fv.sig = "viiii";
        function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
            if (count <= 18) {
                var view = miniTempWebGLFloatBuffers[16 * count - 1];
                var heap = HEAPF32;
                value >>= 2;
                for (var i = 0; i < 16 * count; i += 16) {
                    var dst = value + i;
                    view[i] = heap[dst];
                    view[i + 1] = heap[dst + 1];
                    view[i + 2] = heap[dst + 2];
                    view[i + 3] = heap[dst + 3];
                    view[i + 4] = heap[dst + 4];
                    view[i + 5] = heap[dst + 5];
                    view[i + 6] = heap[dst + 6];
                    view[i + 7] = heap[dst + 7];
                    view[i + 8] = heap[dst + 8];
                    view[i + 9] = heap[dst + 9];
                    view[i + 10] = heap[dst + 10];
                    view[i + 11] = heap[dst + 11];
                    view[i + 12] = heap[dst + 12];
                    view[i + 13] = heap[dst + 13];
                    view[i + 14] = heap[dst + 14];
                    view[i + 15] = heap[dst + 15]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2)
            }
            GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, view)
        }
        Module["_emscripten_glUniformMatrix4fv"] = _emscripten_glUniformMatrix4fv;
        _emscripten_glUniformMatrix4fv.sig = "viiii";
        function _emscripten_glUseProgram(program) {
            program = GL.programs[program];
            GLctx.useProgram(program);
            GLctx.currentProgram = program
        }
        Module["_emscripten_glUseProgram"] = _emscripten_glUseProgram;
        _emscripten_glUseProgram.sig = "vi";
        function _emscripten_glValidateProgram(program) {
            GLctx.validateProgram(GL.programs[program])
        }
        Module["_emscripten_glValidateProgram"] = _emscripten_glValidateProgram;
        _emscripten_glValidateProgram.sig = "vi";
        function _emscripten_glVertexAttrib1f(x0, x1) {
            GLctx["vertexAttrib1f"](x0, x1)
        }
        Module["_emscripten_glVertexAttrib1f"] = _emscripten_glVertexAttrib1f;
        _emscripten_glVertexAttrib1f.sig = "vif";
        function _emscripten_glVertexAttrib1fv(index, v) {
            GLctx.vertexAttrib1f(index, HEAPF32[v >> 2])
        }
        Module["_emscripten_glVertexAttrib1fv"] = _emscripten_glVertexAttrib1fv;
        _emscripten_glVertexAttrib1fv.sig = "vii";
        function _emscripten_glVertexAttrib2f(x0, x1, x2) {
            GLctx["vertexAttrib2f"](x0, x1, x2)
        }
        Module["_emscripten_glVertexAttrib2f"] = _emscripten_glVertexAttrib2f;
        _emscripten_glVertexAttrib2f.sig = "viff";
        function _emscripten_glVertexAttrib2fv(index, v) {
            GLctx.vertexAttrib2f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2])
        }
        Module["_emscripten_glVertexAttrib2fv"] = _emscripten_glVertexAttrib2fv;
        _emscripten_glVertexAttrib2fv.sig = "vii";
        function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) {
            GLctx["vertexAttrib3f"](x0, x1, x2, x3)
        }
        Module["_emscripten_glVertexAttrib3f"] = _emscripten_glVertexAttrib3f;
        _emscripten_glVertexAttrib3f.sig = "vifff";
        function _emscripten_glVertexAttrib3fv(index, v) {
            GLctx.vertexAttrib3f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2])
        }
        Module["_emscripten_glVertexAttrib3fv"] = _emscripten_glVertexAttrib3fv;
        _emscripten_glVertexAttrib3fv.sig = "vii";
        function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) {
            GLctx["vertexAttrib4f"](x0, x1, x2, x3, x4)
        }
        Module["_emscripten_glVertexAttrib4f"] = _emscripten_glVertexAttrib4f;
        _emscripten_glVertexAttrib4f.sig = "viffff";
        function _emscripten_glVertexAttrib4fv(index, v) {
            GLctx.vertexAttrib4f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2], HEAPF32[v + 12 >> 2])
        }
        Module["_emscripten_glVertexAttrib4fv"] = _emscripten_glVertexAttrib4fv;
        _emscripten_glVertexAttrib4fv.sig = "vii";
        function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_emscripten_glVertexAttribDivisorANGLE"] = _emscripten_glVertexAttribDivisorANGLE;
        _emscripten_glVertexAttribDivisorANGLE.sig = "vii";
        function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
            GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr)
        }
        Module["_emscripten_glVertexAttribPointer"] = _emscripten_glVertexAttribPointer;
        _emscripten_glVertexAttribPointer.sig = "viiiiii";
        function _emscripten_glViewport(x0, x1, x2, x3) {
            GLctx["viewport"](x0, x1, x2, x3)
        }
        Module["_emscripten_glViewport"] = _emscripten_glViewport;
        _emscripten_glViewport.sig = "viiii";
        function _emscripten_memcpy_big(dest, src, num) {
            HEAPU8.copyWithin(dest, src, src + num)
        }
        Module["_emscripten_memcpy_big"] = _emscripten_memcpy_big;
        _emscripten_memcpy_big.sig = "vppp";
        function emscripten_realloc_buffer(size) {
            try {
                wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
                updateGlobalBufferAndViews(wasmMemory.buffer);
                return 1
            } catch (e) {}
        }
        Module["emscripten_realloc_buffer"] = emscripten_realloc_buffer;
        function _emscripten_resize_heap(requestedSize) {
            var oldSize = HEAPU8.length;
            requestedSize = requestedSize >>> 0;
            var maxHeapSize = getHeapMax();
            if (requestedSize > maxHeapSize) {
                return false
            }
            let alignUp = (x,multiple)=>x + (multiple - x % multiple) % multiple;
            for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
                var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
                overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
                var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
                var replacement = emscripten_realloc_buffer(newSize);
                if (replacement) {
                    return true
                }
            }
            return false
        }
        Module["_emscripten_resize_heap"] = _emscripten_resize_heap;
        _emscripten_resize_heap.sig = "ip";
        function getExecutableName() {
            return thisProgram || "./this.program"
        }
        Module["getExecutableName"] = getExecutableName;
        function getEnvStrings() {
            if (!getEnvStrings.strings) {
                var lang = (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
                var env = {
                    "USER": "web_user",
                    "LOGNAME": "web_user",
                    "PATH": "/",
                    "PWD": "/",
                    "HOME": "/home/web_user",
                    "LANG": lang,
                    "_": getExecutableName()
                };
                for (var x in ENV) {
                    if (ENV[x] === undefined)
                        delete env[x];
                    else
                        env[x] = ENV[x]
                }
                var strings = [];
                for (var x in env) {
                    strings.push(x + "=" + env[x])
                }
                getEnvStrings.strings = strings
            }
            return getEnvStrings.strings
        }
        Module["getEnvStrings"] = getEnvStrings;
        function writeAsciiToMemory(str, buffer, dontAddNull) {
            for (var i = 0; i < str.length; ++i) {
                HEAP8[buffer++ >> 0] = str.charCodeAt(i)
            }
            if (!dontAddNull)
                HEAP8[buffer >> 0] = 0
        }
        Module["writeAsciiToMemory"] = writeAsciiToMemory;
        function _environ_get(__environ, environ_buf) {
            var bufSize = 0;
            getEnvStrings().forEach(function(string, i) {
                var ptr = environ_buf + bufSize;
                HEAPU32[__environ + i * 4 >> 2] = ptr;
                writeAsciiToMemory(string, ptr);
                bufSize += string.length + 1
            });
            return 0
        }
        Module["_environ_get"] = _environ_get;
        _environ_get.sig = "ipp";
        function _environ_sizes_get(penviron_count, penviron_buf_size) {
            var strings = getEnvStrings();
            HEAPU32[penviron_count >> 2] = strings.length;
            var bufSize = 0;
            strings.forEach(function(string) {
                bufSize += string.length + 1
            });
            HEAPU32[penviron_buf_size >> 2] = bufSize;
            return 0
        }
        Module["_environ_sizes_get"] = _environ_sizes_get;
        _environ_sizes_get.sig = "ipp";
        function _fd_close(fd) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                FS.close(stream);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return e.errno
            }
        }
        Module["_fd_close"] = _fd_close;
        _fd_close.sig = "ii";
        function _fd_fdstat_get(fd, pbuf) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                var type = stream.tty ? 2 : FS.isDir(stream.mode) ? 3 : FS.isLink(stream.mode) ? 7 : 4;
                HEAP8[pbuf >> 0] = type;
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return e.errno
            }
        }
        Module["_fd_fdstat_get"] = _fd_fdstat_get;
        _fd_fdstat_get.sig = "iip";
        function doReadv(stream, iov, iovcnt, offset) {
            var ret = 0;
            for (var i = 0; i < iovcnt; i++) {
                var ptr = HEAPU32[iov >> 2];
                var len = HEAPU32[iov + 4 >> 2];
                iov += 8;
                var curr = FS.read(stream, HEAP8, ptr, len, offset);
                if (curr < 0)
                    return -1;
                ret += curr;
                if (curr < len)
                    break
            }
            return ret
        }
        Module["doReadv"] = doReadv;
        function _fd_pread(fd, iov, iovcnt, offset, pnum) {
            try {
                offset = bigintToI53Checked(offset);
                if (isNaN(offset))
                    return 61;
                var stream = SYSCALLS.getStreamFromFD(fd);
                var num = doReadv(stream, iov, iovcnt, offset);
                HEAPU32[pnum >> 2] = num;
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return e.errno
            }
        }
        Module["_fd_pread"] = _fd_pread;
        _fd_pread.sig = "iippjp";
        function doWritev(stream, iov, iovcnt, offset) {
            var ret = 0;
            for (var i = 0; i < iovcnt; i++) {
                var ptr = HEAPU32[iov >> 2];
                var len = HEAPU32[iov + 4 >> 2];
                iov += 8;
                var curr = FS.write(stream, HEAP8, ptr, len, offset);
                if (curr < 0)
                    return -1;
                ret += curr
            }
            return ret
        }
        Module["doWritev"] = doWritev;
        function _fd_pwrite(fd, iov, iovcnt, offset, pnum) {
            try {
                offset = bigintToI53Checked(offset);
                if (isNaN(offset))
                    return 61;
                var stream = SYSCALLS.getStreamFromFD(fd);
                var num = doWritev(stream, iov, iovcnt, offset);
                HEAPU32[pnum >> 2] = num;
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return e.errno
            }
        }
        Module["_fd_pwrite"] = _fd_pwrite;
        _fd_pwrite.sig = "iippjp";
        function _fd_read(fd, iov, iovcnt, pnum) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                var num = doReadv(stream, iov, iovcnt);
                HEAPU32[pnum >> 2] = num;
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return e.errno
            }
        }
        Module["_fd_read"] = _fd_read;
        _fd_read.sig = "iippp";
        function _fd_seek(fd, offset, whence, newOffset) {
            try {
                offset = bigintToI53Checked(offset);
                if (isNaN(offset))
                    return 61;
                var stream = SYSCALLS.getStreamFromFD(fd);
                FS.llseek(stream, offset, whence);
                tempI64 = [stream.position >>> 0, (tempDouble = stream.position,
                +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                HEAP32[newOffset >> 2] = tempI64[0],
                HEAP32[newOffset + 4 >> 2] = tempI64[1];
                if (stream.getdents && offset === 0 && whence === 0)
                    stream.getdents = null;
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return e.errno
            }
        }
        Module["_fd_seek"] = _fd_seek;
        _fd_seek.sig = "iijip";
        function _fd_sync(fd) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                if (stream.stream_ops && stream.stream_ops.fsync) {
                    return stream.stream_ops.fsync(stream)
                }
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return e.errno
            }
        }
        Module["_fd_sync"] = _fd_sync;
        _fd_sync.sig = "ii";
        function _fd_write(fd, iov, iovcnt, pnum) {
            try {
                var stream = SYSCALLS.getStreamFromFD(fd);
                var num = doWritev(stream, iov, iovcnt);
                HEAPU32[pnum >> 2] = num;
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return e.errno
            }
        }
        Module["_fd_write"] = _fd_write;
        _fd_write.sig = "iippp";
        function _getaddrinfo(node, service, hint, out) {
            var addrs = [];
            var canon = null;
            var addr = 0;
            var port = 0;
            var flags = 0;
            var family = 0;
            var type = 0;
            var proto = 0;
            var ai, last;
            function allocaddrinfo(family, type, proto, canon, addr, port) {
                var sa, salen, ai;
                var errno;
                salen = family === 10 ? 28 : 16;
                addr = family === 10 ? inetNtop6(addr) : inetNtop4(addr);
                sa = _malloc(salen);
                errno = writeSockaddr(sa, family, addr, port);
                assert(!errno);
                ai = _malloc(32);
                HEAP32[ai + 4 >> 2] = family;
                HEAP32[ai + 8 >> 2] = type;
                HEAP32[ai + 12 >> 2] = proto;
                HEAP32[ai + 24 >> 2] = canon;
                HEAPU32[ai + 20 >> 2] = sa;
                if (family === 10) {
                    HEAP32[ai + 16 >> 2] = 28
                } else {
                    HEAP32[ai + 16 >> 2] = 16
                }
                HEAP32[ai + 28 >> 2] = 0;
                return ai
            }
            if (hint) {
                flags = HEAP32[hint >> 2];
                family = HEAP32[hint + 4 >> 2];
                type = HEAP32[hint + 8 >> 2];
                proto = HEAP32[hint + 12 >> 2]
            }
            if (type && !proto) {
                proto = type === 2 ? 17 : 6
            }
            if (!type && proto) {
                type = proto === 17 ? 2 : 1
            }
            if (proto === 0) {
                proto = 6
            }
            if (type === 0) {
                type = 1
            }
            if (!node && !service) {
                return -2
            }
            if (flags & ~(1 | 2 | 4 | 1024 | 8 | 16 | 32)) {
                return -1
            }
            if (hint !== 0 && HEAP32[hint >> 2] & 2 && !node) {
                return -1
            }
            if (flags & 32) {
                return -2
            }
            if (type !== 0 && type !== 1 && type !== 2) {
                return -7
            }
            if (family !== 0 && family !== 2 && family !== 10) {
                return -6
            }
            if (service) {
                service = UTF8ToString(service);
                port = parseInt(service, 10);
                if (isNaN(port)) {
                    if (flags & 1024) {
                        return -2
                    }
                    return -8
                }
            }
            if (!node) {
                if (family === 0) {
                    family = 2
                }
                if ((flags & 1) === 0) {
                    if (family === 2) {
                        addr = _htonl(2130706433)
                    } else {
                        addr = [0, 0, 0, 1]
                    }
                }
                ai = allocaddrinfo(family, type, proto, null, addr, port);
                HEAPU32[out >> 2] = ai;
                return 0
            }
            node = UTF8ToString(node);
            addr = inetPton4(node);
            if (addr !== null) {
                if (family === 0 || family === 2) {
                    family = 2
                } else if (family === 10 && flags & 8) {
                    addr = [0, 0, _htonl(65535), addr];
                    family = 10
                } else {
                    return -2
                }
            } else {
                addr = inetPton6(node);
                if (addr !== null) {
                    if (family === 0 || family === 10) {
                        family = 10
                    } else {
                        return -2
                    }
                }
            }
            if (addr != null) {
                ai = allocaddrinfo(family, type, proto, node, addr, port);
                HEAPU32[out >> 2] = ai;
                return 0
            }
            if (flags & 4) {
                return -2
            }
            node = DNS.lookup_name(node);
            addr = inetPton4(node);
            if (family === 0) {
                family = 2
            } else if (family === 10) {
                addr = [0, 0, _htonl(65535), addr]
            }
            ai = allocaddrinfo(family, type, proto, null, addr, port);
            HEAPU32[out >> 2] = ai;
            return 0
        }
        Module["_getaddrinfo"] = _getaddrinfo;
        _getaddrinfo.sig = "ipppp";
        function _getentropy(buffer, size) {
            if (!_getentropy.randomDevice) {
                _getentropy.randomDevice = getRandomDevice()
            }
            for (var i = 0; i < size; i++) {
                HEAP8[buffer + i >> 0] = _getentropy.randomDevice()
            }
            return 0
        }
        Module["_getentropy"] = _getentropy;
        _getentropy.sig = "ipp";
        function getHostByName(name) {
            var ret = _malloc(20);
            var nameBuf = _malloc(name.length + 1);
            stringToUTF8(name, nameBuf, name.length + 1);
            HEAPU32[ret >> 2] = nameBuf;
            var aliasesBuf = _malloc(4);
            HEAPU32[aliasesBuf >> 2] = 0;
            HEAPU32[ret + 4 >> 2] = aliasesBuf;
            var afinet = 2;
            HEAP32[ret + 8 >> 2] = afinet;
            HEAP32[ret + 12 >> 2] = 4;
            var addrListBuf = _malloc(12);
            HEAPU32[addrListBuf >> 2] = addrListBuf + 8;
            HEAPU32[addrListBuf + 4 >> 2] = 0;
            HEAP32[addrListBuf + 8 >> 2] = inetPton4(DNS.lookup_name(name));
            HEAPU32[ret + 16 >> 2] = addrListBuf;
            return ret
        }
        Module["getHostByName"] = getHostByName;
        function _gethostbyaddr(addr, addrlen, type) {
            if (type !== 2) {
                setErrNo(5);
                return null
            }
            addr = HEAP32[addr >> 2];
            var host = inetNtop4(addr);
            var lookup = DNS.lookup_addr(host);
            if (lookup) {
                host = lookup
            }
            return getHostByName(host)
        }
        Module["_gethostbyaddr"] = _gethostbyaddr;
        _gethostbyaddr.sig = "ipii";
        function _gethostbyname(name) {
            return getHostByName(UTF8ToString(name))
        }
        Module["_gethostbyname"] = _gethostbyname;
        _gethostbyname.sig = "pp";
        function _getloadavg(loadavg, nelem) {
            var limit = Math.min(nelem, 3);
            var doubleSize = 8;
            for (var i = 0; i < limit; i++) {
                HEAPF64[loadavg + i * doubleSize >> 3] = .1
            }
            return limit
        }
        Module["_getloadavg"] = _getloadavg;
        _getloadavg.sig = "ipi";
        function _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {
            var info = readSockaddr(sa, salen);
            if (info.errno) {
                return -6
            }
            var port = info.port;
            var addr = info.addr;
            var overflowed = false;
            if (node && nodelen) {
                var lookup;
                if (flags & 1 || !(lookup = DNS.lookup_addr(addr))) {
                    if (flags & 8) {
                        return -2
                    }
                } else {
                    addr = lookup
                }
                var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);
                if (numBytesWrittenExclNull + 1 >= nodelen) {
                    overflowed = true
                }
            }
            if (serv && servlen) {
                port = "" + port;
                var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);
                if (numBytesWrittenExclNull + 1 >= servlen) {
                    overflowed = true
                }
            }
            if (overflowed) {
                return -12
            }
            return 0
        }
        Module["_getnameinfo"] = _getnameinfo;
        _getnameinfo.sig = "ipipipii";
        var Protocols = {
            list: [],
            map: {}
        };
        Module["Protocols"] = Protocols;
        function _setprotoent(stayopen) {
            function allocprotoent(name, proto, aliases) {
                var nameBuf = _malloc(name.length + 1);
                writeAsciiToMemory(name, nameBuf);
                var j = 0;
                var length = aliases.length;
                var aliasListBuf = _malloc((length + 1) * 4);
                for (var i = 0; i < length; i++,
                j += 4) {
                    var alias = aliases[i];
                    var aliasBuf = _malloc(alias.length + 1);
                    writeAsciiToMemory(alias, aliasBuf);
                    HEAPU32[aliasListBuf + j >> 2] = aliasBuf
                }
                HEAPU32[aliasListBuf + j >> 2] = 0;
                var pe = _malloc(12);
                HEAPU32[pe >> 2] = nameBuf;
                HEAPU32[pe + 4 >> 2] = aliasListBuf;
                HEAP32[pe + 8 >> 2] = proto;
                return pe
            }
            var list = Protocols.list;
            var map = Protocols.map;
            if (list.length === 0) {
                var entry = allocprotoent("tcp", 6, ["TCP"]);
                list.push(entry);
                map["tcp"] = map["6"] = entry;
                entry = allocprotoent("udp", 17, ["UDP"]);
                list.push(entry);
                map["udp"] = map["17"] = entry
            }
            _setprotoent.index = 0
        }
        Module["_setprotoent"] = _setprotoent;
        function _getprotobyname(name) {
            name = UTF8ToString(name);
            _setprotoent(true);
            var result = Protocols.map[name];
            return result
        }
        Module["_getprotobyname"] = _getprotobyname;
        function __isLeapYear(year) {
            return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)
        }
        Module["__isLeapYear"] = __isLeapYear;
        function __arraySum(array, index) {
            var sum = 0;
            for (var i = 0; i <= index; sum += array[i++]) {}
            return sum
        }
        Module["__arraySum"] = __arraySum;
        var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        Module["__MONTH_DAYS_LEAP"] = __MONTH_DAYS_LEAP;
        var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        Module["__MONTH_DAYS_REGULAR"] = __MONTH_DAYS_REGULAR;
        function __addDays(date, days) {
            var newDate = new Date(date.getTime());
            while (days > 0) {
                var leap = __isLeapYear(newDate.getFullYear());
                var currentMonth = newDate.getMonth();
                var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
                if (days > daysInCurrentMonth - newDate.getDate()) {
                    days -= daysInCurrentMonth - newDate.getDate() + 1;
                    newDate.setDate(1);
                    if (currentMonth < 11) {
                        newDate.setMonth(currentMonth + 1)
                    } else {
                        newDate.setMonth(0);
                        newDate.setFullYear(newDate.getFullYear() + 1)
                    }
                } else {
                    newDate.setDate(newDate.getDate() + days);
                    return newDate
                }
            }
            return newDate
        }
        Module["__addDays"] = __addDays;
        function _strftime(s, maxsize, format, tm) {
            var tm_zone = HEAP32[tm + 40 >> 2];
            var date = {
                tm_sec: HEAP32[tm >> 2],
                tm_min: HEAP32[tm + 4 >> 2],
                tm_hour: HEAP32[tm + 8 >> 2],
                tm_mday: HEAP32[tm + 12 >> 2],
                tm_mon: HEAP32[tm + 16 >> 2],
                tm_year: HEAP32[tm + 20 >> 2],
                tm_wday: HEAP32[tm + 24 >> 2],
                tm_yday: HEAP32[tm + 28 >> 2],
                tm_isdst: HEAP32[tm + 32 >> 2],
                tm_gmtoff: HEAP32[tm + 36 >> 2],
                tm_zone: tm_zone ? UTF8ToString(tm_zone) : ""
            };
            var pattern = UTF8ToString(format);
            var EXPANSION_RULES_1 = {
                "%c": "%a %b %d %H:%M:%S %Y",
                "%D": "%m/%d/%y",
                "%F": "%Y-%m-%d",
                "%h": "%b",
                "%r": "%I:%M:%S %p",
                "%R": "%H:%M",
                "%T": "%H:%M:%S",
                "%x": "%m/%d/%y",
                "%X": "%H:%M:%S",
                "%Ec": "%c",
                "%EC": "%C",
                "%Ex": "%m/%d/%y",
                "%EX": "%H:%M:%S",
                "%Ey": "%y",
                "%EY": "%Y",
                "%Od": "%d",
                "%Oe": "%e",
                "%OH": "%H",
                "%OI": "%I",
                "%Om": "%m",
                "%OM": "%M",
                "%OS": "%S",
                "%Ou": "%u",
                "%OU": "%U",
                "%OV": "%V",
                "%Ow": "%w",
                "%OW": "%W",
                "%Oy": "%y"
            };
            for (var rule in EXPANSION_RULES_1) {
                pattern = pattern.replace(new RegExp(rule,"g"), EXPANSION_RULES_1[rule])
            }
            var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            function leadingSomething(value, digits, character) {
                var str = typeof value == "number" ? value.toString() : value || "";
                while (str.length < digits) {
                    str = character[0] + str
                }
                return str
            }
            function leadingNulls(value, digits) {
                return leadingSomething(value, digits, "0")
            }
            function compareByDay(date1, date2) {
                function sgn(value) {
                    return value < 0 ? -1 : value > 0 ? 1 : 0
                }
                var compare;
                if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
                    if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
                        compare = sgn(date1.getDate() - date2.getDate())
                    }
                }
                return compare
            }
            function getFirstWeekStartDate(janFourth) {
                switch (janFourth.getDay()) {
                case 0:
                    return new Date(janFourth.getFullYear() - 1,11,29);
                case 1:
                    return janFourth;
                case 2:
                    return new Date(janFourth.getFullYear(),0,3);
                case 3:
                    return new Date(janFourth.getFullYear(),0,2);
                case 4:
                    return new Date(janFourth.getFullYear(),0,1);
                case 5:
                    return new Date(janFourth.getFullYear() - 1,11,31);
                case 6:
                    return new Date(janFourth.getFullYear() - 1,11,30)
                }
            }
            function getWeekBasedYear(date) {
                var thisDate = __addDays(new Date(date.tm_year + 1900,0,1), date.tm_yday);
                var janFourthThisYear = new Date(thisDate.getFullYear(),0,4);
                var janFourthNextYear = new Date(thisDate.getFullYear() + 1,0,4);
                var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
                var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
                if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
                    if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
                        return thisDate.getFullYear() + 1
                    }
                    return thisDate.getFullYear()
                }
                return thisDate.getFullYear() - 1
            }
            var EXPANSION_RULES_2 = {
                "%a": function(date) {
                    return WEEKDAYS[date.tm_wday].substring(0, 3)
                },
                "%A": function(date) {
                    return WEEKDAYS[date.tm_wday]
                },
                "%b": function(date) {
                    return MONTHS[date.tm_mon].substring(0, 3)
                },
                "%B": function(date) {
                    return MONTHS[date.tm_mon]
                },
                "%C": function(date) {
                    var year = date.tm_year + 1900;
                    return leadingNulls(year / 100 | 0, 2)
                },
                "%d": function(date) {
                    return leadingNulls(date.tm_mday, 2)
                },
                "%e": function(date) {
                    return leadingSomething(date.tm_mday, 2, " ")
                },
                "%g": function(date) {
                    return getWeekBasedYear(date).toString().substring(2)
                },
                "%G": function(date) {
                    return getWeekBasedYear(date)
                },
                "%H": function(date) {
                    return leadingNulls(date.tm_hour, 2)
                },
                "%I": function(date) {
                    var twelveHour = date.tm_hour;
                    if (twelveHour == 0)
                        twelveHour = 12;
                    else if (twelveHour > 12)
                        twelveHour -= 12;
                    return leadingNulls(twelveHour, 2)
                },
                "%j": function(date) {
                    return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3)
                },
                "%m": function(date) {
                    return leadingNulls(date.tm_mon + 1, 2)
                },
                "%M": function(date) {
                    return leadingNulls(date.tm_min, 2)
                },
                "%n": function() {
                    return "\n"
                },
                "%p": function(date) {
                    if (date.tm_hour >= 0 && date.tm_hour < 12) {
                        return "AM"
                    }
                    return "PM"
                },
                "%S": function(date) {
                    return leadingNulls(date.tm_sec, 2)
                },
                "%t": function() {
                    return "\t"
                },
                "%u": function(date) {
                    return date.tm_wday || 7
                },
                "%U": function(date) {
                    var days = date.tm_yday + 7 - date.tm_wday;
                    return leadingNulls(Math.floor(days / 7), 2)
                },
                "%V": function(date) {
                    var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7) / 7);
                    if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {
                        val++
                    }
                    if (!val) {
                        val = 52;
                        var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;
                        if (dec31 == 4 || dec31 == 5 && __isLeapYear(date.tm_year % 400 - 1)) {
                            val++
                        }
                    } else if (val == 53) {
                        var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;
                        if (jan1 != 4 && (jan1 != 3 || !__isLeapYear(date.tm_year)))
                            val = 1
                    }
                    return leadingNulls(val, 2)
                },
                "%w": function(date) {
                    return date.tm_wday
                },
                "%W": function(date) {
                    var days = date.tm_yday + 7 - (date.tm_wday + 6) % 7;
                    return leadingNulls(Math.floor(days / 7), 2)
                },
                "%y": function(date) {
                    return (date.tm_year + 1900).toString().substring(2)
                },
                "%Y": function(date) {
                    return date.tm_year + 1900
                },
                "%z": function(date) {
                    var off = date.tm_gmtoff;
                    var ahead = off >= 0;
                    off = Math.abs(off) / 60;
                    off = off / 60 * 100 + off % 60;
                    return (ahead ? "+" : "-") + String("0000" + off).slice(-4)
                },
                "%Z": function(date) {
                    return date.tm_zone
                },
                "%%": function() {
                    return "%"
                }
            };
            pattern = pattern.replace(/%%/g, "\0\0");
            for (var rule in EXPANSION_RULES_2) {
                if (pattern.includes(rule)) {
                    pattern = pattern.replace(new RegExp(rule,"g"), EXPANSION_RULES_2[rule](date))
                }
            }
            pattern = pattern.replace(/\0\0/g, "%");
            var bytes = intArrayFromString(pattern, false);
            if (bytes.length > maxsize) {
                return 0
            }
            writeArrayToMemory(bytes, s);
            return bytes.length - 1
        }
        Module["_strftime"] = _strftime;
        _strftime.sig = "ppppp";
        function _strftime_l(s, maxsize, format, tm) {
            return _strftime(s, maxsize, format, tm)
        }
        Module["_strftime_l"] = _strftime_l;
        function _system(command) {
            if (ENVIRONMENT_IS_NODE) {
                if (!command)
                    return 1;
                var cmdstr = UTF8ToString(command);
                if (!cmdstr.length)
                    return 0;
                var cp = require("child_process");
                var ret = cp.spawnSync(cmdstr, [], {
                    shell: true,
                    stdio: "inherit"
                });
                var _W_EXITCODE = (ret,sig)=>ret << 8 | sig;
                if (ret.status === null) {
                    var signalToNumber = sig=>{
                        switch (sig) {
                        case "SIGHUP":
                            return 1;
                        case "SIGINT":
                            return 2;
                        case "SIGQUIT":
                            return 3;
                        case "SIGFPE":
                            return 8;
                        case "SIGKILL":
                            return 9;
                        case "SIGALRM":
                            return 14;
                        case "SIGTERM":
                            return 15
                        }
                        return 2
                    }
                    ;
                    return _W_EXITCODE(0, signalToNumber(ret.signal))
                }
                return _W_EXITCODE(ret.status, 0)
            }
            if (!command)
                return 0;
            setErrNo(52);
            return -1
        }
        Module["_system"] = _system;
        _system.sig = "ip";
        function ptrToString(ptr) {
            return "0x" + ptr.toString(16).padStart(8, "0")
        }
        Module["ptrToString"] = ptrToString;
        function _emscripten_notify_memory_growth(memoryIndex) {
            updateGlobalBufferAndViews(wasmMemory.buffer)
        }
        Module["_emscripten_notify_memory_growth"] = _emscripten_notify_memory_growth;
        function ___asctime_r(tmPtr, buf) {
            var date = {
                tm_sec: HEAP32[tmPtr >> 2],
                tm_min: HEAP32[tmPtr + 4 >> 2],
                tm_hour: HEAP32[tmPtr + 8 >> 2],
                tm_mday: HEAP32[tmPtr + 12 >> 2],
                tm_mon: HEAP32[tmPtr + 16 >> 2],
                tm_year: HEAP32[tmPtr + 20 >> 2],
                tm_wday: HEAP32[tmPtr + 24 >> 2]
            };
            var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var s = days[date.tm_wday] + " " + months[date.tm_mon] + (date.tm_mday < 10 ? "  " : " ") + date.tm_mday + (date.tm_hour < 10 ? " 0" : " ") + date.tm_hour + (date.tm_min < 10 ? ":0" : ":") + date.tm_min + (date.tm_sec < 10 ? ":0" : ":") + date.tm_sec + " " + (1900 + date.tm_year) + "\n";
            stringToUTF8(s, buf, 26);
            return buf
        }
        Module["___asctime_r"] = ___asctime_r;
        ___asctime_r.sig = "ppp";
        function _strptime(buf, format, tm) {
            var pattern = UTF8ToString(format);
            var SPECIAL_CHARS = "\\!@#$^&*()+=-[]/{}|:<>?,.";
            for (var i = 0, ii = SPECIAL_CHARS.length; i < ii; ++i) {
                pattern = pattern.replace(new RegExp("\\" + SPECIAL_CHARS[i],"g"), "\\" + SPECIAL_CHARS[i])
            }
            var EQUIVALENT_MATCHERS = {
                "%A": "%a",
                "%B": "%b",
                "%c": "%a %b %d %H:%M:%S %Y",
                "%D": "%m\\/%d\\/%y",
                "%e": "%d",
                "%F": "%Y-%m-%d",
                "%h": "%b",
                "%R": "%H\\:%M",
                "%r": "%I\\:%M\\:%S\\s%p",
                "%T": "%H\\:%M\\:%S",
                "%x": "%m\\/%d\\/(?:%y|%Y)",
                "%X": "%H\\:%M\\:%S"
            };
            for (var matcher in EQUIVALENT_MATCHERS) {
                pattern = pattern.replace(matcher, EQUIVALENT_MATCHERS[matcher])
            }
            var DATE_PATTERNS = {
                "%a": "(?:Sun(?:day)?)|(?:Mon(?:day)?)|(?:Tue(?:sday)?)|(?:Wed(?:nesday)?)|(?:Thu(?:rsday)?)|(?:Fri(?:day)?)|(?:Sat(?:urday)?)",
                "%b": "(?:Jan(?:uary)?)|(?:Feb(?:ruary)?)|(?:Mar(?:ch)?)|(?:Apr(?:il)?)|May|(?:Jun(?:e)?)|(?:Jul(?:y)?)|(?:Aug(?:ust)?)|(?:Sep(?:tember)?)|(?:Oct(?:ober)?)|(?:Nov(?:ember)?)|(?:Dec(?:ember)?)",
                "%C": "\\d\\d",
                "%d": "0[1-9]|[1-9](?!\\d)|1\\d|2\\d|30|31",
                "%H": "\\d(?!\\d)|[0,1]\\d|20|21|22|23",
                "%I": "\\d(?!\\d)|0\\d|10|11|12",
                "%j": "00[1-9]|0?[1-9](?!\\d)|0?[1-9]\\d(?!\\d)|[1,2]\\d\\d|3[0-6]\\d",
                "%m": "0[1-9]|[1-9](?!\\d)|10|11|12",
                "%M": "0\\d|\\d(?!\\d)|[1-5]\\d",
                "%n": "\\s",
                "%p": "AM|am|PM|pm|A\\.M\\.|a\\.m\\.|P\\.M\\.|p\\.m\\.",
                "%S": "0\\d|\\d(?!\\d)|[1-5]\\d|60",
                "%U": "0\\d|\\d(?!\\d)|[1-4]\\d|50|51|52|53",
                "%W": "0\\d|\\d(?!\\d)|[1-4]\\d|50|51|52|53",
                "%w": "[0-6]",
                "%y": "\\d\\d",
                "%Y": "\\d\\d\\d\\d",
                "%%": "%",
                "%t": "\\s"
            };
            var MONTH_NUMBERS = {
                JAN: 0,
                FEB: 1,
                MAR: 2,
                APR: 3,
                MAY: 4,
                JUN: 5,
                JUL: 6,
                AUG: 7,
                SEP: 8,
                OCT: 9,
                NOV: 10,
                DEC: 11
            };
            var DAY_NUMBERS_SUN_FIRST = {
                SUN: 0,
                MON: 1,
                TUE: 2,
                WED: 3,
                THU: 4,
                FRI: 5,
                SAT: 6
            };
            var DAY_NUMBERS_MON_FIRST = {
                MON: 0,
                TUE: 1,
                WED: 2,
                THU: 3,
                FRI: 4,
                SAT: 5,
                SUN: 6
            };
            for (var datePattern in DATE_PATTERNS) {
                pattern = pattern.replace(datePattern, "(" + datePattern + DATE_PATTERNS[datePattern] + ")")
            }
            var capture = [];
            for (var i = pattern.indexOf("%"); i >= 0; i = pattern.indexOf("%")) {
                capture.push(pattern[i + 1]);
                pattern = pattern.replace(new RegExp("\\%" + pattern[i + 1],"g"), "")
            }
            var matches = new RegExp("^" + pattern,"i").exec(UTF8ToString(buf));
            function initDate() {
                function fixup(value, min, max) {
                    return typeof value != "number" || isNaN(value) ? min : value >= min ? value <= max ? value : max : min
                }
                return {
                    year: fixup(HEAP32[tm + 20 >> 2] + 1900, 1970, 9999),
                    month: fixup(HEAP32[tm + 16 >> 2], 0, 11),
                    day: fixup(HEAP32[tm + 12 >> 2], 1, 31),
                    hour: fixup(HEAP32[tm + 8 >> 2], 0, 23),
                    min: fixup(HEAP32[tm + 4 >> 2], 0, 59),
                    sec: fixup(HEAP32[tm >> 2], 0, 59)
                }
            }
            if (matches) {
                var date = initDate();
                var value;
                var getMatch = symbol=>{
                    var pos = capture.indexOf(symbol);
                    if (pos >= 0) {
                        return matches[pos + 1]
                    }
                    return
                }
                ;
                if (value = getMatch("S")) {
                    date.sec = jstoi_q(value)
                }
                if (value = getMatch("M")) {
                    date.min = jstoi_q(value)
                }
                if (value = getMatch("H")) {
                    date.hour = jstoi_q(value)
                } else if (value = getMatch("I")) {
                    var hour = jstoi_q(value);
                    if (value = getMatch("p")) {
                        hour += value.toUpperCase()[0] === "P" ? 12 : 0
                    }
                    date.hour = hour
                }
                if (value = getMatch("Y")) {
                    date.year = jstoi_q(value)
                } else if (value = getMatch("y")) {
                    var year = jstoi_q(value);
                    if (value = getMatch("C")) {
                        year += jstoi_q(value) * 100
                    } else {
                        year += year < 69 ? 2e3 : 1900
                    }
                    date.year = year
                }
                if (value = getMatch("m")) {
                    date.month = jstoi_q(value) - 1
                } else if (value = getMatch("b")) {
                    date.month = MONTH_NUMBERS[value.substring(0, 3).toUpperCase()] || 0
                }
                if (value = getMatch("d")) {
                    date.day = jstoi_q(value)
                } else if (value = getMatch("j")) {
                    var day = jstoi_q(value);
                    var leapYear = __isLeapYear(date.year);
                    for (var month = 0; month < 12; ++month) {
                        var daysUntilMonth = __arraySum(leapYear ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, month - 1);
                        if (day <= daysUntilMonth + (leapYear ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[month]) {
                            date.day = day - daysUntilMonth
                        }
                    }
                } else if (value = getMatch("a")) {
                    var weekDay = value.substring(0, 3).toUpperCase();
                    if (value = getMatch("U")) {
                        var weekDayNumber = DAY_NUMBERS_SUN_FIRST[weekDay];
                        var weekNumber = jstoi_q(value);
                        var janFirst = new Date(date.year,0,1);
                        var endDate;
                        if (janFirst.getDay() === 0) {
                            endDate = __addDays(janFirst, weekDayNumber + 7 * (weekNumber - 1))
                        } else {
                            endDate = __addDays(janFirst, 7 - janFirst.getDay() + weekDayNumber + 7 * (weekNumber - 1))
                        }
                        date.day = endDate.getDate();
                        date.month = endDate.getMonth()
                    } else if (value = getMatch("W")) {
                        var weekDayNumber = DAY_NUMBERS_MON_FIRST[weekDay];
                        var weekNumber = jstoi_q(value);
                        var janFirst = new Date(date.year,0,1);
                        var endDate;
                        if (janFirst.getDay() === 1) {
                            endDate = __addDays(janFirst, weekDayNumber + 7 * (weekNumber - 1))
                        } else {
                            endDate = __addDays(janFirst, 7 - janFirst.getDay() + 1 + weekDayNumber + 7 * (weekNumber - 1))
                        }
                        date.day = endDate.getDate();
                        date.month = endDate.getMonth()
                    }
                }
                var fullDate = new Date(date.year,date.month,date.day,date.hour,date.min,date.sec,0);
                HEAP32[tm >> 2] = fullDate.getSeconds();
                HEAP32[tm + 4 >> 2] = fullDate.getMinutes();
                HEAP32[tm + 8 >> 2] = fullDate.getHours();
                HEAP32[tm + 12 >> 2] = fullDate.getDate();
                HEAP32[tm + 16 >> 2] = fullDate.getMonth();
                HEAP32[tm + 20 >> 2] = fullDate.getFullYear() - 1900;
                HEAP32[tm + 24 >> 2] = fullDate.getDay();
                HEAP32[tm + 28 >> 2] = __arraySum(__isLeapYear(fullDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, fullDate.getMonth() - 1) + fullDate.getDate() - 1;
                HEAP32[tm + 32 >> 2] = 0;
                return buf + intArrayFromString(matches[0]).length - 1
            }
            return 0
        }
        Module["_strptime"] = _strptime;
        _strptime.sig = "pppp";
        function _strptime_l(buf, format, tm) {
            return _strptime(buf, format, tm)
        }
        Module["_strptime_l"] = _strptime_l;
        _strptime_l.sig = "pppp";
        var ERRNO_MESSAGES = {
            0: "Success",
            1: "Arg list too long",
            2: "Permission denied",
            3: "Address already in use",
            4: "Address not available",
            5: "Address family not supported by protocol family",
            6: "No more processes",
            7: "Socket already connected",
            8: "Bad file number",
            9: "Trying to read unreadable message",
            10: "Mount device busy",
            11: "Operation canceled",
            12: "No children",
            13: "Connection aborted",
            14: "Connection refused",
            15: "Connection reset by peer",
            16: "File locking deadlock error",
            17: "Destination address required",
            18: "Math arg out of domain of func",
            19: "Quota exceeded",
            20: "File exists",
            21: "Bad address",
            22: "File too large",
            23: "Host is unreachable",
            24: "Identifier removed",
            25: "Illegal byte sequence",
            26: "Connection already in progress",
            27: "Interrupted system call",
            28: "Invalid argument",
            29: "I/O error",
            30: "Socket is already connected",
            31: "Is a directory",
            32: "Too many symbolic links",
            33: "Too many open files",
            34: "Too many links",
            35: "Message too long",
            36: "Multihop attempted",
            37: "File or path name too long",
            38: "Network interface is not configured",
            39: "Connection reset by network",
            40: "Network is unreachable",
            41: "Too many open files in system",
            42: "No buffer space available",
            43: "No such device",
            44: "No such file or directory",
            45: "Exec format error",
            46: "No record locks available",
            47: "The link has been severed",
            48: "Not enough core",
            49: "No message of desired type",
            50: "Protocol not available",
            51: "No space left on device",
            52: "Function not implemented",
            53: "Socket is not connected",
            54: "Not a directory",
            55: "Directory not empty",
            56: "State not recoverable",
            57: "Socket operation on non-socket",
            59: "Not a typewriter",
            60: "No such device or address",
            61: "Value too large for defined data type",
            62: "Previous owner died",
            63: "Not super-user",
            64: "Broken pipe",
            65: "Protocol error",
            66: "Unknown protocol",
            67: "Protocol wrong type for socket",
            68: "Math result not representable",
            69: "Read only file system",
            70: "Illegal seek",
            71: "No such process",
            72: "Stale file handle",
            73: "Connection timed out",
            74: "Text file busy",
            75: "Cross-device link",
            100: "Device not a stream",
            101: "Bad font file fmt",
            102: "Invalid slot",
            103: "Invalid request code",
            104: "No anode",
            105: "Block device required",
            106: "Channel number out of range",
            107: "Level 3 halted",
            108: "Level 3 reset",
            109: "Link number out of range",
            110: "Protocol driver not attached",
            111: "No CSI structure available",
            112: "Level 2 halted",
            113: "Invalid exchange",
            114: "Invalid request descriptor",
            115: "Exchange full",
            116: "No data (for no delay io)",
            117: "Timer expired",
            118: "Out of streams resources",
            119: "Machine is not on the network",
            120: "Package not installed",
            121: "The object is remote",
            122: "Advertise error",
            123: "Srmount error",
            124: "Communication error on send",
            125: "Cross mount point (not really error)",
            126: "Given log. name not unique",
            127: "f.d. invalid for this operation",
            128: "Remote address changed",
            129: "Can   access a needed shared lib",
            130: "Accessing a corrupted shared lib",
            131: ".lib section in a.out corrupted",
            132: "Attempting to link in too many libs",
            133: "Attempting to exec a shared library",
            135: "Streams pipe error",
            136: "Too many users",
            137: "Socket type not supported",
            138: "Not supported",
            139: "Protocol family not supported",
            140: "Can't send after socket shutdown",
            141: "Too many references",
            142: "Host is down",
            148: "No medium (in tape drive)",
            156: "Level 2 not synchronized"
        };
        Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;
        function _gethostbyname_r(name, ret, buf, buflen, out, err) {
            var data = _gethostbyname(name);
            _memcpy(ret, data, 20);
            _free(data);
            HEAP32[err >> 2] = 0;
            HEAPU32[out >> 2] = ret;
            return 0
        }
        Module["_gethostbyname_r"] = _gethostbyname_r;
        _gethostbyname_r.sig = "ipppipp";
        function _endprotoent() {}
        Module["_endprotoent"] = _endprotoent;
        function _getprotoent(number) {
            if (_setprotoent.index === Protocols.list.length) {
                return 0
            }
            var result = Protocols.list[_setprotoent.index++];
            return result
        }
        Module["_getprotoent"] = _getprotoent;
        function _getprotobynumber(number) {
            _setprotoent(true);
            var result = Protocols.map[number];
            return result
        }
        Module["_getprotobynumber"] = _getprotobynumber;
        function _emscripten_run_script(ptr) {
            eval(UTF8ToString(ptr))
        }
        Module["_emscripten_run_script"] = _emscripten_run_script;
        _emscripten_run_script.sig = "vp";
        function _emscripten_run_script_int(ptr) {
            return eval(UTF8ToString(ptr)) | 0
        }
        Module["_emscripten_run_script_int"] = _emscripten_run_script_int;
        _emscripten_run_script_int.sig = "ip";
        function _emscripten_run_script_string(ptr) {
            var s = eval(UTF8ToString(ptr));
            if (s == null) {
                return 0
            }
            s += "";
            var me = _emscripten_run_script_string;
            var len = lengthBytesUTF8(s);
            if (!me.bufferSize || me.bufferSize < len + 1) {
                if (me.bufferSize)
                    _free(me.buffer);
                me.bufferSize = len + 1;
                me.buffer = _malloc(me.bufferSize)
            }
            stringToUTF8(s, me.buffer, me.bufferSize);
            return me.buffer
        }
        Module["_emscripten_run_script_string"] = _emscripten_run_script_string;
        _emscripten_run_script_string.sig = "pp";
        function _emscripten_random() {
            return Math.random()
        }
        Module["_emscripten_random"] = _emscripten_random;
        function traverseStack(args) {
            if (!args || !args.callee || !args.callee.name) {
                return [null, "", ""]
            }
            var funstr = args.callee.toString();
            var funcname = args.callee.name;
            var str = "(";
            var first = true;
            for (var i in args) {
                var a = args[i];
                if (!first) {
                    str += ", "
                }
                first = false;
                if (typeof a == "number" || typeof a == "string") {
                    str += a
                } else {
                    str += "(" + typeof a + ")"
                }
            }
            str += ")";
            var caller = args.callee.caller;
            args = caller ? caller.arguments : [];
            if (first)
                str = "";
            return [args, funcname, str]
        }
        Module["traverseStack"] = traverseStack;
        function _emscripten_get_callstack_js(flags) {
            var callstack = jsStackTrace();
            var iThisFunc = callstack.lastIndexOf("_emscripten_log");
            var iThisFunc2 = callstack.lastIndexOf("_emscripten_get_callstack");
            var iNextLine = callstack.indexOf("\n", Math.max(iThisFunc, iThisFunc2)) + 1;
            callstack = callstack.slice(iNextLine);
            if (flags & 32) {
                warnOnce("EM_LOG_DEMANGLE is deprecated; ignoring")
            }
            if (flags & 8 && typeof emscripten_source_map == "undefined") {
                warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
                flags ^= 8;
                flags |= 16
            }
            var stack_args = null;
            if (flags & 128) {
                stack_args = traverseStack(arguments);
                while (stack_args[1].includes("_emscripten_"))
                    stack_args = traverseStack(stack_args[0])
            }
            var lines = callstack.split("\n");
            callstack = "";
            var newFirefoxRe = new RegExp("\\s*(.*?)@(.*?):([0-9]+):([0-9]+)");
            var firefoxRe = new RegExp("\\s*(.*?)@(.*):(.*)(:(.*))?");
            var chromeRe = new RegExp("\\s*at (.*?) \\((.*):(.*):(.*)\\)");
            for (var l in lines) {
                var line = lines[l];
                var symbolName = "";
                var file = "";
                var lineno = 0;
                var column = 0;
                var parts = chromeRe.exec(line);
                if (parts && parts.length == 5) {
                    symbolName = parts[1];
                    file = parts[2];
                    lineno = parts[3];
                    column = parts[4]
                } else {
                    parts = newFirefoxRe.exec(line);
                    if (!parts)
                        parts = firefoxRe.exec(line);
                    if (parts && parts.length >= 4) {
                        symbolName = parts[1];
                        file = parts[2];
                        lineno = parts[3];
                        column = parts[4] | 0
                    } else {
                        callstack += line + "\n";
                        continue
                    }
                }
                var haveSourceMap = false;
                if (flags & 8) {
                    var orig = emscripten_source_map.originalPositionFor({
                        line: lineno,
                        column: column
                    });
                    haveSourceMap = orig && orig.source;
                    if (haveSourceMap) {
                        if (flags & 64) {
                            orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf("/") + 1)
                        }
                        callstack += "    at " + symbolName + " (" + orig.source + ":" + orig.line + ":" + orig.column + ")\n"
                    }
                }
                if (flags & 16 || !haveSourceMap) {
                    if (flags & 64) {
                        file = file.substring(file.replace(/\\/g, "/").lastIndexOf("/") + 1)
                    }
                    callstack += (haveSourceMap ? "     = " + symbolName : "    at " + symbolName) + " (" + file + ":" + lineno + ":" + column + ")\n"
                }
                if (flags & 128 && stack_args[0]) {
                    if (stack_args[1] == symbolName && stack_args[2].length > 0) {
                        callstack = callstack.replace(/\s+$/, "");
                        callstack += " with values: " + stack_args[1] + stack_args[2] + "\n"
                    }
                    stack_args = traverseStack(stack_args[0])
                }
            }
            callstack = callstack.replace(/\s+$/, "");
            return callstack
        }
        Module["_emscripten_get_callstack_js"] = _emscripten_get_callstack_js;
        function _emscripten_get_callstack(flags, str, maxbytes) {
            var callstack = _emscripten_get_callstack_js(flags);
            if (!str || maxbytes <= 0) {
                return lengthBytesUTF8(callstack) + 1
            }
            var bytesWrittenExcludingNull = stringToUTF8(callstack, str, maxbytes);
            return bytesWrittenExcludingNull + 1
        }
        Module["_emscripten_get_callstack"] = _emscripten_get_callstack;
        function _emscripten_log_js(flags, str) {
            if (flags & 24) {
                str = str.replace(/\s+$/, "");
                str += (str.length > 0 ? "\n" : "") + _emscripten_get_callstack_js(flags)
            }
            if (flags & 1) {
                if (flags & 4) {
                    console.error(str)
                } else if (flags & 2) {
                    console.warn(str)
                } else if (flags & 512) {
                    console.info(str)
                } else if (flags & 256) {
                    console.debug(str)
                } else {
                    console.log(str)
                }
            } else if (flags & 6) {
                err(str)
            } else {
                out(str)
            }
        }
        Module["_emscripten_log_js"] = _emscripten_log_js;
        function reallyNegative(x) {
            return x < 0 || x === 0 && 1 / x === -Infinity
        }
        Module["reallyNegative"] = reallyNegative;
        function convertI32PairToI53(lo, hi) {
            return (lo >>> 0) + hi * 4294967296
        }
        Module["convertI32PairToI53"] = convertI32PairToI53;
        function convertU32PairToI53(lo, hi) {
            return (lo >>> 0) + (hi >>> 0) * 4294967296
        }
        Module["convertU32PairToI53"] = convertU32PairToI53;
        function reSign(value, bits) {
            if (value <= 0) {
                return value
            }
            var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
            if (value >= half && (bits <= 32 || value > half)) {
                value = -2 * half + value
            }
            return value
        }
        Module["reSign"] = reSign;
        function unSign(value, bits) {
            if (value >= 0) {
                return value
            }
            return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value
        }
        Module["unSign"] = unSign;
        function strLen(ptr) {
            var end = ptr;
            while (HEAPU8[end])
                ++end;
            return end - ptr
        }
        Module["strLen"] = strLen;
        function formatString(format, varargs) {
            var textIndex = format;
            var argIndex = varargs;
            function prepVararg(ptr, type) {
                if (type === "double" || type === "i64") {
                    if (ptr & 7) {
                        ptr += 4
                    }
                } else {}
                return ptr
            }
            function getNextArg(type) {
                var ret;
                argIndex = prepVararg(argIndex, type);
                if (type === "double") {
                    ret = HEAPF64[argIndex >> 3];
                    argIndex += 8
                } else if (type == "i64") {
                    ret = [HEAP32[argIndex >> 2], HEAP32[argIndex + 4 >> 2]];
                    argIndex += 8
                } else {
                    type = "i32";
                    ret = HEAP32[argIndex >> 2];
                    argIndex += 4
                }
                return ret
            }
            var ret = [];
            var curr, next, currArg;
            while (1) {
                var startTextIndex = textIndex;
                curr = HEAP8[textIndex >> 0];
                if (curr === 0)
                    break;
                next = HEAP8[textIndex + 1 >> 0];
                if (curr == 37) {
                    var flagAlwaysSigned = false;
                    var flagLeftAlign = false;
                    var flagAlternative = false;
                    var flagZeroPad = false;
                    var flagPadSign = false;
                    flagsLoop: while (1) {
                        switch (next) {
                        case 43:
                            flagAlwaysSigned = true;
                            break;
                        case 45:
                            flagLeftAlign = true;
                            break;
                        case 35:
                            flagAlternative = true;
                            break;
                        case 48:
                            if (flagZeroPad) {
                                break flagsLoop
                            } else {
                                flagZeroPad = true;
                                break
                            }
                        case 32:
                            flagPadSign = true;
                            break;
                        default:
                            break flagsLoop
                        }
                        textIndex++;
                        next = HEAP8[textIndex + 1 >> 0]
                    }
                    var width = 0;
                    if (next == 42) {
                        width = getNextArg("i32");
                        textIndex++;
                        next = HEAP8[textIndex + 1 >> 0]
                    } else {
                        while (next >= 48 && next <= 57) {
                            width = width * 10 + (next - 48);
                            textIndex++;
                            next = HEAP8[textIndex + 1 >> 0]
                        }
                    }
                    var precisionSet = false
                      , precision = -1;
                    if (next == 46) {
                        precision = 0;
                        precisionSet = true;
                        textIndex++;
                        next = HEAP8[textIndex + 1 >> 0];
                        if (next == 42) {
                            precision = getNextArg("i32");
                            textIndex++
                        } else {
                            while (1) {
                                var precisionChr = HEAP8[textIndex + 1 >> 0];
                                if (precisionChr < 48 || precisionChr > 57)
                                    break;
                                precision = precision * 10 + (precisionChr - 48);
                                textIndex++
                            }
                        }
                        next = HEAP8[textIndex + 1 >> 0]
                    }
                    if (precision < 0) {
                        precision = 6;
                        precisionSet = false
                    }
                    var argSize;
                    switch (String.fromCharCode(next)) {
                    case "h":
                        var nextNext = HEAP8[textIndex + 2 >> 0];
                        if (nextNext == 104) {
                            textIndex++;
                            argSize = 1
                        } else {
                            argSize = 2
                        }
                        break;
                    case "l":
                        var nextNext = HEAP8[textIndex + 2 >> 0];
                        if (nextNext == 108) {
                            textIndex++;
                            argSize = 8
                        } else {
                            argSize = 4
                        }
                        break;
                    case "L":
                    case "q":
                    case "j":
                        argSize = 8;
                        break;
                    case "z":
                    case "t":
                    case "I":
                        argSize = 4;
                        break;
                    default:
                        argSize = null
                    }
                    if (argSize)
                        textIndex++;
                    next = HEAP8[textIndex + 1 >> 0];
                    switch (String.fromCharCode(next)) {
                    case "d":
                    case "i":
                    case "u":
                    case "o":
                    case "x":
                    case "X":
                    case "p":
                        {
                            var signed = next == 100 || next == 105;
                            argSize = argSize || 4;
                            currArg = getNextArg("i" + argSize * 8);
                            var argText;
                            if (argSize == 8) {
                                currArg = next == 117 ? convertU32PairToI53(currArg[0], currArg[1]) : convertI32PairToI53(currArg[0], currArg[1])
                            }
                            if (argSize <= 4) {
                                var limit = Math.pow(256, argSize) - 1;
                                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8)
                            }
                            var currAbsArg = Math.abs(currArg);
                            var prefix = "";
                            if (next == 100 || next == 105) {
                                argText = reSign(currArg, 8 * argSize).toString(10)
                            } else if (next == 117) {
                                argText = unSign(currArg, 8 * argSize).toString(10);
                                currArg = Math.abs(currArg)
                            } else if (next == 111) {
                                argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8)
                            } else if (next == 120 || next == 88) {
                                prefix = flagAlternative && currArg != 0 ? "0x" : "";
                                if (currArg < 0) {
                                    currArg = -currArg;
                                    argText = (currAbsArg - 1).toString(16);
                                    var buffer = [];
                                    for (var i = 0; i < argText.length; i++) {
                                        buffer.push((15 - parseInt(argText[i], 16)).toString(16))
                                    }
                                    argText = buffer.join("");
                                    while (argText.length < argSize * 2)
                                        argText = "f" + argText
                                } else {
                                    argText = currAbsArg.toString(16)
                                }
                                if (next == 88) {
                                    prefix = prefix.toUpperCase();
                                    argText = argText.toUpperCase()
                                }
                            } else if (next == 112) {
                                if (currAbsArg === 0) {
                                    argText = "(nil)"
                                } else {
                                    prefix = "0x";
                                    argText = currAbsArg.toString(16)
                                }
                            }
                            if (precisionSet) {
                                while (argText.length < precision) {
                                    argText = "0" + argText
                                }
                            }
                            if (currArg >= 0) {
                                if (flagAlwaysSigned) {
                                    prefix = "+" + prefix
                                } else if (flagPadSign) {
                                    prefix = " " + prefix
                                }
                            }
                            if (argText.charAt(0) == "-") {
                                prefix = "-" + prefix;
                                argText = argText.substr(1)
                            }
                            while (prefix.length + argText.length < width) {
                                if (flagLeftAlign) {
                                    argText += " "
                                } else {
                                    if (flagZeroPad) {
                                        argText = "0" + argText
                                    } else {
                                        prefix = " " + prefix
                                    }
                                }
                            }
                            argText = prefix + argText;
                            argText.split("").forEach(function(chr) {
                                ret.push(chr.charCodeAt(0))
                            });
                            break
                        }
                    case "f":
                    case "F":
                    case "e":
                    case "E":
                    case "g":
                    case "G":
                        {
                            currArg = getNextArg("double");
                            var argText;
                            if (isNaN(currArg)) {
                                argText = "nan";
                                flagZeroPad = false
                            } else if (!isFinite(currArg)) {
                                argText = (currArg < 0 ? "-" : "") + "inf";
                                flagZeroPad = false
                            } else {
                                var isGeneral = false;
                                var effectivePrecision = Math.min(precision, 20);
                                if (next == 103 || next == 71) {
                                    isGeneral = true;
                                    precision = precision || 1;
                                    var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
                                    if (precision > exponent && exponent >= -4) {
                                        next = (next == 103 ? "f" : "F").charCodeAt(0);
                                        precision -= exponent + 1
                                    } else {
                                        next = (next == 103 ? "e" : "E").charCodeAt(0);
                                        precision--
                                    }
                                    effectivePrecision = Math.min(precision, 20)
                                }
                                if (next == 101 || next == 69) {
                                    argText = currArg.toExponential(effectivePrecision);
                                    if (/[eE][-+]\d$/.test(argText)) {
                                        argText = argText.slice(0, -1) + "0" + argText.slice(-1)
                                    }
                                } else if (next == 102 || next == 70) {
                                    argText = currArg.toFixed(effectivePrecision);
                                    if (currArg === 0 && reallyNegative(currArg)) {
                                        argText = "-" + argText
                                    }
                                }
                                var parts = argText.split("e");
                                if (isGeneral && !flagAlternative) {
                                    while (parts[0].length > 1 && parts[0].includes(".") && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
                                        parts[0] = parts[0].slice(0, -1)
                                    }
                                } else {
                                    if (flagAlternative && argText.indexOf(".") == -1)
                                        parts[0] += ".";
                                    while (precision > effectivePrecision++)
                                        parts[0] += "0"
                                }
                                argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
                                if (next == 69)
                                    argText = argText.toUpperCase();
                                if (currArg >= 0) {
                                    if (flagAlwaysSigned) {
                                        argText = "+" + argText
                                    } else if (flagPadSign) {
                                        argText = " " + argText
                                    }
                                }
                            }
                            while (argText.length < width) {
                                if (flagLeftAlign) {
                                    argText += " "
                                } else {
                                    if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
                                        argText = argText[0] + "0" + argText.slice(1)
                                    } else {
                                        argText = (flagZeroPad ? "0" : " ") + argText
                                    }
                                }
                            }
                            if (next < 97)
                                argText = argText.toUpperCase();
                            argText.split("").forEach(function(chr) {
                                ret.push(chr.charCodeAt(0))
                            });
                            break
                        }
                    case "s":
                        {
                            var arg = getNextArg("i8*");
                            var argLength = arg ? strLen(arg) : "(null)".length;
                            if (precisionSet)
                                argLength = Math.min(argLength, precision);
                            if (!flagLeftAlign) {
                                while (argLength < width--) {
                                    ret.push(32)
                                }
                            }
                            if (arg) {
                                for (var i = 0; i < argLength; i++) {
                                    ret.push(HEAPU8[arg++ >> 0])
                                }
                            } else {
                                ret = ret.concat(intArrayFromString("(null)".substr(0, argLength), true))
                            }
                            if (flagLeftAlign) {
                                while (argLength < width--) {
                                    ret.push(32)
                                }
                            }
                            break
                        }
                    case "c":
                        {
                            if (flagLeftAlign)
                                ret.push(getNextArg("i8"));
                            while (--width > 0) {
                                ret.push(32)
                            }
                            if (!flagLeftAlign)
                                ret.push(getNextArg("i8"));
                            break
                        }
                    case "n":
                        {
                            var ptr = getNextArg("i32*");
                            HEAP32[ptr >> 2] = ret.length;
                            break
                        }
                    case "%":
                        {
                            ret.push(curr);
                            break
                        }
                    default:
                        {
                            for (var i = startTextIndex; i < textIndex + 2; i++) {
                                ret.push(HEAP8[i >> 0])
                            }
                        }
                    }
                    textIndex += 2
                } else {
                    ret.push(curr);
                    textIndex += 1
                }
            }
            return ret
        }
        Module["formatString"] = formatString;
        function _emscripten_log(flags, format, varargs) {
            var result = formatString(format, varargs);
            var str = UTF8ArrayToString(result, 0);
            _emscripten_log_js(flags, str)
        }
        Module["_emscripten_log"] = _emscripten_log;
        _emscripten_log.sig = "vipp";
        function _emscripten_get_compiler_setting(name) {
            throw "You must build with -sRETAIN_COMPILER_SETTINGS for getCompilerSetting or emscripten_get_compiler_setting to work"
        }
        Module["_emscripten_get_compiler_setting"] = _emscripten_get_compiler_setting;
        _emscripten_get_compiler_setting.sig = "pp";
        function _emscripten_has_asyncify() {
            return 0
        }
        Module["_emscripten_has_asyncify"] = _emscripten_has_asyncify;
        function _emscripten_debugger() {
            debugger
        }
        Module["_emscripten_debugger"] = _emscripten_debugger;
        function _emscripten_print_double(x, to, max) {
            var str = x + "";
            if (to)
                return stringToUTF8(str, to, max);
            else
                return lengthBytesUTF8(str)
        }
        Module["_emscripten_print_double"] = _emscripten_print_double;
        _emscripten_print_double.sig = "iipi";
        function convertFrameToPC(frame) {
            abort("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER");
            return 0
        }
        Module["convertFrameToPC"] = convertFrameToPC;
        function _emscripten_return_address(level) {
            var callstack = jsStackTrace().split("\n");
            if (callstack[0] == "Error") {
                callstack.shift()
            }
            var caller = callstack[level + 3];
            return convertFrameToPC(caller)
        }
        Module["_emscripten_return_address"] = _emscripten_return_address;
        _emscripten_return_address.sig = "pi";
        var UNWIND_CACHE = {};
        Module["UNWIND_CACHE"] = UNWIND_CACHE;
        function saveInUnwindCache(callstack) {
            callstack.forEach(frame=>{
                var pc = convertFrameToPC(frame);
                if (pc) {
                    UNWIND_CACHE[pc] = frame
                }
            }
            )
        }
        Module["saveInUnwindCache"] = saveInUnwindCache;
        function _emscripten_stack_snapshot() {
            var callstack = jsStackTrace().split("\n");
            if (callstack[0] == "Error") {
                callstack.shift()
            }
            saveInUnwindCache(callstack);
            UNWIND_CACHE.last_addr = convertFrameToPC(callstack[3]);
            UNWIND_CACHE.last_stack = callstack;
            return UNWIND_CACHE.last_addr
        }
        Module["_emscripten_stack_snapshot"] = _emscripten_stack_snapshot;
        _emscripten_stack_snapshot.sig = "p";
        function _emscripten_stack_unwind_buffer(addr, buffer, count) {
            var stack;
            if (UNWIND_CACHE.last_addr == addr) {
                stack = UNWIND_CACHE.last_stack
            } else {
                stack = jsStackTrace().split("\n");
                if (stack[0] == "Error") {
                    stack.shift()
                }
                saveInUnwindCache(stack)
            }
            var offset = 3;
            while (stack[offset] && convertFrameToPC(stack[offset]) != addr) {
                ++offset
            }
            for (var i = 0; i < count && stack[i + offset]; ++i) {
                HEAP32[buffer + i * 4 >> 2] = convertFrameToPC(stack[i + offset])
            }
            return i
        }
        Module["_emscripten_stack_unwind_buffer"] = _emscripten_stack_unwind_buffer;
        _emscripten_stack_unwind_buffer.sig = "ippi";
        function _emscripten_pc_get_function(pc) {
            abort("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER")
        }
        Module["_emscripten_pc_get_function"] = _emscripten_pc_get_function;
        function convertPCtoSourceLocation(pc) {
            if (UNWIND_CACHE.last_get_source_pc == pc)
                return UNWIND_CACHE.last_source;
            var match;
            var source;
            if (!source) {
                var frame = UNWIND_CACHE[pc];
                if (!frame)
                    return null;
                if (match = /\((.*):(\d+):(\d+)\)$/.exec(frame)) {
                    source = {
                        file: match[1],
                        line: match[2],
                        column: match[3]
                    }
                } else if (match = /@(.*):(\d+):(\d+)/.exec(frame)) {
                    source = {
                        file: match[1],
                        line: match[2],
                        column: match[3]
                    }
                }
            }
            UNWIND_CACHE.last_get_source_pc = pc;
            UNWIND_CACHE.last_source = source;
            return source
        }
        Module["convertPCtoSourceLocation"] = convertPCtoSourceLocation;
        function _emscripten_pc_get_file(pc) {
            var result = convertPCtoSourceLocation(pc);
            if (!result)
                return 0;
            if (_emscripten_pc_get_file.ret)
                _free(_emscripten_pc_get_file.ret);
            _emscripten_pc_get_file.ret = allocateUTF8(result.file);
            return _emscripten_pc_get_file.ret
        }
        Module["_emscripten_pc_get_file"] = _emscripten_pc_get_file;
        _emscripten_pc_get_file.sig = "pp";
        function _emscripten_pc_get_line(pc) {
            var result = convertPCtoSourceLocation(pc);
            return result ? result.line : 0
        }
        Module["_emscripten_pc_get_line"] = _emscripten_pc_get_line;
        _emscripten_pc_get_line.sig = "pp";
        function _emscripten_pc_get_column(pc) {
            var result = convertPCtoSourceLocation(pc);
            return result ? result.column || 0 : 0
        }
        Module["_emscripten_pc_get_column"] = _emscripten_pc_get_column;
        _emscripten_pc_get_column.sig = "pp";
        function _emscripten_get_module_name(buf, length) {
            return stringToUTF8(wasmBinaryFile, buf, length)
        }
        Module["_emscripten_get_module_name"] = _emscripten_get_module_name;
        var _emscripten_asm_const_double = _emscripten_asm_const_int;
        Module["_emscripten_asm_const_double"] = _emscripten_asm_const_double;
        var _emscripten_asm_const_ptr = _emscripten_asm_const_int;
        Module["_emscripten_asm_const_ptr"] = _emscripten_asm_const_ptr;
        function mainThreadEM_ASM(code, sigPtr, argbuf, sync) {
            code -= 1024;
            var args = readAsmConstArgs(sigPtr, argbuf);
            return ASM_CONSTS[code].apply(null, args)
        }
        Module["mainThreadEM_ASM"] = mainThreadEM_ASM;
        mainThreadEM_ASM.sig = "iippi";
        function _emscripten_asm_const_int_sync_on_main_thread(code, sigPtr, argbuf) {
            return mainThreadEM_ASM(code, sigPtr, argbuf, 1)
        }
        Module["_emscripten_asm_const_int_sync_on_main_thread"] = _emscripten_asm_const_int_sync_on_main_thread;
        _emscripten_asm_const_int_sync_on_main_thread.sig = "iiii";
        var _emscripten_asm_const_double_sync_on_main_thread = _emscripten_asm_const_int_sync_on_main_thread;
        Module["_emscripten_asm_const_double_sync_on_main_thread"] = _emscripten_asm_const_double_sync_on_main_thread;
        function _emscripten_asm_const_async_on_main_thread(code, sigPtr, argbuf) {
            return mainThreadEM_ASM(code, sigPtr, argbuf, 0)
        }
        Module["_emscripten_asm_const_async_on_main_thread"] = _emscripten_asm_const_async_on_main_thread;
        function jstoi_s(str) {
            return Number(str)
        }
        Module["jstoi_s"] = jstoi_s;
        function __Unwind_Backtrace(func, arg) {
            var trace = _emscripten_get_callstack_js();
            var parts = trace.split("\n");
            for (var i = 0; i < parts.length; i++) {
                var ret = getWasmTableEntry(func)(0, arg);
                if (ret !== 0)
                    return
            }
        }
        Module["__Unwind_Backtrace"] = __Unwind_Backtrace;
        function __Unwind_GetIPInfo() {
            abort("Unwind_GetIPInfo")
        }
        Module["__Unwind_GetIPInfo"] = __Unwind_GetIPInfo;
        function __Unwind_FindEnclosingFunction() {
            return 0
        }
        Module["__Unwind_FindEnclosingFunction"] = __Unwind_FindEnclosingFunction;
        function __Unwind_RaiseException(ex) {
            err("Warning: _Unwind_RaiseException is not correctly implemented");
            return ___cxa_throw(ex, 0, 0)
        }
        Module["__Unwind_RaiseException"] = __Unwind_RaiseException;
        function __Unwind_DeleteException(ex) {
            err("TODO: Unwind_DeleteException")
        }
        Module["__Unwind_DeleteException"] = __Unwind_DeleteException;
        function _emscripten_autodebug_i64(line, valuel, valueh) {
            out("AD:" + [line, valuel, valueh])
        }
        Module["_emscripten_autodebug_i64"] = _emscripten_autodebug_i64;
        function _emscripten_autodebug_i32(line, value) {
            out("AD:" + [line, value])
        }
        Module["_emscripten_autodebug_i32"] = _emscripten_autodebug_i32;
        function _emscripten_autodebug_i16(line, value) {
            out("AD:" + [line, value])
        }
        Module["_emscripten_autodebug_i16"] = _emscripten_autodebug_i16;
        function _emscripten_autodebug_i8(line, value) {
            out("AD:" + [line, value])
        }
        Module["_emscripten_autodebug_i8"] = _emscripten_autodebug_i8;
        function _emscripten_autodebug_float(line, value) {
            out("AD:" + [line, value])
        }
        Module["_emscripten_autodebug_float"] = _emscripten_autodebug_float;
        function _emscripten_autodebug_double(line, value) {
            out("AD:" + [line, value])
        }
        Module["_emscripten_autodebug_double"] = _emscripten_autodebug_double;
        function getDynCaller(sig, ptr) {
            var argCache = [];
            return function() {
                argCache.length = 0;
                Object.assign(argCache, arguments);
                return dynCall(sig, ptr, argCache)
            }
        }
        Module["getDynCaller"] = getDynCaller;
        function _emscripten_force_exit(status) {
            noExitRuntime = false;
            _exit(status)
        }
        Module["_emscripten_force_exit"] = _emscripten_force_exit;
        _emscripten_force_exit.sig = "vi";
        function _emscripten_throw_number(number) {
            throw number
        }
        Module["_emscripten_throw_number"] = _emscripten_throw_number;
        function _emscripten_throw_string(str) {
            throw UTF8ToString(str)
        }
        Module["_emscripten_throw_string"] = _emscripten_throw_string;
        function runtimeKeepalivePush() {}
        Module["runtimeKeepalivePush"] = runtimeKeepalivePush;
        runtimeKeepalivePush.sig = "v";
        function runtimeKeepalivePop() {}
        Module["runtimeKeepalivePop"] = runtimeKeepalivePop;
        runtimeKeepalivePop.sig = "v";
        var _emscripten_runtime_keepalive_push = runtimeKeepalivePush;
        Module["_emscripten_runtime_keepalive_push"] = _emscripten_runtime_keepalive_push;
        var _emscripten_runtime_keepalive_pop = runtimeKeepalivePop;
        Module["_emscripten_runtime_keepalive_pop"] = _emscripten_runtime_keepalive_pop;
        function _emscripten_runtime_keepalive_check() {
            return keepRuntimeAlive()
        }
        Module["_emscripten_runtime_keepalive_check"] = _emscripten_runtime_keepalive_check;
        var ___global_base = 1024;
        Module["___global_base"] = ___global_base;
        function __emscripten_fs_load_embedded_files(ptr) {
            do {
                var name_addr = HEAPU32[ptr >> 2];
                ptr += 4;
                var len = HEAPU32[ptr >> 2];
                ptr += 4;
                var content = HEAPU32[ptr >> 2];
                ptr += 4;
                var name = UTF8ToString(name_addr);
                FS.createPath("/", PATH.dirname(name), true, true);
                FS.createDataFile(name, null, HEAP8.subarray(content, content + len), true, true, true)
            } while (HEAPU32[ptr >> 2])
        }
        Module["__emscripten_fs_load_embedded_files"] = __emscripten_fs_load_embedded_files;
        __emscripten_fs_load_embedded_files.sig = "vp";
        function writeI53ToI64Clamped(ptr, num) {
            if (num > 0x8000000000000000) {
                HEAPU32[ptr >> 2] = 4294967295;
                HEAPU32[ptr + 4 >> 2] = 2147483647
            } else if (num < -0x8000000000000000) {
                HEAPU32[ptr >> 2] = 0;
                HEAPU32[ptr + 4 >> 2] = 2147483648
            } else {
                HEAPU32[ptr >> 2] = num;
                HEAPU32[ptr + 4 >> 2] = (num - HEAPU32[ptr >> 2]) / 4294967296
            }
        }
        Module["writeI53ToI64Clamped"] = writeI53ToI64Clamped;
        function writeI53ToI64Signaling(ptr, num) {
            if (num > 0x8000000000000000 || num < -0x8000000000000000) {
                throw "RangeError:" + num
            }
            HEAPU32[ptr >> 2] = num;
            HEAPU32[ptr + 4 >> 2] = (num - HEAPU32[ptr >> 2]) / 4294967296
        }
        Module["writeI53ToI64Signaling"] = writeI53ToI64Signaling;
        function writeI53ToU64Clamped(ptr, num) {
            if (num > 0x10000000000000000)
                HEAPU32[ptr >> 2] = HEAPU32[ptr + 4 >> 2] = 4294967295;
            else if (num < 0)
                HEAPU32[ptr >> 2] = HEAPU32[ptr + 4 >> 2] = 0;
            else {
                HEAPU32[ptr >> 2] = num;
                HEAPU32[ptr + 4 >> 2] = (num - HEAPU32[ptr >> 2]) / 4294967296
            }
        }
        Module["writeI53ToU64Clamped"] = writeI53ToU64Clamped;
        function writeI53ToU64Signaling(ptr, num) {
            if (num < 0 || num > 0x10000000000000000) {
                throw "RangeError:" + num
            }
            HEAPU32[ptr >> 2] = num;
            HEAPU32[ptr + 4 >> 2] = (num - HEAPU32[ptr >> 2]) / 4294967296
        }
        Module["writeI53ToU64Signaling"] = writeI53ToU64Signaling;
        function readI53FromU64(ptr) {
            return HEAPU32[ptr >> 2] + HEAPU32[ptr + 4 >> 2] * 4294967296
        }
        Module["readI53FromU64"] = readI53FromU64;
        function convertI32PairToI53Checked(lo, hi) {
            return hi + 2097152 >>> 0 < 4194305 - !!lo ? (lo >>> 0) + hi * 4294967296 : NaN
        }
        Module["convertI32PairToI53Checked"] = convertI32PairToI53Checked;
        function getCFunc(ident) {
            var func = Module["_" + ident];
            return func
        }
        Module["getCFunc"] = getCFunc;
        function ccall(ident, returnType, argTypes, args, opts) {
            var toC = {
                "string": str=>{
                    var ret = 0;
                    if (str !== null && str !== undefined && str !== 0) {
                        var len = (str.length << 2) + 1;
                        ret = stackAlloc(len);
                        stringToUTF8(str, ret, len)
                    }
                    return ret
                }
                ,
                "array": arr=>{
                    var ret = stackAlloc(arr.length);
                    writeArrayToMemory(arr, ret);
                    return ret
                }
            };
            function convertReturnValue(ret) {
                if (returnType === "string") {
                    return UTF8ToString(ret)
                }
                if (returnType === "boolean")
                    return Boolean(ret);
                return ret
            }
            var func = getCFunc(ident);
            var cArgs = [];
            var stack = 0;
            if (args) {
                for (var i = 0; i < args.length; i++) {
                    var converter = toC[argTypes[i]];
                    if (converter) {
                        if (stack === 0)
                            stack = stackSave();
                        cArgs[i] = converter(args[i])
                    } else {
                        cArgs[i] = args[i]
                    }
                }
            }
            var ret = func.apply(null, cArgs);
            function onDone(ret) {
                if (stack !== 0)
                    stackRestore(stack);
                return convertReturnValue(ret)
            }
            ret = onDone(ret);
            return ret
        }
        Module["ccall"] = ccall;
        function cwrap(ident, returnType, argTypes, opts) {
            argTypes = argTypes || [];
            var numericArgs = argTypes.every(type=>type === "number" || type === "boolean");
            var numericRet = returnType !== "string";
            if (numericRet && numericArgs && !opts) {
                return getCFunc(ident)
            }
            return function() {
                return ccall(ident, returnType, argTypes, arguments, opts)
            }
        }
        Module["cwrap"] = cwrap;
        function removeFunction(index) {
            functionsInTableMap.delete(getWasmTableEntry(index));
            freeTableIndexes.push(index)
        }
        Module["removeFunction"] = removeFunction;
        function _emscripten_math_cbrt(x) {
            return Math.cbrt(x)
        }
        Module["_emscripten_math_cbrt"] = _emscripten_math_cbrt;
        function _emscripten_math_pow(x, y) {
            return Math.pow(x, y)
        }
        Module["_emscripten_math_pow"] = _emscripten_math_pow;
        function _emscripten_math_random() {
            return Math.random()
        }
        Module["_emscripten_math_random"] = _emscripten_math_random;
        function _emscripten_math_sign(x) {
            return Math.sign(x)
        }
        Module["_emscripten_math_sign"] = _emscripten_math_sign;
        function _emscripten_math_sqrt(x) {
            return Math.sqrt(x)
        }
        Module["_emscripten_math_sqrt"] = _emscripten_math_sqrt;
        function _emscripten_math_exp(x) {
            return Math.exp(x)
        }
        Module["_emscripten_math_exp"] = _emscripten_math_exp;
        function _emscripten_math_expm1(x) {
            return Math.expm1(x)
        }
        Module["_emscripten_math_expm1"] = _emscripten_math_expm1;
        function _emscripten_math_fmod(x, y) {
            return x % y
        }
        Module["_emscripten_math_fmod"] = _emscripten_math_fmod;
        function _emscripten_math_log(x) {
            return Math.log(x)
        }
        Module["_emscripten_math_log"] = _emscripten_math_log;
        function _emscripten_math_log1p(x) {
            return Math.log1p(x)
        }
        Module["_emscripten_math_log1p"] = _emscripten_math_log1p;
        function _emscripten_math_log10(x) {
            return Math.log10(x)
        }
        Module["_emscripten_math_log10"] = _emscripten_math_log10;
        function _emscripten_math_log2(x) {
            return Math.log2(x)
        }
        Module["_emscripten_math_log2"] = _emscripten_math_log2;
        function _emscripten_math_round(x) {
            return Math.round(x)
        }
        Module["_emscripten_math_round"] = _emscripten_math_round;
        function _emscripten_math_acos(x) {
            return Math.acos(x)
        }
        Module["_emscripten_math_acos"] = _emscripten_math_acos;
        function _emscripten_math_acosh(x) {
            return Math.acosh(x)
        }
        Module["_emscripten_math_acosh"] = _emscripten_math_acosh;
        function _emscripten_math_asin(x) {
            return Math.asin(x)
        }
        Module["_emscripten_math_asin"] = _emscripten_math_asin;
        function _emscripten_math_asinh(x) {
            return Math.asinh(x)
        }
        Module["_emscripten_math_asinh"] = _emscripten_math_asinh;
        function _emscripten_math_atan(x) {
            return Math.atan(x)
        }
        Module["_emscripten_math_atan"] = _emscripten_math_atan;
        function _emscripten_math_atanh(x) {
            return Math.atanh(x)
        }
        Module["_emscripten_math_atanh"] = _emscripten_math_atanh;
        function _emscripten_math_atan2(y, x) {
            return Math.atan2(y, x)
        }
        Module["_emscripten_math_atan2"] = _emscripten_math_atan2;
        function _emscripten_math_cos(x) {
            return Math.cos(x)
        }
        Module["_emscripten_math_cos"] = _emscripten_math_cos;
        function _emscripten_math_cosh(x) {
            return Math.cosh(x)
        }
        Module["_emscripten_math_cosh"] = _emscripten_math_cosh;
        function _emscripten_math_hypot(count, varargs) {
            var args = [];
            for (var i = 0; i < count; ++i)
                args.push(HEAPF64[(varargs >> 3) + i]);
            return Math.hypot.apply(null, args)
        }
        Module["_emscripten_math_hypot"] = _emscripten_math_hypot;
        _emscripten_math_hypot.sig = "iip";
        function _emscripten_math_sin(x) {
            return Math.sin(x)
        }
        Module["_emscripten_math_sin"] = _emscripten_math_sin;
        function _emscripten_math_sinh(x) {
            return Math.sinh(x)
        }
        Module["_emscripten_math_sinh"] = _emscripten_math_sinh;
        function _emscripten_math_tan(x) {
            return Math.tan(x)
        }
        Module["_emscripten_math_tan"] = _emscripten_math_tan;
        function _emscripten_math_tanh(x) {
            return Math.tanh(x)
        }
        Module["_emscripten_math_tanh"] = _emscripten_math_tanh;
        function intArrayToString(array) {
            var ret = [];
            for (var i = 0; i < array.length; i++) {
                var chr = array[i];
                if (chr > 255) {
                    if (ASSERTIONS) {
                        assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.")
                    }
                    chr &= 255
                }
                ret.push(String.fromCharCode(chr))
            }
            return ret.join("")
        }
        Module["intArrayToString"] = intArrayToString;
        function AsciiToString(ptr) {
            var str = "";
            while (1) {
                var ch = HEAPU8[ptr++ >> 0];
                if (!ch)
                    return str;
                str += String.fromCharCode(ch)
            }
        }
        Module["AsciiToString"] = AsciiToString;
        function stringToAscii(str, outPtr) {
            return writeAsciiToMemory(str, outPtr, false)
        }
        Module["stringToAscii"] = stringToAscii;
        var UTF16Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : undefined;
        Module["UTF16Decoder"] = UTF16Decoder;
        function UTF16ToString(ptr, maxBytesToRead) {
            var endPtr = ptr;
            var idx = endPtr >> 1;
            var maxIdx = idx + maxBytesToRead / 2;
            while (!(idx >= maxIdx) && HEAPU16[idx])
                ++idx;
            endPtr = idx << 1;
            if (endPtr - ptr > 32 && UTF16Decoder)
                return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
            var str = "";
            for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
                var codeUnit = HEAP16[ptr + i * 2 >> 1];
                if (codeUnit == 0)
                    break;
                str += String.fromCharCode(codeUnit)
            }
            return str
        }
        Module["UTF16ToString"] = UTF16ToString;
        function stringToUTF16(str, outPtr, maxBytesToWrite) {
            if (maxBytesToWrite === undefined) {
                maxBytesToWrite = 2147483647
            }
            if (maxBytesToWrite < 2)
                return 0;
            maxBytesToWrite -= 2;
            var startPtr = outPtr;
            var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
            for (var i = 0; i < numCharsToWrite; ++i) {
                var codeUnit = str.charCodeAt(i);
                HEAP16[outPtr >> 1] = codeUnit;
                outPtr += 2
            }
            HEAP16[outPtr >> 1] = 0;
            return outPtr - startPtr
        }
        Module["stringToUTF16"] = stringToUTF16;
        function lengthBytesUTF16(str) {
            return str.length * 2
        }
        Module["lengthBytesUTF16"] = lengthBytesUTF16;
        function UTF32ToString(ptr, maxBytesToRead) {
            var i = 0;
            var str = "";
            while (!(i >= maxBytesToRead / 4)) {
                var utf32 = HEAP32[ptr + i * 4 >> 2];
                if (utf32 == 0)
                    break;
                ++i;
                if (utf32 >= 65536) {
                    var ch = utf32 - 65536;
                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)
                } else {
                    str += String.fromCharCode(utf32)
                }
            }
            return str
        }
        Module["UTF32ToString"] = UTF32ToString;
        function stringToUTF32(str, outPtr, maxBytesToWrite) {
            if (maxBytesToWrite === undefined) {
                maxBytesToWrite = 2147483647
            }
            if (maxBytesToWrite < 4)
                return 0;
            var startPtr = outPtr;
            var endPtr = startPtr + maxBytesToWrite - 4;
            for (var i = 0; i < str.length; ++i) {
                var codeUnit = str.charCodeAt(i);
                if (codeUnit >= 55296 && codeUnit <= 57343) {
                    var trailSurrogate = str.charCodeAt(++i);
                    codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023
                }
                HEAP32[outPtr >> 2] = codeUnit;
                outPtr += 4;
                if (outPtr + 4 > endPtr)
                    break
            }
            HEAP32[outPtr >> 2] = 0;
            return outPtr - startPtr
        }
        Module["stringToUTF32"] = stringToUTF32;
        function lengthBytesUTF32(str) {
            var len = 0;
            for (var i = 0; i < str.length; ++i) {
                var codeUnit = str.charCodeAt(i);
                if (codeUnit >= 55296 && codeUnit <= 57343)
                    ++i;
                len += 4
            }
            return len
        }
        Module["lengthBytesUTF32"] = lengthBytesUTF32;
        function writeStringToMemory(string, buffer, dontAddNull) {
            warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
            var lastChar, end;
            if (dontAddNull) {
                end = buffer + lengthBytesUTF8(string);
                lastChar = HEAP8[end]
            }
            stringToUTF8(string, buffer, Infinity);
            if (dontAddNull)
                HEAP8[end] = lastChar
        }
        Module["writeStringToMemory"] = writeStringToMemory;
        function ___syscall_rename(old_path, new_path) {
            try {
                old_path = SYSCALLS.getStr(old_path);
                new_path = SYSCALLS.getStr(new_path);
                FS.rename(old_path, new_path);
                return 0
            } catch (e) {
                if (typeof FS == "undefined" || !(e instanceof FS.ErrnoError))
                    throw e;
                return -e.errno
            }
        }
        Module["___syscall_rename"] = ___syscall_rename;
        ___syscall_rename.sig = "ipp";
        var JSEvents = {
            inEventHandler: 0,
            removeAllEventListeners: function() {
                for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
                    JSEvents._removeHandler(i)
                }
                JSEvents.eventHandlers = [];
                JSEvents.deferredCalls = []
            },
            registerRemoveEventListeners: function() {
                if (!JSEvents.removeEventListenersRegistered) {
                    __ATEXIT__.push(JSEvents.removeAllEventListeners);
                    JSEvents.removeEventListenersRegistered = true
                }
            },
            deferredCalls: [],
            deferCall: function(targetFunction, precedence, argsList) {
                function arraysHaveEqualContent(arrA, arrB) {
                    if (arrA.length != arrB.length)
                        return false;
                    for (var i in arrA) {
                        if (arrA[i] != arrB[i])
                            return false
                    }
                    return true
                }
                for (var i in JSEvents.deferredCalls) {
                    var call = JSEvents.deferredCalls[i];
                    if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
                        return
                    }
                }
                JSEvents.deferredCalls.push({
                    targetFunction: targetFunction,
                    precedence: precedence,
                    argsList: argsList
                });
                JSEvents.deferredCalls.sort(function(x, y) {
                    return x.precedence < y.precedence
                })
            },
            removeDeferredCalls: function(targetFunction) {
                for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
                    if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
                        JSEvents.deferredCalls.splice(i, 1);
                        --i
                    }
                }
            },
            canPerformEventHandlerRequests: function() {
                return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls
            },
            runDeferredCalls: function() {
                if (!JSEvents.canPerformEventHandlerRequests()) {
                    return
                }
                for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
                    var call = JSEvents.deferredCalls[i];
                    JSEvents.deferredCalls.splice(i, 1);
                    --i;
                    call.targetFunction.apply(null, call.argsList)
                }
            },
            eventHandlers: [],
            removeAllHandlersOnTarget: function(target, eventTypeString) {
                for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
                    if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
                        JSEvents._removeHandler(i--)
                    }
                }
            },
            _removeHandler: function(i) {
                var h = JSEvents.eventHandlers[i];
                h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
                JSEvents.eventHandlers.splice(i, 1)
            },
            registerOrRemoveHandler: function(eventHandler) {
                var jsEventHandler = function jsEventHandler(event) {
                    ++JSEvents.inEventHandler;
                    JSEvents.currentEventHandler = eventHandler;
                    JSEvents.runDeferredCalls();
                    eventHandler.handlerFunc(event);
                    JSEvents.runDeferredCalls();
                    --JSEvents.inEventHandler
                };
                if (eventHandler.callbackfunc) {
                    eventHandler.eventListenerFunc = jsEventHandler;
                    eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
                    JSEvents.eventHandlers.push(eventHandler);
                    JSEvents.registerRemoveEventListeners()
                } else {
                    for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
                        if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
                            JSEvents._removeHandler(i--)
                        }
                    }
                }
            },
            getNodeNameForTarget: function(target) {
                if (!target)
                    return "";
                if (target == window)
                    return "#window";
                if (target == screen)
                    return "#screen";
                return target && target.nodeName ? target.nodeName : ""
            },
            fullscreenEnabled: function() {
                return document.fullscreenEnabled || document.webkitFullscreenEnabled
            }
        };
        Module["JSEvents"] = JSEvents;
        function maybeCStringToJsString(cString) {
            return cString > 2 ? UTF8ToString(cString) : cString
        }
        Module["maybeCStringToJsString"] = maybeCStringToJsString;
        var specialHTMLTargets = [0, typeof document != "undefined" ? document : 0, typeof window != "undefined" ? window : 0];
        Module["specialHTMLTargets"] = specialHTMLTargets;
        function findEventTarget(target) {
            target = maybeCStringToJsString(target);
            var domElement = specialHTMLTargets[target] || (typeof document != "undefined" ? document.querySelector(target) : undefined);
            return domElement
        }
        Module["findEventTarget"] = findEventTarget;
        function registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.keyEvent)
                JSEvents.keyEvent = _malloc(176);
            var keyEventHandlerFunc = function(e) {
                var keyEventData = JSEvents.keyEvent;
                HEAPF64[keyEventData >> 3] = e.timeStamp;
                var idx = keyEventData >> 2;
                HEAP32[idx + 2] = e.location;
                HEAP32[idx + 3] = e.ctrlKey;
                HEAP32[idx + 4] = e.shiftKey;
                HEAP32[idx + 5] = e.altKey;
                HEAP32[idx + 6] = e.metaKey;
                HEAP32[idx + 7] = e.repeat;
                HEAP32[idx + 8] = e.charCode;
                HEAP32[idx + 9] = e.keyCode;
                HEAP32[idx + 10] = e.which;
                stringToUTF8(e.key || "", keyEventData + 44, 32);
                stringToUTF8(e.code || "", keyEventData + 76, 32);
                stringToUTF8(e.char || "", keyEventData + 108, 32);
                stringToUTF8(e.locale || "", keyEventData + 140, 32);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, keyEventData, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: findEventTarget(target),
                allowsDeferredCalls: true,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: keyEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerKeyEventCallback"] = registerKeyEventCallback;
        function findCanvasEventTarget(target) {
            return findEventTarget(target)
        }
        Module["findCanvasEventTarget"] = findCanvasEventTarget;
        function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
            return 0
        }
        Module["_emscripten_set_keypress_callback_on_thread"] = _emscripten_set_keypress_callback_on_thread;
        _emscripten_set_keypress_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_keydown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);
            return 0
        }
        Module["_emscripten_set_keydown_callback_on_thread"] = _emscripten_set_keydown_callback_on_thread;
        _emscripten_set_keydown_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_keyup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);
            return 0
        }
        Module["_emscripten_set_keyup_callback_on_thread"] = _emscripten_set_keyup_callback_on_thread;
        _emscripten_set_keyup_callback_on_thread.sig = "iiiiii";
        function getBoundingClientRect(e) {
            return specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {
                "left": 0,
                "top": 0
            }
        }
        Module["getBoundingClientRect"] = getBoundingClientRect;
        function fillMouseEventData(eventStruct, e, target) {
            HEAPF64[eventStruct >> 3] = e.timeStamp;
            var idx = eventStruct >> 2;
            HEAP32[idx + 2] = e.screenX;
            HEAP32[idx + 3] = e.screenY;
            HEAP32[idx + 4] = e.clientX;
            HEAP32[idx + 5] = e.clientY;
            HEAP32[idx + 6] = e.ctrlKey;
            HEAP32[idx + 7] = e.shiftKey;
            HEAP32[idx + 8] = e.altKey;
            HEAP32[idx + 9] = e.metaKey;
            HEAP16[idx * 2 + 20] = e.button;
            HEAP16[idx * 2 + 21] = e.buttons;
            HEAP32[idx + 11] = e["movementX"];
            HEAP32[idx + 12] = e["movementY"];
            var rect = getBoundingClientRect(target);
            HEAP32[idx + 13] = e.clientX - rect.left;
            HEAP32[idx + 14] = e.clientY - rect.top
        }
        Module["fillMouseEventData"] = fillMouseEventData;
        function registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.mouseEvent)
                JSEvents.mouseEvent = _malloc(72);
            target = findEventTarget(target);
            var mouseEventHandlerFunc = function(ev) {
                var e = ev || event;
                fillMouseEventData(JSEvents.mouseEvent, e, target);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, JSEvents.mouseEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: target,
                allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: mouseEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerMouseEventCallback"] = registerMouseEventCallback;
        function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
            return 0
        }
        Module["_emscripten_set_click_callback_on_thread"] = _emscripten_set_click_callback_on_thread;
        _emscripten_set_click_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_mousedown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);
            return 0
        }
        Module["_emscripten_set_mousedown_callback_on_thread"] = _emscripten_set_mousedown_callback_on_thread;
        _emscripten_set_mousedown_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_mouseup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);
            return 0
        }
        Module["_emscripten_set_mouseup_callback_on_thread"] = _emscripten_set_mouseup_callback_on_thread;
        _emscripten_set_mouseup_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_dblclick_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 7, "dblclick", targetThread);
            return 0
        }
        Module["_emscripten_set_dblclick_callback_on_thread"] = _emscripten_set_dblclick_callback_on_thread;
        _emscripten_set_dblclick_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_mousemove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);
            return 0
        }
        Module["_emscripten_set_mousemove_callback_on_thread"] = _emscripten_set_mousemove_callback_on_thread;
        _emscripten_set_mousemove_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_mouseenter_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);
            return 0
        }
        Module["_emscripten_set_mouseenter_callback_on_thread"] = _emscripten_set_mouseenter_callback_on_thread;
        _emscripten_set_mouseenter_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_mouseleave_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);
            return 0
        }
        Module["_emscripten_set_mouseleave_callback_on_thread"] = _emscripten_set_mouseleave_callback_on_thread;
        _emscripten_set_mouseleave_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_mouseover_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 35, "mouseover", targetThread);
            return 0
        }
        Module["_emscripten_set_mouseover_callback_on_thread"] = _emscripten_set_mouseover_callback_on_thread;
        _emscripten_set_mouseover_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_mouseout_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerMouseEventCallback(target, userData, useCapture, callbackfunc, 36, "mouseout", targetThread);
            return 0
        }
        Module["_emscripten_set_mouseout_callback_on_thread"] = _emscripten_set_mouseout_callback_on_thread;
        _emscripten_set_mouseout_callback_on_thread.sig = "iiiiii";
        function _emscripten_get_mouse_status(mouseState) {
            if (!JSEvents.mouseEvent)
                return -7;
            HEAP8.set(HEAP8.subarray(JSEvents.mouseEvent, JSEvents.mouseEvent + 72), mouseState);
            return 0
        }
        Module["_emscripten_get_mouse_status"] = _emscripten_get_mouse_status;
        _emscripten_get_mouse_status.sig = "ii";
        function registerWheelEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.wheelEvent)
                JSEvents.wheelEvent = _malloc(104);
            var wheelHandlerFunc = function(ev) {
                var e = ev || event;
                var wheelEvent = JSEvents.wheelEvent;
                fillMouseEventData(wheelEvent, e, target);
                HEAPF64[wheelEvent + 72 >> 3] = e["deltaX"];
                HEAPF64[wheelEvent + 80 >> 3] = e["deltaY"];
                HEAPF64[wheelEvent + 88 >> 3] = e["deltaZ"];
                HEAP32[wheelEvent + 96 >> 2] = e["deltaMode"];
                if (getWasmTableEntry(callbackfunc)(eventTypeId, wheelEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: target,
                allowsDeferredCalls: true,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: wheelHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerWheelEventCallback"] = registerWheelEventCallback;
        function _emscripten_set_wheel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            target = findEventTarget(target);
            if (typeof target.onwheel != "undefined") {
                registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
                return 0
            } else {
                return -1
            }
        }
        Module["_emscripten_set_wheel_callback_on_thread"] = _emscripten_set_wheel_callback_on_thread;
        _emscripten_set_wheel_callback_on_thread.sig = "iiiiii";
        function registerUiEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.uiEvent)
                JSEvents.uiEvent = _malloc(36);
            target = findEventTarget(target);
            var uiEventHandlerFunc = function(ev) {
                var e = ev || event;
                if (e.target != target) {
                    return
                }
                var b = document.body;
                if (!b) {
                    return
                }
                var uiEvent = JSEvents.uiEvent;
                HEAP32[uiEvent >> 2] = e.detail;
                HEAP32[uiEvent + 4 >> 2] = b.clientWidth;
                HEAP32[uiEvent + 8 >> 2] = b.clientHeight;
                HEAP32[uiEvent + 12 >> 2] = innerWidth;
                HEAP32[uiEvent + 16 >> 2] = innerHeight;
                HEAP32[uiEvent + 20 >> 2] = outerWidth;
                HEAP32[uiEvent + 24 >> 2] = outerHeight;
                HEAP32[uiEvent + 28 >> 2] = pageXOffset;
                HEAP32[uiEvent + 32 >> 2] = pageYOffset;
                if (getWasmTableEntry(callbackfunc)(eventTypeId, uiEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: target,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: uiEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerUiEventCallback"] = registerUiEventCallback;
        function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
            return 0
        }
        Module["_emscripten_set_resize_callback_on_thread"] = _emscripten_set_resize_callback_on_thread;
        _emscripten_set_resize_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_scroll_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerUiEventCallback(target, userData, useCapture, callbackfunc, 11, "scroll", targetThread);
            return 0
        }
        Module["_emscripten_set_scroll_callback_on_thread"] = _emscripten_set_scroll_callback_on_thread;
        _emscripten_set_scroll_callback_on_thread.sig = "iiiiii";
        function registerFocusEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.focusEvent)
                JSEvents.focusEvent = _malloc(256);
            var focusEventHandlerFunc = function(ev) {
                var e = ev || event;
                var nodeName = JSEvents.getNodeNameForTarget(e.target);
                var id = e.target.id ? e.target.id : "";
                var focusEvent = JSEvents.focusEvent;
                stringToUTF8(nodeName, focusEvent + 0, 128);
                stringToUTF8(id, focusEvent + 128, 128);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, focusEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: findEventTarget(target),
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: focusEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerFocusEventCallback"] = registerFocusEventCallback;
        function _emscripten_set_blur_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur", targetThread);
            return 0
        }
        Module["_emscripten_set_blur_callback_on_thread"] = _emscripten_set_blur_callback_on_thread;
        _emscripten_set_blur_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_focus_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus", targetThread);
            return 0
        }
        Module["_emscripten_set_focus_callback_on_thread"] = _emscripten_set_focus_callback_on_thread;
        _emscripten_set_focus_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_focusin_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerFocusEventCallback(target, userData, useCapture, callbackfunc, 14, "focusin", targetThread);
            return 0
        }
        Module["_emscripten_set_focusin_callback_on_thread"] = _emscripten_set_focusin_callback_on_thread;
        _emscripten_set_focusin_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_focusout_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerFocusEventCallback(target, userData, useCapture, callbackfunc, 15, "focusout", targetThread);
            return 0
        }
        Module["_emscripten_set_focusout_callback_on_thread"] = _emscripten_set_focusout_callback_on_thread;
        _emscripten_set_focusout_callback_on_thread.sig = "iiiiii";
        function fillDeviceOrientationEventData(eventStruct, e, target) {
            HEAPF64[eventStruct >> 3] = e.alpha;
            HEAPF64[eventStruct + 8 >> 3] = e.beta;
            HEAPF64[eventStruct + 16 >> 3] = e.gamma;
            HEAP32[eventStruct + 24 >> 2] = e.absolute
        }
        Module["fillDeviceOrientationEventData"] = fillDeviceOrientationEventData;
        function registerDeviceOrientationEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.deviceOrientationEvent)
                JSEvents.deviceOrientationEvent = _malloc(32);
            var deviceOrientationEventHandlerFunc = function(ev) {
                var e = ev || event;
                fillDeviceOrientationEventData(JSEvents.deviceOrientationEvent, e, target);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, JSEvents.deviceOrientationEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: findEventTarget(target),
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: deviceOrientationEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerDeviceOrientationEventCallback"] = registerDeviceOrientationEventCallback;
        function _emscripten_set_deviceorientation_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
            registerDeviceOrientationEventCallback(2, userData, useCapture, callbackfunc, 16, "deviceorientation", targetThread);
            return 0
        }
        Module["_emscripten_set_deviceorientation_callback_on_thread"] = _emscripten_set_deviceorientation_callback_on_thread;
        _emscripten_set_deviceorientation_callback_on_thread.sig = "iiiii";
        function _emscripten_get_deviceorientation_status(orientationState) {
            if (!JSEvents.deviceOrientationEvent)
                return -7;
            HEAP32.set(HEAP32.subarray(JSEvents.deviceOrientationEvent, 32), orientationState);
            return 0
        }
        Module["_emscripten_get_deviceorientation_status"] = _emscripten_get_deviceorientation_status;
        _emscripten_get_deviceorientation_status.sig = "ii";
        function fillDeviceMotionEventData(eventStruct, e, target) {
            var supportedFields = 0;
            var a = e["acceleration"];
            supportedFields |= a && 1;
            var ag = e["accelerationIncludingGravity"];
            supportedFields |= ag && 2;
            var rr = e["rotationRate"];
            supportedFields |= rr && 4;
            a = a || {};
            ag = ag || {};
            rr = rr || {};
            HEAPF64[eventStruct >> 3] = a["x"];
            HEAPF64[eventStruct + 8 >> 3] = a["y"];
            HEAPF64[eventStruct + 16 >> 3] = a["z"];
            HEAPF64[eventStruct + 24 >> 3] = ag["x"];
            HEAPF64[eventStruct + 32 >> 3] = ag["y"];
            HEAPF64[eventStruct + 40 >> 3] = ag["z"];
            HEAPF64[eventStruct + 48 >> 3] = rr["alpha"];
            HEAPF64[eventStruct + 56 >> 3] = rr["beta"];
            HEAPF64[eventStruct + 64 >> 3] = rr["gamma"]
        }
        Module["fillDeviceMotionEventData"] = fillDeviceMotionEventData;
        function registerDeviceMotionEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.deviceMotionEvent)
                JSEvents.deviceMotionEvent = _malloc(80);
            var deviceMotionEventHandlerFunc = function(ev) {
                var e = ev || event;
                fillDeviceMotionEventData(JSEvents.deviceMotionEvent, e, target);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, JSEvents.deviceMotionEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: findEventTarget(target),
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: deviceMotionEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerDeviceMotionEventCallback"] = registerDeviceMotionEventCallback;
        function _emscripten_set_devicemotion_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
            registerDeviceMotionEventCallback(2, userData, useCapture, callbackfunc, 17, "devicemotion", targetThread);
            return 0
        }
        Module["_emscripten_set_devicemotion_callback_on_thread"] = _emscripten_set_devicemotion_callback_on_thread;
        _emscripten_set_devicemotion_callback_on_thread.sig = "iiiii";
        function _emscripten_get_devicemotion_status(motionState) {
            if (!JSEvents.deviceMotionEvent)
                return -7;
            HEAP32.set(HEAP32.subarray(JSEvents.deviceMotionEvent, 80), motionState);
            return 0
        }
        Module["_emscripten_get_devicemotion_status"] = _emscripten_get_devicemotion_status;
        _emscripten_get_devicemotion_status.sig = "ii";
        function screenOrientation() {
            if (!screen)
                return undefined;
            return screen.orientation || screen.mozOrientation || screen.webkitOrientation || screen.msOrientation
        }
        Module["screenOrientation"] = screenOrientation;
        function fillOrientationChangeEventData(eventStruct) {
            var orientations = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
            var orientations2 = ["portrait", "portrait", "landscape", "landscape"];
            var orientationString = screenOrientation();
            var orientation = orientations.indexOf(orientationString);
            if (orientation == -1) {
                orientation = orientations2.indexOf(orientationString)
            }
            HEAP32[eventStruct >> 2] = 1 << orientation;
            HEAP32[eventStruct + 4 >> 2] = orientation
        }
        Module["fillOrientationChangeEventData"] = fillOrientationChangeEventData;
        function registerOrientationChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.orientationChangeEvent)
                JSEvents.orientationChangeEvent = _malloc(8);
            var orientationChangeEventHandlerFunc = function(ev) {
                var e = ev || event;
                var orientationChangeEvent = JSEvents.orientationChangeEvent;
                fillOrientationChangeEventData(orientationChangeEvent);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, orientationChangeEvent, userData))
                    e.preventDefault()
            };
            if (eventTypeString == "orientationchange" && screen.mozOrientation !== undefined) {
                eventTypeString = "mozorientationchange"
            }
            var eventHandler = {
                target: target,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: orientationChangeEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerOrientationChangeEventCallback"] = registerOrientationChangeEventCallback;
        function _emscripten_set_orientationchange_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
            if (!screen || !screen["addEventListener"])
                return -1;
            registerOrientationChangeEventCallback(screen, userData, useCapture, callbackfunc, 18, "orientationchange", targetThread);
            return 0
        }
        Module["_emscripten_set_orientationchange_callback_on_thread"] = _emscripten_set_orientationchange_callback_on_thread;
        _emscripten_set_orientationchange_callback_on_thread.sig = "iiiii";
        function _emscripten_get_orientation_status(orientationChangeEvent) {
            if (!screenOrientation() && typeof orientation == "undefined")
                return -1;
            fillOrientationChangeEventData(orientationChangeEvent);
            return 0
        }
        Module["_emscripten_get_orientation_status"] = _emscripten_get_orientation_status;
        _emscripten_get_orientation_status.sig = "ii";
        function _emscripten_lock_orientation(allowedOrientations) {
            var orientations = [];
            if (allowedOrientations & 1)
                orientations.push("portrait-primary");
            if (allowedOrientations & 2)
                orientations.push("portrait-secondary");
            if (allowedOrientations & 4)
                orientations.push("landscape-primary");
            if (allowedOrientations & 8)
                orientations.push("landscape-secondary");
            var succeeded;
            if (screen.lockOrientation) {
                succeeded = screen.lockOrientation(orientations)
            } else if (screen.mozLockOrientation) {
                succeeded = screen.mozLockOrientation(orientations)
            } else if (screen.webkitLockOrientation) {
                succeeded = screen.webkitLockOrientation(orientations)
            } else if (screen.msLockOrientation) {
                succeeded = screen.msLockOrientation(orientations)
            } else {
                return -1
            }
            if (succeeded) {
                return 0
            }
            return -6
        }
        Module["_emscripten_lock_orientation"] = _emscripten_lock_orientation;
        _emscripten_lock_orientation.sig = "ii";
        function _emscripten_unlock_orientation() {
            if (screen.unlockOrientation) {
                screen.unlockOrientation()
            } else if (screen.mozUnlockOrientation) {
                screen.mozUnlockOrientation()
            } else if (screen.webkitUnlockOrientation) {
                screen.webkitUnlockOrientation()
            } else if (screen.msUnlockOrientation) {
                screen.msUnlockOrientation()
            } else {
                return -1
            }
            return 0
        }
        Module["_emscripten_unlock_orientation"] = _emscripten_unlock_orientation;
        _emscripten_unlock_orientation.sig = "i";
        function fillFullscreenChangeEventData(eventStruct) {
            var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
            var isFullscreen = !!fullscreenElement;
            HEAP32[eventStruct >> 2] = isFullscreen;
            HEAP32[eventStruct + 4 >> 2] = JSEvents.fullscreenEnabled();
            var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
            var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
            var id = reportedElement && reportedElement.id ? reportedElement.id : "";
            stringToUTF8(nodeName, eventStruct + 8, 128);
            stringToUTF8(id, eventStruct + 136, 128);
            HEAP32[eventStruct + 264 >> 2] = reportedElement ? reportedElement.clientWidth : 0;
            HEAP32[eventStruct + 268 >> 2] = reportedElement ? reportedElement.clientHeight : 0;
            HEAP32[eventStruct + 272 >> 2] = screen.width;
            HEAP32[eventStruct + 276 >> 2] = screen.height;
            if (isFullscreen) {
                JSEvents.previousFullscreenElement = fullscreenElement
            }
        }
        Module["fillFullscreenChangeEventData"] = fillFullscreenChangeEventData;
        function registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.fullscreenChangeEvent)
                JSEvents.fullscreenChangeEvent = _malloc(280);
            var fullscreenChangeEventhandlerFunc = function(ev) {
                var e = ev || event;
                var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
                fillFullscreenChangeEventData(fullscreenChangeEvent);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, fullscreenChangeEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: target,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: fullscreenChangeEventhandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerFullscreenChangeEventCallback"] = registerFullscreenChangeEventCallback;
        function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            if (!JSEvents.fullscreenEnabled())
                return -1;
            target = findEventTarget(target);
            if (!target)
                return -4;
            registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
            registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
            return 0
        }
        Module["_emscripten_set_fullscreenchange_callback_on_thread"] = _emscripten_set_fullscreenchange_callback_on_thread;
        _emscripten_set_fullscreenchange_callback_on_thread.sig = "iiiiii";
        function _emscripten_get_fullscreen_status(fullscreenStatus) {
            if (!JSEvents.fullscreenEnabled())
                return -1;
            fillFullscreenChangeEventData(fullscreenStatus);
            return 0
        }
        Module["_emscripten_get_fullscreen_status"] = _emscripten_get_fullscreen_status;
        _emscripten_get_fullscreen_status.sig = "ii";
        function _emscripten_get_canvas_element_size(target, width, height) {
            var canvas = findCanvasEventTarget(target);
            if (!canvas)
                return -4;
            HEAP32[width >> 2] = canvas.width;
            HEAP32[height >> 2] = canvas.height
        }
        Module["_emscripten_get_canvas_element_size"] = _emscripten_get_canvas_element_size;
        _emscripten_get_canvas_element_size.sig = "ippp";
        function getCanvasElementSize(target) {
            return withStackSave(function() {
                var w = stackAlloc(8);
                var h = w + 4;
                var targetInt = stackAlloc(target.id.length + 1);
                stringToUTF8(target.id, targetInt, target.id.length + 1);
                var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
                var size = [HEAP32[w >> 2], HEAP32[h >> 2]];
                return size
            })
        }
        Module["getCanvasElementSize"] = getCanvasElementSize;
        function _emscripten_set_canvas_element_size(target, width, height) {
            var canvas = findCanvasEventTarget(target);
            if (!canvas)
                return -4;
            canvas.width = width;
            canvas.height = height;
            return 0
        }
        Module["_emscripten_set_canvas_element_size"] = _emscripten_set_canvas_element_size;
        _emscripten_set_canvas_element_size.sig = "iiii";
        function setCanvasElementSize(target, width, height) {
            if (!target.controlTransferredOffscreen) {
                target.width = width;
                target.height = height
            } else {
                withStackSave(function() {
                    var targetInt = stackAlloc(target.id.length + 1);
                    stringToUTF8(target.id, targetInt, target.id.length + 1);
                    _emscripten_set_canvas_element_size(targetInt, width, height)
                })
            }
        }
        Module["setCanvasElementSize"] = setCanvasElementSize;
        function registerRestoreOldStyle(canvas) {
            var canvasSize = getCanvasElementSize(canvas);
            var oldWidth = canvasSize[0];
            var oldHeight = canvasSize[1];
            var oldCssWidth = canvas.style.width;
            var oldCssHeight = canvas.style.height;
            var oldBackgroundColor = canvas.style.backgroundColor;
            var oldDocumentBackgroundColor = document.body.style.backgroundColor;
            var oldPaddingLeft = canvas.style.paddingLeft;
            var oldPaddingRight = canvas.style.paddingRight;
            var oldPaddingTop = canvas.style.paddingTop;
            var oldPaddingBottom = canvas.style.paddingBottom;
            var oldMarginLeft = canvas.style.marginLeft;
            var oldMarginRight = canvas.style.marginRight;
            var oldMarginTop = canvas.style.marginTop;
            var oldMarginBottom = canvas.style.marginBottom;
            var oldDocumentBodyMargin = document.body.style.margin;
            var oldDocumentOverflow = document.documentElement.style.overflow;
            var oldDocumentScroll = document.body.scroll;
            var oldImageRendering = canvas.style.imageRendering;
            function restoreOldStyle() {
                var fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement;
                if (!fullscreenElement) {
                    document.removeEventListener("fullscreenchange", restoreOldStyle);
                    document.removeEventListener("webkitfullscreenchange", restoreOldStyle);
                    setCanvasElementSize(canvas, oldWidth, oldHeight);
                    canvas.style.width = oldCssWidth;
                    canvas.style.height = oldCssHeight;
                    canvas.style.backgroundColor = oldBackgroundColor;
                    if (!oldDocumentBackgroundColor)
                        document.body.style.backgroundColor = "white";
                    document.body.style.backgroundColor = oldDocumentBackgroundColor;
                    canvas.style.paddingLeft = oldPaddingLeft;
                    canvas.style.paddingRight = oldPaddingRight;
                    canvas.style.paddingTop = oldPaddingTop;
                    canvas.style.paddingBottom = oldPaddingBottom;
                    canvas.style.marginLeft = oldMarginLeft;
                    canvas.style.marginRight = oldMarginRight;
                    canvas.style.marginTop = oldMarginTop;
                    canvas.style.marginBottom = oldMarginBottom;
                    document.body.style.margin = oldDocumentBodyMargin;
                    document.documentElement.style.overflow = oldDocumentOverflow;
                    document.body.scroll = oldDocumentScroll;
                    canvas.style.imageRendering = oldImageRendering;
                    if (canvas.GLctxObject)
                        canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
                    if (currentFullscreenStrategy.canvasResizedCallback) {
                        getWasmTableEntry(currentFullscreenStrategy.canvasResizedCallback)(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData)
                    }
                }
            }
            document.addEventListener("fullscreenchange", restoreOldStyle);
            document.addEventListener("webkitfullscreenchange", restoreOldStyle);
            return restoreOldStyle
        }
        Module["registerRestoreOldStyle"] = registerRestoreOldStyle;
        function setLetterbox(element, topBottom, leftRight) {
            element.style.paddingLeft = element.style.paddingRight = leftRight + "px";
            element.style.paddingTop = element.style.paddingBottom = topBottom + "px"
        }
        Module["setLetterbox"] = setLetterbox;
        function JSEvents_resizeCanvasForFullscreen(target, strategy) {
            var restoreOldStyle = registerRestoreOldStyle(target);
            var cssWidth = strategy.softFullscreen ? innerWidth : screen.width;
            var cssHeight = strategy.softFullscreen ? innerHeight : screen.height;
            var rect = getBoundingClientRect(target);
            var windowedCssWidth = rect.width;
            var windowedCssHeight = rect.height;
            var canvasSize = getCanvasElementSize(target);
            var windowedRttWidth = canvasSize[0];
            var windowedRttHeight = canvasSize[1];
            if (strategy.scaleMode == 3) {
                setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
                cssWidth = windowedCssWidth;
                cssHeight = windowedCssHeight
            } else if (strategy.scaleMode == 2) {
                if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
                    var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
                    setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
                    cssHeight = desiredCssHeight
                } else {
                    var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
                    setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
                    cssWidth = desiredCssWidth
                }
            }
            if (!target.style.backgroundColor)
                target.style.backgroundColor = "black";
            if (!document.body.style.backgroundColor)
                document.body.style.backgroundColor = "black";
            target.style.width = cssWidth + "px";
            target.style.height = cssHeight + "px";
            if (strategy.filteringMode == 1) {
                target.style.imageRendering = "optimizeSpeed";
                target.style.imageRendering = "-moz-crisp-edges";
                target.style.imageRendering = "-o-crisp-edges";
                target.style.imageRendering = "-webkit-optimize-contrast";
                target.style.imageRendering = "optimize-contrast";
                target.style.imageRendering = "crisp-edges";
                target.style.imageRendering = "pixelated"
            }
            var dpiScale = strategy.canvasResolutionScaleMode == 2 ? devicePixelRatio : 1;
            if (strategy.canvasResolutionScaleMode != 0) {
                var newWidth = cssWidth * dpiScale | 0;
                var newHeight = cssHeight * dpiScale | 0;
                setCanvasElementSize(target, newWidth, newHeight);
                if (target.GLctxObject)
                    target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight)
            }
            return restoreOldStyle
        }
        Module["JSEvents_resizeCanvasForFullscreen"] = JSEvents_resizeCanvasForFullscreen;
        function JSEvents_requestFullscreen(target, strategy) {
            if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
                JSEvents_resizeCanvasForFullscreen(target, strategy)
            }
            if (target.requestFullscreen) {
                target.requestFullscreen()
            } else if (target.webkitRequestFullscreen) {
                target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)
            } else {
                return JSEvents.fullscreenEnabled() ? -3 : -1
            }
            currentFullscreenStrategy = strategy;
            if (strategy.canvasResizedCallback) {
                getWasmTableEntry(strategy.canvasResizedCallback)(37, 0, strategy.canvasResizedCallbackUserData)
            }
            return 0
        }
        Module["JSEvents_requestFullscreen"] = JSEvents_requestFullscreen;
        function hideEverythingExceptGivenElement(onlyVisibleElement) {
            var child = onlyVisibleElement;
            var parent = child.parentNode;
            var hiddenElements = [];
            while (child != document.body) {
                var children = parent.children;
                for (var i = 0; i < children.length; ++i) {
                    if (children[i] != child) {
                        hiddenElements.push({
                            node: children[i],
                            displayState: children[i].style.display
                        });
                        children[i].style.display = "none"
                    }
                }
                child = parent;
                parent = parent.parentNode
            }
            return hiddenElements
        }
        Module["hideEverythingExceptGivenElement"] = hideEverythingExceptGivenElement;
        function restoreHiddenElements(hiddenElements) {
            for (var i = 0; i < hiddenElements.length; ++i) {
                hiddenElements[i].node.style.display = hiddenElements[i].displayState
            }
        }
        Module["restoreHiddenElements"] = restoreHiddenElements;
        var currentFullscreenStrategy = {};
        Module["currentFullscreenStrategy"] = currentFullscreenStrategy;
        var restoreOldWindowedStyle = null;
        Module["restoreOldWindowedStyle"] = restoreOldWindowedStyle;
        function softFullscreenResizeWebGLRenderTarget() {
            var dpr = devicePixelRatio;
            var inHiDPIFullscreenMode = currentFullscreenStrategy.canvasResolutionScaleMode == 2;
            var inAspectRatioFixedFullscreenMode = currentFullscreenStrategy.scaleMode == 2;
            var inPixelPerfectFullscreenMode = currentFullscreenStrategy.canvasResolutionScaleMode != 0;
            var inCenteredWithoutScalingFullscreenMode = currentFullscreenStrategy.scaleMode == 3;
            var screenWidth = inHiDPIFullscreenMode ? Math.round(innerWidth * dpr) : innerWidth;
            var screenHeight = inHiDPIFullscreenMode ? Math.round(innerHeight * dpr) : innerHeight;
            var w = screenWidth;
            var h = screenHeight;
            var canvas = currentFullscreenStrategy.target;
            var canvasSize = getCanvasElementSize(canvas);
            var x = canvasSize[0];
            var y = canvasSize[1];
            var topMargin;
            if (inAspectRatioFixedFullscreenMode) {
                if (w * y < x * h)
                    h = w * y / x | 0;
                else if (w * y > x * h)
                    w = h * x / y | 0;
                topMargin = (screenHeight - h) / 2 | 0
            }
            if (inPixelPerfectFullscreenMode) {
                setCanvasElementSize(canvas, w, h);
                if (canvas.GLctxObject)
                    canvas.GLctxObject.GLctx.viewport(0, 0, w, h)
            }
            if (inHiDPIFullscreenMode) {
                topMargin /= dpr;
                w /= dpr;
                h /= dpr;
                w = Math.round(w * 1e4) / 1e4;
                h = Math.round(h * 1e4) / 1e4;
                topMargin = Math.round(topMargin * 1e4) / 1e4
            }
            if (inCenteredWithoutScalingFullscreenMode) {
                var t = (innerHeight - jstoi_q(canvas.style.height)) / 2;
                var b = (innerWidth - jstoi_q(canvas.style.width)) / 2;
                setLetterbox(canvas, t, b)
            } else {
                canvas.style.width = w + "px";
                canvas.style.height = h + "px";
                var b = (innerWidth - w) / 2;
                setLetterbox(canvas, topMargin, b)
            }
            if (!inCenteredWithoutScalingFullscreenMode && currentFullscreenStrategy.canvasResizedCallback) {
                getWasmTableEntry(currentFullscreenStrategy.canvasResizedCallback)(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData)
            }
        }
        Module["softFullscreenResizeWebGLRenderTarget"] = softFullscreenResizeWebGLRenderTarget;
        function doRequestFullscreen(target, strategy) {
            if (!JSEvents.fullscreenEnabled())
                return -1;
            target = findEventTarget(target);
            if (!target)
                return -4;
            if (!target.requestFullscreen && !target.webkitRequestFullscreen) {
                return -3
            }
            var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
            if (!canPerformRequests) {
                if (strategy.deferUntilInEventHandler) {
                    JSEvents.deferCall(JSEvents_requestFullscreen, 1, [target, strategy]);
                    return 1
                }
                return -2
            }
            return JSEvents_requestFullscreen(target, strategy)
        }
        Module["doRequestFullscreen"] = doRequestFullscreen;
        function _emscripten_request_fullscreen(target, deferUntilInEventHandler) {
            var strategy = {
                scaleMode: 0,
                canvasResolutionScaleMode: 0,
                filteringMode: 0,
                deferUntilInEventHandler: deferUntilInEventHandler,
                canvasResizedCallbackTargetThread: 2
            };
            return doRequestFullscreen(target, strategy)
        }
        Module["_emscripten_request_fullscreen"] = _emscripten_request_fullscreen;
        _emscripten_request_fullscreen.sig = "iii";
        function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
            var strategy = {
                scaleMode: HEAP32[fullscreenStrategy >> 2],
                canvasResolutionScaleMode: HEAP32[fullscreenStrategy + 4 >> 2],
                filteringMode: HEAP32[fullscreenStrategy + 8 >> 2],
                deferUntilInEventHandler: deferUntilInEventHandler,
                canvasResizedCallback: HEAP32[fullscreenStrategy + 12 >> 2],
                canvasResizedCallbackUserData: HEAP32[fullscreenStrategy + 16 >> 2]
            };
            return doRequestFullscreen(target, strategy)
        }
        Module["_emscripten_request_fullscreen_strategy"] = _emscripten_request_fullscreen_strategy;
        _emscripten_request_fullscreen_strategy.sig = "iiii";
        function _emscripten_enter_soft_fullscreen(target, fullscreenStrategy) {
            target = findEventTarget(target);
            if (!target)
                return -4;
            var strategy = {
                scaleMode: HEAP32[fullscreenStrategy >> 2],
                canvasResolutionScaleMode: HEAP32[fullscreenStrategy + 4 >> 2],
                filteringMode: HEAP32[fullscreenStrategy + 8 >> 2],
                canvasResizedCallback: HEAP32[fullscreenStrategy + 12 >> 2],
                canvasResizedCallbackUserData: HEAP32[fullscreenStrategy + 16 >> 2],
                target: target,
                softFullscreen: true
            };
            var restoreOldStyle = JSEvents_resizeCanvasForFullscreen(target, strategy);
            document.documentElement.style.overflow = "hidden";
            document.body.scroll = "no";
            document.body.style.margin = "0px";
            var hiddenElements = hideEverythingExceptGivenElement(target);
            function restoreWindowedState() {
                restoreOldStyle();
                restoreHiddenElements(hiddenElements);
                removeEventListener("resize", softFullscreenResizeWebGLRenderTarget);
                if (strategy.canvasResizedCallback) {
                    getWasmTableEntry(strategy.canvasResizedCallback)(37, 0, strategy.canvasResizedCallbackUserData)
                }
                currentFullscreenStrategy = 0
            }
            restoreOldWindowedStyle = restoreWindowedState;
            currentFullscreenStrategy = strategy;
            addEventListener("resize", softFullscreenResizeWebGLRenderTarget);
            if (strategy.canvasResizedCallback) {
                getWasmTableEntry(strategy.canvasResizedCallback)(37, 0, strategy.canvasResizedCallbackUserData)
            }
            return 0
        }
        Module["_emscripten_enter_soft_fullscreen"] = _emscripten_enter_soft_fullscreen;
        _emscripten_enter_soft_fullscreen.sig = "iii";
        function _emscripten_exit_soft_fullscreen() {
            if (restoreOldWindowedStyle)
                restoreOldWindowedStyle();
            restoreOldWindowedStyle = null;
            return 0
        }
        Module["_emscripten_exit_soft_fullscreen"] = _emscripten_exit_soft_fullscreen;
        _emscripten_exit_soft_fullscreen.sig = "i";
        function _emscripten_exit_fullscreen() {
            if (!JSEvents.fullscreenEnabled())
                return -1;
            JSEvents.removeDeferredCalls(JSEvents_requestFullscreen);
            var d = specialHTMLTargets[1];
            if (d.exitFullscreen) {
                d.fullscreenElement && d.exitFullscreen()
            } else if (d.webkitExitFullscreen) {
                d.webkitFullscreenElement && d.webkitExitFullscreen()
            } else {
                return -1
            }
            return 0
        }
        Module["_emscripten_exit_fullscreen"] = _emscripten_exit_fullscreen;
        _emscripten_exit_fullscreen.sig = "i";
        function fillPointerlockChangeEventData(eventStruct) {
            var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
            var isPointerlocked = !!pointerLockElement;
            HEAP32[eventStruct >> 2] = isPointerlocked;
            var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
            var id = pointerLockElement && pointerLockElement.id ? pointerLockElement.id : "";
            stringToUTF8(nodeName, eventStruct + 4, 128);
            stringToUTF8(id, eventStruct + 132, 128)
        }
        Module["fillPointerlockChangeEventData"] = fillPointerlockChangeEventData;
        function registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.pointerlockChangeEvent)
                JSEvents.pointerlockChangeEvent = _malloc(260);
            var pointerlockChangeEventHandlerFunc = function(ev) {
                var e = ev || event;
                var pointerlockChangeEvent = JSEvents.pointerlockChangeEvent;
                fillPointerlockChangeEventData(pointerlockChangeEvent);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, pointerlockChangeEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: target,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: pointerlockChangeEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerPointerlockChangeEventCallback"] = registerPointerlockChangeEventCallback;
        function _emscripten_set_pointerlockchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            if (!document || !document.body || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
                return -1
            }
            target = findEventTarget(target);
            if (!target)
                return -4;
            registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
            registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
            registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
            registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
            return 0
        }
        Module["_emscripten_set_pointerlockchange_callback_on_thread"] = _emscripten_set_pointerlockchange_callback_on_thread;
        _emscripten_set_pointerlockchange_callback_on_thread.sig = "iiiiii";
        function registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            var pointerlockErrorEventHandlerFunc = function(ev) {
                var e = ev || event;
                if (getWasmTableEntry(callbackfunc)(eventTypeId, 0, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: target,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: pointerlockErrorEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerPointerlockErrorEventCallback"] = registerPointerlockErrorEventCallback;
        function _emscripten_set_pointerlockerror_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            if (!document || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
                return -1
            }
            target = findEventTarget(target);
            if (!target)
                return -4;
            registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "pointerlockerror", targetThread);
            registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "mozpointerlockerror", targetThread);
            registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "webkitpointerlockerror", targetThread);
            registerPointerlockErrorEventCallback(target, userData, useCapture, callbackfunc, 38, "mspointerlockerror", targetThread);
            return 0
        }
        Module["_emscripten_set_pointerlockerror_callback_on_thread"] = _emscripten_set_pointerlockerror_callback_on_thread;
        _emscripten_set_pointerlockerror_callback_on_thread.sig = "iiiiii";
        function _emscripten_get_pointerlock_status(pointerlockStatus) {
            if (pointerlockStatus)
                fillPointerlockChangeEventData(pointerlockStatus);
            if (!document.body || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
                return -1
            }
            return 0
        }
        Module["_emscripten_get_pointerlock_status"] = _emscripten_get_pointerlock_status;
        _emscripten_get_pointerlock_status.sig = "ii";
        function requestPointerLock(target) {
            if (target.requestPointerLock) {
                target.requestPointerLock()
            } else {
                if (document.body.requestPointerLock) {
                    return -3
                }
                return -1
            }
            return 0
        }
        Module["requestPointerLock"] = requestPointerLock;
        function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
            target = findEventTarget(target);
            if (!target)
                return -4;
            if (!target.requestPointerLock) {
                return -1
            }
            var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
            if (!canPerformRequests) {
                if (deferUntilInEventHandler) {
                    JSEvents.deferCall(requestPointerLock, 2, [target]);
                    return 1
                }
                return -2
            }
            return requestPointerLock(target)
        }
        Module["_emscripten_request_pointerlock"] = _emscripten_request_pointerlock;
        _emscripten_request_pointerlock.sig = "iii";
        function _emscripten_exit_pointerlock() {
            JSEvents.removeDeferredCalls(requestPointerLock);
            if (document.exitPointerLock) {
                document.exitPointerLock()
            } else {
                return -1
            }
            return 0
        }
        Module["_emscripten_exit_pointerlock"] = _emscripten_exit_pointerlock;
        _emscripten_exit_pointerlock.sig = "i";
        function _emscripten_vibrate(msecs) {
            if (!navigator.vibrate)
                return -1;
            navigator.vibrate(msecs);
            return 0
        }
        Module["_emscripten_vibrate"] = _emscripten_vibrate;
        _emscripten_vibrate.sig = "ii";
        function _emscripten_vibrate_pattern(msecsArray, numEntries) {
            if (!navigator.vibrate)
                return -1;
            var vibrateList = [];
            for (var i = 0; i < numEntries; ++i) {
                var msecs = HEAP32[msecsArray + i * 4 >> 2];
                vibrateList.push(msecs)
            }
            navigator.vibrate(vibrateList);
            return 0
        }
        Module["_emscripten_vibrate_pattern"] = _emscripten_vibrate_pattern;
        _emscripten_vibrate_pattern.sig = "iii";
        function fillVisibilityChangeEventData(eventStruct) {
            var visibilityStates = ["hidden", "visible", "prerender", "unloaded"];
            var visibilityState = visibilityStates.indexOf(document.visibilityState);
            HEAP32[eventStruct >> 2] = document.hidden;
            HEAP32[eventStruct + 4 >> 2] = visibilityState
        }
        Module["fillVisibilityChangeEventData"] = fillVisibilityChangeEventData;
        function registerVisibilityChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.visibilityChangeEvent)
                JSEvents.visibilityChangeEvent = _malloc(8);
            var visibilityChangeEventHandlerFunc = function(ev) {
                var e = ev || event;
                var visibilityChangeEvent = JSEvents.visibilityChangeEvent;
                fillVisibilityChangeEventData(visibilityChangeEvent);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, visibilityChangeEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: target,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: visibilityChangeEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerVisibilityChangeEventCallback"] = registerVisibilityChangeEventCallback;
        function _emscripten_set_visibilitychange_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
            if (!specialHTMLTargets[1]) {
                return -4
            }
            registerVisibilityChangeEventCallback(specialHTMLTargets[1], userData, useCapture, callbackfunc, 21, "visibilitychange", targetThread);
            return 0
        }
        Module["_emscripten_set_visibilitychange_callback_on_thread"] = _emscripten_set_visibilitychange_callback_on_thread;
        _emscripten_set_visibilitychange_callback_on_thread.sig = "iiiii";
        function _emscripten_get_visibility_status(visibilityStatus) {
            if (typeof document.visibilityState == "undefined" && typeof document.hidden == "undefined") {
                return -1
            }
            fillVisibilityChangeEventData(visibilityStatus);
            return 0
        }
        Module["_emscripten_get_visibility_status"] = _emscripten_get_visibility_status;
        _emscripten_get_visibility_status.sig = "ii";
        function registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.touchEvent)
                JSEvents.touchEvent = _malloc(1696);
            target = findEventTarget(target);
            var touchEventHandlerFunc = function(e) {
                var t, touches = {}, et = e.touches;
                for (var i = 0; i < et.length; ++i) {
                    t = et[i];
                    t.isChanged = t.onTarget = 0;
                    touches[t.identifier] = t
                }
                for (var i = 0; i < e.changedTouches.length; ++i) {
                    t = e.changedTouches[i];
                    t.isChanged = 1;
                    touches[t.identifier] = t
                }
                for (var i = 0; i < e.targetTouches.length; ++i) {
                    touches[e.targetTouches[i].identifier].onTarget = 1
                }
                var touchEvent = JSEvents.touchEvent;
                HEAPF64[touchEvent >> 3] = e.timeStamp;
                var idx = touchEvent >> 2;
                HEAP32[idx + 3] = e.ctrlKey;
                HEAP32[idx + 4] = e.shiftKey;
                HEAP32[idx + 5] = e.altKey;
                HEAP32[idx + 6] = e.metaKey;
                idx += 7;
                var targetRect = getBoundingClientRect(target);
                var numTouches = 0;
                for (var i in touches) {
                    t = touches[i];
                    HEAP32[idx + 0] = t.identifier;
                    HEAP32[idx + 1] = t.screenX;
                    HEAP32[idx + 2] = t.screenY;
                    HEAP32[idx + 3] = t.clientX;
                    HEAP32[idx + 4] = t.clientY;
                    HEAP32[idx + 5] = t.pageX;
                    HEAP32[idx + 6] = t.pageY;
                    HEAP32[idx + 7] = t.isChanged;
                    HEAP32[idx + 8] = t.onTarget;
                    HEAP32[idx + 9] = t.clientX - targetRect.left;
                    HEAP32[idx + 10] = t.clientY - targetRect.top;
                    idx += 13;
                    if (++numTouches > 31) {
                        break
                    }
                }
                HEAP32[touchEvent + 8 >> 2] = numTouches;
                if (getWasmTableEntry(callbackfunc)(eventTypeId, touchEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: target,
                allowsDeferredCalls: eventTypeString == "touchstart" || eventTypeString == "touchend",
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: touchEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerTouchEventCallback"] = registerTouchEventCallback;
        function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
            return 0
        }
        Module["_emscripten_set_touchstart_callback_on_thread"] = _emscripten_set_touchstart_callback_on_thread;
        _emscripten_set_touchstart_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
            return 0
        }
        Module["_emscripten_set_touchend_callback_on_thread"] = _emscripten_set_touchend_callback_on_thread;
        _emscripten_set_touchend_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
            return 0
        }
        Module["_emscripten_set_touchmove_callback_on_thread"] = _emscripten_set_touchmove_callback_on_thread;
        _emscripten_set_touchmove_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
            return 0
        }
        Module["_emscripten_set_touchcancel_callback_on_thread"] = _emscripten_set_touchcancel_callback_on_thread;
        _emscripten_set_touchcancel_callback_on_thread.sig = "iiiiii";
        function fillGamepadEventData(eventStruct, e) {
            HEAPF64[eventStruct >> 3] = e.timestamp;
            for (var i = 0; i < e.axes.length; ++i) {
                HEAPF64[eventStruct + i * 8 + 16 >> 3] = e.axes[i]
            }
            for (var i = 0; i < e.buttons.length; ++i) {
                if (typeof e.buttons[i] == "object") {
                    HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i].value
                } else {
                    HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i]
                }
            }
            for (var i = 0; i < e.buttons.length; ++i) {
                if (typeof e.buttons[i] == "object") {
                    HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i].pressed
                } else {
                    HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i] == 1
                }
            }
            HEAP32[eventStruct + 1296 >> 2] = e.connected;
            HEAP32[eventStruct + 1300 >> 2] = e.index;
            HEAP32[eventStruct + 8 >> 2] = e.axes.length;
            HEAP32[eventStruct + 12 >> 2] = e.buttons.length;
            stringToUTF8(e.id, eventStruct + 1304, 64);
            stringToUTF8(e.mapping, eventStruct + 1368, 64)
        }
        Module["fillGamepadEventData"] = fillGamepadEventData;
        function registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.gamepadEvent)
                JSEvents.gamepadEvent = _malloc(1432);
            var gamepadEventHandlerFunc = function(ev) {
                var e = ev || event;
                var gamepadEvent = JSEvents.gamepadEvent;
                fillGamepadEventData(gamepadEvent, e["gamepad"]);
                if (getWasmTableEntry(callbackfunc)(eventTypeId, gamepadEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: findEventTarget(target),
                allowsDeferredCalls: true,
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: gamepadEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerGamepadEventCallback"] = registerGamepadEventCallback;
        function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
            if (!navigator.getGamepads && !navigator.webkitGetGamepads)
                return -1;
            registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
            return 0
        }
        Module["_emscripten_set_gamepadconnected_callback_on_thread"] = _emscripten_set_gamepadconnected_callback_on_thread;
        _emscripten_set_gamepadconnected_callback_on_thread.sig = "iiiii";
        function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
            if (!navigator.getGamepads && !navigator.webkitGetGamepads)
                return -1;
            registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
            return 0
        }
        Module["_emscripten_set_gamepaddisconnected_callback_on_thread"] = _emscripten_set_gamepaddisconnected_callback_on_thread;
        _emscripten_set_gamepaddisconnected_callback_on_thread.sig = "iiiii";
        function _emscripten_sample_gamepad_data() {
            return (JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null) ? 0 : -1
        }
        Module["_emscripten_sample_gamepad_data"] = _emscripten_sample_gamepad_data;
        _emscripten_sample_gamepad_data.sig = "i";
        function _emscripten_get_num_gamepads() {
            return JSEvents.lastGamepadState.length
        }
        Module["_emscripten_get_num_gamepads"] = _emscripten_get_num_gamepads;
        _emscripten_get_num_gamepads.sig = "i";
        function _emscripten_get_gamepad_status(index, gamepadState) {
            if (index < 0 || index >= JSEvents.lastGamepadState.length)
                return -5;
            if (!JSEvents.lastGamepadState[index])
                return -7;
            fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
            return 0
        }
        Module["_emscripten_get_gamepad_status"] = _emscripten_get_gamepad_status;
        _emscripten_get_gamepad_status.sig = "iii";
        function registerBeforeUnloadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
            var beforeUnloadEventHandlerFunc = function(ev) {
                var e = ev || event;
                var confirmationMessage = getWasmTableEntry(callbackfunc)(eventTypeId, 0, userData);
                if (confirmationMessage) {
                    confirmationMessage = UTF8ToString(confirmationMessage)
                }
                if (confirmationMessage) {
                    e.preventDefault();
                    e.returnValue = confirmationMessage;
                    return confirmationMessage
                }
            };
            var eventHandler = {
                target: findEventTarget(target),
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: beforeUnloadEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerBeforeUnloadEventCallback"] = registerBeforeUnloadEventCallback;
        function _emscripten_set_beforeunload_callback_on_thread(userData, callbackfunc, targetThread) {
            if (typeof onbeforeunload == "undefined")
                return -1;
            if (targetThread !== 1)
                return -5;
            registerBeforeUnloadEventCallback(2, userData, true, callbackfunc, 28, "beforeunload");
            return 0
        }
        Module["_emscripten_set_beforeunload_callback_on_thread"] = _emscripten_set_beforeunload_callback_on_thread;
        _emscripten_set_beforeunload_callback_on_thread.sig = "iii";
        function fillBatteryEventData(eventStruct, e) {
            HEAPF64[eventStruct >> 3] = e.chargingTime;
            HEAPF64[eventStruct + 8 >> 3] = e.dischargingTime;
            HEAPF64[eventStruct + 16 >> 3] = e.level;
            HEAP32[eventStruct + 24 >> 2] = e.charging
        }
        Module["fillBatteryEventData"] = fillBatteryEventData;
        function battery() {
            return navigator.battery || navigator.mozBattery || navigator.webkitBattery
        }
        Module["battery"] = battery;
        function registerBatteryEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            if (!JSEvents.batteryEvent)
                JSEvents.batteryEvent = _malloc(32);
            var batteryEventHandlerFunc = function(ev) {
                var e = ev || event;
                var batteryEvent = JSEvents.batteryEvent;
                fillBatteryEventData(batteryEvent, battery());
                if (getWasmTableEntry(callbackfunc)(eventTypeId, batteryEvent, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: findEventTarget(target),
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: batteryEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["registerBatteryEventCallback"] = registerBatteryEventCallback;
        function _emscripten_set_batterychargingchange_callback_on_thread(userData, callbackfunc, targetThread) {
            if (!battery())
                return -1;
            registerBatteryEventCallback(battery(), userData, true, callbackfunc, 29, "chargingchange", targetThread);
            return 0
        }
        Module["_emscripten_set_batterychargingchange_callback_on_thread"] = _emscripten_set_batterychargingchange_callback_on_thread;
        _emscripten_set_batterychargingchange_callback_on_thread.sig = "iii";
        function _emscripten_set_batterylevelchange_callback_on_thread(userData, callbackfunc, targetThread) {
            if (!battery())
                return -1;
            registerBatteryEventCallback(battery(), userData, true, callbackfunc, 30, "levelchange", targetThread);
            return 0
        }
        Module["_emscripten_set_batterylevelchange_callback_on_thread"] = _emscripten_set_batterylevelchange_callback_on_thread;
        _emscripten_set_batterylevelchange_callback_on_thread.sig = "iii";
        function _emscripten_get_battery_status(batteryState) {
            if (!battery())
                return -1;
            fillBatteryEventData(batteryState, battery());
            return 0
        }
        Module["_emscripten_get_battery_status"] = _emscripten_get_battery_status;
        _emscripten_get_battery_status.sig = "ii";
        function _emscripten_set_element_css_size(target, width, height) {
            target = findEventTarget(target);
            if (!target)
                return -4;
            target.style.width = width + "px";
            target.style.height = height + "px";
            return 0
        }
        Module["_emscripten_set_element_css_size"] = _emscripten_set_element_css_size;
        _emscripten_set_element_css_size.sig = "iiii";
        function _emscripten_get_element_css_size(target, width, height) {
            target = findEventTarget(target);
            if (!target)
                return -4;
            var rect = getBoundingClientRect(target);
            HEAPF64[width >> 3] = rect.width;
            HEAPF64[height >> 3] = rect.height;
            return 0
        }
        Module["_emscripten_get_element_css_size"] = _emscripten_get_element_css_size;
        _emscripten_get_element_css_size.sig = "iiii";
        function _emscripten_html5_remove_all_event_listeners() {
            JSEvents.removeAllEventListeners()
        }
        Module["_emscripten_html5_remove_all_event_listeners"] = _emscripten_html5_remove_all_event_listeners;
        _emscripten_html5_remove_all_event_listeners.sig = "v";
        function _emscripten_request_animation_frame(cb, userData) {
            return requestAnimationFrame(function(timeStamp) {
                getWasmTableEntry(cb)(timeStamp, userData)
            })
        }
        Module["_emscripten_request_animation_frame"] = _emscripten_request_animation_frame;
        function _emscripten_cancel_animation_frame(id) {
            cancelAnimationFrame(id)
        }
        Module["_emscripten_cancel_animation_frame"] = _emscripten_cancel_animation_frame;
        function _emscripten_request_animation_frame_loop(cb, userData) {
            function tick(timeStamp) {
                if (getWasmTableEntry(cb)(timeStamp, userData)) {
                    requestAnimationFrame(tick)
                }
            }
            return requestAnimationFrame(tick)
        }
        Module["_emscripten_request_animation_frame_loop"] = _emscripten_request_animation_frame_loop;
        function _emscripten_performance_now() {
            return performance.now()
        }
        Module["_emscripten_performance_now"] = _emscripten_performance_now;
        function _emscripten_get_device_pixel_ratio() {
            return typeof devicePixelRatio == "number" && devicePixelRatio || 1
        }
        Module["_emscripten_get_device_pixel_ratio"] = _emscripten_get_device_pixel_ratio;
        _emscripten_get_device_pixel_ratio.sig = "d";
        function checkWasiClock(clock_id) {
            return clock_id == 0 || clock_id == 1 || clock_id == 2 || clock_id == 3
        }
        Module["checkWasiClock"] = checkWasiClock;
        function _clock_time_get(clk_id, ignored_precision, ptime) {
            if (!checkWasiClock(clk_id)) {
                return 28
            }
            var now;
            if (clk_id === 0) {
                now = Date.now()
            } else if (nowIsMonotonic) {
                now = _emscripten_get_now()
            } else {
                return 52
            }
            var nsec = Math.round(now * 1e3 * 1e3);
            HEAP32[ptime >> 2] = nsec >>> 0;
            HEAP32[ptime + 4 >> 2] = nsec / Math.pow(2, 32) >>> 0;
            return 0
        }
        Module["_clock_time_get"] = _clock_time_get;
        _clock_time_get.sig = "iijp";
        function _clock_res_get(clk_id, pres) {
            if (!checkWasiClock(clk_id)) {
                return 28
            }
            var nsec;
            if (clk_id === 0) {
                nsec = 1e3 * 1e3
            } else if (nowIsMonotonic) {
                nsec = _emscripten_get_now_res()
            } else {
                return 52
            }
            HEAP32[pres >> 2] = nsec >>> 0;
            HEAP32[pres + 4 >> 2] = nsec / Math.pow(2, 32) >>> 0;
            return 0
        }
        Module["_clock_res_get"] = _clock_res_get;
        _clock_res_get.sig = "iip";
        function createDyncallWrapper(sig) {
            var sections = [];
            var prelude = [0, 97, 115, 109, 1, 0, 0, 0];
            sections.push(prelude);
            var wrappersig = [sig[0].replace("j", "i"), "i", sig.slice(1).replace("j", "ii")].join("");
            var typeSectionBody = [3];
            generateFuncType(wrappersig, typeSectionBody);
            generateFuncType(sig, typeSectionBody);
            generateFuncType("vi", typeSectionBody);
            var typeSection = [1];
            uleb128Encode(typeSectionBody.length, typeSection);
            typeSection.push.apply(typeSection, typeSectionBody);
            sections.push(typeSection);
            var importSection = [2, 15, 2, 1, 101, 1, 116, 1, 112, 0, 0, 1, 101, 1, 114, 0, 2];
            sections.push(importSection);
            var functionSection = [3, 2, 1, 0];
            sections.push(functionSection);
            var exportSection = [7, 5, 1, 1, 102, 0, 1];
            sections.push(exportSection);
            var convert_code = [];
            if (sig[0] === "j") {
                convert_code = [1, 1, 126]
            } else {
                convert_code.push(0)
            }
            function localGet(j) {
                convert_code.push(32);
                uleb128Encode(j, convert_code)
            }
            var j = 1;
            for (var i = 1; i < sig.length; i++) {
                if (sig[i] == "j") {
                    localGet(j + 1);
                    convert_code.push(173, 66, 32, 134);
                    localGet(j);
                    convert_code.push(172, 132);
                    j += 2
                } else {
                    localGet(j);
                    j++
                }
            }
            convert_code.push(32, 0, 17, 1, 0);
            if (sig[0] === "j") {
                convert_code.push(34);
                uleb128Encode(j, convert_code);
                convert_code.push(66, 32, 136, 167, 16, 0);
                localGet(j);
                convert_code.push(167)
            }
            convert_code.push(11);
            var codeBody = [1];
            uleb128Encode(convert_code.length, codeBody);
            codeBody.push.apply(codeBody, convert_code);
            var codeSection = [10];
            uleb128Encode(codeBody.length, codeSection);
            codeSection.push.apply(codeSection, codeBody);
            sections.push(codeSection);
            var bytes = new Uint8Array([].concat.apply([], sections));
            var module = new WebAssembly.Module(bytes);
            var instance = new WebAssembly.Instance(module,{
                "e": {
                    "t": wasmTable,
                    "r": setTempRet0
                }
            });
            var wrappedFunc = instance.exports["f"];
            return wrappedFunc
        }
        Module["createDyncallWrapper"] = createDyncallWrapper;
        function _emscripten_unwind_to_js_event_loop() {
            throw "unwind"
        }
        Module["_emscripten_unwind_to_js_event_loop"] = _emscripten_unwind_to_js_event_loop;
        function setImmediateWrapped(func) {
            if (!setImmediateWrapped.mapping)
                setImmediateWrapped.mapping = [];
            var id = setImmediateWrapped.mapping.length;
            setImmediateWrapped.mapping[id] = setImmediate(()=>{
                setImmediateWrapped.mapping[id] = undefined;
                func()
            }
            );
            return id
        }
        Module["setImmediateWrapped"] = setImmediateWrapped;
        function clearImmediateWrapped(id) {
            clearImmediate(setImmediateWrapped.mapping[id]);
            setImmediateWrapped.mapping[id] = undefined
        }
        Module["clearImmediateWrapped"] = clearImmediateWrapped;
        function polyfillSetImmediate() {}
        Module["polyfillSetImmediate"] = polyfillSetImmediate;
        function _emscripten_set_immediate(cb, userData) {
            polyfillSetImmediate();
            return emSetImmediate(function() {
                callUserCallback(function() {
                    getWasmTableEntry(cb)(userData)
                })
            })
        }
        Module["_emscripten_set_immediate"] = _emscripten_set_immediate;
        _emscripten_set_immediate.sig = "ipp";
        function _emscripten_clear_immediate(id) {
            emClearImmediate(id)
        }
        Module["_emscripten_clear_immediate"] = _emscripten_clear_immediate;
        _emscripten_clear_immediate.sig = "vi";
        function _emscripten_set_immediate_loop(cb, userData) {
            polyfillSetImmediate();
            function tick() {
                callUserCallback(function() {
                    if (getWasmTableEntry(cb)(userData)) {
                        emSetImmediate(tick)
                    }
                })
            }
            return emSetImmediate(tick)
        }
        Module["_emscripten_set_immediate_loop"] = _emscripten_set_immediate_loop;
        _emscripten_set_immediate_loop.sig = "vpp";
        function _emscripten_set_timeout(cb, msecs, userData) {
            return setTimeout(function() {
                callUserCallback(function() {
                    getWasmTableEntry(cb)(userData)
                })
            }, msecs)
        }
        Module["_emscripten_set_timeout"] = _emscripten_set_timeout;
        _emscripten_set_timeout.sig = "ipdp";
        function _emscripten_clear_timeout(id) {
            clearTimeout(id)
        }
        Module["_emscripten_clear_timeout"] = _emscripten_clear_timeout;
        _emscripten_clear_timeout.sig = "vi";
        function _emscripten_set_timeout_loop(cb, msecs, userData) {
            function tick() {
                var t = performance.now();
                var n = t + msecs;
                callUserCallback(function() {
                    if (getWasmTableEntry(cb)(t, userData)) {
                        setTimeout(tick, n - performance.now())
                    }
                })
            }
            return setTimeout(tick, 0)
        }
        Module["_emscripten_set_timeout_loop"] = _emscripten_set_timeout_loop;
        _emscripten_set_timeout_loop.sig = "vpdp";
        function _emscripten_set_interval(cb, msecs, userData) {
            return setInterval(function() {
                callUserCallback(function() {
                    getWasmTableEntry(cb)(userData)
                })
            }, msecs)
        }
        Module["_emscripten_set_interval"] = _emscripten_set_interval;
        _emscripten_set_interval.sig = "ipdp";
        function _emscripten_clear_interval(id) {
            clearInterval(id)
        }
        Module["_emscripten_clear_interval"] = _emscripten_clear_interval;
        _emscripten_clear_interval.sig = "vi";
        function _llvm_eh_typeid_for(type) {
            return type
        }
        Module["_llvm_eh_typeid_for"] = _llvm_eh_typeid_for;
        _llvm_eh_typeid_for.sig = "ip";
        function ___cxa_get_exception_ptr(ptr) {
            return new ExceptionInfo(ptr).get_exception_ptr()
        }
        Module["___cxa_get_exception_ptr"] = ___cxa_get_exception_ptr;
        ___cxa_get_exception_ptr.sig = "pp";
        function ___cxa_find_matching_catch() {
            var thrown = exceptionLast;
            if (!thrown) {
                setTempRet0(0);
                return 0
            }
            var info = new ExceptionInfo(thrown);
            info.set_adjusted_ptr(thrown);
            var thrownType = info.get_type();
            if (!thrownType) {
                setTempRet0(0);
                return thrown
            }
            for (var i = 0; i < arguments.length; i++) {
                var caughtType = arguments[i];
                if (caughtType === 0 || caughtType === thrownType) {
                    break
                }
                var adjusted_ptr_addr = info.ptr + 16;
                if (Module["___cxa_can_catch"](caughtType, thrownType, adjusted_ptr_addr)) {
                    setTempRet0(caughtType);
                    return thrown
                }
            }
            setTempRet0(thrownType);
            return thrown
        }
        Module["___cxa_find_matching_catch"] = ___cxa_find_matching_catch;
        function _emscripten_run_preload_plugins(file, onload, onerror) {
            var _file = UTF8ToString(file);
            var data = FS.analyzePath(_file);
            if (!data.exists)
                return -1;
            FS.createPreloadedFile(PATH.dirname(_file), PATH.basename(_file), new Uint8Array(data.object.contents), true, true, ()=>{
                if (onload)
                    getWasmTableEntry(onload)(file)
            }
            , ()=>{
                if (onerror)
                    getWasmTableEntry(onerror)(file)
            }
            , true);
            return 0
        }
        Module["_emscripten_run_preload_plugins"] = _emscripten_run_preload_plugins;
        _emscripten_run_preload_plugins.sig = "iiii";
        function _emscripten_run_preload_plugins_data(data, size, suffix, arg, onload, onerror) {
            var _suffix = UTF8ToString(suffix);
            if (!Browser.asyncPrepareDataCounter)
                Browser.asyncPrepareDataCounter = 0;
            var name = "prepare_data_" + Browser.asyncPrepareDataCounter++ + "." + _suffix;
            var lengthAsUTF8 = lengthBytesUTF8(name);
            var cname = _malloc(lengthAsUTF8 + 1);
            stringToUTF8(name, cname, lengthAsUTF8 + 1);
            FS.createPreloadedFile("/", name, HEAPU8.subarray(data, data + size), true, true, ()=>{
                if (onload)
                    getWasmTableEntry(onload)(arg, cname)
            }
            , ()=>{
                if (onerror)
                    getWasmTableEntry(onerror)(arg)
            }
            , true)
        }
        Module["_emscripten_run_preload_plugins_data"] = _emscripten_run_preload_plugins_data;
        _emscripten_run_preload_plugins_data.sig = "viiiiii";
        function _emscripten_async_run_script(script, millis) {
            safeSetTimeout(function() {
                _emscripten_run_script(script)
            }, millis)
        }
        Module["_emscripten_async_run_script"] = _emscripten_async_run_script;
        function _emscripten_async_load_script(url, onload, onerror) {
            onload = getWasmTableEntry(onload);
            onerror = getWasmTableEntry(onerror);
            assert(runDependencies === 0, "async_load_script must be run when no other dependencies are active");
            var script = document.createElement("script");
            script.onload = function script_onload() {
                if (onload) {
                    if (runDependencies > 0) {
                        dependenciesFulfilled = onload
                    } else {
                        onload()
                    }
                }
            }
            ;
            script.onerror = ()=>{
                if (onerror)
                    onerror()
            }
            ;
            script.src = UTF8ToString(url);
            document.body.appendChild(script)
        }
        Module["_emscripten_async_load_script"] = _emscripten_async_load_script;
        function _emscripten_get_main_loop_timing(mode, value) {
            if (mode)
                HEAP32[mode >> 2] = Browser.mainLoop.timingMode;
            if (value)
                HEAP32[value >> 2] = Browser.mainLoop.timingValue
        }
        Module["_emscripten_get_main_loop_timing"] = _emscripten_get_main_loop_timing;
        _emscripten_get_main_loop_timing.sig = "vii";
        function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
            var browserIterationFunc = getWasmTableEntry(func);
            setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop)
        }
        Module["_emscripten_set_main_loop"] = _emscripten_set_main_loop;
        _emscripten_set_main_loop.sig = "viii";
        function _emscripten_set_main_loop_arg(func, arg, fps, simulateInfiniteLoop) {
            var browserIterationFunc = ()=>getWasmTableEntry(func)(arg);
            setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg)
        }
        Module["_emscripten_set_main_loop_arg"] = _emscripten_set_main_loop_arg;
        _emscripten_set_main_loop_arg.sig = "viiii";
        function _emscripten_cancel_main_loop() {
            Browser.mainLoop.pause();
            Browser.mainLoop.func = null
        }
        Module["_emscripten_cancel_main_loop"] = _emscripten_cancel_main_loop;
        _emscripten_cancel_main_loop.sig = "v";
        function _emscripten_pause_main_loop() {
            Browser.mainLoop.pause()
        }
        Module["_emscripten_pause_main_loop"] = _emscripten_pause_main_loop;
        _emscripten_pause_main_loop.sig = "v";
        function _emscripten_resume_main_loop() {
            Browser.mainLoop.resume()
        }
        Module["_emscripten_resume_main_loop"] = _emscripten_resume_main_loop;
        _emscripten_resume_main_loop.sig = "v";
        function __emscripten_push_main_loop_blocker(func, arg, name) {
            Browser.mainLoop.queue.push({
                func: function() {
                    getWasmTableEntry(func)(arg)
                },
                name: UTF8ToString(name),
                counted: true
            });
            Browser.mainLoop.updateStatus()
        }
        Module["__emscripten_push_main_loop_blocker"] = __emscripten_push_main_loop_blocker;
        function __emscripten_push_uncounted_main_loop_blocker(func, arg, name) {
            Browser.mainLoop.queue.push({
                func: function() {
                    getWasmTableEntry(func)(arg)
                },
                name: UTF8ToString(name),
                counted: false
            });
            Browser.mainLoop.updateStatus()
        }
        Module["__emscripten_push_uncounted_main_loop_blocker"] = __emscripten_push_uncounted_main_loop_blocker;
        function _emscripten_set_main_loop_expected_blockers(num) {
            Browser.mainLoop.expectedBlockers = num;
            Browser.mainLoop.remainingBlockers = num;
            Browser.mainLoop.updateStatus()
        }
        Module["_emscripten_set_main_loop_expected_blockers"] = _emscripten_set_main_loop_expected_blockers;
        _emscripten_set_main_loop_expected_blockers.sig = "vi";
        function _emscripten_async_call(func, arg, millis) {
            function wrapper() {
                getWasmTableEntry(func)(arg)
            }
            if (millis >= 0 || ENVIRONMENT_IS_NODE) {
                safeSetTimeout(wrapper, millis)
            } else {
                Browser.safeRequestAnimationFrame(wrapper)
            }
        }
        Module["_emscripten_async_call"] = _emscripten_async_call;
        _emscripten_async_call.sig = "vppi";
        function _emscripten_get_window_title() {
            var buflen = 256;
            if (!_emscripten_get_window_title.buffer) {
                _emscripten_get_window_title.buffer = _malloc(buflen)
            }
            stringToUTF8(document.title, _emscripten_get_window_title.buffer, buflen);
            return _emscripten_get_window_title.buffer
        }
        Module["_emscripten_get_window_title"] = _emscripten_get_window_title;
        _emscripten_get_window_title.sig = "iv";
        function _emscripten_set_window_title(title) {
            setWindowTitle(UTF8ToString(title))
        }
        Module["_emscripten_set_window_title"] = _emscripten_set_window_title;
        _emscripten_set_window_title.sig = "vi";
        function _emscripten_get_screen_size(width, height) {
            HEAP32[width >> 2] = screen.width;
            HEAP32[height >> 2] = screen.height
        }
        Module["_emscripten_get_screen_size"] = _emscripten_get_screen_size;
        _emscripten_get_screen_size.sig = "vii";
        function _emscripten_hide_mouse() {
            var styleSheet = document.styleSheets[0];
            var rules = styleSheet.cssRules;
            for (var i = 0; i < rules.length; i++) {
                if (rules[i].cssText.substr(0, 6) == "canvas") {
                    styleSheet.deleteRule(i);
                    i--
                }
            }
            styleSheet.insertRule("canvas.emscripten { border: 1px solid black; cursor: none; }", 0)
        }
        Module["_emscripten_hide_mouse"] = _emscripten_hide_mouse;
        _emscripten_hide_mouse.sig = "v";
        function _emscripten_set_canvas_size(width, height) {
            Browser.setCanvasSize(width, height)
        }
        Module["_emscripten_set_canvas_size"] = _emscripten_set_canvas_size;
        _emscripten_set_canvas_size.sig = "vii";
        function _emscripten_get_canvas_size(width, height, isFullscreen) {
            var canvas = Module["canvas"];
            HEAP32[width >> 2] = canvas.width;
            HEAP32[height >> 2] = canvas.height;
            HEAP32[isFullscreen >> 2] = Browser.isFullscreen ? 1 : 0
        }
        Module["_emscripten_get_canvas_size"] = _emscripten_get_canvas_size;
        _emscripten_get_canvas_size.sig = "viii";
        function _emscripten_create_worker(url) {
            url = UTF8ToString(url);
            var id = Browser.workers.length;
            var info = {
                worker: new Worker(url),
                callbacks: [],
                awaited: 0,
                buffer: 0,
                bufferSize: 0
            };
            info.worker.onmessage = function info_worker_onmessage(msg) {
                if (ABORT)
                    return;
                var info = Browser.workers[id];
                if (!info)
                    return;
                var callbackId = msg.data["callbackId"];
                var callbackInfo = info.callbacks[callbackId];
                if (!callbackInfo)
                    return;
                if (msg.data["finalResponse"]) {
                    info.awaited--;
                    info.callbacks[callbackId] = null
                }
                var data = msg.data["data"];
                if (data) {
                    if (!data.byteLength)
                        data = new Uint8Array(data);
                    if (!info.buffer || info.bufferSize < data.length) {
                        if (info.buffer)
                            _free(info.buffer);
                        info.bufferSize = data.length;
                        info.buffer = _malloc(data.length)
                    }
                    HEAPU8.set(data, info.buffer);
                    callbackInfo.func(info.buffer, data.length, callbackInfo.arg)
                } else {
                    callbackInfo.func(0, 0, callbackInfo.arg)
                }
            }
            ;
            Browser.workers.push(info);
            return id
        }
        Module["_emscripten_create_worker"] = _emscripten_create_worker;
        _emscripten_create_worker.sig = "ii";
        function _emscripten_destroy_worker(id) {
            var info = Browser.workers[id];
            info.worker.terminate();
            if (info.buffer)
                _free(info.buffer);
            Browser.workers[id] = null
        }
        Module["_emscripten_destroy_worker"] = _emscripten_destroy_worker;
        _emscripten_destroy_worker.sig = "vi";
        function _emscripten_call_worker(id, funcName, data, size, callback, arg) {
            funcName = UTF8ToString(funcName);
            var info = Browser.workers[id];
            var callbackId = -1;
            if (callback) {
                callbackId = info.callbacks.length;
                info.callbacks.push({
                    func: getWasmTableEntry(callback),
                    arg: arg
                });
                info.awaited++
            }
            var transferObject = {
                "funcName": funcName,
                "callbackId": callbackId,
                "data": data ? new Uint8Array(HEAPU8.subarray(data, data + size)) : 0
            };
            if (data) {
                info.worker.postMessage(transferObject, [transferObject.data.buffer])
            } else {
                info.worker.postMessage(transferObject)
            }
        }
        Module["_emscripten_call_worker"] = _emscripten_call_worker;
        _emscripten_call_worker.sig = "viiiiii";
        function _emscripten_get_worker_queue_size(id) {
            var info = Browser.workers[id];
            if (!info)
                return -1;
            return info.awaited
        }
        Module["_emscripten_get_worker_queue_size"] = _emscripten_get_worker_queue_size;
        _emscripten_get_worker_queue_size.sig = "i";
        function _emscripten_get_preloaded_image_data(path, w, h) {
            if ((path | 0) === path)
                path = UTF8ToString(path);
            path = PATH_FS.resolve(path);
            var canvas = preloadedImages[path];
            if (canvas) {
                var ctx = canvas.getContext("2d");
                var image = ctx.getImageData(0, 0, canvas.width, canvas.height);
                var buf = _malloc(canvas.width * canvas.height * 4);
                HEAPU8.set(image.data, buf);
                HEAP32[w >> 2] = canvas.width;
                HEAP32[h >> 2] = canvas.height;
                return buf
            }
            return 0
        }
        Module["_emscripten_get_preloaded_image_data"] = _emscripten_get_preloaded_image_data;
        _emscripten_get_preloaded_image_data.sig = "iiii";
        function _emscripten_get_preloaded_image_data_from_FILE(file, w, h) {
            var fd = Module["_fileno"](file);
            var stream = FS.getStream(fd);
            if (stream) {
                return _emscripten_get_preloaded_image_data(stream.path, w, h)
            }
            return 0
        }
        Module["_emscripten_get_preloaded_image_data_from_FILE"] = _emscripten_get_preloaded_image_data_from_FILE;
        _emscripten_get_preloaded_image_data_from_FILE.sig = "iiii";
        var wget = {
            wgetRequests: {},
            nextWgetRequestHandle: 0,
            getNextWgetRequestHandle: function() {
                var handle = wget.nextWgetRequestHandle;
                wget.nextWgetRequestHandle++;
                return handle
            }
        };
        Module["wget"] = wget;
        function _emscripten_async_wget(url, file, onload, onerror) {
            var _url = UTF8ToString(url);
            var _file = UTF8ToString(file);
            _file = PATH_FS.resolve(_file);
            function doCallback(callback) {
                if (callback) {
                    callUserCallback(function() {
                        withStackSave(function() {
                            getWasmTableEntry(callback)(allocateUTF8OnStack(_file))
                        })
                    })
                }
            }
            var destinationDirectory = PATH.dirname(_file);
            FS.createPreloadedFile(destinationDirectory, PATH.basename(_file), _url, true, true, function() {
                doCallback(onload)
            }, function() {
                doCallback(onerror)
            }, false, false, function() {
                try {
                    FS.unlink(_file)
                } catch (e) {}
                FS.mkdirTree(destinationDirectory)
            })
        }
        Module["_emscripten_async_wget"] = _emscripten_async_wget;
        _emscripten_async_wget.sig = "viiii";
        function _emscripten_async_wget_data(url, arg, onload, onerror) {
            asyncLoad(UTF8ToString(url), function(byteArray) {
                callUserCallback(function() {
                    var buffer = _malloc(byteArray.length);
                    HEAPU8.set(byteArray, buffer);
                    getWasmTableEntry(onload)(arg, buffer, byteArray.length);
                    _free(buffer)
                })
            }, function() {
                if (onerror) {
                    callUserCallback(function() {
                        getWasmTableEntry(onerror)(arg)
                    })
                }
            }, true)
        }
        Module["_emscripten_async_wget_data"] = _emscripten_async_wget_data;
        _emscripten_async_wget_data.sig = "viiii";
        function _emscripten_async_wget2(url, file, request, param, arg, onload, onerror, onprogress) {
            var _url = UTF8ToString(url);
            var _file = UTF8ToString(file);
            _file = PATH_FS.resolve(_file);
            var _request = UTF8ToString(request);
            var _param = UTF8ToString(param);
            var index = _file.lastIndexOf("/");
            var http = new XMLHttpRequest;
            http.open(_request, _url, true);
            http.responseType = "arraybuffer";
            var handle = wget.getNextWgetRequestHandle();
            var destinationDirectory = PATH.dirname(_file);
            http.onload = function http_onload(e) {
                if (http.status >= 200 && http.status < 300) {
                    try {
                        FS.unlink(_file)
                    } catch (e) {}
                    FS.mkdirTree(destinationDirectory);
                    FS.createDataFile(_file.substr(0, index), _file.substr(index + 1), new Uint8Array(http.response), true, true, false);
                    if (onload) {
                        withStackSave(function() {
                            getWasmTableEntry(onload)(handle, arg, allocateUTF8OnStack(_file))
                        })
                    }
                } else {
                    if (onerror)
                        getWasmTableEntry(onerror)(handle, arg, http.status)
                }
                delete wget.wgetRequests[handle]
            }
            ;
            http.onerror = function http_onerror(e) {
                if (onerror)
                    getWasmTableEntry(onerror)(handle, arg, http.status);
                delete wget.wgetRequests[handle]
            }
            ;
            http.onprogress = function http_onprogress(e) {
                if (e.lengthComputable || e.lengthComputable === undefined && e.total != 0) {
                    var percentComplete = e.loaded / e.total * 100;
                    if (onprogress)
                        getWasmTableEntry(onprogress)(handle, arg, percentComplete)
                }
            }
            ;
            http.onabort = function http_onabort(e) {
                delete wget.wgetRequests[handle]
            }
            ;
            if (_request == "POST") {
                http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                http.send(_param)
            } else {
                http.send(null)
            }
            wget.wgetRequests[handle] = http;
            return handle
        }
        Module["_emscripten_async_wget2"] = _emscripten_async_wget2;
        _emscripten_async_wget2.sig = "iiiiiiiii";
        function _emscripten_async_wget2_data(url, request, param, arg, free, onload, onerror, onprogress) {
            var _url = UTF8ToString(url);
            var _request = UTF8ToString(request);
            var _param = UTF8ToString(param);
            var http = new XMLHttpRequest;
            http.open(_request, _url, true);
            http.responseType = "arraybuffer";
            var handle = wget.getNextWgetRequestHandle();
            function onerrorjs() {
                if (onerror) {
                    var statusText = 0;
                    if (http.statusText) {
                        var len = lengthBytesUTF8(http.statusText) + 1;
                        statusText = stackAlloc(len);
                        stringToUTF8(http.statusText, statusText, len)
                    }
                    getWasmTableEntry(onerror)(handle, arg, http.status, statusText)
                }
            }
            http.onload = function http_onload(e) {
                if (http.status >= 200 && http.status < 300 || http.status === 0 && _url.substr(0, 4).toLowerCase() != "http") {
                    var byteArray = new Uint8Array(http.response);
                    var buffer = _malloc(byteArray.length);
                    HEAPU8.set(byteArray, buffer);
                    if (onload)
                        getWasmTableEntry(onload)(handle, arg, buffer, byteArray.length);
                    if (free)
                        _free(buffer)
                } else {
                    onerrorjs()
                }
                delete wget.wgetRequests[handle]
            }
            ;
            http.onerror = function http_onerror(e) {
                onerrorjs();
                delete wget.wgetRequests[handle]
            }
            ;
            http.onprogress = function http_onprogress(e) {
                if (onprogress)
                    getWasmTableEntry(onprogress)(handle, arg, e.loaded, e.lengthComputable || e.lengthComputable === undefined ? e.total : 0)
            }
            ;
            http.onabort = function http_onabort(e) {
                delete wget.wgetRequests[handle]
            }
            ;
            if (_request == "POST") {
                http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                http.send(_param)
            } else {
                http.send(null)
            }
            wget.wgetRequests[handle] = http;
            return handle
        }
        Module["_emscripten_async_wget2_data"] = _emscripten_async_wget2_data;
        _emscripten_async_wget2_data.sig = "iiiiiiiii";
        function _emscripten_async_wget2_abort(handle) {
            var http = wget.wgetRequests[handle];
            if (http) {
                http.abort()
            }
        }
        Module["_emscripten_async_wget2_abort"] = _emscripten_async_wget2_abort;
        _emscripten_async_wget2_abort.sig = "vi";
        function _setNetworkCallback(event, userData, callback) {
            function _callback(data) {
                try {
                    if (event === "error") {
                        withStackSave(function() {
                            var msg = allocateUTF8OnStack(data[2]);
                            getWasmTableEntry(callback)(data[0], data[1], msg, userData)
                        })
                    } else {
                        getWasmTableEntry(callback)(data, userData)
                    }
                } catch (e) {
                    if (!(e instanceof ExitStatus)) {
                        if (e && typeof e == "object" && e.stack)
                            err("exception thrown: " + [e, e.stack]);
                        throw e
                    }
                }
            }
            Module["websocket"]["on"](event, callback ? _callback : null)
        }
        Module["_setNetworkCallback"] = _setNetworkCallback;
        function _emscripten_set_socket_error_callback(userData, callback) {
            _setNetworkCallback("error", userData, callback)
        }
        Module["_emscripten_set_socket_error_callback"] = _emscripten_set_socket_error_callback;
        function _emscripten_set_socket_open_callback(userData, callback) {
            _setNetworkCallback("open", userData, callback)
        }
        Module["_emscripten_set_socket_open_callback"] = _emscripten_set_socket_open_callback;
        function _emscripten_set_socket_listen_callback(userData, callback) {
            _setNetworkCallback("listen", userData, callback)
        }
        Module["_emscripten_set_socket_listen_callback"] = _emscripten_set_socket_listen_callback;
        function _emscripten_set_socket_connection_callback(userData, callback) {
            _setNetworkCallback("connection", userData, callback)
        }
        Module["_emscripten_set_socket_connection_callback"] = _emscripten_set_socket_connection_callback;
        function _emscripten_set_socket_message_callback(userData, callback) {
            _setNetworkCallback("message", userData, callback)
        }
        Module["_emscripten_set_socket_message_callback"] = _emscripten_set_socket_message_callback;
        function _emscripten_set_socket_close_callback(userData, callback) {
            _setNetworkCallback("close", userData, callback)
        }
        Module["_emscripten_set_socket_close_callback"] = _emscripten_set_socket_close_callback;
        function _emscripten_webgl_enable_ANGLE_instanced_arrays(ctx) {
            return __webgl_enable_ANGLE_instanced_arrays(GL.contexts[ctx].GLctx)
        }
        Module["_emscripten_webgl_enable_ANGLE_instanced_arrays"] = _emscripten_webgl_enable_ANGLE_instanced_arrays;
        function _emscripten_webgl_enable_OES_vertex_array_object(ctx) {
            return __webgl_enable_OES_vertex_array_object(GL.contexts[ctx].GLctx)
        }
        Module["_emscripten_webgl_enable_OES_vertex_array_object"] = _emscripten_webgl_enable_OES_vertex_array_object;
        function _emscripten_webgl_enable_WEBGL_draw_buffers(ctx) {
            return __webgl_enable_WEBGL_draw_buffers(GL.contexts[ctx].GLctx)
        }
        Module["_emscripten_webgl_enable_WEBGL_draw_buffers"] = _emscripten_webgl_enable_WEBGL_draw_buffers;
        function _emscripten_webgl_enable_WEBGL_multi_draw(ctx) {
            return __webgl_enable_WEBGL_multi_draw(GL.contexts[ctx].GLctx)
        }
        Module["_emscripten_webgl_enable_WEBGL_multi_draw"] = _emscripten_webgl_enable_WEBGL_multi_draw;
        function _glPixelStorei(pname, param) {
            if (pname == 3317) {
                GL.unpackAlignment = param
            }
            GLctx.pixelStorei(pname, param)
        }
        Module["_glPixelStorei"] = _glPixelStorei;
        _glPixelStorei.sig = "vii";
        function _glGetString(name_) {
            var ret = GL.stringCache[name_];
            if (!ret) {
                switch (name_) {
                case 7939:
                    var exts = GLctx.getSupportedExtensions() || [];
                    exts = exts.concat(exts.map(function(e) {
                        return "GL_" + e
                    }));
                    ret = stringToNewUTF8(exts.join(" "));
                    break;
                case 7936:
                case 7937:
                case 37445:
                case 37446:
                    var s = GLctx.getParameter(name_);
                    if (!s) {
                        GL.recordError(1280)
                    }
                    ret = s && stringToNewUTF8(s);
                    break;
                case 7938:
                    var glVersion = GLctx.getParameter(7938);
                    {
                        glVersion = "OpenGL ES 2.0 (" + glVersion + ")"
                    }
                    ret = stringToNewUTF8(glVersion);
                    break;
                case 35724:
                    var glslVersion = GLctx.getParameter(35724);
                    var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
                    var ver_num = glslVersion.match(ver_re);
                    if (ver_num !== null) {
                        if (ver_num[1].length == 3)
                            ver_num[1] = ver_num[1] + "0";
                        glslVersion = "OpenGL ES GLSL ES " + ver_num[1] + " (" + glslVersion + ")"
                    }
                    ret = stringToNewUTF8(glslVersion);
                    break;
                default:
                    GL.recordError(1280)
                }
                GL.stringCache[name_] = ret
            }
            return ret
        }
        Module["_glGetString"] = _glGetString;
        _glGetString.sig = "ii";
        function _glGetIntegerv(name_, p) {
            emscriptenWebGLGet(name_, p, 0)
        }
        Module["_glGetIntegerv"] = _glGetIntegerv;
        _glGetIntegerv.sig = "vii";
        function _glGetFloatv(name_, p) {
            emscriptenWebGLGet(name_, p, 2)
        }
        Module["_glGetFloatv"] = _glGetFloatv;
        _glGetFloatv.sig = "vii";
        function _glGetBooleanv(name_, p) {
            emscriptenWebGLGet(name_, p, 4)
        }
        Module["_glGetBooleanv"] = _glGetBooleanv;
        _glGetBooleanv.sig = "vii";
        function _glDeleteTextures(n, textures) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[textures + i * 4 >> 2];
                var texture = GL.textures[id];
                if (!texture)
                    continue;
                GLctx.deleteTexture(texture);
                texture.name = 0;
                GL.textures[id] = null
            }
        }
        Module["_glDeleteTextures"] = _glDeleteTextures;
        _glDeleteTextures.sig = "vii";
        function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
            GLctx["compressedTexImage2D"](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray(data, data + imageSize) : null)
        }
        Module["_glCompressedTexImage2D"] = _glCompressedTexImage2D;
        _glCompressedTexImage2D.sig = "viiiiiiii";
        function _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
            GLctx["compressedTexSubImage2D"](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray(data, data + imageSize) : null)
        }
        Module["_glCompressedTexSubImage2D"] = _glCompressedTexSubImage2D;
        _glCompressedTexSubImage2D.sig = "viiiiiiiii";
        function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
            GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null)
        }
        Module["_glTexImage2D"] = _glTexImage2D;
        _glTexImage2D.sig = "viiiiiiiii";
        function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
            var pixelData = null;
            if (pixels)
                pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
            GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData)
        }
        Module["_glTexSubImage2D"] = _glTexSubImage2D;
        _glTexSubImage2D.sig = "viiiiiiiii";
        function _glReadPixels(x, y, width, height, format, type, pixels) {
            var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
            if (!pixelData) {
                GL.recordError(1280);
                return
            }
            GLctx.readPixels(x, y, width, height, format, type, pixelData)
        }
        Module["_glReadPixels"] = _glReadPixels;
        _glReadPixels.sig = "viiiiiii";
        function _glBindTexture(target, texture) {
            GLctx.bindTexture(target, GL.textures[texture])
        }
        Module["_glBindTexture"] = _glBindTexture;
        _glBindTexture.sig = "vii";
        function _glGetTexParameterfv(target, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            HEAPF32[params >> 2] = GLctx.getTexParameter(target, pname)
        }
        Module["_glGetTexParameterfv"] = _glGetTexParameterfv;
        _glGetTexParameterfv.sig = "viii";
        function _glGetTexParameteriv(target, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            HEAP32[params >> 2] = GLctx.getTexParameter(target, pname)
        }
        Module["_glGetTexParameteriv"] = _glGetTexParameteriv;
        _glGetTexParameteriv.sig = "viii";
        function _glTexParameterfv(target, pname, params) {
            var param = HEAPF32[params >> 2];
            GLctx.texParameterf(target, pname, param)
        }
        Module["_glTexParameterfv"] = _glTexParameterfv;
        _glTexParameterfv.sig = "viii";
        function _glTexParameteriv(target, pname, params) {
            var param = HEAP32[params >> 2];
            GLctx.texParameteri(target, pname, param)
        }
        Module["_glTexParameteriv"] = _glTexParameteriv;
        _glTexParameteriv.sig = "viii";
        function _glIsTexture(id) {
            var texture = GL.textures[id];
            if (!texture)
                return 0;
            return GLctx.isTexture(texture)
        }
        Module["_glIsTexture"] = _glIsTexture;
        _glIsTexture.sig = "ii";
        function _glGenBuffers(n, buffers) {
            __glGenObject(n, buffers, "createBuffer", GL.buffers)
        }
        Module["_glGenBuffers"] = _glGenBuffers;
        _glGenBuffers.sig = "vii";
        function _glGenTextures(n, textures) {
            __glGenObject(n, textures, "createTexture", GL.textures)
        }
        Module["_glGenTextures"] = _glGenTextures;
        _glGenTextures.sig = "vii";
        function _glDeleteBuffers(n, buffers) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[buffers + i * 4 >> 2];
                var buffer = GL.buffers[id];
                if (!buffer)
                    continue;
                GLctx.deleteBuffer(buffer);
                buffer.name = 0;
                GL.buffers[id] = null
            }
        }
        Module["_glDeleteBuffers"] = _glDeleteBuffers;
        _glDeleteBuffers.sig = "vii";
        function _glGetBufferParameteriv(target, value, data) {
            if (!data) {
                GL.recordError(1281);
                return
            }
            HEAP32[data >> 2] = GLctx.getBufferParameter(target, value)
        }
        Module["_glGetBufferParameteriv"] = _glGetBufferParameteriv;
        _glGetBufferParameteriv.sig = "viii";
        function _glBufferData(target, size, data, usage) {
            GLctx.bufferData(target, data ? HEAPU8.subarray(data, data + size) : size, usage)
        }
        Module["_glBufferData"] = _glBufferData;
        _glBufferData.sig = "viiii";
        function _glBufferSubData(target, offset, size, data) {
            GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size))
        }
        Module["_glBufferSubData"] = _glBufferSubData;
        _glBufferSubData.sig = "viiii";
        function _glGenQueriesEXT(n, ids) {
            for (var i = 0; i < n; i++) {
                var query = GLctx.disjointTimerQueryExt["createQueryEXT"]();
                if (!query) {
                    GL.recordError(1282);
                    while (i < n)
                        HEAP32[ids + i++ * 4 >> 2] = 0;
                    return
                }
                var id = GL.getNewId(GL.queries);
                query.name = id;
                GL.queries[id] = query;
                HEAP32[ids + i * 4 >> 2] = id
            }
        }
        Module["_glGenQueriesEXT"] = _glGenQueriesEXT;
        _glGenQueriesEXT.sig = "vii";
        function _glDeleteQueriesEXT(n, ids) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[ids + i * 4 >> 2];
                var query = GL.queries[id];
                if (!query)
                    continue;
                GLctx.disjointTimerQueryExt["deleteQueryEXT"](query);
                GL.queries[id] = null
            }
        }
        Module["_glDeleteQueriesEXT"] = _glDeleteQueriesEXT;
        _glDeleteQueriesEXT.sig = "vii";
        function _glIsQueryEXT(id) {
            var query = GL.queries[id];
            if (!query)
                return 0;
            return GLctx.disjointTimerQueryExt["isQueryEXT"](query)
        }
        Module["_glIsQueryEXT"] = _glIsQueryEXT;
        _glIsQueryEXT.sig = "ii";
        function _glBeginQueryEXT(target, id) {
            GLctx.disjointTimerQueryExt["beginQueryEXT"](target, GL.queries[id])
        }
        Module["_glBeginQueryEXT"] = _glBeginQueryEXT;
        _glBeginQueryEXT.sig = "vii";
        function _glEndQueryEXT(target) {
            GLctx.disjointTimerQueryExt["endQueryEXT"](target)
        }
        Module["_glEndQueryEXT"] = _glEndQueryEXT;
        _glEndQueryEXT.sig = "vi";
        function _glQueryCounterEXT(id, target) {
            GLctx.disjointTimerQueryExt["queryCounterEXT"](GL.queries[id], target)
        }
        Module["_glQueryCounterEXT"] = _glQueryCounterEXT;
        _glQueryCounterEXT.sig = "vii";
        function _glGetQueryivEXT(target, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            HEAP32[params >> 2] = GLctx.disjointTimerQueryExt["getQueryEXT"](target, pname)
        }
        Module["_glGetQueryivEXT"] = _glGetQueryivEXT;
        _glGetQueryivEXT.sig = "viii";
        function _glGetQueryObjectivEXT(id, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var query = GL.queries[id];
            var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
            var ret;
            if (typeof param == "boolean") {
                ret = param ? 1 : 0
            } else {
                ret = param
            }
            HEAP32[params >> 2] = ret
        }
        Module["_glGetQueryObjectivEXT"] = _glGetQueryObjectivEXT;
        _glGetQueryObjectivEXT.sig = "viii";
        function _glGetQueryObjectuivEXT(id, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var query = GL.queries[id];
            var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
            var ret;
            if (typeof param == "boolean") {
                ret = param ? 1 : 0
            } else {
                ret = param
            }
            HEAP32[params >> 2] = ret
        }
        Module["_glGetQueryObjectuivEXT"] = _glGetQueryObjectuivEXT;
        _glGetQueryObjectuivEXT.sig = "viii";
        function _glGetQueryObjecti64vEXT(id, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var query = GL.queries[id];
            var param;
            {
                param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname)
            }
            var ret;
            if (typeof param == "boolean") {
                ret = param ? 1 : 0
            } else {
                ret = param
            }
            writeI53ToI64(params, ret)
        }
        Module["_glGetQueryObjecti64vEXT"] = _glGetQueryObjecti64vEXT;
        _glGetQueryObjecti64vEXT.sig = "viii";
        function _glGetQueryObjectui64vEXT(id, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            var query = GL.queries[id];
            var param;
            {
                param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname)
            }
            var ret;
            if (typeof param == "boolean") {
                ret = param ? 1 : 0
            } else {
                ret = param
            }
            writeI53ToI64(params, ret)
        }
        Module["_glGetQueryObjectui64vEXT"] = _glGetQueryObjectui64vEXT;
        _glGetQueryObjectui64vEXT.sig = "viii";
        function _glIsBuffer(buffer) {
            var b = GL.buffers[buffer];
            if (!b)
                return 0;
            return GLctx.isBuffer(b)
        }
        Module["_glIsBuffer"] = _glIsBuffer;
        _glIsBuffer.sig = "ii";
        function _glGenRenderbuffers(n, renderbuffers) {
            __glGenObject(n, renderbuffers, "createRenderbuffer", GL.renderbuffers)
        }
        Module["_glGenRenderbuffers"] = _glGenRenderbuffers;
        _glGenRenderbuffers.sig = "vii";
        function _glDeleteRenderbuffers(n, renderbuffers) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[renderbuffers + i * 4 >> 2];
                var renderbuffer = GL.renderbuffers[id];
                if (!renderbuffer)
                    continue;
                GLctx.deleteRenderbuffer(renderbuffer);
                renderbuffer.name = 0;
                GL.renderbuffers[id] = null
            }
        }
        Module["_glDeleteRenderbuffers"] = _glDeleteRenderbuffers;
        _glDeleteRenderbuffers.sig = "vii";
        function _glBindRenderbuffer(target, renderbuffer) {
            GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer])
        }
        Module["_glBindRenderbuffer"] = _glBindRenderbuffer;
        _glBindRenderbuffer.sig = "vii";
        function _glGetRenderbufferParameteriv(target, pname, params) {
            if (!params) {
                GL.recordError(1281);
                return
            }
            HEAP32[params >> 2] = GLctx.getRenderbufferParameter(target, pname)
        }
        Module["_glGetRenderbufferParameteriv"] = _glGetRenderbufferParameteriv;
        _glGetRenderbufferParameteriv.sig = "viii";
        function _glIsRenderbuffer(renderbuffer) {
            var rb = GL.renderbuffers[renderbuffer];
            if (!rb)
                return 0;
            return GLctx.isRenderbuffer(rb)
        }
        Module["_glIsRenderbuffer"] = _glIsRenderbuffer;
        _glIsRenderbuffer.sig = "ii";
        function _glGetUniformfv(program, location, params) {
            emscriptenWebGLGetUniform(program, location, params, 2)
        }
        Module["_glGetUniformfv"] = _glGetUniformfv;
        _glGetUniformfv.sig = "viii";
        function _glGetUniformiv(program, location, params) {
            emscriptenWebGLGetUniform(program, location, params, 0)
        }
        Module["_glGetUniformiv"] = _glGetUniformiv;
        _glGetUniformiv.sig = "viii";
        function _glGetUniformLocation(program, name) {
            name = UTF8ToString(name);
            if (program = GL.programs[program]) {
                webglPrepareUniformLocationsBeforeFirstUse(program);
                var uniformLocsById = program.uniformLocsById;
                var arrayIndex = 0;
                var uniformBaseName = name;
                var leftBrace = webglGetLeftBracePos(name);
                if (leftBrace > 0) {
                    arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0;
                    uniformBaseName = name.slice(0, leftBrace)
                }
                var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
                if (sizeAndId && arrayIndex < sizeAndId[0]) {
                    arrayIndex += sizeAndId[1];
                    if (uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name)) {
                        return arrayIndex
                    }
                }
            } else {
                GL.recordError(1281)
            }
            return -1
        }
        Module["_glGetUniformLocation"] = _glGetUniformLocation;
        _glGetUniformLocation.sig = "iii";
        function _glGetVertexAttribfv(index, pname, params) {
            emscriptenWebGLGetVertexAttrib(index, pname, params, 2)
        }
        Module["_glGetVertexAttribfv"] = _glGetVertexAttribfv;
        _glGetVertexAttribfv.sig = "viii";
        function _glGetVertexAttribiv(index, pname, params) {
            emscriptenWebGLGetVertexAttrib(index, pname, params, 5)
        }
        Module["_glGetVertexAttribiv"] = _glGetVertexAttribiv;
        _glGetVertexAttribiv.sig = "viii";
        function _glGetVertexAttribPointerv(index, pname, pointer) {
            if (!pointer) {
                GL.recordError(1281);
                return
            }
            HEAP32[pointer >> 2] = GLctx.getVertexAttribOffset(index, pname)
        }
        Module["_glGetVertexAttribPointerv"] = _glGetVertexAttribPointerv;
        _glGetVertexAttribPointerv.sig = "viii";
        function _glUniform1f(location, v0) {
            GLctx.uniform1f(webglGetUniformLocation(location), v0)
        }
        Module["_glUniform1f"] = _glUniform1f;
        _glUniform1f.sig = "vif";
        function _glUniform2f(location, v0, v1) {
            GLctx.uniform2f(webglGetUniformLocation(location), v0, v1)
        }
        Module["_glUniform2f"] = _glUniform2f;
        _glUniform2f.sig = "viff";
        function _glUniform3f(location, v0, v1, v2) {
            GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2)
        }
        Module["_glUniform3f"] = _glUniform3f;
        _glUniform3f.sig = "vifff";
        function _glUniform4f(location, v0, v1, v2, v3) {
            GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3)
        }
        Module["_glUniform4f"] = _glUniform4f;
        _glUniform4f.sig = "viffff";
        function _glUniform1i(location, v0) {
            GLctx.uniform1i(webglGetUniformLocation(location), v0)
        }
        Module["_glUniform1i"] = _glUniform1i;
        _glUniform1i.sig = "vii";
        function _glUniform2i(location, v0, v1) {
            GLctx.uniform2i(webglGetUniformLocation(location), v0, v1)
        }
        Module["_glUniform2i"] = _glUniform2i;
        _glUniform2i.sig = "viii";
        function _glUniform3i(location, v0, v1, v2) {
            GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2)
        }
        Module["_glUniform3i"] = _glUniform3i;
        _glUniform3i.sig = "viiii";
        function _glUniform4i(location, v0, v1, v2, v3) {
            GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3)
        }
        Module["_glUniform4i"] = _glUniform4i;
        _glUniform4i.sig = "viiiii";
        function _glUniform1iv(location, count, value) {
            if (count <= 288) {
                var view = __miniTempWebGLIntBuffers[count - 1];
                for (var i = 0; i < count; ++i) {
                    view[i] = HEAP32[value + 4 * i >> 2]
                }
            } else {
                var view = HEAP32.subarray(value >> 2, value + count * 4 >> 2)
            }
            GLctx.uniform1iv(webglGetUniformLocation(location), view)
        }
        Module["_glUniform1iv"] = _glUniform1iv;
        _glUniform1iv.sig = "viii";
        function _glUniform2iv(location, count, value) {
            if (count <= 144) {
                var view = __miniTempWebGLIntBuffers[2 * count - 1];
                for (var i = 0; i < 2 * count; i += 2) {
                    view[i] = HEAP32[value + 4 * i >> 2];
                    view[i + 1] = HEAP32[value + (4 * i + 4) >> 2]
                }
            } else {
                var view = HEAP32.subarray(value >> 2, value + count * 8 >> 2)
            }
            GLctx.uniform2iv(webglGetUniformLocation(location), view)
        }
        Module["_glUniform2iv"] = _glUniform2iv;
        _glUniform2iv.sig = "viii";
        function _glUniform3iv(location, count, value) {
            if (count <= 96) {
                var view = __miniTempWebGLIntBuffers[3 * count - 1];
                for (var i = 0; i < 3 * count; i += 3) {
                    view[i] = HEAP32[value + 4 * i >> 2];
                    view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAP32[value + (4 * i + 8) >> 2]
                }
            } else {
                var view = HEAP32.subarray(value >> 2, value + count * 12 >> 2)
            }
            GLctx.uniform3iv(webglGetUniformLocation(location), view)
        }
        Module["_glUniform3iv"] = _glUniform3iv;
        _glUniform3iv.sig = "viii";
        function _glUniform4iv(location, count, value) {
            if (count <= 72) {
                var view = __miniTempWebGLIntBuffers[4 * count - 1];
                for (var i = 0; i < 4 * count; i += 4) {
                    view[i] = HEAP32[value + 4 * i >> 2];
                    view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAP32[value + (4 * i + 8) >> 2];
                    view[i + 3] = HEAP32[value + (4 * i + 12) >> 2]
                }
            } else {
                var view = HEAP32.subarray(value >> 2, value + count * 16 >> 2)
            }
            GLctx.uniform4iv(webglGetUniformLocation(location), view)
        }
        Module["_glUniform4iv"] = _glUniform4iv;
        _glUniform4iv.sig = "viii";
        function _glUniform1fv(location, count, value) {
            if (count <= 288) {
                var view = miniTempWebGLFloatBuffers[count - 1];
                for (var i = 0; i < count; ++i) {
                    view[i] = HEAPF32[value + 4 * i >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 4 >> 2)
            }
            GLctx.uniform1fv(webglGetUniformLocation(location), view)
        }
        Module["_glUniform1fv"] = _glUniform1fv;
        _glUniform1fv.sig = "viii";
        function _glUniform2fv(location, count, value) {
            if (count <= 144) {
                var view = miniTempWebGLFloatBuffers[2 * count - 1];
                for (var i = 0; i < 2 * count; i += 2) {
                    view[i] = HEAPF32[value + 4 * i >> 2];
                    view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 8 >> 2)
            }
            GLctx.uniform2fv(webglGetUniformLocation(location), view)
        }
        Module["_glUniform2fv"] = _glUniform2fv;
        _glUniform2fv.sig = "viii";
        function _glUniform3fv(location, count, value) {
            if (count <= 96) {
                var view = miniTempWebGLFloatBuffers[3 * count - 1];
                for (var i = 0; i < 3 * count; i += 3) {
                    view[i] = HEAPF32[value + 4 * i >> 2];
                    view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 12 >> 2)
            }
            GLctx.uniform3fv(webglGetUniformLocation(location), view)
        }
        Module["_glUniform3fv"] = _glUniform3fv;
        _glUniform3fv.sig = "viii";
        function _glUniform4fv(location, count, value) {
            if (count <= 72) {
                var view = miniTempWebGLFloatBuffers[4 * count - 1];
                var heap = HEAPF32;
                value >>= 2;
                for (var i = 0; i < 4 * count; i += 4) {
                    var dst = value + i;
                    view[i] = heap[dst];
                    view[i + 1] = heap[dst + 1];
                    view[i + 2] = heap[dst + 2];
                    view[i + 3] = heap[dst + 3]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2)
            }
            GLctx.uniform4fv(webglGetUniformLocation(location), view)
        }
        Module["_glUniform4fv"] = _glUniform4fv;
        _glUniform4fv.sig = "viii";
        function _glUniformMatrix2fv(location, count, transpose, value) {
            if (count <= 72) {
                var view = miniTempWebGLFloatBuffers[4 * count - 1];
                for (var i = 0; i < 4 * count; i += 4) {
                    view[i] = HEAPF32[value + 4 * i >> 2];
                    view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
                    view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2)
            }
            GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, view)
        }
        Module["_glUniformMatrix2fv"] = _glUniformMatrix2fv;
        _glUniformMatrix2fv.sig = "viiii";
        function _glUniformMatrix3fv(location, count, transpose, value) {
            if (count <= 32) {
                var view = miniTempWebGLFloatBuffers[9 * count - 1];
                for (var i = 0; i < 9 * count; i += 9) {
                    view[i] = HEAPF32[value + 4 * i >> 2];
                    view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
                    view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
                    view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
                    view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
                    view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
                    view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
                    view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
                    view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2)
            }
            GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, view)
        }
        Module["_glUniformMatrix3fv"] = _glUniformMatrix3fv;
        _glUniformMatrix3fv.sig = "viiii";
        function _glUniformMatrix4fv(location, count, transpose, value) {
            if (count <= 18) {
                var view = miniTempWebGLFloatBuffers[16 * count - 1];
                var heap = HEAPF32;
                value >>= 2;
                for (var i = 0; i < 16 * count; i += 16) {
                    var dst = value + i;
                    view[i] = heap[dst];
                    view[i + 1] = heap[dst + 1];
                    view[i + 2] = heap[dst + 2];
                    view[i + 3] = heap[dst + 3];
                    view[i + 4] = heap[dst + 4];
                    view[i + 5] = heap[dst + 5];
                    view[i + 6] = heap[dst + 6];
                    view[i + 7] = heap[dst + 7];
                    view[i + 8] = heap[dst + 8];
                    view[i + 9] = heap[dst + 9];
                    view[i + 10] = heap[dst + 10];
                    view[i + 11] = heap[dst + 11];
                    view[i + 12] = heap[dst + 12];
                    view[i + 13] = heap[dst + 13];
                    view[i + 14] = heap[dst + 14];
                    view[i + 15] = heap[dst + 15]
                }
            } else {
                var view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2)
            }
            GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, view)
        }
        Module["_glUniformMatrix4fv"] = _glUniformMatrix4fv;
        _glUniformMatrix4fv.sig = "viiii";
        function _glBindBuffer(target, buffer) {
            GLctx.bindBuffer(target, GL.buffers[buffer])
        }
        Module["_glBindBuffer"] = _glBindBuffer;
        _glBindBuffer.sig = "vii";
        function _glVertexAttrib1fv(index, v) {
            GLctx.vertexAttrib1f(index, HEAPF32[v >> 2])
        }
        Module["_glVertexAttrib1fv"] = _glVertexAttrib1fv;
        _glVertexAttrib1fv.sig = "vii";
        function _glVertexAttrib2fv(index, v) {
            GLctx.vertexAttrib2f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2])
        }
        Module["_glVertexAttrib2fv"] = _glVertexAttrib2fv;
        _glVertexAttrib2fv.sig = "vii";
        function _glVertexAttrib3fv(index, v) {
            GLctx.vertexAttrib3f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2])
        }
        Module["_glVertexAttrib3fv"] = _glVertexAttrib3fv;
        _glVertexAttrib3fv.sig = "vii";
        function _glVertexAttrib4fv(index, v) {
            GLctx.vertexAttrib4f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2], HEAPF32[v + 12 >> 2])
        }
        Module["_glVertexAttrib4fv"] = _glVertexAttrib4fv;
        _glVertexAttrib4fv.sig = "vii";
        function _glGetAttribLocation(program, name) {
            return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name))
        }
        Module["_glGetAttribLocation"] = _glGetAttribLocation;
        _glGetAttribLocation.sig = "iii";
        function _glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
            __glGetActiveAttribOrUniform("getActiveAttrib", program, index, bufSize, length, size, type, name)
        }
        Module["_glGetActiveAttrib"] = _glGetActiveAttrib;
        _glGetActiveAttrib.sig = "viiiiiii";
        function _glGetActiveUniform(program, index, bufSize, length, size, type, name) {
            __glGetActiveAttribOrUniform("getActiveUniform", program, index, bufSize, length, size, type, name)
        }
        Module["_glGetActiveUniform"] = _glGetActiveUniform;
        _glGetActiveUniform.sig = "viiiiiii";
        function _glCreateShader(shaderType) {
            var id = GL.getNewId(GL.shaders);
            GL.shaders[id] = GLctx.createShader(shaderType);
            return id
        }
        Module["_glCreateShader"] = _glCreateShader;
        _glCreateShader.sig = "ii";
        function _glDeleteShader(id) {
            if (!id)
                return;
            var shader = GL.shaders[id];
            if (!shader) {
                GL.recordError(1281);
                return
            }
            GLctx.deleteShader(shader);
            GL.shaders[id] = null
        }
        Module["_glDeleteShader"] = _glDeleteShader;
        _glDeleteShader.sig = "vi";
        function _glGetAttachedShaders(program, maxCount, count, shaders) {
            var result = GLctx.getAttachedShaders(GL.programs[program]);
            var len = result.length;
            if (len > maxCount) {
                len = maxCount
            }
            HEAP32[count >> 2] = len;
            for (var i = 0; i < len; ++i) {
                var id = GL.shaders.indexOf(result[i]);
                HEAP32[shaders + i * 4 >> 2] = id
            }
        }
        Module["_glGetAttachedShaders"] = _glGetAttachedShaders;
        _glGetAttachedShaders.sig = "viiii";
        function _glShaderSource(shader, count, string, length) {
            var source = GL.getSource(shader, count, string, length);
            GLctx.shaderSource(GL.shaders[shader], source)
        }
        Module["_glShaderSource"] = _glShaderSource;
        _glShaderSource.sig = "viiii";
        function _glGetShaderSource(shader, bufSize, length, source) {
            var result = GLctx.getShaderSource(GL.shaders[shader]);
            if (!result)
                return;
            var numBytesWrittenExclNull = bufSize > 0 && source ? stringToUTF8(result, source, bufSize) : 0;
            if (length)
                HEAP32[length >> 2] = numBytesWrittenExclNull
        }
        Module["_glGetShaderSource"] = _glGetShaderSource;
        _glGetShaderSource.sig = "viiii";
        function _glCompileShader(shader) {
            GLctx.compileShader(GL.shaders[shader])
        }
        Module["_glCompileShader"] = _glCompileShader;
        _glCompileShader.sig = "vi";
        function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
            var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
            if (log === null)
                log = "(unknown error)";
            var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
            if (length)
                HEAP32[length >> 2] = numBytesWrittenExclNull
        }
        Module["_glGetShaderInfoLog"] = _glGetShaderInfoLog;
        _glGetShaderInfoLog.sig = "viiii";
        function _glGetShaderiv(shader, pname, p) {
            if (!p) {
                GL.recordError(1281);
                return
            }
            if (pname == 35716) {
                var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
                if (log === null)
                    log = "(unknown error)";
                var logLength = log ? log.length + 1 : 0;
                HEAP32[p >> 2] = logLength
            } else if (pname == 35720) {
                var source = GLctx.getShaderSource(GL.shaders[shader]);
                var sourceLength = source ? source.length + 1 : 0;
                HEAP32[p >> 2] = sourceLength
            } else {
                HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname)
            }
        }
        Module["_glGetShaderiv"] = _glGetShaderiv;
        _glGetShaderiv.sig = "viii";
        function _glGetProgramiv(program, pname, p) {
            if (!p) {
                GL.recordError(1281);
                return
            }
            if (program >= GL.counter) {
                GL.recordError(1281);
                return
            }
            program = GL.programs[program];
            if (pname == 35716) {
                var log = GLctx.getProgramInfoLog(program);
                if (log === null)
                    log = "(unknown error)";
                HEAP32[p >> 2] = log.length + 1
            } else if (pname == 35719) {
                if (!program.maxUniformLength) {
                    for (var i = 0; i < GLctx.getProgramParameter(program, 35718); ++i) {
                        program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length + 1)
                    }
                }
                HEAP32[p >> 2] = program.maxUniformLength
            } else if (pname == 35722) {
                if (!program.maxAttributeLength) {
                    for (var i = 0; i < GLctx.getProgramParameter(program, 35721); ++i) {
                        program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length + 1)
                    }
                }
                HEAP32[p >> 2] = program.maxAttributeLength
            } else if (pname == 35381) {
                if (!program.maxUniformBlockNameLength) {
                    for (var i = 0; i < GLctx.getProgramParameter(program, 35382); ++i) {
                        program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length + 1)
                    }
                }
                HEAP32[p >> 2] = program.maxUniformBlockNameLength
            } else {
                HEAP32[p >> 2] = GLctx.getProgramParameter(program, pname)
            }
        }
        Module["_glGetProgramiv"] = _glGetProgramiv;
        _glGetProgramiv.sig = "viii";
        function _glIsShader(shader) {
            var s = GL.shaders[shader];
            if (!s)
                return 0;
            return GLctx.isShader(s)
        }
        Module["_glIsShader"] = _glIsShader;
        _glIsShader.sig = "ii";
        function _glCreateProgram() {
            var id = GL.getNewId(GL.programs);
            var program = GLctx.createProgram();
            program.name = id;
            program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
            program.uniformIdCounter = 1;
            GL.programs[id] = program;
            return id
        }
        Module["_glCreateProgram"] = _glCreateProgram;
        _glCreateProgram.sig = "i";
        function _glDeleteProgram(id) {
            if (!id)
                return;
            var program = GL.programs[id];
            if (!program) {
                GL.recordError(1281);
                return
            }
            GLctx.deleteProgram(program);
            program.name = 0;
            GL.programs[id] = null
        }
        Module["_glDeleteProgram"] = _glDeleteProgram;
        _glDeleteProgram.sig = "vi";
        function _glAttachShader(program, shader) {
            GLctx.attachShader(GL.programs[program], GL.shaders[shader])
        }
        Module["_glAttachShader"] = _glAttachShader;
        _glAttachShader.sig = "vii";
        function _glDetachShader(program, shader) {
            GLctx.detachShader(GL.programs[program], GL.shaders[shader])
        }
        Module["_glDetachShader"] = _glDetachShader;
        _glDetachShader.sig = "vii";
        function _glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
            var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
            HEAP32[range >> 2] = result.rangeMin;
            HEAP32[range + 4 >> 2] = result.rangeMax;
            HEAP32[precision >> 2] = result.precision
        }
        Module["_glGetShaderPrecisionFormat"] = _glGetShaderPrecisionFormat;
        _glGetShaderPrecisionFormat.sig = "viiii";
        function _glLinkProgram(program) {
            program = GL.programs[program];
            GLctx.linkProgram(program);
            program.uniformLocsById = 0;
            program.uniformSizeAndIdsByName = {}
        }
        Module["_glLinkProgram"] = _glLinkProgram;
        _glLinkProgram.sig = "vi";
        function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
            var log = GLctx.getProgramInfoLog(GL.programs[program]);
            if (log === null)
                log = "(unknown error)";
            var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
            if (length)
                HEAP32[length >> 2] = numBytesWrittenExclNull
        }
        Module["_glGetProgramInfoLog"] = _glGetProgramInfoLog;
        _glGetProgramInfoLog.sig = "viiii";
        function _glUseProgram(program) {
            program = GL.programs[program];
            GLctx.useProgram(program);
            GLctx.currentProgram = program
        }
        Module["_glUseProgram"] = _glUseProgram;
        _glUseProgram.sig = "vi";
        function _glValidateProgram(program) {
            GLctx.validateProgram(GL.programs[program])
        }
        Module["_glValidateProgram"] = _glValidateProgram;
        _glValidateProgram.sig = "vi";
        function _glIsProgram(program) {
            program = GL.programs[program];
            if (!program)
                return 0;
            return GLctx.isProgram(program)
        }
        Module["_glIsProgram"] = _glIsProgram;
        _glIsProgram.sig = "ii";
        function _glBindAttribLocation(program, index, name) {
            GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name))
        }
        Module["_glBindAttribLocation"] = _glBindAttribLocation;
        _glBindAttribLocation.sig = "viii";
        function _glBindFramebuffer(target, framebuffer) {
            GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer])
        }
        Module["_glBindFramebuffer"] = _glBindFramebuffer;
        _glBindFramebuffer.sig = "vii";
        function _glGenFramebuffers(n, ids) {
            __glGenObject(n, ids, "createFramebuffer", GL.framebuffers)
        }
        Module["_glGenFramebuffers"] = _glGenFramebuffers;
        _glGenFramebuffers.sig = "vii";
        function _glDeleteFramebuffers(n, framebuffers) {
            for (var i = 0; i < n; ++i) {
                var id = HEAP32[framebuffers + i * 4 >> 2];
                var framebuffer = GL.framebuffers[id];
                if (!framebuffer)
                    continue;
                GLctx.deleteFramebuffer(framebuffer);
                framebuffer.name = 0;
                GL.framebuffers[id] = null
            }
        }
        Module["_glDeleteFramebuffers"] = _glDeleteFramebuffers;
        _glDeleteFramebuffers.sig = "vii";
        function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
            GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer])
        }
        Module["_glFramebufferRenderbuffer"] = _glFramebufferRenderbuffer;
        _glFramebufferRenderbuffer.sig = "viiii";
        function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
            GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level)
        }
        Module["_glFramebufferTexture2D"] = _glFramebufferTexture2D;
        _glFramebufferTexture2D.sig = "viiiii";
        function _glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
            var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
            if (result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
                result = result.name | 0
            }
            HEAP32[params >> 2] = result
        }
        Module["_glGetFramebufferAttachmentParameteriv"] = _glGetFramebufferAttachmentParameteriv;
        _glGetFramebufferAttachmentParameteriv.sig = "viiii";
        function _glIsFramebuffer(framebuffer) {
            var fb = GL.framebuffers[framebuffer];
            if (!fb)
                return 0;
            return GLctx.isFramebuffer(fb)
        }
        Module["_glIsFramebuffer"] = _glIsFramebuffer;
        _glIsFramebuffer.sig = "ii";
        function _glGenVertexArrays(n, arrays) {
            __glGenObject(n, arrays, "createVertexArray", GL.vaos)
        }
        Module["_glGenVertexArrays"] = _glGenVertexArrays;
        _glGenVertexArrays.sig = "vii";
        function _glDeleteVertexArrays(n, vaos) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[vaos + i * 4 >> 2];
                GLctx["deleteVertexArray"](GL.vaos[id]);
                GL.vaos[id] = null
            }
        }
        Module["_glDeleteVertexArrays"] = _glDeleteVertexArrays;
        _glDeleteVertexArrays.sig = "vii";
        function _glBindVertexArray(vao) {
            GLctx["bindVertexArray"](GL.vaos[vao])
        }
        Module["_glBindVertexArray"] = _glBindVertexArray;
        _glBindVertexArray.sig = "vi";
        function _glIsVertexArray(array) {
            var vao = GL.vaos[array];
            if (!vao)
                return 0;
            return GLctx["isVertexArray"](vao)
        }
        Module["_glIsVertexArray"] = _glIsVertexArray;
        _glIsVertexArray.sig = "ii";
        function _glVertexPointer() {
            throw "Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation."
        }
        Module["_glVertexPointer"] = _glVertexPointer;
        function _glMatrixMode() {
            throw "Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation."
        }
        Module["_glMatrixMode"] = _glMatrixMode;
        function _glBegin() {
            throw "Legacy GL function (glBegin) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation."
        }
        Module["_glBegin"] = _glBegin;
        function _glLoadIdentity() {
            throw "Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation."
        }
        Module["_glLoadIdentity"] = _glLoadIdentity;
        function _glGenVertexArraysOES(n, arrays) {
            __glGenObject(n, arrays, "createVertexArray", GL.vaos)
        }
        Module["_glGenVertexArraysOES"] = _glGenVertexArraysOES;
        _glGenVertexArraysOES.sig = "vii";
        function _glDeleteVertexArraysOES(n, vaos) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[vaos + i * 4 >> 2];
                GLctx["deleteVertexArray"](GL.vaos[id]);
                GL.vaos[id] = null
            }
        }
        Module["_glDeleteVertexArraysOES"] = _glDeleteVertexArraysOES;
        _glDeleteVertexArraysOES.sig = "vii";
        function _glBindVertexArrayOES(vao) {
            GLctx["bindVertexArray"](GL.vaos[vao])
        }
        Module["_glBindVertexArrayOES"] = _glBindVertexArrayOES;
        _glBindVertexArrayOES.sig = "vi";
        function _glIsVertexArrayOES(array) {
            var vao = GL.vaos[array];
            if (!vao)
                return 0;
            return GLctx["isVertexArray"](vao)
        }
        Module["_glIsVertexArrayOES"] = _glIsVertexArrayOES;
        _glIsVertexArrayOES.sig = "ii";
        function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
            GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr)
        }
        Module["_glVertexAttribPointer"] = _glVertexAttribPointer;
        _glVertexAttribPointer.sig = "viiiiii";
        function _glEnableVertexAttribArray(index) {
            GLctx.enableVertexAttribArray(index)
        }
        Module["_glEnableVertexAttribArray"] = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray.sig = "vi";
        function _glDisableVertexAttribArray(index) {
            GLctx.disableVertexAttribArray(index)
        }
        Module["_glDisableVertexAttribArray"] = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray.sig = "vi";
        function _glDrawArrays(mode, first, count) {
            GLctx.drawArrays(mode, first, count)
        }
        Module["_glDrawArrays"] = _glDrawArrays;
        _glDrawArrays.sig = "viii";
        function _glDrawElements(mode, count, type, indices) {
            GLctx.drawElements(mode, count, type, indices)
        }
        Module["_glDrawElements"] = _glDrawElements;
        _glDrawElements.sig = "viiii";
        function _glShaderBinary() {
            GL.recordError(1280)
        }
        Module["_glShaderBinary"] = _glShaderBinary;
        _glShaderBinary.sig = "v";
        function _glReleaseShaderCompiler() {}
        Module["_glReleaseShaderCompiler"] = _glReleaseShaderCompiler;
        _glReleaseShaderCompiler.sig = "v";
        function _glGetError() {
            var error = GLctx.getError() || GL.lastError;
            GL.lastError = 0;
            return error
        }
        Module["_glGetError"] = _glGetError;
        _glGetError.sig = "i";
        function _glVertexAttribDivisor(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_glVertexAttribDivisor"] = _glVertexAttribDivisor;
        _glVertexAttribDivisor.sig = "vii";
        function _glDrawArraysInstanced(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_glDrawArraysInstanced"] = _glDrawArraysInstanced;
        _glDrawArraysInstanced.sig = "viiii";
        function _glDrawElementsInstanced(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_glDrawElementsInstanced"] = _glDrawElementsInstanced;
        _glDrawElementsInstanced.sig = "viiiii";
        function _glVertexAttribDivisorNV(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_glVertexAttribDivisorNV"] = _glVertexAttribDivisorNV;
        _glVertexAttribDivisorNV.sig = "vii";
        function _glDrawArraysInstancedNV(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_glDrawArraysInstancedNV"] = _glDrawArraysInstancedNV;
        _glDrawArraysInstancedNV.sig = "viiii";
        function _glDrawElementsInstancedNV(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_glDrawElementsInstancedNV"] = _glDrawElementsInstancedNV;
        _glDrawElementsInstancedNV.sig = "viiiii";
        function _glVertexAttribDivisorEXT(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_glVertexAttribDivisorEXT"] = _glVertexAttribDivisorEXT;
        _glVertexAttribDivisorEXT.sig = "vii";
        function _glDrawArraysInstancedEXT(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_glDrawArraysInstancedEXT"] = _glDrawArraysInstancedEXT;
        _glDrawArraysInstancedEXT.sig = "viiii";
        function _glDrawElementsInstancedEXT(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_glDrawElementsInstancedEXT"] = _glDrawElementsInstancedEXT;
        _glDrawElementsInstancedEXT.sig = "viiiii";
        function _glVertexAttribDivisorARB(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_glVertexAttribDivisorARB"] = _glVertexAttribDivisorARB;
        _glVertexAttribDivisorARB.sig = "vii";
        function _glDrawArraysInstancedARB(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_glDrawArraysInstancedARB"] = _glDrawArraysInstancedARB;
        _glDrawArraysInstancedARB.sig = "viiii";
        function _glDrawElementsInstancedARB(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_glDrawElementsInstancedARB"] = _glDrawElementsInstancedARB;
        _glDrawElementsInstancedARB.sig = "viiiii";
        function _glVertexAttribDivisorANGLE(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_glVertexAttribDivisorANGLE"] = _glVertexAttribDivisorANGLE;
        _glVertexAttribDivisorANGLE.sig = "vii";
        function _glDrawArraysInstancedANGLE(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_glDrawArraysInstancedANGLE"] = _glDrawArraysInstancedANGLE;
        _glDrawArraysInstancedANGLE.sig = "viiii";
        function _glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_glDrawElementsInstancedANGLE"] = _glDrawElementsInstancedANGLE;
        _glDrawElementsInstancedANGLE.sig = "viiiii";
        function _glDrawBuffers(n, bufs) {
            var bufArray = tempFixedLengthArray[n];
            for (var i = 0; i < n; i++) {
                bufArray[i] = HEAP32[bufs + i * 4 >> 2]
            }
            GLctx["drawBuffers"](bufArray)
        }
        Module["_glDrawBuffers"] = _glDrawBuffers;
        _glDrawBuffers.sig = "vii";
        function _glDrawBuffersEXT(n, bufs) {
            var bufArray = tempFixedLengthArray[n];
            for (var i = 0; i < n; i++) {
                bufArray[i] = HEAP32[bufs + i * 4 >> 2]
            }
            GLctx["drawBuffers"](bufArray)
        }
        Module["_glDrawBuffersEXT"] = _glDrawBuffersEXT;
        _glDrawBuffersEXT.sig = "vii";
        function _glDrawBuffersWEBGL(n, bufs) {
            var bufArray = tempFixedLengthArray[n];
            for (var i = 0; i < n; i++) {
                bufArray[i] = HEAP32[bufs + i * 4 >> 2]
            }
            GLctx["drawBuffers"](bufArray)
        }
        Module["_glDrawBuffersWEBGL"] = _glDrawBuffersWEBGL;
        _glDrawBuffersWEBGL.sig = "vii";
        function _glColorMask(red, green, blue, alpha) {
            GLctx.colorMask(!!red, !!green, !!blue, !!alpha)
        }
        Module["_glColorMask"] = _glColorMask;
        _glColorMask.sig = "viiii";
        function _glDepthMask(flag) {
            GLctx.depthMask(!!flag)
        }
        Module["_glDepthMask"] = _glDepthMask;
        _glDepthMask.sig = "vi";
        function _glSampleCoverage(value, invert) {
            GLctx.sampleCoverage(value, !!invert)
        }
        Module["_glSampleCoverage"] = _glSampleCoverage;
        _glSampleCoverage.sig = "vii";
        function _glMultiDrawArrays(mode, firsts, counts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, drawcount)
        }
        Module["_glMultiDrawArrays"] = _glMultiDrawArrays;
        _glMultiDrawArrays.sig = "viiii";
        function _glMultiDrawArraysANGLE(mode, firsts, counts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, drawcount)
        }
        Module["_glMultiDrawArraysANGLE"] = _glMultiDrawArraysANGLE;
        _glMultiDrawArraysANGLE.sig = "viiii";
        function _glMultiDrawArraysWEBGL(mode, firsts, counts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, drawcount)
        }
        Module["_glMultiDrawArraysWEBGL"] = _glMultiDrawArraysWEBGL;
        _glMultiDrawArraysWEBGL.sig = "viiii";
        function _glMultiDrawArraysInstancedANGLE(mode, firsts, counts, instanceCounts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysInstancedWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, HEAP32, instanceCounts >> 2, drawcount)
        }
        Module["_glMultiDrawArraysInstancedANGLE"] = _glMultiDrawArraysInstancedANGLE;
        _glMultiDrawArraysInstancedANGLE.sig = "viiiii";
        function _glMultiDrawArraysInstancedWEBGL(mode, firsts, counts, instanceCounts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysInstancedWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, HEAP32, instanceCounts >> 2, drawcount)
        }
        Module["_glMultiDrawArraysInstancedWEBGL"] = _glMultiDrawArraysInstancedWEBGL;
        _glMultiDrawArraysInstancedWEBGL.sig = "viiiii";
        function _glMultiDrawElements(mode, counts, type, offsets, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, drawcount)
        }
        Module["_glMultiDrawElements"] = _glMultiDrawElements;
        _glMultiDrawElements.sig = "viiiii";
        function _glMultiDrawElementsANGLE(mode, counts, type, offsets, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, drawcount)
        }
        Module["_glMultiDrawElementsANGLE"] = _glMultiDrawElementsANGLE;
        _glMultiDrawElementsANGLE.sig = "viiiii";
        function _glMultiDrawElementsWEBGL(mode, counts, type, offsets, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, drawcount)
        }
        Module["_glMultiDrawElementsWEBGL"] = _glMultiDrawElementsWEBGL;
        _glMultiDrawElementsWEBGL.sig = "viiiii";
        function _glMultiDrawElementsInstancedANGLE(mode, counts, type, offsets, instanceCounts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsInstancedWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, HEAP32, instanceCounts >> 2, drawcount)
        }
        Module["_glMultiDrawElementsInstancedANGLE"] = _glMultiDrawElementsInstancedANGLE;
        _glMultiDrawElementsInstancedANGLE.sig = "viiiiii";
        function _glMultiDrawElementsInstancedWEBGL(mode, counts, type, offsets, instanceCounts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsInstancedWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, HEAP32, instanceCounts >> 2, drawcount)
        }
        Module["_glMultiDrawElementsInstancedWEBGL"] = _glMultiDrawElementsInstancedWEBGL;
        _glMultiDrawElementsInstancedWEBGL.sig = "viiiiii";
        function _glFinish() {
            GLctx["finish"]()
        }
        Module["_glFinish"] = _glFinish;
        _glFinish.sig = "v";
        function _glFlush() {
            GLctx["flush"]()
        }
        Module["_glFlush"] = _glFlush;
        _glFlush.sig = "v";
        function _glClearDepth(x0) {
            GLctx["clearDepth"](x0)
        }
        Module["_glClearDepth"] = _glClearDepth;
        _glClearDepth.sig = "vi";
        function _glClearDepthf(x0) {
            GLctx["clearDepth"](x0)
        }
        Module["_glClearDepthf"] = _glClearDepthf;
        _glClearDepthf.sig = "vf";
        function _glDepthFunc(x0) {
            GLctx["depthFunc"](x0)
        }
        Module["_glDepthFunc"] = _glDepthFunc;
        _glDepthFunc.sig = "vi";
        function _glEnable(x0) {
            GLctx["enable"](x0)
        }
        Module["_glEnable"] = _glEnable;
        _glEnable.sig = "vi";
        function _glDisable(x0) {
            GLctx["disable"](x0)
        }
        Module["_glDisable"] = _glDisable;
        _glDisable.sig = "vi";
        function _glFrontFace(x0) {
            GLctx["frontFace"](x0)
        }
        Module["_glFrontFace"] = _glFrontFace;
        _glFrontFace.sig = "vi";
        function _glCullFace(x0) {
            GLctx["cullFace"](x0)
        }
        Module["_glCullFace"] = _glCullFace;
        _glCullFace.sig = "vi";
        function _glClear(x0) {
            GLctx["clear"](x0)
        }
        Module["_glClear"] = _glClear;
        _glClear.sig = "vi";
        function _glLineWidth(x0) {
            GLctx["lineWidth"](x0)
        }
        Module["_glLineWidth"] = _glLineWidth;
        _glLineWidth.sig = "vf";
        function _glClearStencil(x0) {
            GLctx["clearStencil"](x0)
        }
        Module["_glClearStencil"] = _glClearStencil;
        _glClearStencil.sig = "vi";
        function _glStencilMask(x0) {
            GLctx["stencilMask"](x0)
        }
        Module["_glStencilMask"] = _glStencilMask;
        _glStencilMask.sig = "vi";
        function _glCheckFramebufferStatus(x0) {
            return GLctx["checkFramebufferStatus"](x0)
        }
        Module["_glCheckFramebufferStatus"] = _glCheckFramebufferStatus;
        _glCheckFramebufferStatus.sig = "ii";
        function _glGenerateMipmap(x0) {
            GLctx["generateMipmap"](x0)
        }
        Module["_glGenerateMipmap"] = _glGenerateMipmap;
        _glGenerateMipmap.sig = "vi";
        function _glActiveTexture(x0) {
            GLctx["activeTexture"](x0)
        }
        Module["_glActiveTexture"] = _glActiveTexture;
        _glActiveTexture.sig = "vi";
        function _glBlendEquation(x0) {
            GLctx["blendEquation"](x0)
        }
        Module["_glBlendEquation"] = _glBlendEquation;
        _glBlendEquation.sig = "vi";
        function _glIsEnabled(x0) {
            return GLctx["isEnabled"](x0)
        }
        Module["_glIsEnabled"] = _glIsEnabled;
        _glIsEnabled.sig = "ii";
        function _glBlendFunc(x0, x1) {
            GLctx["blendFunc"](x0, x1)
        }
        Module["_glBlendFunc"] = _glBlendFunc;
        _glBlendFunc.sig = "vii";
        function _glBlendEquationSeparate(x0, x1) {
            GLctx["blendEquationSeparate"](x0, x1)
        }
        Module["_glBlendEquationSeparate"] = _glBlendEquationSeparate;
        _glBlendEquationSeparate.sig = "vii";
        function _glDepthRange(x0, x1) {
            GLctx["depthRange"](x0, x1)
        }
        Module["_glDepthRange"] = _glDepthRange;
        _glDepthRange.sig = "vii";
        function _glDepthRangef(x0, x1) {
            GLctx["depthRange"](x0, x1)
        }
        Module["_glDepthRangef"] = _glDepthRangef;
        _glDepthRangef.sig = "vii";
        function _glStencilMaskSeparate(x0, x1) {
            GLctx["stencilMaskSeparate"](x0, x1)
        }
        Module["_glStencilMaskSeparate"] = _glStencilMaskSeparate;
        _glStencilMaskSeparate.sig = "vii";
        function _glHint(x0, x1) {
            GLctx["hint"](x0, x1)
        }
        Module["_glHint"] = _glHint;
        _glHint.sig = "vii";
        function _glPolygonOffset(x0, x1) {
            GLctx["polygonOffset"](x0, x1)
        }
        Module["_glPolygonOffset"] = _glPolygonOffset;
        _glPolygonOffset.sig = "vff";
        function _glVertexAttrib1f(x0, x1) {
            GLctx["vertexAttrib1f"](x0, x1)
        }
        Module["_glVertexAttrib1f"] = _glVertexAttrib1f;
        _glVertexAttrib1f.sig = "vif";
        function _glTexParameteri(x0, x1, x2) {
            GLctx["texParameteri"](x0, x1, x2)
        }
        Module["_glTexParameteri"] = _glTexParameteri;
        _glTexParameteri.sig = "viii";
        function _glTexParameterf(x0, x1, x2) {
            GLctx["texParameterf"](x0, x1, x2)
        }
        Module["_glTexParameterf"] = _glTexParameterf;
        _glTexParameterf.sig = "viii";
        function _glVertexAttrib2f(x0, x1, x2) {
            GLctx["vertexAttrib2f"](x0, x1, x2)
        }
        Module["_glVertexAttrib2f"] = _glVertexAttrib2f;
        _glVertexAttrib2f.sig = "viff";
        function _glStencilFunc(x0, x1, x2) {
            GLctx["stencilFunc"](x0, x1, x2)
        }
        Module["_glStencilFunc"] = _glStencilFunc;
        _glStencilFunc.sig = "viii";
        function _glStencilOp(x0, x1, x2) {
            GLctx["stencilOp"](x0, x1, x2)
        }
        Module["_glStencilOp"] = _glStencilOp;
        _glStencilOp.sig = "viii";
        function _glViewport(x0, x1, x2, x3) {
            GLctx["viewport"](x0, x1, x2, x3)
        }
        Module["_glViewport"] = _glViewport;
        _glViewport.sig = "viiii";
        function _glClearColor(x0, x1, x2, x3) {
            GLctx["clearColor"](x0, x1, x2, x3)
        }
        Module["_glClearColor"] = _glClearColor;
        _glClearColor.sig = "vffff";
        function _glScissor(x0, x1, x2, x3) {
            GLctx["scissor"](x0, x1, x2, x3)
        }
        Module["_glScissor"] = _glScissor;
        _glScissor.sig = "viiii";
        function _glVertexAttrib3f(x0, x1, x2, x3) {
            GLctx["vertexAttrib3f"](x0, x1, x2, x3)
        }
        Module["_glVertexAttrib3f"] = _glVertexAttrib3f;
        _glVertexAttrib3f.sig = "vifff";
        function _glRenderbufferStorage(x0, x1, x2, x3) {
            GLctx["renderbufferStorage"](x0, x1, x2, x3)
        }
        Module["_glRenderbufferStorage"] = _glRenderbufferStorage;
        _glRenderbufferStorage.sig = "viiii";
        function _glBlendFuncSeparate(x0, x1, x2, x3) {
            GLctx["blendFuncSeparate"](x0, x1, x2, x3)
        }
        Module["_glBlendFuncSeparate"] = _glBlendFuncSeparate;
        _glBlendFuncSeparate.sig = "viiii";
        function _glBlendColor(x0, x1, x2, x3) {
            GLctx["blendColor"](x0, x1, x2, x3)
        }
        Module["_glBlendColor"] = _glBlendColor;
        _glBlendColor.sig = "vffff";
        function _glStencilFuncSeparate(x0, x1, x2, x3) {
            GLctx["stencilFuncSeparate"](x0, x1, x2, x3)
        }
        Module["_glStencilFuncSeparate"] = _glStencilFuncSeparate;
        _glStencilFuncSeparate.sig = "viiii";
        function _glStencilOpSeparate(x0, x1, x2, x3) {
            GLctx["stencilOpSeparate"](x0, x1, x2, x3)
        }
        Module["_glStencilOpSeparate"] = _glStencilOpSeparate;
        _glStencilOpSeparate.sig = "viiii";
        function _glVertexAttrib4f(x0, x1, x2, x3, x4) {
            GLctx["vertexAttrib4f"](x0, x1, x2, x3, x4)
        }
        Module["_glVertexAttrib4f"] = _glVertexAttrib4f;
        _glVertexAttrib4f.sig = "viffff";
        function _glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
            GLctx["copyTexImage2D"](x0, x1, x2, x3, x4, x5, x6, x7)
        }
        Module["_glCopyTexImage2D"] = _glCopyTexImage2D;
        _glCopyTexImage2D.sig = "viiiiiiii";
        function _glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
            GLctx["copyTexSubImage2D"](x0, x1, x2, x3, x4, x5, x6, x7)
        }
        Module["_glCopyTexSubImage2D"] = _glCopyTexSubImage2D;
        _glCopyTexSubImage2D.sig = "viiiiiiii";
        function _emscripten_glGenVertexArrays(n, arrays) {
            __glGenObject(n, arrays, "createVertexArray", GL.vaos)
        }
        Module["_emscripten_glGenVertexArrays"] = _emscripten_glGenVertexArrays;
        _emscripten_glGenVertexArrays.sig = "vii";
        function _emscripten_glDeleteVertexArrays(n, vaos) {
            for (var i = 0; i < n; i++) {
                var id = HEAP32[vaos + i * 4 >> 2];
                GLctx["deleteVertexArray"](GL.vaos[id]);
                GL.vaos[id] = null
            }
        }
        Module["_emscripten_glDeleteVertexArrays"] = _emscripten_glDeleteVertexArrays;
        _emscripten_glDeleteVertexArrays.sig = "vii";
        function _emscripten_glBindVertexArray(vao) {
            GLctx["bindVertexArray"](GL.vaos[vao])
        }
        Module["_emscripten_glBindVertexArray"] = _emscripten_glBindVertexArray;
        _emscripten_glBindVertexArray.sig = "vi";
        function _emscripten_glIsVertexArray(array) {
            var vao = GL.vaos[array];
            if (!vao)
                return 0;
            return GLctx["isVertexArray"](vao)
        }
        Module["_emscripten_glIsVertexArray"] = _emscripten_glIsVertexArray;
        _emscripten_glIsVertexArray.sig = "ii";
        function _emscripten_glVertexPointer() {
            throw "Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation."
        }
        Module["_emscripten_glVertexPointer"] = _emscripten_glVertexPointer;
        function _emscripten_glMatrixMode() {
            throw "Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation."
        }
        Module["_emscripten_glMatrixMode"] = _emscripten_glMatrixMode;
        function _emscripten_glBegin() {
            throw "Legacy GL function (glBegin) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation."
        }
        Module["_emscripten_glBegin"] = _emscripten_glBegin;
        function _emscripten_glLoadIdentity() {
            throw "Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation."
        }
        Module["_emscripten_glLoadIdentity"] = _emscripten_glLoadIdentity;
        function _emscripten_glVertexAttribDivisor(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_emscripten_glVertexAttribDivisor"] = _emscripten_glVertexAttribDivisor;
        _emscripten_glVertexAttribDivisor.sig = "vii";
        function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_emscripten_glDrawArraysInstanced"] = _emscripten_glDrawArraysInstanced;
        _emscripten_glDrawArraysInstanced.sig = "viiii";
        function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_emscripten_glDrawElementsInstanced"] = _emscripten_glDrawElementsInstanced;
        _emscripten_glDrawElementsInstanced.sig = "viiiii";
        function _emscripten_glVertexAttribDivisorNV(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_emscripten_glVertexAttribDivisorNV"] = _emscripten_glVertexAttribDivisorNV;
        _emscripten_glVertexAttribDivisorNV.sig = "vii";
        function _emscripten_glDrawArraysInstancedNV(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_emscripten_glDrawArraysInstancedNV"] = _emscripten_glDrawArraysInstancedNV;
        _emscripten_glDrawArraysInstancedNV.sig = "viiii";
        function _emscripten_glDrawElementsInstancedNV(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_emscripten_glDrawElementsInstancedNV"] = _emscripten_glDrawElementsInstancedNV;
        _emscripten_glDrawElementsInstancedNV.sig = "viiiii";
        function _emscripten_glVertexAttribDivisorEXT(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_emscripten_glVertexAttribDivisorEXT"] = _emscripten_glVertexAttribDivisorEXT;
        _emscripten_glVertexAttribDivisorEXT.sig = "vii";
        function _emscripten_glDrawArraysInstancedEXT(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_emscripten_glDrawArraysInstancedEXT"] = _emscripten_glDrawArraysInstancedEXT;
        _emscripten_glDrawArraysInstancedEXT.sig = "viiii";
        function _emscripten_glDrawElementsInstancedEXT(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_emscripten_glDrawElementsInstancedEXT"] = _emscripten_glDrawElementsInstancedEXT;
        _emscripten_glDrawElementsInstancedEXT.sig = "viiiii";
        function _emscripten_glVertexAttribDivisorARB(index, divisor) {
            GLctx["vertexAttribDivisor"](index, divisor)
        }
        Module["_emscripten_glVertexAttribDivisorARB"] = _emscripten_glVertexAttribDivisorARB;
        _emscripten_glVertexAttribDivisorARB.sig = "vii";
        function _emscripten_glDrawArraysInstancedARB(mode, first, count, primcount) {
            GLctx["drawArraysInstanced"](mode, first, count, primcount)
        }
        Module["_emscripten_glDrawArraysInstancedARB"] = _emscripten_glDrawArraysInstancedARB;
        _emscripten_glDrawArraysInstancedARB.sig = "viiii";
        function _emscripten_glDrawElementsInstancedARB(mode, count, type, indices, primcount) {
            GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
        }
        Module["_emscripten_glDrawElementsInstancedARB"] = _emscripten_glDrawElementsInstancedARB;
        _emscripten_glDrawElementsInstancedARB.sig = "viiiii";
        function _emscripten_glDrawBuffers(n, bufs) {
            var bufArray = tempFixedLengthArray[n];
            for (var i = 0; i < n; i++) {
                bufArray[i] = HEAP32[bufs + i * 4 >> 2]
            }
            GLctx["drawBuffers"](bufArray)
        }
        Module["_emscripten_glDrawBuffers"] = _emscripten_glDrawBuffers;
        _emscripten_glDrawBuffers.sig = "vii";
        function _emscripten_glDrawBuffersEXT(n, bufs) {
            var bufArray = tempFixedLengthArray[n];
            for (var i = 0; i < n; i++) {
                bufArray[i] = HEAP32[bufs + i * 4 >> 2]
            }
            GLctx["drawBuffers"](bufArray)
        }
        Module["_emscripten_glDrawBuffersEXT"] = _emscripten_glDrawBuffersEXT;
        _emscripten_glDrawBuffersEXT.sig = "vii";
        function _emscripten_glMultiDrawArrays(mode, firsts, counts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawArrays"] = _emscripten_glMultiDrawArrays;
        _emscripten_glMultiDrawArrays.sig = "viiii";
        function _emscripten_glMultiDrawArraysANGLE(mode, firsts, counts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawArraysANGLE"] = _emscripten_glMultiDrawArraysANGLE;
        _emscripten_glMultiDrawArraysANGLE.sig = "viiii";
        function _emscripten_glMultiDrawArraysWEBGL(mode, firsts, counts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawArraysWEBGL"] = _emscripten_glMultiDrawArraysWEBGL;
        _emscripten_glMultiDrawArraysWEBGL.sig = "viiii";
        function _emscripten_glMultiDrawArraysInstancedANGLE(mode, firsts, counts, instanceCounts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysInstancedWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, HEAP32, instanceCounts >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawArraysInstancedANGLE"] = _emscripten_glMultiDrawArraysInstancedANGLE;
        _emscripten_glMultiDrawArraysInstancedANGLE.sig = "viiiii";
        function _emscripten_glMultiDrawArraysInstancedWEBGL(mode, firsts, counts, instanceCounts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawArraysInstancedWEBGL"](mode, HEAP32, firsts >> 2, HEAP32, counts >> 2, HEAP32, instanceCounts >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawArraysInstancedWEBGL"] = _emscripten_glMultiDrawArraysInstancedWEBGL;
        _emscripten_glMultiDrawArraysInstancedWEBGL.sig = "viiiii";
        function _emscripten_glMultiDrawElements(mode, counts, type, offsets, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawElements"] = _emscripten_glMultiDrawElements;
        _emscripten_glMultiDrawElements.sig = "viiiii";
        function _emscripten_glMultiDrawElementsANGLE(mode, counts, type, offsets, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawElementsANGLE"] = _emscripten_glMultiDrawElementsANGLE;
        _emscripten_glMultiDrawElementsANGLE.sig = "viiiii";
        function _emscripten_glMultiDrawElementsWEBGL(mode, counts, type, offsets, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawElementsWEBGL"] = _emscripten_glMultiDrawElementsWEBGL;
        _emscripten_glMultiDrawElementsWEBGL.sig = "viiiii";
        function _emscripten_glMultiDrawElementsInstancedANGLE(mode, counts, type, offsets, instanceCounts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsInstancedWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, HEAP32, instanceCounts >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawElementsInstancedANGLE"] = _emscripten_glMultiDrawElementsInstancedANGLE;
        _emscripten_glMultiDrawElementsInstancedANGLE.sig = "viiiiii";
        function _emscripten_glMultiDrawElementsInstancedWEBGL(mode, counts, type, offsets, instanceCounts, drawcount) {
            GLctx.multiDrawWebgl["multiDrawElementsInstancedWEBGL"](mode, HEAP32, counts >> 2, type, HEAP32, offsets >> 2, HEAP32, instanceCounts >> 2, drawcount)
        }
        Module["_emscripten_glMultiDrawElementsInstancedWEBGL"] = _emscripten_glMultiDrawElementsInstancedWEBGL;
        _emscripten_glMultiDrawElementsInstancedWEBGL.sig = "viiiiii";
        function _emscripten_glClearDepth(x0) {
            GLctx["clearDepth"](x0)
        }
        Module["_emscripten_glClearDepth"] = _emscripten_glClearDepth;
        _emscripten_glClearDepth.sig = "vi";
        function _emscripten_glDepthRange(x0, x1) {
            GLctx["depthRange"](x0, x1)
        }
        Module["_emscripten_glDepthRange"] = _emscripten_glDepthRange;
        _emscripten_glDepthRange.sig = "vii";
        function writeGLArray(arr, dst, dstLength, heapType) {
            var len = arr.length;
            var writeLength = dstLength < len ? dstLength : len;
            var heap = heapType ? HEAPF32 : HEAP32;
            for (var i = 0; i < writeLength; ++i) {
                heap[(dst >> 2) + i] = arr[i]
            }
            return len
        }
        Module["writeGLArray"] = writeGLArray;
        function _emscripten_webgl_init_context_attributes(attributes) {
            var a = attributes >> 2;
            for (var i = 0; i < 56 >> 2; ++i) {
                HEAP32[a + i] = 0
            }
            HEAP32[a + (0 >> 2)] = HEAP32[a + (4 >> 2)] = HEAP32[a + (12 >> 2)] = HEAP32[a + (16 >> 2)] = HEAP32[a + (32 >> 2)] = HEAP32[a + (40 >> 2)] = 1
        }
        Module["_emscripten_webgl_init_context_attributes"] = _emscripten_webgl_init_context_attributes;
        var __emscripten_webgl_power_preferences = ["default", "low-power", "high-performance"];
        Module["__emscripten_webgl_power_preferences"] = __emscripten_webgl_power_preferences;
        function _emscripten_webgl_do_create_context(target, attributes) {
            var a = attributes >> 2;
            var powerPreference = HEAP32[a + (24 >> 2)];
            var contextAttributes = {
                "alpha": !!HEAP32[a + (0 >> 2)],
                "depth": !!HEAP32[a + (4 >> 2)],
                "stencil": !!HEAP32[a + (8 >> 2)],
                "antialias": !!HEAP32[a + (12 >> 2)],
                "premultipliedAlpha": !!HEAP32[a + (16 >> 2)],
                "preserveDrawingBuffer": !!HEAP32[a + (20 >> 2)],
                "powerPreference": __emscripten_webgl_power_preferences[powerPreference],
                "failIfMajorPerformanceCaveat": !!HEAP32[a + (28 >> 2)],
                majorVersion: HEAP32[a + (32 >> 2)],
                minorVersion: HEAP32[a + (36 >> 2)],
                enableExtensionsByDefault: HEAP32[a + (40 >> 2)],
                explicitSwapControl: HEAP32[a + (44 >> 2)],
                proxyContextToMainThread: HEAP32[a + (48 >> 2)],
                renderViaOffscreenBackBuffer: HEAP32[a + (52 >> 2)]
            };
            var canvas = findCanvasEventTarget(target);
            if (!canvas) {
                return 0
            }
            if (contextAttributes.explicitSwapControl) {
                return 0
            }
            var contextHandle = GL.createContext(canvas, contextAttributes);
            return contextHandle
        }
        Module["_emscripten_webgl_do_create_context"] = _emscripten_webgl_do_create_context;
        _emscripten_webgl_do_create_context.sig = "iii";
        var _emscripten_webgl_create_context = _emscripten_webgl_do_create_context;
        Module["_emscripten_webgl_create_context"] = _emscripten_webgl_create_context;
        _emscripten_webgl_create_context.sig = "iii";
        function _emscripten_webgl_do_get_current_context() {
            return GL.currentContext ? GL.currentContext.handle : 0
        }
        Module["_emscripten_webgl_do_get_current_context"] = _emscripten_webgl_do_get_current_context;
        var _emscripten_webgl_get_current_context = _emscripten_webgl_do_get_current_context;
        Module["_emscripten_webgl_get_current_context"] = _emscripten_webgl_get_current_context;
        _emscripten_webgl_get_current_context.sig = "i";
        function _emscripten_webgl_do_commit_frame() {
            if (!GL.currentContext || !GL.currentContext.GLctx) {
                return -3
            }
            if (!GL.currentContext.attributes.explicitSwapControl) {
                return -3
            }
            return 0
        }
        Module["_emscripten_webgl_do_commit_frame"] = _emscripten_webgl_do_commit_frame;
        _emscripten_webgl_do_commit_frame.sig = "i";
        var _emscripten_webgl_commit_frame = _emscripten_webgl_do_commit_frame;
        Module["_emscripten_webgl_commit_frame"] = _emscripten_webgl_commit_frame;
        _emscripten_webgl_commit_frame.sig = "i";
        function _emscripten_webgl_make_context_current(contextHandle) {
            var success = GL.makeContextCurrent(contextHandle);
            return success ? 0 : -5
        }
        Module["_emscripten_webgl_make_context_current"] = _emscripten_webgl_make_context_current;
        _emscripten_webgl_make_context_current.sig = "ii";
        function _emscripten_webgl_get_drawing_buffer_size(contextHandle, width, height) {
            var GLContext = GL.getContext(contextHandle);
            if (!GLContext || !GLContext.GLctx || !width || !height) {
                return -5
            }
            HEAP32[width >> 2] = GLContext.GLctx.drawingBufferWidth;
            HEAP32[height >> 2] = GLContext.GLctx.drawingBufferHeight;
            return 0
        }
        Module["_emscripten_webgl_get_drawing_buffer_size"] = _emscripten_webgl_get_drawing_buffer_size;
        _emscripten_webgl_get_drawing_buffer_size.sig = "iiii";
        function _emscripten_webgl_get_context_attributes(c, a) {
            if (!a)
                return -5;
            c = GL.contexts[c];
            if (!c)
                return -3;
            var t = c.GLctx;
            if (!t)
                return -3;
            t = t.getContextAttributes();
            HEAP32[a >> 2] = t.alpha;
            HEAP32[a + 4 >> 2] = t.depth;
            HEAP32[a + 8 >> 2] = t.stencil;
            HEAP32[a + 12 >> 2] = t.antialias;
            HEAP32[a + 16 >> 2] = t.premultipliedAlpha;
            HEAP32[a + 20 >> 2] = t.preserveDrawingBuffer;
            var power = t["powerPreference"] && __emscripten_webgl_power_preferences.indexOf(t["powerPreference"]);
            HEAP32[a + 24 >> 2] = power;
            HEAP32[a + 28 >> 2] = t.failIfMajorPerformanceCaveat;
            HEAP32[a + 32 >> 2] = c.version;
            HEAP32[a + 36 >> 2] = 0;
            HEAP32[a + 40 >> 2] = c.attributes.enableExtensionsByDefault;
            return 0
        }
        Module["_emscripten_webgl_get_context_attributes"] = _emscripten_webgl_get_context_attributes;
        _emscripten_webgl_get_context_attributes.sig = "iii";
        function _emscripten_webgl_destroy_context(contextHandle) {
            if (GL.currentContext == contextHandle)
                GL.currentContext = 0;
            GL.deleteContext(contextHandle)
        }
        Module["_emscripten_webgl_destroy_context"] = _emscripten_webgl_destroy_context;
        _emscripten_webgl_destroy_context.sig = "vi";
        function _emscripten_webgl_enable_extension(contextHandle, extension) {
            var context = GL.getContext(contextHandle);
            var extString = UTF8ToString(extension);
            if (extString.startsWith("GL_"))
                extString = extString.substr(3);
            if (extString == "ANGLE_instanced_arrays")
                __webgl_enable_ANGLE_instanced_arrays(GLctx);
            if (extString == "OES_vertex_array_object")
                __webgl_enable_OES_vertex_array_object(GLctx);
            if (extString == "WEBGL_draw_buffers")
                __webgl_enable_WEBGL_draw_buffers(GLctx);
            if (extString == "WEBGL_multi_draw")
                __webgl_enable_WEBGL_multi_draw(GLctx);
            var ext = context.GLctx.getExtension(extString);
            return !!ext
        }
        Module["_emscripten_webgl_enable_extension"] = _emscripten_webgl_enable_extension;
        _emscripten_webgl_enable_extension.sig = "iii";
        function _emscripten_supports_offscreencanvas() {
            return 0
        }
        Module["_emscripten_supports_offscreencanvas"] = _emscripten_supports_offscreencanvas;
        function __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
            var webGlEventHandlerFunc = function(ev) {
                var e = ev || event;
                if (getWasmTableEntry(callbackfunc)(eventTypeId, 0, userData))
                    e.preventDefault()
            };
            var eventHandler = {
                target: findEventTarget(target),
                eventTypeString: eventTypeString,
                callbackfunc: callbackfunc,
                handlerFunc: webGlEventHandlerFunc,
                useCapture: useCapture
            };
            JSEvents.registerOrRemoveHandler(eventHandler)
        }
        Module["__registerWebGlEventCallback"] = __registerWebGlEventCallback;
        function _emscripten_set_webglcontextlost_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 31, "webglcontextlost", targetThread);
            return 0
        }
        Module["_emscripten_set_webglcontextlost_callback_on_thread"] = _emscripten_set_webglcontextlost_callback_on_thread;
        _emscripten_set_webglcontextlost_callback_on_thread.sig = "iiiiii";
        function _emscripten_set_webglcontextrestored_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
            __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 32, "webglcontextrestored", targetThread);
            return 0
        }
        Module["_emscripten_set_webglcontextrestored_callback_on_thread"] = _emscripten_set_webglcontextrestored_callback_on_thread;
        _emscripten_set_webglcontextrestored_callback_on_thread.sig = "iiiiii";
        function _emscripten_is_webgl_context_lost(contextHandle) {
            return !GL.contexts[contextHandle] || GL.contexts[contextHandle].GLctx.isContextLost()
        }
        Module["_emscripten_is_webgl_context_lost"] = _emscripten_is_webgl_context_lost;
        _emscripten_is_webgl_context_lost.sig = "ii";
        function _emscripten_webgl_get_supported_extensions() {
            return stringToNewUTF8(GLctx.getSupportedExtensions().join(" "))
        }
        Module["_emscripten_webgl_get_supported_extensions"] = _emscripten_webgl_get_supported_extensions;
        _emscripten_webgl_get_supported_extensions.sig = "i";
        function _emscripten_webgl_get_program_parameter_d(program, param) {
            return GLctx.getProgramParameter(GL.programs[program], param)
        }
        Module["_emscripten_webgl_get_program_parameter_d"] = _emscripten_webgl_get_program_parameter_d;
        _emscripten_webgl_get_program_parameter_d.sig = "fii";
        function _emscripten_webgl_get_program_info_log_utf8(program) {
            return stringToNewUTF8(GLctx.getProgramInfoLog(GL.programs[program]))
        }
        Module["_emscripten_webgl_get_program_info_log_utf8"] = _emscripten_webgl_get_program_info_log_utf8;
        _emscripten_webgl_get_program_info_log_utf8.sig = "ii";
        function _emscripten_webgl_get_shader_parameter_d(shader, param) {
            return GLctx.getShaderParameter(GL.shaders[shader], param)
        }
        Module["_emscripten_webgl_get_shader_parameter_d"] = _emscripten_webgl_get_shader_parameter_d;
        _emscripten_webgl_get_shader_parameter_d.sig = "fii";
        function _emscripten_webgl_get_shader_info_log_utf8(shader) {
            return stringToNewUTF8(GLctx.getShaderInfoLog(GL.shaders[shader]))
        }
        Module["_emscripten_webgl_get_shader_info_log_utf8"] = _emscripten_webgl_get_shader_info_log_utf8;
        _emscripten_webgl_get_shader_info_log_utf8.sig = "ii";
        function _emscripten_webgl_get_shader_source_utf8(shader) {
            return stringToNewUTF8(GLctx.getShaderSource(GL.shaders[shader]))
        }
        Module["_emscripten_webgl_get_shader_source_utf8"] = _emscripten_webgl_get_shader_source_utf8;
        _emscripten_webgl_get_shader_source_utf8.sig = "ii";
        function _emscripten_webgl_get_vertex_attrib_d(index, param) {
            return GLctx.getVertexAttrib(index, param)
        }
        Module["_emscripten_webgl_get_vertex_attrib_d"] = _emscripten_webgl_get_vertex_attrib_d;
        _emscripten_webgl_get_vertex_attrib_d.sig = "iii";
        function _emscripten_webgl_get_vertex_attrib_o(index, param) {
            var obj = GLctx.getVertexAttrib(index, param);
            return obj && obj.name
        }
        Module["_emscripten_webgl_get_vertex_attrib_o"] = _emscripten_webgl_get_vertex_attrib_o;
        _emscripten_webgl_get_vertex_attrib_o.sig = "iii";
        function _emscripten_webgl_get_vertex_attrib_v(index, param, dst, dstLength, dstType) {
            return writeGLArray(GLctx.getVertexAttrib(index, param), dst, dstLength, dstType)
        }
        Module["_emscripten_webgl_get_vertex_attrib_v"] = _emscripten_webgl_get_vertex_attrib_v;
        _emscripten_webgl_get_vertex_attrib_v.sig = "iiiiii";
        function _emscripten_webgl_get_uniform_d(program, location) {
            return GLctx.getUniform(GL.programs[program], webglGetUniformLocation(location))
        }
        Module["_emscripten_webgl_get_uniform_d"] = _emscripten_webgl_get_uniform_d;
        _emscripten_webgl_get_uniform_d.sig = "fii";
        function _emscripten_webgl_get_uniform_v(program, location, dst, dstLength, dstType) {
            return writeGLArray(GLctx.getUniform(GL.programs[program], webglGetUniformLocation(location)), dst, dstLength, dstType)
        }
        Module["_emscripten_webgl_get_uniform_v"] = _emscripten_webgl_get_uniform_v;
        _emscripten_webgl_get_uniform_v.sig = "iiiiii";
        function _emscripten_webgl_get_parameter_v(param, dst, dstLength, dstType) {
            return writeGLArray(GLctx.getParameter(param), dst, dstLength, dstType)
        }
        Module["_emscripten_webgl_get_parameter_v"] = _emscripten_webgl_get_parameter_v;
        _emscripten_webgl_get_parameter_v.sig = "iiiii";
        function _emscripten_webgl_get_parameter_d(param) {
            return GLctx.getParameter(param)
        }
        Module["_emscripten_webgl_get_parameter_d"] = _emscripten_webgl_get_parameter_d;
        _emscripten_webgl_get_parameter_d.sig = "fi";
        function _emscripten_webgl_get_parameter_o(param) {
            var obj = GLctx.getParameter(param);
            return obj && obj.name
        }
        Module["_emscripten_webgl_get_parameter_o"] = _emscripten_webgl_get_parameter_o;
        _emscripten_webgl_get_parameter_o.sig = "ii";
        function _emscripten_webgl_get_parameter_utf8(param) {
            return stringToNewUTF8(GLctx.getParameter(param))
        }
        Module["_emscripten_webgl_get_parameter_utf8"] = _emscripten_webgl_get_parameter_utf8;
        _emscripten_webgl_get_parameter_utf8.sig = "ii";
        function _emscripten_webgl_get_parameter_i64v(param, dst) {
            writeI53ToI64(dst, GLctx.getParameter(param))
        }
        Module["_emscripten_webgl_get_parameter_i64v"] = _emscripten_webgl_get_parameter_i64v;
        _emscripten_webgl_get_parameter_i64v.sig = "vii";
        function _SDL_GetTicks() {
            return Date.now() - SDL.startTime | 0
        }
        Module["_SDL_GetTicks"] = _SDL_GetTicks;
        _SDL_GetTicks.sig = "i";
        function _SDL_LockSurface(surf) {
            var surfData = SDL.surfaces[surf];
            surfData.locked++;
            if (surfData.locked > 1)
                return 0;
            if (!surfData.buffer) {
                surfData.buffer = _malloc(surfData.width * surfData.height * 4);
                HEAPU32[surf + 20 >> 2] = surfData.buffer
            }
            HEAPU32[surf + 20 >> 2] = surfData.buffer;
            if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image)
                return 0;
            if (SDL.defaults.discardOnLock) {
                if (!surfData.image) {
                    surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height)
                }
                if (!SDL.defaults.opaqueFrontBuffer)
                    return
            } else {
                surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height)
            }
            if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
                var data = surfData.image.data;
                var num = data.length;
                for (var i = 0; i < num / 4; i++) {
                    data[i * 4 + 3] = 255
                }
            }
            if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
                if (surfData.isFlagSet(2097152)) {
                    throw "CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set" + (new Error).stack
                } else {
                    HEAPU8.set(surfData.image.data, surfData.buffer)
                }
            }
            return 0
        }
        Module["_SDL_LockSurface"] = _SDL_LockSurface;
        _SDL_LockSurface.sig = "ii";
        function SDL_ttfContext() {
            return SDL.ttfContext
        }
        Module["SDL_ttfContext"] = SDL_ttfContext;
        function SDL_audio() {
            return SDL.audio
        }
        Module["SDL_audio"] = SDL_audio;
        var SDL = {
            defaults: {
                width: 320,
                height: 200,
                copyOnLock: true,
                discardOnLock: false,
                opaqueFrontBuffer: true
            },
            version: null,
            surfaces: {},
            canvasPool: [],
            events: [],
            fonts: [null],
            audios: [null],
            rwops: [null],
            music: {
                audio: null,
                volume: 1
            },
            mixerFrequency: 22050,
            mixerFormat: 32784,
            mixerNumChannels: 2,
            mixerChunkSize: 1024,
            channelMinimumNumber: 0,
            GL: false,
            glAttributes: {
                0: 3,
                1: 3,
                2: 2,
                3: 0,
                4: 0,
                5: 1,
                6: 16,
                7: 0,
                8: 0,
                9: 0,
                10: 0,
                11: 0,
                12: 0,
                13: 0,
                14: 0,
                15: 1,
                16: 0,
                17: 0,
                18: 0
            },
            keyboardState: null,
            keyboardMap: {},
            canRequestFullscreen: false,
            isRequestingFullscreen: false,
            textInput: false,
            startTime: null,
            initFlags: 0,
            buttonState: 0,
            modState: 0,
            DOMButtons: [0, 0, 0],
            DOMEventToSDLEvent: {},
            TOUCH_DEFAULT_ID: 0,
            eventHandler: null,
            eventHandlerContext: null,
            eventHandlerTemp: 0,
            keyCodes: {
                16: 1249,
                17: 1248,
                18: 1250,
                20: 1081,
                33: 1099,
                34: 1102,
                35: 1101,
                36: 1098,
                37: 1104,
                38: 1106,
                39: 1103,
                40: 1105,
                44: 316,
                45: 1097,
                46: 127,
                91: 1251,
                93: 1125,
                96: 1122,
                97: 1113,
                98: 1114,
                99: 1115,
                100: 1116,
                101: 1117,
                102: 1118,
                103: 1119,
                104: 1120,
                105: 1121,
                106: 1109,
                107: 1111,
                109: 1110,
                110: 1123,
                111: 1108,
                112: 1082,
                113: 1083,
                114: 1084,
                115: 1085,
                116: 1086,
                117: 1087,
                118: 1088,
                119: 1089,
                120: 1090,
                121: 1091,
                122: 1092,
                123: 1093,
                124: 1128,
                125: 1129,
                126: 1130,
                127: 1131,
                128: 1132,
                129: 1133,
                130: 1134,
                131: 1135,
                132: 1136,
                133: 1137,
                134: 1138,
                135: 1139,
                144: 1107,
                160: 94,
                161: 33,
                162: 34,
                163: 35,
                164: 36,
                165: 37,
                166: 38,
                167: 95,
                168: 40,
                169: 41,
                170: 42,
                171: 43,
                172: 124,
                173: 45,
                174: 123,
                175: 125,
                176: 126,
                181: 127,
                182: 129,
                183: 128,
                188: 44,
                190: 46,
                191: 47,
                192: 96,
                219: 91,
                220: 92,
                221: 93,
                222: 39,
                224: 1251
            },
            scanCodes: {
                8: 42,
                9: 43,
                13: 40,
                27: 41,
                32: 44,
                35: 204,
                39: 53,
                44: 54,
                46: 55,
                47: 56,
                48: 39,
                49: 30,
                50: 31,
                51: 32,
                52: 33,
                53: 34,
                54: 35,
                55: 36,
                56: 37,
                57: 38,
                58: 203,
                59: 51,
                61: 46,
                91: 47,
                92: 49,
                93: 48,
                96: 52,
                97: 4,
                98: 5,
                99: 6,
                100: 7,
                101: 8,
                102: 9,
                103: 10,
                104: 11,
                105: 12,
                106: 13,
                107: 14,
                108: 15,
                109: 16,
                110: 17,
                111: 18,
                112: 19,
                113: 20,
                114: 21,
                115: 22,
                116: 23,
                117: 24,
                118: 25,
                119: 26,
                120: 27,
                121: 28,
                122: 29,
                127: 76,
                305: 224,
                308: 226,
                316: 70
            },
            loadRect: function(rect) {
                return {
                    x: HEAP32[rect + 0 >> 2],
                    y: HEAP32[rect + 4 >> 2],
                    w: HEAP32[rect + 8 >> 2],
                    h: HEAP32[rect + 12 >> 2]
                }
            },
            updateRect: function(rect, r) {
                HEAP32[rect >> 2] = r.x;
                HEAP32[rect + 4 >> 2] = r.y;
                HEAP32[rect + 8 >> 2] = r.w;
                HEAP32[rect + 12 >> 2] = r.h
            },
            intersectionOfRects: function(first, second) {
                var leftX = Math.max(first.x, second.x);
                var leftY = Math.max(first.y, second.y);
                var rightX = Math.min(first.x + first.w, second.x + second.w);
                var rightY = Math.min(first.y + first.h, second.y + second.h);
                return {
                    x: leftX,
                    y: leftY,
                    w: Math.max(leftX, rightX) - leftX,
                    h: Math.max(leftY, rightY) - leftY
                }
            },
            checkPixelFormat: function(fmt) {},
            loadColorToCSSRGB: function(color) {
                var rgba = HEAP32[color >> 2];
                return "rgb(" + (rgba & 255) + "," + (rgba >> 8 & 255) + "," + (rgba >> 16 & 255) + ")"
            },
            loadColorToCSSRGBA: function(color) {
                var rgba = HEAP32[color >> 2];
                return "rgba(" + (rgba & 255) + "," + (rgba >> 8 & 255) + "," + (rgba >> 16 & 255) + "," + (rgba >> 24 & 255) / 255 + ")"
            },
            translateColorToCSSRGBA: function(rgba) {
                return "rgba(" + (rgba & 255) + "," + (rgba >> 8 & 255) + "," + (rgba >> 16 & 255) + "," + (rgba >>> 24) / 255 + ")"
            },
            translateRGBAToCSSRGBA: function(r, g, b, a) {
                return "rgba(" + (r & 255) + "," + (g & 255) + "," + (b & 255) + "," + (a & 255) / 255 + ")"
            },
            translateRGBAToColor: function(r, g, b, a) {
                return r | g << 8 | b << 16 | a << 24
            },
            makeSurface: function(width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
                flags = flags || 0;
                var is_SDL_HWSURFACE = flags & 1;
                var is_SDL_HWPALETTE = flags & 2097152;
                var is_SDL_OPENGL = flags & 67108864;
                var surf = _malloc(60);
                var pixelFormat = _malloc(44);
                var bpp = is_SDL_HWPALETTE ? 1 : 4;
                var buffer = 0;
                if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
                    buffer = _malloc(width * height * 4)
                }
                HEAP32[surf >> 2] = flags;
                HEAPU32[surf + 4 >> 2] = pixelFormat;
                HEAP32[surf + 8 >> 2] = width;
                HEAP32[surf + 12 >> 2] = height;
                HEAP32[surf + 16 >> 2] = width * bpp;
                HEAPU32[surf + 20 >> 2] = buffer;
                HEAP32[surf + 36 >> 2] = 0;
                HEAP32[surf + 40 >> 2] = 0;
                HEAP32[surf + 44 >> 2] = Module["canvas"].width;
                HEAP32[surf + 48 >> 2] = Module["canvas"].height;
                HEAP32[surf + 56 >> 2] = 1;
                HEAP32[pixelFormat >> 2] = -2042224636;
                HEAP32[pixelFormat + 4 >> 2] = 0;
                HEAP8[pixelFormat + 8 >> 0] = bpp * 8;
                HEAP8[pixelFormat + 9 >> 0] = bpp;
                HEAP32[pixelFormat + 12 >> 2] = rmask || 255;
                HEAP32[pixelFormat + 16 >> 2] = gmask || 65280;
                HEAP32[pixelFormat + 20 >> 2] = bmask || 16711680;
                HEAP32[pixelFormat + 24 >> 2] = amask || 4278190080;
                SDL.GL = SDL.GL || is_SDL_OPENGL;
                var canvas;
                if (!usePageCanvas) {
                    if (SDL.canvasPool.length > 0) {
                        canvas = SDL.canvasPool.pop()
                    } else {
                        canvas = document.createElement("canvas")
                    }
                    canvas.width = width;
                    canvas.height = height
                } else {
                    canvas = Module["canvas"]
                }
                var webGLContextAttributes = {
                    antialias: SDL.glAttributes[13] != 0 && SDL.glAttributes[14] > 1,
                    depth: SDL.glAttributes[6] > 0,
                    stencil: SDL.glAttributes[7] > 0,
                    alpha: SDL.glAttributes[3] > 0
                };
                var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
                SDL.surfaces[surf] = {
                    width: width,
                    height: height,
                    canvas: canvas,
                    ctx: ctx,
                    surf: surf,
                    buffer: buffer,
                    pixelFormat: pixelFormat,
                    alpha: 255,
                    flags: flags,
                    locked: 0,
                    usePageCanvas: usePageCanvas,
                    source: source,
                    isFlagSet: function(flag) {
                        return flags & flag
                    }
                };
                return surf
            },
            copyIndexedColorData: function(surfData, rX, rY, rW, rH) {
                if (!surfData.colors) {
                    return
                }
                var fullWidth = Module["canvas"].width;
                var fullHeight = Module["canvas"].height;
                var startX = rX || 0;
                var startY = rY || 0;
                var endX = (rW || fullWidth - startX) + startX;
                var endY = (rH || fullHeight - startY) + startY;
                var buffer = surfData.buffer;
                if (!surfData.image.data32) {
                    surfData.image.data32 = new Uint32Array(surfData.image.data.buffer)
                }
                var data32 = surfData.image.data32;
                var colors32 = surfData.colors32;
                for (var y = startY; y < endY; ++y) {
                    var base = y * fullWidth;
                    for (var x = startX; x < endX; ++x) {
                        data32[base + x] = colors32[HEAPU8[buffer + base + x >> 0]]
                    }
                }
            },
            freeSurface: function(surf) {
                var refcountPointer = surf + 56;
                var refcount = HEAP32[refcountPointer >> 2];
                if (refcount > 1) {
                    HEAP32[refcountPointer >> 2] = refcount - 1;
                    return
                }
                var info = SDL.surfaces[surf];
                if (!info.usePageCanvas && info.canvas)
                    SDL.canvasPool.push(info.canvas);
                if (info.buffer)
                    _free(info.buffer);
                _free(info.pixelFormat);
                _free(surf);
                SDL.surfaces[surf] = null;
                if (surf === SDL.screen) {
                    SDL.screen = null
                }
            },
            blitSurface: function(src, srcrect, dst, dstrect, scale) {
                var srcData = SDL.surfaces[src];
                var dstData = SDL.surfaces[dst];
                var sr, dr;
                if (srcrect) {
                    sr = SDL.loadRect(srcrect)
                } else {
                    sr = {
                        x: 0,
                        y: 0,
                        w: srcData.width,
                        h: srcData.height
                    }
                }
                if (dstrect) {
                    dr = SDL.loadRect(dstrect)
                } else {
                    dr = {
                        x: 0,
                        y: 0,
                        w: srcData.width,
                        h: srcData.height
                    }
                }
                if (dstData.clipRect) {
                    var widthScale = !scale || sr.w === 0 ? 1 : sr.w / dr.w;
                    var heightScale = !scale || sr.h === 0 ? 1 : sr.h / dr.h;
                    dr = SDL.intersectionOfRects(dstData.clipRect, dr);
                    sr.w = dr.w * widthScale;
                    sr.h = dr.h * heightScale;
                    if (dstrect) {
                        SDL.updateRect(dstrect, dr)
                    }
                }
                var blitw, blith;
                if (scale) {
                    blitw = dr.w;
                    blith = dr.h
                } else {
                    blitw = sr.w;
                    blith = sr.h
                }
                if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
                    return 0
                }
                var oldAlpha = dstData.ctx.globalAlpha;
                dstData.ctx.globalAlpha = srcData.alpha / 255;
                dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
                dstData.ctx.globalAlpha = oldAlpha;
                if (dst != SDL.screen) {
                    warnOnce("WARNING: copying canvas data to memory for compatibility");
                    _SDL_LockSurface(dst);
                    dstData.locked--
                }
                return 0
            },
            downFingers: {},
            savedKeydown: null,
            receiveEvent: function(event) {
                function unpressAllPressedKeys() {
                    for (var code in SDL.keyboardMap) {
                        SDL.events.push({
                            type: "keyup",
                            keyCode: SDL.keyboardMap[code]
                        })
                    }
                }
                switch (event.type) {
                case "touchstart":
                case "touchmove":
                    {
                        event.preventDefault();
                        var touches = [];
                        if (event.type === "touchstart") {
                            for (var i = 0; i < event.touches.length; i++) {
                                var touch = event.touches[i];
                                if (SDL.downFingers[touch.identifier] != true) {
                                    SDL.downFingers[touch.identifier] = true;
                                    touches.push(touch)
                                }
                            }
                        } else {
                            touches = event.touches
                        }
                        var firstTouch = touches[0];
                        if (firstTouch) {
                            if (event.type == "touchstart") {
                                SDL.DOMButtons[0] = 1
                            }
                            var mouseEventType;
                            switch (event.type) {
                            case "touchstart":
                                mouseEventType = "mousedown";
                                break;
                            case "touchmove":
                                mouseEventType = "mousemove";
                                break
                            }
                            var mouseEvent = {
                                type: mouseEventType,
                                button: 0,
                                pageX: firstTouch.clientX,
                                pageY: firstTouch.clientY
                            };
                            SDL.events.push(mouseEvent)
                        }
                        for (var i = 0; i < touches.length; i++) {
                            var touch = touches[i];
                            SDL.events.push({
                                type: event.type,
                                touch: touch
                            })
                        }
                        break
                    }
                case "touchend":
                    {
                        event.preventDefault();
                        for (var i = 0; i < event.changedTouches.length; i++) {
                            var touch = event.changedTouches[i];
                            if (SDL.downFingers[touch.identifier] === true) {
                                delete SDL.downFingers[touch.identifier]
                            }
                        }
                        var mouseEvent = {
                            type: "mouseup",
                            button: 0,
                            pageX: event.changedTouches[0].clientX,
                            pageY: event.changedTouches[0].clientY
                        };
                        SDL.DOMButtons[0] = 0;
                        SDL.events.push(mouseEvent);
                        for (var i = 0; i < event.changedTouches.length; i++) {
                            var touch = event.changedTouches[i];
                            SDL.events.push({
                                type: "touchend",
                                touch: touch
                            })
                        }
                        break
                    }
                case "DOMMouseScroll":
                case "mousewheel":
                case "wheel":
                    var delta = -Browser.getMouseWheelDelta(event);
                    delta = delta == 0 ? 0 : delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1);
                    var button = delta > 0 ? 3 : 4;
                    SDL.events.push({
                        type: "mousedown",
                        button: button,
                        pageX: event.pageX,
                        pageY: event.pageY
                    });
                    SDL.events.push({
                        type: "mouseup",
                        button: button,
                        pageX: event.pageX,
                        pageY: event.pageY
                    });
                    SDL.events.push({
                        type: "wheel",
                        deltaX: 0,
                        deltaY: delta
                    });
                    event.preventDefault();
                    break;
                case "mousemove":
                    if (SDL.DOMButtons[0] === 1) {
                        SDL.events.push({
                            type: "touchmove",
                            touch: {
                                identifier: 0,
                                deviceID: -1,
                                pageX: event.pageX,
                                pageY: event.pageY
                            }
                        })
                    }
                    if (Browser.pointerLock) {
                        if ("mozMovementX"in event) {
                            event["movementX"] = event["mozMovementX"];
                            event["movementY"] = event["mozMovementY"]
                        }
                        if (event["movementX"] == 0 && event["movementY"] == 0) {
                            event.preventDefault();
                            return
                        }
                    }
                case "keydown":
                case "keyup":
                case "keypress":
                case "mousedown":
                case "mouseup":
                    if (event.type !== "keydown" || !SDL_unicode() && !SDL.textInput || (event.keyCode === 8 || event.keyCode === 9)) {
                        event.preventDefault()
                    }
                    if (event.type == "mousedown") {
                        SDL.DOMButtons[event.button] = 1;
                        SDL.events.push({
                            type: "touchstart",
                            touch: {
                                identifier: 0,
                                deviceID: -1,
                                pageX: event.pageX,
                                pageY: event.pageY
                            }
                        })
                    } else if (event.type == "mouseup") {
                        if (!SDL.DOMButtons[event.button]) {
                            return
                        }
                        SDL.events.push({
                            type: "touchend",
                            touch: {
                                identifier: 0,
                                deviceID: -1,
                                pageX: event.pageX,
                                pageY: event.pageY
                            }
                        });
                        SDL.DOMButtons[event.button] = 0
                    }
                    if (event.type === "keydown" || event.type === "mousedown") {
                        SDL.canRequestFullscreen = true
                    } else if (event.type === "keyup" || event.type === "mouseup") {
                        if (SDL.isRequestingFullscreen) {
                            Module["requestFullscreen"](true, true);
                            SDL.isRequestingFullscreen = false
                        }
                        SDL.canRequestFullscreen = false
                    }
                    if (event.type === "keypress" && SDL.savedKeydown) {
                        SDL.savedKeydown.keypressCharCode = event.charCode;
                        SDL.savedKeydown = null
                    } else if (event.type === "keydown") {
                        SDL.savedKeydown = event
                    }
                    if (event.type !== "keypress" || SDL.textInput) {
                        SDL.events.push(event)
                    }
                    break;
                case "mouseout":
                    for (var i = 0; i < 3; i++) {
                        if (SDL.DOMButtons[i]) {
                            SDL.events.push({
                                type: "mouseup",
                                button: i,
                                pageX: event.pageX,
                                pageY: event.pageY
                            });
                            SDL.DOMButtons[i] = 0
                        }
                    }
                    event.preventDefault();
                    break;
                case "focus":
                    SDL.events.push(event);
                    event.preventDefault();
                    break;
                case "blur":
                    SDL.events.push(event);
                    unpressAllPressedKeys();
                    event.preventDefault();
                    break;
                case "visibilitychange":
                    SDL.events.push({
                        type: "visibilitychange",
                        visible: !document.hidden
                    });
                    unpressAllPressedKeys();
                    event.preventDefault();
                    break;
                case "unload":
                    if (Browser.mainLoop.runner) {
                        SDL.events.push(event);
                        Browser.mainLoop.runner()
                    }
                    return;
                case "resize":
                    SDL.events.push(event);
                    if (event.preventDefault) {
                        event.preventDefault()
                    }
                    break
                }
                if (SDL.events.length >= 1e4) {
                    err("SDL event queue full, dropping events");
                    SDL.events = SDL.events.slice(0, 1e4)
                }
                SDL.flushEventsToHandler();
                return
            },
            lookupKeyCodeForEvent: function(event) {
                var code = event.keyCode;
                if (code >= 65 && code <= 90) {
                    code += 32
                } else {
                    code = SDL.keyCodes[event.keyCode] || event.keyCode;
                    if (event.location === 2 && code >= (224 | 1 << 10) && code <= (227 | 1 << 10)) {
                        code += 4
                    }
                }
                return code
            },
            handleEvent: function(event) {
                if (event.handled)
                    return;
                event.handled = true;
                switch (event.type) {
                case "touchstart":
                case "touchend":
                case "touchmove":
                    {
                        Browser.calculateMouseEvent(event);
                        break
                    }
                case "keydown":
                case "keyup":
                    {
                        var down = event.type === "keydown";
                        var code = SDL.lookupKeyCodeForEvent(event);
                        HEAP8[SDL.keyboardState + code >> 0] = down;
                        SDL.modState = (HEAP8[SDL.keyboardState + 1248 >> 0] ? 64 : 0) | (HEAP8[SDL.keyboardState + 1249 >> 0] ? 1 : 0) | (HEAP8[SDL.keyboardState + 1250 >> 0] ? 256 : 0) | (HEAP8[SDL.keyboardState + 1252 >> 0] ? 128 : 0) | (HEAP8[SDL.keyboardState + 1253 >> 0] ? 2 : 0) | (HEAP8[SDL.keyboardState + 1254 >> 0] ? 512 : 0);
                        if (down) {
                            SDL.keyboardMap[code] = event.keyCode
                        } else {
                            delete SDL.keyboardMap[code]
                        }
                        break
                    }
                case "mousedown":
                case "mouseup":
                    if (event.type == "mousedown") {
                        SDL.buttonState |= 1 << event.button
                    } else if (event.type == "mouseup") {
                        SDL.buttonState &= ~(1 << event.button)
                    }
                case "mousemove":
                    {
                        Browser.calculateMouseEvent(event);
                        break
                    }
                }
            },
            flushEventsToHandler: function() {
                if (!SDL.eventHandler)
                    return;
                while (SDL.pollEvent(SDL.eventHandlerTemp)) {
                    getWasmTableEntry(SDL.eventHandler)(SDL.eventHandlerContext, SDL.eventHandlerTemp)
                }
            },
            pollEvent: function(ptr) {
                if (SDL.initFlags & 512 && SDL.joystickEventState) {
                    SDL.queryJoysticks()
                }
                if (ptr) {
                    while (SDL.events.length > 0) {
                        if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false)
                            return 1
                    }
                    return 0
                }
                return SDL.events.length > 0
            },
            makeCEvent: function(event, ptr) {
                if (typeof event == "number") {
                    _memcpy(ptr, event, 28);
                    _free(event);
                    return
                }
                SDL.handleEvent(event);
                switch (event.type) {
                case "keydown":
                case "keyup":
                    {
                        var down = event.type === "keydown";
                        var key = SDL.lookupKeyCodeForEvent(event);
                        var scan;
                        if (key >= 1024) {
                            scan = key - 1024
                        } else {
                            scan = SDL.scanCodes[key] || key
                        }
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP8[ptr + 8 >> 0] = down ? 1 : 0;
                        HEAP8[ptr + 9 >> 0] = 0;
                        HEAP32[ptr + 12 >> 2] = scan;
                        HEAP32[ptr + 16 >> 2] = key;
                        HEAP16[ptr + 20 >> 1] = SDL.modState;
                        HEAP32[ptr + 24 >> 2] = event.keypressCharCode || key;
                        break
                    }
                case "keypress":
                    {
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        var cStr = intArrayFromString(String.fromCharCode(event.charCode));
                        for (var i = 0; i < cStr.length; ++i) {
                            HEAP8[ptr + (8 + i) >> 0] = cStr[i]
                        }
                        break
                    }
                case "mousedown":
                case "mouseup":
                case "mousemove":
                    {
                        if (event.type != "mousemove") {
                            var down = event.type === "mousedown";
                            HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                            HEAP32[ptr + 4 >> 2] = 0;
                            HEAP32[ptr + 8 >> 2] = 0;
                            HEAP32[ptr + 12 >> 2] = 0;
                            HEAP8[ptr + 16 >> 0] = event.button + 1;
                            HEAP8[ptr + 17 >> 0] = down ? 1 : 0;
                            HEAP32[ptr + 20 >> 2] = Browser.mouseX;
                            HEAP32[ptr + 24 >> 2] = Browser.mouseY
                        } else {
                            HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                            HEAP32[ptr + 4 >> 2] = 0;
                            HEAP32[ptr + 8 >> 2] = 0;
                            HEAP32[ptr + 12 >> 2] = 0;
                            HEAP32[ptr + 16 >> 2] = SDL.buttonState;
                            HEAP32[ptr + 20 >> 2] = Browser.mouseX;
                            HEAP32[ptr + 24 >> 2] = Browser.mouseY;
                            HEAP32[ptr + 28 >> 2] = Browser.mouseMovementX;
                            HEAP32[ptr + 32 >> 2] = Browser.mouseMovementY
                        }
                        break
                    }
                case "wheel":
                    {
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP32[ptr + 16 >> 2] = event.deltaX;
                        HEAP32[ptr + 20 >> 2] = event.deltaY;
                        break
                    }
                case "touchstart":
                case "touchend":
                case "touchmove":
                    {
                        var touch = event.touch;
                        if (!Browser.touches[touch.identifier])
                            break;
                        var w = Module["canvas"].width;
                        var h = Module["canvas"].height;
                        var x = Browser.touches[touch.identifier].x / w;
                        var y = Browser.touches[touch.identifier].y / h;
                        var lx = Browser.lastTouches[touch.identifier].x / w;
                        var ly = Browser.lastTouches[touch.identifier].y / h;
                        var dx = x - lx;
                        var dy = y - ly;
                        if (touch["deviceID"] === undefined)
                            touch.deviceID = SDL.TOUCH_DEFAULT_ID;
                        if (dx === 0 && dy === 0 && event.type === "touchmove")
                            return false;
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP32[ptr + 4 >> 2] = _SDL_GetTicks();
                        tempI64 = [touch.deviceID >>> 0, (tempDouble = touch.deviceID,
                        +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                        HEAP32[ptr + 8 >> 2] = tempI64[0],
                        HEAP32[ptr + 12 >> 2] = tempI64[1];
                        tempI64 = [touch.identifier >>> 0, (tempDouble = touch.identifier,
                        +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
                        HEAP32[ptr + 16 >> 2] = tempI64[0],
                        HEAP32[ptr + 20 >> 2] = tempI64[1];
                        HEAPF32[ptr + 24 >> 2] = x;
                        HEAPF32[ptr + 28 >> 2] = y;
                        HEAPF32[ptr + 32 >> 2] = dx;
                        HEAPF32[ptr + 36 >> 2] = dy;
                        if (touch.force !== undefined) {
                            HEAPF32[ptr + 40 >> 2] = touch.force
                        } else {
                            HEAPF32[ptr + 40 >> 2] = event.type == "touchend" ? 0 : 1
                        }
                        break
                    }
                case "unload":
                    {
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        break
                    }
                case "resize":
                    {
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP32[ptr + 4 >> 2] = event.w;
                        HEAP32[ptr + 8 >> 2] = event.h;
                        break
                    }
                case "joystick_button_up":
                case "joystick_button_down":
                    {
                        var state = event.type === "joystick_button_up" ? 0 : 1;
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP8[ptr + 4 >> 0] = event.index;
                        HEAP8[ptr + 5 >> 0] = event.button;
                        HEAP8[ptr + 6 >> 0] = state;
                        break
                    }
                case "joystick_axis_motion":
                    {
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP8[ptr + 4 >> 0] = event.index;
                        HEAP8[ptr + 5 >> 0] = event.axis;
                        HEAP32[ptr + 8 >> 2] = SDL.joystickAxisValueConversion(event.value);
                        break
                    }
                case "focus":
                    {
                        var SDL_WINDOWEVENT_FOCUS_GAINED = 12;
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP32[ptr + 4 >> 2] = 0;
                        HEAP8[ptr + 8 >> 0] = SDL_WINDOWEVENT_FOCUS_GAINED;
                        break
                    }
                case "blur":
                    {
                        var SDL_WINDOWEVENT_FOCUS_LOST = 13;
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP32[ptr + 4 >> 2] = 0;
                        HEAP8[ptr + 8 >> 0] = SDL_WINDOWEVENT_FOCUS_LOST;
                        break
                    }
                case "visibilitychange":
                    {
                        var SDL_WINDOWEVENT_SHOWN = 1;
                        var SDL_WINDOWEVENT_HIDDEN = 2;
                        var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
                        HEAP32[ptr >> 2] = SDL.DOMEventToSDLEvent[event.type];
                        HEAP32[ptr + 4 >> 2] = 0;
                        HEAP8[ptr + 8 >> 0] = visibilityEventID;
                        break
                    }
                default:
                    throw "Unhandled SDL event: " + event.type
                }
            },
            makeFontString: function(height, fontName) {
                if (fontName.charAt(0) != "'" && fontName.charAt(0) != '"') {
                    fontName = '"' + fontName + '"'
                }
                return height + "px " + fontName + ", serif"
            },
            estimateTextWidth: function(fontData, text) {
                var h = fontData.size;
                var fontString = SDL.makeFontString(h, fontData.name);
                var tempCtx = SDL_ttfContext();
                tempCtx.font = fontString;
                var ret = tempCtx.measureText(text).width | 0;
                return ret
            },
            allocateChannels: function(num) {
                if (SDL.numChannels && SDL.numChannels >= num && num != 0)
                    return;
                SDL.numChannels = num;
                SDL.channels = [];
                for (var i = 0; i < num; i++) {
                    SDL.channels[i] = {
                        audio: null,
                        volume: 1
                    }
                }
            },
            setGetVolume: function(info, volume) {
                if (!info)
                    return 0;
                var ret = info.volume * 128;
                if (volume != -1) {
                    info.volume = Math.min(Math.max(volume, 0), 128) / 128;
                    if (info.audio) {
                        try {
                            info.audio.volume = info.volume;
                            if (info.audio.webAudioGainNode)
                                info.audio.webAudioGainNode["gain"]["value"] = info.volume
                        } catch (e) {
                            err("setGetVolume failed to set audio volume: " + e)
                        }
                    }
                }
                return ret
            },
            setPannerPosition: function(info, x, y, z) {
                if (!info)
                    return;
                if (info.audio) {
                    if (info.audio.webAudioPannerNode) {
                        info.audio.webAudioPannerNode["setPosition"](x, y, z)
                    }
                }
            },
            playWebAudio: function(audio) {
                if (!audio)
                    return;
                if (audio.webAudioNode)
                    return;
                if (!SDL.webAudioAvailable())
                    return;
                try {
                    var webAudio = audio.resource.webAudio;
                    audio.paused = false;
                    if (!webAudio.decodedBuffer) {
                        if (webAudio.onDecodeComplete === undefined)
                            abort("Cannot play back audio object that was not loaded");
                        webAudio.onDecodeComplete.push(function() {
                            if (!audio.paused)
                                SDL.playWebAudio(audio)
                        });
                        return
                    }
                    audio.webAudioNode = SDL.audioContext["createBufferSource"]();
                    audio.webAudioNode["buffer"] = webAudio.decodedBuffer;
                    audio.webAudioNode["loop"] = audio.loop;
                    audio.webAudioNode["onended"] = function() {
                        audio["onended"]()
                    }
                    ;
                    audio.webAudioPannerNode = SDL.audioContext["createPanner"]();
                    audio.webAudioPannerNode["setPosition"](0, 0, -.5);
                    audio.webAudioPannerNode["panningModel"] = "equalpower";
                    audio.webAudioGainNode = SDL.audioContext["createGain"]();
                    audio.webAudioGainNode["gain"]["value"] = audio.volume;
                    audio.webAudioNode["connect"](audio.webAudioPannerNode);
                    audio.webAudioPannerNode["connect"](audio.webAudioGainNode);
                    audio.webAudioGainNode["connect"](SDL.audioContext["destination"]);
                    audio.webAudioNode["start"](0, audio.currentPosition);
                    audio.startTime = SDL.audioContext["currentTime"] - audio.currentPosition
                } catch (e) {
                    err("playWebAudio failed: " + e)
                }
            },
            pauseWebAudio: function(audio) {
                if (!audio)
                    return;
                if (audio.webAudioNode) {
                    try {
                        audio.currentPosition = (SDL.audioContext["currentTime"] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
                        audio.webAudioNode["onended"] = undefined;
                        audio.webAudioNode.stop(0);
                        audio.webAudioNode = undefined
                    } catch (e) {
                        err("pauseWebAudio failed: " + e)
                    }
                }
                audio.paused = true
            },
            openAudioContext: function() {
                if (!SDL.audioContext) {
                    if (typeof AudioContext != "undefined")
                        SDL.audioContext = new AudioContext;
                    else if (typeof webkitAudioContext != "undefined")
                        SDL.audioContext = new webkitAudioContext
                }
            },
            webAudioAvailable: function() {
                return !!SDL.audioContext
            },
            fillWebAudioBufferFromHeap: function(heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
                var audio = SDL_audio();
                var numChannels = audio.channels;
                for (var c = 0; c < numChannels; ++c) {
                    var channelData = dstAudioBuffer["getChannelData"](c);
                    if (channelData.length != sizeSamplesPerChannel) {
                        throw "Web Audio output buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + sizeSamplesPerChannel + " samples!"
                    }
                    if (audio.format == 32784) {
                        for (var j = 0; j < sizeSamplesPerChannel; ++j) {
                            channelData[j] = HEAP16[heapPtr + (j * numChannels + c) * 2 >> 1] / 32768
                        }
                    } else if (audio.format == 8) {
                        for (var j = 0; j < sizeSamplesPerChannel; ++j) {
                            var v = HEAP8[heapPtr + (j * numChannels + c) >> 0];
                            channelData[j] = (v >= 0 ? v - 128 : v + 128) / 128
                        }
                    } else if (audio.format == 33056) {
                        for (var j = 0; j < sizeSamplesPerChannel; ++j) {
                            channelData[j] = HEAPF32[heapPtr + (j * numChannels + c) * 4 >> 2]
                        }
                    } else {
                        throw "Invalid SDL audio format " + audio.format + "!"
                    }
                }
            },
            debugSurface: function(surfData) {
                out("dumping surface " + [surfData.surf, surfData.source, surfData.width, surfData.height]);
                var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
                var data = image.data;
                var num = Math.min(surfData.width, surfData.height);
                for (var i = 0; i < num; i++) {
                    out("   diagonal " + i + ":" + [data[i * surfData.width * 4 + i * 4 + 0], data[i * surfData.width * 4 + i * 4 + 1], data[i * surfData.width * 4 + i * 4 + 2], data[i * surfData.width * 4 + i * 4 + 3]])
                }
            },
            joystickEventState: 1,
            lastJoystickState: {},
            joystickNamePool: {},
            recordJoystickState: function(joystick, state) {
                var buttons = new Array(state.buttons.length);
                for (var i = 0; i < state.buttons.length; i++) {
                    buttons[i] = SDL.getJoystickButtonState(state.buttons[i])
                }
                SDL.lastJoystickState[joystick] = {
                    buttons: buttons,
                    axes: state.axes.slice(0),
                    timestamp: state.timestamp,
                    index: state.index,
                    id: state.id
                }
            },
            getJoystickButtonState: function(button) {
                if (typeof button == "object") {
                    return button["pressed"]
                }
                return button > 0
            },
            queryJoysticks: function() {
                for (var joystick in SDL.lastJoystickState) {
                    var state = SDL.getGamepad(joystick - 1);
                    var prevState = SDL.lastJoystickState[joystick];
                    if (typeof state == "undefined")
                        return;
                    if (state === null)
                        return;
                    if (typeof state.timestamp != "number" || state.timestamp != prevState.timestamp || !state.timestamp) {
                        var i;
                        for (i = 0; i < state.buttons.length; i++) {
                            var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
                            if (buttonState !== prevState.buttons[i]) {
                                SDL.events.push({
                                    type: buttonState ? "joystick_button_down" : "joystick_button_up",
                                    joystick: joystick,
                                    index: joystick - 1,
                                    button: i
                                })
                            }
                        }
                        for (i = 0; i < state.axes.length; i++) {
                            if (state.axes[i] !== prevState.axes[i]) {
                                SDL.events.push({
                                    type: "joystick_axis_motion",
                                    joystick: joystick,
                                    index: joystick - 1,
                                    axis: i,
                                    value: state.axes[i]
                                })
                            }
                        }
                        SDL.recordJoystickState(joystick, state)
                    }
                }
            },
            joystickAxisValueConversion: function(value) {
                value = Math.min(1, Math.max(value, -1));
                return Math.ceil((value + 1) * 32767.5 - 32768)
            },
            getGamepads: function() {
                var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
                if (fcn !== undefined) {
                    return fcn.apply(navigator)
                }
                return []
            },
            getGamepad: function(deviceIndex) {
                var gamepads = SDL.getGamepads();
                if (gamepads.length > deviceIndex && deviceIndex >= 0) {
                    return gamepads[deviceIndex]
                }
                return null
            }
        };
        Module["SDL"] = SDL;
        function SDL_unicode() {
            return SDL.unicode
        }
        Module["SDL_unicode"] = SDL_unicode;
        function _SDL_Linked_Version() {
            if (SDL.version === null) {
                SDL.version = _malloc(3);
                HEAP8[SDL.version + 0 >> 0] = 1;
                HEAP8[SDL.version + 1 >> 0] = 3;
                HEAP8[SDL.version + 2 >> 0] = 0
            }
            return SDL.version
        }
        Module["_SDL_Linked_Version"] = _SDL_Linked_Version;
        _SDL_Linked_Version.sig = "i";
        function _SDL_Init(initFlags) {
            SDL.startTime = Date.now();
            SDL.initFlags = initFlags;
            if (!Module["doNotCaptureKeyboard"]) {
                var keyboardListeningElement = Module["keyboardListeningElement"] || document;
                keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
                keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
                keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
                window.addEventListener("focus", SDL.receiveEvent);
                window.addEventListener("blur", SDL.receiveEvent);
                document.addEventListener("visibilitychange", SDL.receiveEvent)
            }
            window.addEventListener("unload", SDL.receiveEvent);
            SDL.keyboardState = _malloc(65536);
            zeroMemory(SDL.keyboardState, 65536);
            SDL.DOMEventToSDLEvent["keydown"] = 768;
            SDL.DOMEventToSDLEvent["keyup"] = 769;
            SDL.DOMEventToSDLEvent["keypress"] = 771;
            SDL.DOMEventToSDLEvent["mousedown"] = 1025;
            SDL.DOMEventToSDLEvent["mouseup"] = 1026;
            SDL.DOMEventToSDLEvent["mousemove"] = 1024;
            SDL.DOMEventToSDLEvent["wheel"] = 1027;
            SDL.DOMEventToSDLEvent["touchstart"] = 1792;
            SDL.DOMEventToSDLEvent["touchend"] = 1793;
            SDL.DOMEventToSDLEvent["touchmove"] = 1794;
            SDL.DOMEventToSDLEvent["unload"] = 256;
            SDL.DOMEventToSDLEvent["resize"] = 28673;
            SDL.DOMEventToSDLEvent["visibilitychange"] = 512;
            SDL.DOMEventToSDLEvent["focus"] = 512;
            SDL.DOMEventToSDLEvent["blur"] = 512;
            SDL.DOMEventToSDLEvent["joystick_axis_motion"] = 1536;
            SDL.DOMEventToSDLEvent["joystick_button_down"] = 1539;
            SDL.DOMEventToSDLEvent["joystick_button_up"] = 1540;
            return 0
        }
        Module["_SDL_Init"] = _SDL_Init;
        _SDL_Init.sig = "ii";
        function _SDL_WasInit() {
            if (SDL.startTime === null) {
                _SDL_Init()
            }
            return 1
        }
        Module["_SDL_WasInit"] = _SDL_WasInit;
        _SDL_WasInit.sig = "i";
        function _SDL_GetVideoInfo() {
            var ret = _malloc(20);
            zeroMemory(ret, 3);
            HEAP32[ret + 12 >> 2] = Module["canvas"].width;
            HEAP32[ret + 16 >> 2] = Module["canvas"].height;
            return ret
        }
        Module["_SDL_GetVideoInfo"] = _SDL_GetVideoInfo;
        _SDL_GetVideoInfo.sig = "i";
        function _SDL_ListModes(format, flags) {
            return -1
        }
        Module["_SDL_ListModes"] = _SDL_ListModes;
        function _SDL_VideoModeOK(width, height, depth, flags) {
            return depth
        }
        Module["_SDL_VideoModeOK"] = _SDL_VideoModeOK;
        function _SDL_VideoDriverName(buf, max_size) {
            if (SDL.startTime === null) {
                return 0
            }
            var driverName = [101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 115, 100, 108, 95, 100, 114, 105, 118, 101, 114];
            var index = 0;
            var size = driverName.length;
            if (max_size <= size) {
                size = max_size - 1
            }
            while (index < size) {
                var value = driverName[index];
                HEAP8[buf + index >> 0] = value;
                index++
            }
            HEAP8[buf + index >> 0] = 0;
            return buf
        }
        Module["_SDL_VideoDriverName"] = _SDL_VideoDriverName;
        _SDL_VideoDriverName.sig = "iii";
        function _SDL_AudioDriverName(buf, max_size) {
            return _SDL_VideoDriverName(buf, max_size)
        }
        Module["_SDL_AudioDriverName"] = _SDL_AudioDriverName;
        function _SDL_SetVideoMode(width, height, depth, flags) {
            ["touchstart", "touchend", "touchmove", "mousedown", "mouseup", "mousemove", "DOMMouseScroll", "mousewheel", "wheel", "mouseout"].forEach(function(event) {
                Module["canvas"].addEventListener(event, SDL.receiveEvent, true)
            });
            var canvas = Module["canvas"];
            if (width == 0 && height == 0) {
                width = canvas.width;
                height = canvas.height
            }
            if (!SDL.addedResizeListener) {
                SDL.addedResizeListener = true;
                Browser.resizeListeners.push(function(w, h) {
                    if (!SDL.settingVideoMode) {
                        SDL.receiveEvent({
                            type: "resize",
                            w: w,
                            h: h
                        })
                    }
                })
            }
            SDL.settingVideoMode = true;
            Browser.setCanvasSize(width, height);
            SDL.settingVideoMode = false;
            if (SDL.screen) {
                SDL.freeSurface(SDL.screen);
                assert(!SDL.screen)
            }
            if (SDL.GL)
                flags = flags | 67108864;
            SDL.screen = SDL.makeSurface(width, height, flags, true, "screen");
            return SDL.screen
        }
        Module["_SDL_SetVideoMode"] = _SDL_SetVideoMode;
        _SDL_SetVideoMode.sig = "iiiii";
        function _SDL_GetVideoSurface() {
            return SDL.screen
        }
        Module["_SDL_GetVideoSurface"] = _SDL_GetVideoSurface;
        _SDL_GetVideoSurface.sig = "i";
        function _SDL_AudioQuit() {
            for (var i = 0; i < SDL.numChannels; ++i) {
                var chan = SDL.channels[i];
                if (chan.audio) {
                    chan.audio.pause();
                    chan.audio = undefined
                }
            }
            var audio = SDL.music.audio;
            if (audio)
                audio.pause();
            SDL.music.audio = undefined
        }
        Module["_SDL_AudioQuit"] = _SDL_AudioQuit;
        _SDL_AudioQuit.sig = "v";
        function _SDL_VideoQuit() {
            out("SDL_VideoQuit called (and ignored)")
        }
        Module["_SDL_VideoQuit"] = _SDL_VideoQuit;
        function _SDL_QuitSubSystem(flags) {
            out("SDL_QuitSubSystem called (and ignored)")
        }
        Module["_SDL_QuitSubSystem"] = _SDL_QuitSubSystem;
        function _SDL_Quit() {
            _SDL_AudioQuit();
            out("SDL_Quit called (and ignored)")
        }
        Module["_SDL_Quit"] = _SDL_Quit;
        function _SDL_UnlockSurface(surf) {
            assert(!SDL.GL);
            var surfData = SDL.surfaces[surf];
            if (!surfData.locked || --surfData.locked > 0) {
                return
            }
            if (surfData.isFlagSet(2097152)) {
                SDL.copyIndexedColorData(surfData)
            } else if (!surfData.colors) {
                var data = surfData.image.data;
                var buffer = surfData.buffer;
                assert(buffer % 4 == 0, "Invalid buffer offset: " + buffer);
                var src = buffer >> 2;
                var dst = 0;
                var isScreen = surf == SDL.screen;
                var num;
                if (typeof CanvasPixelArray != "undefined" && data instanceof CanvasPixelArray) {
                    num = data.length;
                    while (dst < num) {
                        var val = HEAP32[src];
                        data[dst] = val & 255;
                        data[dst + 1] = val >> 8 & 255;
                        data[dst + 2] = val >> 16 & 255;
                        data[dst + 3] = isScreen ? 255 : val >> 24 & 255;
                        src++;
                        dst += 4
                    }
                } else {
                    var data32 = new Uint32Array(data.buffer);
                    if (isScreen && SDL.defaults.opaqueFrontBuffer) {
                        num = data32.length;
                        data32.set(HEAP32.subarray(src, src + num));
                        var data8 = new Uint8Array(data.buffer);
                        var i = 3;
                        var j = i + 4 * num;
                        if (num % 8 == 0) {
                            while (i < j) {
                                data8[i] = 255;
                                i = i + 4 | 0;
                                data8[i] = 255;
                                i = i + 4 | 0;
                                data8[i] = 255;
                                i = i + 4 | 0;
                                data8[i] = 255;
                                i = i + 4 | 0;
                                data8[i] = 255;
                                i = i + 4 | 0;
                                data8[i] = 255;
                                i = i + 4 | 0;
                                data8[i] = 255;
                                i = i + 4 | 0;
                                data8[i] = 255;
                                i = i + 4 | 0
                            }
                        } else {
                            while (i < j) {
                                data8[i] = 255;
                                i = i + 4 | 0
                            }
                        }
                    } else {
                        data32.set(HEAP32.subarray(src, src + data32.length))
                    }
                }
            } else {
                var width = Module["canvas"].width;
                var height = Module["canvas"].height;
                var s = surfData.buffer;
                var data = surfData.image.data;
                var colors = surfData.colors;
                for (var y = 0; y < height; y++) {
                    var base = y * width * 4;
                    for (var x = 0; x < width; x++) {
                        var val = HEAPU8[s++ >> 0] * 4;
                        var start = base + x * 4;
                        data[start] = colors[val];
                        data[start + 1] = colors[val + 1];
                        data[start + 2] = colors[val + 2]
                    }
                    s += width * 3
                }
            }
            surfData.ctx.putImageData(surfData.image, 0, 0)
        }
        Module["_SDL_UnlockSurface"] = _SDL_UnlockSurface;
        _SDL_UnlockSurface.sig = "vi";
        function _SDL_Flip(surf) {}
        Module["_SDL_Flip"] = _SDL_Flip;
        function _SDL_UpdateRect(surf, x, y, w, h) {}
        Module["_SDL_UpdateRect"] = _SDL_UpdateRect;
        function _SDL_UpdateRects(surf, numrects, rects) {}
        Module["_SDL_UpdateRects"] = _SDL_UpdateRects;
        function _SDL_Delay(delay) {
            if (!ENVIRONMENT_IS_WORKER)
                abort("SDL_Delay called on the main thread! Potential infinite loop, quitting. (consider building with async support like ASYNCIFY)");
            var now = Date.now();
            while (Date.now() - now < delay) {}
        }
        Module["_SDL_Delay"] = _SDL_Delay;
        function _SDL_WM_SetCaption(title, icon) {
            if (title && typeof setWindowTitle != "undefined") {
                setWindowTitle(UTF8ToString(title))
            }
            icon = icon && UTF8ToString(icon)
        }
        Module["_SDL_WM_SetCaption"] = _SDL_WM_SetCaption;
        _SDL_WM_SetCaption.sig = "vii";
        function _SDL_EnableKeyRepeat(delay, interval) {}
        Module["_SDL_EnableKeyRepeat"] = _SDL_EnableKeyRepeat;
        function _SDL_GetKeyboardState(numKeys) {
            if (numKeys) {
                HEAP32[numKeys >> 2] = 65536
            }
            return SDL.keyboardState
        }
        Module["_SDL_GetKeyboardState"] = _SDL_GetKeyboardState;
        _SDL_GetKeyboardState.sig = "ii";
        function _SDL_GetKeyState() {
            return _SDL_GetKeyboardState()
        }
        Module["_SDL_GetKeyState"] = _SDL_GetKeyState;
        function _SDL_GetKeyName(key) {
            if (!SDL.keyName) {
                SDL.keyName = allocateUTF8("unknown key")
            }
            return SDL.keyName
        }
        Module["_SDL_GetKeyName"] = _SDL_GetKeyName;
        _SDL_GetKeyName.sig = "ii";
        function _SDL_GetModState() {
            return SDL.modState
        }
        Module["_SDL_GetModState"] = _SDL_GetModState;
        _SDL_GetModState.sig = "i";
        function _SDL_GetMouseState(x, y) {
            if (x)
                HEAP32[x >> 2] = Browser.mouseX;
            if (y)
                HEAP32[y >> 2] = Browser.mouseY;
            return SDL.buttonState
        }
        Module["_SDL_GetMouseState"] = _SDL_GetMouseState;
        _SDL_GetMouseState.sig = "iii";
        function _SDL_WarpMouse(x, y) {
            return
        }
        Module["_SDL_WarpMouse"] = _SDL_WarpMouse;
        _SDL_WarpMouse.sig = "vii";
        function _SDL_ShowCursor(toggle) {
            switch (toggle) {
            case 0:
                if (Browser.isFullscreen) {
                    Module["canvas"].requestPointerLock();
                    return 0
                }
                return 1;
            case 1:
                Module["canvas"].exitPointerLock();
                return 1;
            case -1:
                return !Browser.pointerLock;
            default:
                out("SDL_ShowCursor called with unknown toggle parameter value: " + toggle + ".");
                break
            }
        }
        Module["_SDL_ShowCursor"] = _SDL_ShowCursor;
        _SDL_ShowCursor.sig = "ii";
        function _SDL_GetError() {
            if (!SDL.errorMessage) {
                SDL.errorMessage = allocateUTF8("unknown SDL-emscripten error")
            }
            return SDL.errorMessage
        }
        Module["_SDL_GetError"] = _SDL_GetError;
        _SDL_GetError.sig = "i";
        function _SDL_SetError() {}
        Module["_SDL_SetError"] = _SDL_SetError;
        function _SDL_malloc(size) {
            return _malloc(size)
        }
        Module["_SDL_malloc"] = _SDL_malloc;
        _SDL_malloc.sig = "ii";
        function _SDL_free(ptr) {
            _free(ptr)
        }
        Module["_SDL_free"] = _SDL_free;
        _SDL_free.sig = "vi";
        function _SDL_CreateRGBSurface(flags, width, height, depth, rmask, gmask, bmask, amask) {
            return SDL.makeSurface(width, height, flags, false, "CreateRGBSurface", rmask, gmask, bmask, amask)
        }
        Module["_SDL_CreateRGBSurface"] = _SDL_CreateRGBSurface;
        _SDL_CreateRGBSurface.sig = "iiiiiiiii";
        function _SDL_CreateRGBSurfaceFrom(pixels, width, height, depth, pitch, rmask, gmask, bmask, amask) {
            var surf = SDL.makeSurface(width, height, 0, false, "CreateRGBSurfaceFrom", rmask, gmask, bmask, amask);
            if (depth !== 32) {
                out("TODO: Partially unimplemented SDL_CreateRGBSurfaceFrom called!");
                return surf
            }
            var data = SDL.surfaces[surf];
            var image = data.ctx.createImageData(width, height);
            var pitchOfDst = width * 4;
            for (var row = 0; row < height; ++row) {
                var baseOfSrc = row * pitch;
                var baseOfDst = row * pitchOfDst;
                for (var col = 0; col < width * 4; ++col) {
                    image.data[baseOfDst + col] = HEAPU8[pixels + (baseOfDst + col) >> 0]
                }
            }
            data.ctx.putImageData(image, 0, 0);
            return surf
        }
        Module["_SDL_CreateRGBSurfaceFrom"] = _SDL_CreateRGBSurfaceFrom;
        _SDL_CreateRGBSurfaceFrom.sig = "iiiiiiiiii";
        function _SDL_ConvertSurface(surf, format, flags) {
            if (format) {
                SDL.checkPixelFormat(format)
            }
            var oldData = SDL.surfaces[surf];
            var ret = SDL.makeSurface(oldData.width, oldData.height, oldData.flags, false, "copy:" + oldData.source);
            var newData = SDL.surfaces[ret];
            newData.ctx.globalCompositeOperation = "copy";
            newData.ctx.drawImage(oldData.canvas, 0, 0);
            newData.ctx.globalCompositeOperation = oldData.ctx.globalCompositeOperation;
            return ret
        }
        Module["_SDL_ConvertSurface"] = _SDL_ConvertSurface;
        _SDL_ConvertSurface.sig = "iiii";
        function _SDL_DisplayFormatAlpha(surf) {
            return _SDL_ConvertSurface(surf)
        }
        Module["_SDL_DisplayFormatAlpha"] = _SDL_DisplayFormatAlpha;
        function _SDL_FreeSurface(surf) {
            if (surf)
                SDL.freeSurface(surf)
        }
        Module["_SDL_FreeSurface"] = _SDL_FreeSurface;
        _SDL_FreeSurface.sig = "vi";
        function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
            return SDL.blitSurface(src, srcrect, dst, dstrect, false)
        }
        Module["_SDL_UpperBlit"] = _SDL_UpperBlit;
        _SDL_UpperBlit.sig = "iiiii";
        function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
            return SDL.blitSurface(src, srcrect, dst, dstrect, true)
        }
        Module["_SDL_UpperBlitScaled"] = _SDL_UpperBlitScaled;
        _SDL_UpperBlitScaled.sig = "iiiii";
        var _SDL_LowerBlit = _SDL_UpperBlit;
        Module["_SDL_LowerBlit"] = _SDL_LowerBlit;
        var _SDL_LowerBlitScaled = _SDL_UpperBlitScaled;
        Module["_SDL_LowerBlitScaled"] = _SDL_LowerBlitScaled;
        function _SDL_GetClipRect(surf, rect) {
            assert(rect);
            var surfData = SDL.surfaces[surf];
            var r = surfData.clipRect || {
                x: 0,
                y: 0,
                w: surfData.width,
                h: surfData.height
            };
            SDL.updateRect(rect, r)
        }
        Module["_SDL_GetClipRect"] = _SDL_GetClipRect;
        _SDL_GetClipRect.sig = "vii";
        function _SDL_SetClipRect(surf, rect) {
            var surfData = SDL.surfaces[surf];
            if (rect) {
                surfData.clipRect = SDL.intersectionOfRects({
                    x: 0,
                    y: 0,
                    w: surfData.width,
                    h: surfData.height
                }, SDL.loadRect(rect))
            } else {
                delete surfData.clipRect
            }
        }
        Module["_SDL_SetClipRect"] = _SDL_SetClipRect;
        _SDL_SetClipRect.sig = "vii";
        function _SDL_FillRect(surf, rect, color) {
            var surfData = SDL.surfaces[surf];
            assert(!surfData.locked);
            if (surfData.isFlagSet(2097152)) {
                color = surfData.colors32[color]
            }
            var r = rect ? SDL.loadRect(rect) : {
                x: 0,
                y: 0,
                w: surfData.width,
                h: surfData.height
            };
            if (surfData.clipRect) {
                r = SDL.intersectionOfRects(surfData.clipRect, r);
                if (rect) {
                    SDL.updateRect(rect, r)
                }
            }
            surfData.ctx.save();
            surfData.ctx.fillStyle = SDL.translateColorToCSSRGBA(color);
            surfData.ctx.fillRect(r.x, r.y, r.w, r.h);
            surfData.ctx.restore();
            return 0
        }
        Module["_SDL_FillRect"] = _SDL_FillRect;
        _SDL_FillRect.sig = "iiii";
        function _SDL_BlitSurface(src, srcrect, dst, dstrect) {
            return SDL.blitSurface(src, srcrect, dst, dstrect, false)
        }
        Module["_SDL_BlitSurface"] = _SDL_BlitSurface;
        _SDL_BlitSurface.sig = "iiiii";
        function _SDL_BlitScaled(src, srcrect, dst, dstrect) {
            return SDL.blitSurface(src, srcrect, dst, dstrect, true)
        }
        Module["_SDL_BlitScaled"] = _SDL_BlitScaled;
        _SDL_BlitScaled.sig = "iiiii";
        function _zoomSurface(src, x, y, smooth) {
            var srcData = SDL.surfaces[src];
            var w = srcData.width * x;
            var h = srcData.height * y;
            var ret = SDL.makeSurface(Math.abs(w), Math.abs(h), srcData.flags, false, "zoomSurface");
            var dstData = SDL.surfaces[ret];
            if (x >= 0 && y >= 0)
                dstData.ctx.drawImage(srcData.canvas, 0, 0, w, h);
            else {
                dstData.ctx.save();
                dstData.ctx.scale(x < 0 ? -1 : 1, y < 0 ? -1 : 1);
                dstData.ctx.drawImage(srcData.canvas, w < 0 ? w : 0, h < 0 ? h : 0, Math.abs(w), Math.abs(h));
                dstData.ctx.restore()
            }
            return ret
        }
        Module["_zoomSurface"] = _zoomSurface;
        function _rotozoomSurface(src, angle, zoom, smooth) {
            if (angle % 360 === 0) {
                return _zoomSurface(src, zoom, zoom, smooth)
            }
            var srcData = SDL.surfaces[src];
            var w = srcData.width * zoom;
            var h = srcData.height * zoom;
            var diagonal = Math.ceil(Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2)));
            var ret = SDL.makeSurface(diagonal, diagonal, srcData.flags, false, "rotozoomSurface");
            var dstData = SDL.surfaces[ret];
            dstData.ctx.translate(diagonal / 2, diagonal / 2);
            dstData.ctx.rotate(-angle * Math.PI / 180);
            dstData.ctx.drawImage(srcData.canvas, -w / 2, -h / 2, w, h);
            return ret
        }
        Module["_rotozoomSurface"] = _rotozoomSurface;
        function _SDL_SetAlpha(surf, flag, alpha) {
            var surfData = SDL.surfaces[surf];
            surfData.alpha = alpha;
            if (!(flag & 65536)) {
                surfData.alpha = 255
            }
        }
        Module["_SDL_SetAlpha"] = _SDL_SetAlpha;
        _SDL_SetAlpha.sig = "iiii";
        function _SDL_SetColorKey(surf, flag, key) {
            warnOnce("SDL_SetColorKey is a no-op for performance reasons");
            return 0
        }
        Module["_SDL_SetColorKey"] = _SDL_SetColorKey;
        function _SDL_PollEvent(ptr) {
            return SDL.pollEvent(ptr)
        }
        Module["_SDL_PollEvent"] = _SDL_PollEvent;
        _SDL_PollEvent.sig = "ii";
        function _SDL_PushEvent(ptr) {
            var copy = _malloc(28);
            _memcpy(copy, ptr, 28);
            SDL.events.push(copy);
            return 0
        }
        Module["_SDL_PushEvent"] = _SDL_PushEvent;
        _SDL_PushEvent.sig = "ii";
        function _SDL_PeepEvents(events, requestedEventCount, action, from, to) {
            switch (action) {
            case 2:
                {
                    assert(requestedEventCount == 1);
                    var index = 0;
                    var retrievedEventCount = 0;
                    while (index < SDL.events.length && retrievedEventCount < requestedEventCount) {
                        var event = SDL.events[index];
                        var type = SDL.DOMEventToSDLEvent[event.type];
                        if (from <= type && type <= to) {
                            if (SDL.makeCEvent(event, events) === false) {
                                index++
                            } else {
                                SDL.events.splice(index, 1);
                                retrievedEventCount++
                            }
                        } else {
                            index++
                        }
                    }
                    return retrievedEventCount
                }
            default:
                throw "SDL_PeepEvents does not yet support that action: " + action
            }
        }
        Module["_SDL_PeepEvents"] = _SDL_PeepEvents;
        _SDL_PeepEvents.sig = "iiiiii";
        function _SDL_PumpEvents() {
            SDL.events.forEach(function(event) {
                SDL.handleEvent(event)
            })
        }
        Module["_SDL_PumpEvents"] = _SDL_PumpEvents;
        _SDL_PumpEvents.sig = "v";
        function _emscripten_SDL_SetEventHandler(handler, userdata) {
            SDL.eventHandler = handler;
            SDL.eventHandlerContext = userdata;
            if (!SDL.eventHandlerTemp)
                SDL.eventHandlerTemp = _malloc(28)
        }
        Module["_emscripten_SDL_SetEventHandler"] = _emscripten_SDL_SetEventHandler;
        _emscripten_SDL_SetEventHandler.sig = "vii";
        function _SDL_SetColors(surf, colors, firstColor, nColors) {
            var surfData = SDL.surfaces[surf];
            if (!surfData.colors) {
                var buffer = new ArrayBuffer(256 * 4);
                surfData.colors = new Uint8Array(buffer);
                surfData.colors32 = new Uint32Array(buffer)
            }
            for (var i = 0; i < nColors; ++i) {
                var index = (firstColor + i) * 4;
                surfData.colors[index] = HEAPU8[colors + i * 4 >> 0];
                surfData.colors[index + 1] = HEAPU8[colors + (i * 4 + 1) >> 0];
                surfData.colors[index + 2] = HEAPU8[colors + (i * 4 + 2) >> 0];
                surfData.colors[index + 3] = 255
            }
            return 1
        }
        Module["_SDL_SetColors"] = _SDL_SetColors;
        _SDL_SetColors.sig = "iiiii";
        function _SDL_SetPalette(surf, flags, colors, firstColor, nColors) {
            return _SDL_SetColors(surf, colors, firstColor, nColors)
        }
        Module["_SDL_SetPalette"] = _SDL_SetPalette;
        function _SDL_MapRGB(fmt, r, g, b) {
            SDL.checkPixelFormat(fmt);
            return r & 255 | (g & 255) << 8 | (b & 255) << 16 | 4278190080
        }
        Module["_SDL_MapRGB"] = _SDL_MapRGB;
        _SDL_MapRGB.sig = "iiiii";
        function _SDL_MapRGBA(fmt, r, g, b, a) {
            SDL.checkPixelFormat(fmt);
            return r & 255 | (g & 255) << 8 | (b & 255) << 16 | (a & 255) << 24
        }
        Module["_SDL_MapRGBA"] = _SDL_MapRGBA;
        _SDL_MapRGBA.sig = "iiiiii";
        function _SDL_GetRGB(pixel, fmt, r, g, b) {
            SDL.checkPixelFormat(fmt);
            if (r) {
                HEAP8[r >> 0] = pixel & 255
            }
            if (g) {
                HEAP8[g >> 0] = pixel >> 8 & 255
            }
            if (b) {
                HEAP8[b >> 0] = pixel >> 16 & 255
            }
        }
        Module["_SDL_GetRGB"] = _SDL_GetRGB;
        _SDL_GetRGB.sig = "viiiii";
        function _SDL_GetRGBA(pixel, fmt, r, g, b, a) {
            SDL.checkPixelFormat(fmt);
            if (r) {
                HEAP8[r >> 0] = pixel & 255
            }
            if (g) {
                HEAP8[g >> 0] = pixel >> 8 & 255
            }
            if (b) {
                HEAP8[b >> 0] = pixel >> 16 & 255
            }
            if (a) {
                HEAP8[a >> 0] = pixel >> 24 & 255
            }
        }
        Module["_SDL_GetRGBA"] = _SDL_GetRGBA;
        _SDL_GetRGBA.sig = "viiiiii";
        function _SDL_GetAppState() {
            var state = 0;
            if (Browser.pointerLock) {
                state |= 1
            }
            if (document.hasFocus()) {
                state |= 2
            }
            state |= 4;
            return state
        }
        Module["_SDL_GetAppState"] = _SDL_GetAppState;
        _SDL_GetAppState.sig = "i";
        function _SDL_WM_GrabInput() {}
        Module["_SDL_WM_GrabInput"] = _SDL_WM_GrabInput;
        function _SDL_WM_ToggleFullScreen(surf) {
            if (Browser.exitFullscreen()) {
                return 1
            }
            if (!SDL.canRequestFullscreen) {
                return 0
            }
            SDL.isRequestingFullscreen = true;
            return 1
        }
        Module["_SDL_WM_ToggleFullScreen"] = _SDL_WM_ToggleFullScreen;
        _SDL_WM_ToggleFullScreen.sig = "ii";
        function _IMG_Init(flags) {
            return flags
        }
        Module["_IMG_Init"] = _IMG_Init;
        function _SDL_FreeRW(rwopsID) {
            SDL.rwops[rwopsID] = null;
            while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length - 1] === null) {
                SDL.rwops.pop()
            }
        }
        Module["_SDL_FreeRW"] = _SDL_FreeRW;
        _SDL_FreeRW.sig = "vi";
        function _IMG_Load_RW(rwopsID, freeSrc) {
            try {
                var cleanup = function() {
                    if (rwops && freeSrc)
                        _SDL_FreeRW(rwopsID)
                };
                var addCleanup = function(func) {
                    var old = cleanup;
                    cleanup = function added_cleanup() {
                        old();
                        func()
                    }
                };
                var callStbImage = function(func, params) {
                    var x = Module["_malloc"](4);
                    var y = Module["_malloc"](4);
                    var comp = Module["_malloc"](4);
                    addCleanup(function() {
                        Module["_free"](x);
                        Module["_free"](y);
                        Module["_free"](comp);
                        if (data)
                            Module["_stbi_image_free"](data)
                    });
                    var data = Module["_" + func].apply(null, params.concat([x, y, comp, 0]));
                    if (!data)
                        return null;
                    return {
                        rawData: true,
                        data: data,
                        width: HEAP32[x >> 2],
                        height: HEAP32[y >> 2],
                        size: HEAP32[x >> 2] * HEAP32[y >> 2] * HEAP32[comp >> 2],
                        bpp: HEAP32[comp >> 2]
                    }
                };
                var rwops = SDL.rwops[rwopsID];
                if (rwops === undefined) {
                    return 0
                }
                var raw;
                var filename = rwops.filename;
                if (filename === undefined) {
                    warnOnce("Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins");
                    return 0
                }
                if (!raw) {
                    filename = PATH_FS.resolve(filename);
                    raw = preloadedImages[filename];
                    if (!raw) {
                        if (raw === null)
                            err("Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!");
                        warnOnce("Cannot find preloaded image " + filename);
                        warnOnce("Cannot find preloaded image " + filename + ". Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins");
                        return 0
                    } else if (Module["freePreloadedMediaOnUse"]) {
                        preloadedImages[filename] = null
                    }
                }
                var surf = SDL.makeSurface(raw.width, raw.height, 0, false, "load:" + filename);
                var surfData = SDL.surfaces[surf];
                surfData.ctx.globalCompositeOperation = "copy";
                if (!raw.rawData) {
                    surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height)
                } else {
                    var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
                    if (raw.bpp == 4) {
                        imageData.data.set(HEAPU8.subarray(raw.data, raw.data + raw.size))
                    } else if (raw.bpp == 3) {
                        var pixels = raw.size / 3;
                        var data = imageData.data;
                        var sourcePtr = raw.data;
                        var destPtr = 0;
                        for (var i = 0; i < pixels; i++) {
                            data[destPtr++] = HEAPU8[sourcePtr++ >> 0];
                            data[destPtr++] = HEAPU8[sourcePtr++ >> 0];
                            data[destPtr++] = HEAPU8[sourcePtr++ >> 0];
                            data[destPtr++] = 255
                        }
                    } else if (raw.bpp == 2) {
                        var pixels = raw.size;
                        var data = imageData.data;
                        var sourcePtr = raw.data;
                        var destPtr = 0;
                        for (var i = 0; i < pixels; i++) {
                            var gray = HEAPU8[sourcePtr++ >> 0];
                            var alpha = HEAPU8[sourcePtr++ >> 0];
                            data[destPtr++] = gray;
                            data[destPtr++] = gray;
                            data[destPtr++] = gray;
                            data[destPtr++] = alpha
                        }
                    } else if (raw.bpp == 1) {
                        var pixels = raw.size;
                        var data = imageData.data;
                        var sourcePtr = raw.data;
                        var destPtr = 0;
                        for (var i = 0; i < pixels; i++) {
                            var value = HEAPU8[sourcePtr++ >> 0];
                            data[destPtr++] = value;
                            data[destPtr++] = value;
                            data[destPtr++] = value;
                            data[destPtr++] = 255
                        }
                    } else {
                        err("cannot handle bpp " + raw.bpp);
                        return 0
                    }
                    surfData.ctx.putImageData(imageData, 0, 0)
                }
                surfData.ctx.globalCompositeOperation = "source-over";
                _SDL_LockSurface(surf);
                surfData.locked--;
                if (SDL.GL) {
                    surfData.canvas = surfData.ctx = null
                }
                return surf
            } finally {
                cleanup()
            }
        }
        Module["_IMG_Load_RW"] = _IMG_Load_RW;
        _IMG_Load_RW.sig = "iii";
        function _SDL_RWFromFile(_name, mode) {
            var id = SDL.rwops.length;
            var name = UTF8ToString(_name);
            SDL.rwops.push({
                filename: name,
                mimetype: Browser.getMimetype(name)
            });
            return id
        }
        Module["_SDL_RWFromFile"] = _SDL_RWFromFile;
        _SDL_RWFromFile.sig = "iii";
        function _IMG_Load(filename) {
            var rwops = _SDL_RWFromFile(filename);
            var result = _IMG_Load_RW(rwops, 1);
            return result
        }
        Module["_IMG_Load"] = _IMG_Load;
        _IMG_Load.sig = "ii";
        var _SDL_LoadBMP = _IMG_Load;
        Module["_SDL_LoadBMP"] = _SDL_LoadBMP;
        var _SDL_LoadBMP_RW = _IMG_Load_RW;
        Module["_SDL_LoadBMP_RW"] = _SDL_LoadBMP_RW;
        function _IMG_Quit() {
            out("IMG_Quit called (and ignored)")
        }
        Module["_IMG_Quit"] = _IMG_Quit;
        function _SDL_OpenAudio(desired, obtained) {
            try {
                SDL.audio = {
                    freq: HEAPU32[desired >> 2],
                    format: HEAPU16[desired + 4 >> 1],
                    channels: HEAPU8[desired + 6 >> 0],
                    samples: HEAPU16[desired + 8 >> 1],
                    callback: HEAPU32[desired + 16 >> 2],
                    userdata: HEAPU32[desired + 20 >> 2],
                    paused: true,
                    timer: null
                };
                if (SDL.audio.format == 8) {
                    SDL.audio.silence = 128
                } else if (SDL.audio.format == 32784) {
                    SDL.audio.silence = 0
                } else if (SDL.audio.format == 33056) {
                    SDL.audio.silence = 0
                } else {
                    throw "Invalid SDL audio format " + SDL.audio.format + "!"
                }
                if (SDL.audio.freq <= 0) {
                    throw "Unsupported sound frequency " + SDL.audio.freq + "!"
                } else if (SDL.audio.freq <= 22050) {
                    SDL.audio.freq = 22050
                } else if (SDL.audio.freq <= 32e3) {
                    SDL.audio.freq = 32e3
                } else if (SDL.audio.freq <= 44100) {
                    SDL.audio.freq = 44100
                } else if (SDL.audio.freq <= 48e3) {
                    SDL.audio.freq = 48e3
                } else if (SDL.audio.freq <= 96e3) {
                    SDL.audio.freq = 96e3
                } else {
                    throw "Unsupported sound frequency " + SDL.audio.freq + "!"
                }
                if (SDL.audio.channels == 0) {
                    SDL.audio.channels = 1
                } else if (SDL.audio.channels < 0 || SDL.audio.channels > 32) {
                    throw "Unsupported number of audio channels for SDL audio: " + SDL.audio.channels + "!"
                } else if (SDL.audio.channels != 1 && SDL.audio.channels != 2) {
                    out("Warning: Using untested number of audio channels " + SDL.audio.channels)
                }
                if (SDL.audio.samples < 128 || SDL.audio.samples > 524288) {
                    throw "Unsupported audio callback buffer size " + SDL.audio.samples + "!"
                } else if ((SDL.audio.samples & SDL.audio.samples - 1) != 0) {
                    throw "Audio callback buffer size " + SDL.audio.samples + " must be a power-of-two!"
                }
                var totalSamples = SDL.audio.samples * SDL.audio.channels;
                if (SDL.audio.format == 8) {
                    SDL.audio.bytesPerSample = 1
                } else if (SDL.audio.format == 32784) {
                    SDL.audio.bytesPerSample = 2
                } else if (SDL.audio.format == 33056) {
                    SDL.audio.bytesPerSample = 4
                } else {
                    throw "Invalid SDL audio format " + SDL.audio.format + "!"
                }
                SDL.audio.bufferSize = totalSamples * SDL.audio.bytesPerSample;
                SDL.audio.bufferDurationSecs = SDL.audio.bufferSize / SDL.audio.bytesPerSample / SDL.audio.channels / SDL.audio.freq;
                SDL.audio.bufferingDelay = 50 / 1e3;
                SDL.audio.buffer = _malloc(SDL.audio.bufferSize);
                SDL.audio.numSimultaneouslyQueuedBuffers = Module["SDL_numSimultaneouslyQueuedBuffers"] || 5;
                SDL.audio.queueNewAudioData = function SDL_queueNewAudioData() {
                    if (!SDL.audio)
                        return;
                    for (var i = 0; i < SDL.audio.numSimultaneouslyQueuedBuffers; ++i) {
                        var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext["currentTime"];
                        if (secsUntilNextPlayStart >= SDL.audio.bufferingDelay + SDL.audio.bufferDurationSecs * SDL.audio.numSimultaneouslyQueuedBuffers)
                            return;
                        getWasmTableEntry(SDL.audio.callback)(SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize);
                        SDL.audio.pushAudio(SDL.audio.buffer, SDL.audio.bufferSize)
                    }
                }
                ;
                SDL.audio.caller = function SDL_audioCaller() {
                    if (!SDL.audio)
                        return;
                    --SDL.audio.numAudioTimersPending;
                    SDL.audio.queueNewAudioData();
                    var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext["currentTime"];
                    var preemptBufferFeedSecs = SDL.audio.bufferDurationSecs / 2;
                    if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
                        ++SDL.audio.numAudioTimersPending;
                        SDL.audio.timer = safeSetTimeout(SDL.audio.caller, Math.max(0, 1e3 * (secsUntilNextPlayStart - preemptBufferFeedSecs)));
                        if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
                            ++SDL.audio.numAudioTimersPending;
                            safeSetTimeout(SDL.audio.caller, 1)
                        }
                    }
                }
                ;
                SDL.audio.audioOutput = new Audio;
                SDL.openAudioContext();
                if (!SDL.audioContext)
                    throw "Web Audio API is not available!";
                autoResumeAudioContext(SDL.audioContext);
                SDL.audio.nextPlayTime = 0;
                SDL.audio.pushAudio = function(ptr, sizeBytes) {
                    try {
                        if (SDL.audio.paused)
                            return;
                        var sizeSamples = sizeBytes / SDL.audio.bytesPerSample;
                        var sizeSamplesPerChannel = sizeSamples / SDL.audio.channels;
                        if (sizeSamplesPerChannel != SDL.audio.samples) {
                            throw "Received mismatching audio buffer size!"
                        }
                        var source = SDL.audioContext["createBufferSource"]();
                        var soundBuffer = SDL.audioContext["createBuffer"](SDL.audio.channels, sizeSamplesPerChannel, SDL.audio.freq);
                        source["connect"](SDL.audioContext["destination"]);
                        SDL.fillWebAudioBufferFromHeap(ptr, sizeSamplesPerChannel, soundBuffer);
                        source["buffer"] = soundBuffer;
                        var curtime = SDL.audioContext["currentTime"];
                        var playtime = Math.max(curtime + SDL.audio.bufferingDelay, SDL.audio.nextPlayTime);
                        if (typeof source["start"] != "undefined") {
                            source["start"](playtime)
                        } else if (typeof source["noteOn"] != "undefined") {
                            source["noteOn"](playtime)
                        }
                        SDL.audio.nextPlayTime = playtime + SDL.audio.bufferDurationSecs
                    } catch (e) {
                        out("Web Audio API error playing back audio: " + e.toString())
                    }
                }
                ;
                if (obtained) {
                    HEAP32[obtained >> 2] = SDL.audio.freq;
                    HEAP16[obtained + 4 >> 1] = SDL.audio.format;
                    HEAP8[obtained + 6 >> 0] = SDL.audio.channels;
                    HEAP8[obtained + 7 >> 0] = SDL.audio.silence;
                    HEAP16[obtained + 8 >> 1] = SDL.audio.samples;
                    HEAPU32[obtained + 16 >> 2] = SDL.audio.callback;
                    HEAPU32[obtained + 20 >> 2] = SDL.audio.userdata
                }
                SDL.allocateChannels(32)
            } catch (e) {
                out('Initializing SDL audio threw an exception: "' + e.toString() + '"! Continuing without audio.');
                SDL.audio = null;
                SDL.allocateChannels(0);
                if (obtained) {
                    HEAP32[obtained >> 2] = 0;
                    HEAP16[obtained + 4 >> 1] = 0;
                    HEAP8[obtained + 6 >> 0] = 0;
                    HEAP8[obtained + 7 >> 0] = 0;
                    HEAP16[obtained + 8 >> 1] = 0;
                    HEAPU32[obtained + 16 >> 2] = 0;
                    HEAPU32[obtained + 20 >> 2] = 0
                }
            }
            if (!SDL.audio) {
                return -1
            }
            return 0
        }
        Module["_SDL_OpenAudio"] = _SDL_OpenAudio;
        _SDL_OpenAudio.sig = "iii";
        function _SDL_PauseAudio(pauseOn) {
            if (!SDL.audio) {
                return
            }
            if (pauseOn) {
                if (SDL.audio.timer !== undefined) {
                    clearTimeout(SDL.audio.timer);
                    SDL.audio.numAudioTimersPending = 0;
                    SDL.audio.timer = undefined
                }
            } else if (!SDL.audio.timer) {
                SDL.audio.numAudioTimersPending = 1;
                SDL.audio.timer = safeSetTimeout(SDL.audio.caller, 1)
            }
            SDL.audio.paused = pauseOn
        }
        Module["_SDL_PauseAudio"] = _SDL_PauseAudio;
        _SDL_PauseAudio.sig = "vi";
        function _SDL_CloseAudio() {
            if (SDL.audio) {
                if (SDL.audio.callbackRemover) {
                    SDL.audio.callbackRemover();
                    SDL.audio.callbackRemover = null
                }
                _SDL_PauseAudio(1);
                _free(SDL.audio.buffer);
                SDL.audio = null;
                SDL.allocateChannels(0)
            }
        }
        Module["_SDL_CloseAudio"] = _SDL_CloseAudio;
        _SDL_CloseAudio.sig = "v";
        function _SDL_LockAudio() {}
        Module["_SDL_LockAudio"] = _SDL_LockAudio;
        function _SDL_UnlockAudio() {}
        Module["_SDL_UnlockAudio"] = _SDL_UnlockAudio;
        function _SDL_CreateMutex() {
            return 0
        }
        Module["_SDL_CreateMutex"] = _SDL_CreateMutex;
        function _SDL_LockMutex() {}
        Module["_SDL_LockMutex"] = _SDL_LockMutex;
        function _SDL_UnlockMutex() {}
        Module["_SDL_UnlockMutex"] = _SDL_UnlockMutex;
        function _SDL_mutexP() {
            return 0
        }
        Module["_SDL_mutexP"] = _SDL_mutexP;
        function _SDL_mutexV() {
            return 0
        }
        Module["_SDL_mutexV"] = _SDL_mutexV;
        function _SDL_DestroyMutex() {}
        Module["_SDL_DestroyMutex"] = _SDL_DestroyMutex;
        function _SDL_CreateCond() {
            return 0
        }
        Module["_SDL_CreateCond"] = _SDL_CreateCond;
        function _SDL_CondSignal() {}
        Module["_SDL_CondSignal"] = _SDL_CondSignal;
        function _SDL_CondWait() {}
        Module["_SDL_CondWait"] = _SDL_CondWait;
        function _SDL_DestroyCond() {}
        Module["_SDL_DestroyCond"] = _SDL_DestroyCond;
        function _SDL_StartTextInput() {
            SDL.textInput = true
        }
        Module["_SDL_StartTextInput"] = _SDL_StartTextInput;
        _SDL_StartTextInput.sig = "v";
        function _SDL_StopTextInput() {
            SDL.textInput = false
        }
        Module["_SDL_StopTextInput"] = _SDL_StopTextInput;
        _SDL_StopTextInput.sig = "v";
        function _Mix_Init(flags) {
            if (!flags)
                return 0;
            return 8
        }
        Module["_Mix_Init"] = _Mix_Init;
        function _Mix_Quit() {}
        Module["_Mix_Quit"] = _Mix_Quit;
        function _Mix_OpenAudio(frequency, format, channels, chunksize) {
            SDL.openAudioContext();
            autoResumeAudioContext(SDL.audioContext);
            SDL.allocateChannels(32);
            SDL.mixerFrequency = frequency;
            SDL.mixerFormat = format;
            SDL.mixerNumChannels = channels;
            SDL.mixerChunkSize = chunksize;
            return 0
        }
        Module["_Mix_OpenAudio"] = _Mix_OpenAudio;
        _Mix_OpenAudio.sig = "iiiii";
        var _Mix_CloseAudio = _SDL_CloseAudio;
        Module["_Mix_CloseAudio"] = _Mix_CloseAudio;
        function _Mix_AllocateChannels(num) {
            SDL.allocateChannels(num);
            return num
        }
        Module["_Mix_AllocateChannels"] = _Mix_AllocateChannels;
        _Mix_AllocateChannels.sig = "ii";
        function _Mix_ChannelFinished(func) {
            SDL.channelFinished = func
        }
        Module["_Mix_ChannelFinished"] = _Mix_ChannelFinished;
        _Mix_ChannelFinished.sig = "vi";
        function _Mix_Volume(channel, volume) {
            if (channel == -1) {
                for (var i = 0; i < SDL.numChannels - 1; i++) {
                    _Mix_Volume(i, volume)
                }
                return _Mix_Volume(SDL.numChannels - 1, volume)
            }
            return SDL.setGetVolume(SDL.channels[channel], volume)
        }
        Module["_Mix_Volume"] = _Mix_Volume;
        _Mix_Volume.sig = "iii";
        function _Mix_SetPanning(channel, left, right) {
            left /= 255;
            right /= 255;
            SDL.setPannerPosition(SDL.channels[channel], right - left, 0, .1);
            return 1
        }
        Module["_Mix_SetPanning"] = _Mix_SetPanning;
        _Mix_SetPanning.sig = "iiii";
        function _Mix_LoadWAV_RW(rwopsID, freesrc) {
            var rwops = SDL.rwops[rwopsID];
            if (rwops === undefined)
                return 0;
            var filename = "";
            var audio;
            var webAudio;
            var bytes;
            if (rwops.filename !== undefined) {
                filename = PATH_FS.resolve(rwops.filename);
                var raw = preloadedAudios[filename];
                if (!raw) {
                    if (raw === null)
                        err("Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!");
                    if (!Module.noAudioDecoding)
                        warnOnce("Cannot find preloaded audio " + filename);
                    try {
                        bytes = FS.readFile(filename)
                    } catch (e) {
                        err("Couldn't find file for: " + filename);
                        return 0
                    }
                }
                if (Module["freePreloadedMediaOnUse"]) {
                    preloadedAudios[filename] = null
                }
                audio = raw
            } else if (rwops.bytes !== undefined) {
                if (SDL.webAudioAvailable())
                    bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
                else
                    bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count)
            } else {
                return 0
            }
            var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
            var canPlayWithWebAudio = Module["SDL_canPlayWithWebAudio"] === undefined || Module["SDL_canPlayWithWebAudio"](filename, arrayBuffer);
            if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
                audio = undefined;
                webAudio = {};
                webAudio.onDecodeComplete = [];
                var onDecodeComplete = function(data) {
                    webAudio.decodedBuffer = data;
                    webAudio.onDecodeComplete.forEach(function(e) {
                        e()
                    });
                    webAudio.onDecodeComplete = undefined
                };
                SDL.audioContext["decodeAudioData"](arrayBuffer, onDecodeComplete)
            } else if (audio === undefined && bytes) {
                var blob = new Blob([bytes],{
                    type: rwops.mimetype
                });
                var url = URL.createObjectURL(blob);
                audio = new Audio;
                audio.src = url;
                audio.mozAudioChannelType = "content"
            }
            var id = SDL.audios.length;
            SDL.audios.push({
                source: filename,
                audio: audio,
                webAudio: webAudio
            });
            return id
        }
        Module["_Mix_LoadWAV_RW"] = _Mix_LoadWAV_RW;
        _Mix_LoadWAV_RW.sig = "iii";
        function _Mix_LoadWAV(filename) {
            var rwops = _SDL_RWFromFile(filename);
            var result = _Mix_LoadWAV_RW(rwops);
            _SDL_FreeRW(rwops);
            return result
        }
        Module["_Mix_LoadWAV"] = _Mix_LoadWAV;
        _Mix_LoadWAV.sig = "ii";
        function _Mix_QuickLoad_RAW(mem, len) {
            var audio;
            var webAudio;
            var numSamples = len >> 1;
            var buffer = new Float32Array(numSamples);
            for (var i = 0; i < numSamples; ++i) {
                buffer[i] = HEAP16[mem + i * 2 >> 1] / 32768
            }
            if (SDL.webAudioAvailable()) {
                webAudio = {};
                webAudio.decodedBuffer = buffer
            } else {
                audio = new Audio;
                audio.mozAudioChannelType = "content";
                audio.numChannels = SDL.mixerNumChannels;
                audio.frequency = SDL.mixerFrequency
            }
            var id = SDL.audios.length;
            SDL.audios.push({
                source: "",
                audio: audio,
                webAudio: webAudio,
                buffer: buffer
            });
            return id
        }
        Module["_Mix_QuickLoad_RAW"] = _Mix_QuickLoad_RAW;
        _Mix_QuickLoad_RAW.sig = "iii";
        function _Mix_FreeChunk(id) {
            SDL.audios[id] = null
        }
        Module["_Mix_FreeChunk"] = _Mix_FreeChunk;
        _Mix_FreeChunk.sig = "vi";
        function _Mix_ReserveChannels(num) {
            SDL.channelMinimumNumber = num
        }
        Module["_Mix_ReserveChannels"] = _Mix_ReserveChannels;
        _Mix_ReserveChannels.sig = "ii";
        function _Mix_PlayChannel(channel, id, loops) {
            var info = SDL.audios[id];
            if (!info)
                return -1;
            if (!info.audio && !info.webAudio)
                return -1;
            if (channel == -1) {
                for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
                    if (!SDL.channels[i].audio) {
                        channel = i;
                        break
                    }
                }
                if (channel == -1) {
                    err("All " + SDL.numChannels + " channels in use!");
                    return -1
                }
            }
            var channelInfo = SDL.channels[channel];
            var audio;
            if (info.webAudio) {
                audio = {};
                audio.resource = info;
                audio.paused = false;
                audio.currentPosition = 0;
                audio.play = function() {
                    SDL.playWebAudio(this)
                }
                ;
                audio.pause = function() {
                    SDL.pauseWebAudio(this)
                }
            } else {
                audio = info.audio.cloneNode(true);
                audio.numChannels = info.audio.numChannels;
                audio.frequency = info.audio.frequency
            }
            audio["onended"] = function SDL_audio_onended() {
                if (channelInfo.audio == this) {
                    channelInfo.audio.paused = true;
                    channelInfo.audio = null
                }
                if (SDL.channelFinished)
                    getWasmTableEntry(SDL.channelFinished)(channel)
            }
            ;
            channelInfo.audio = audio;
            audio.loop = loops != 0;
            audio.volume = channelInfo.volume;
            audio.play();
            return channel
        }
        Module["_Mix_PlayChannel"] = _Mix_PlayChannel;
        _Mix_PlayChannel.sig = "iiii";
        var _Mix_PlayChannelTimed = _Mix_PlayChannel;
        Module["_Mix_PlayChannelTimed"] = _Mix_PlayChannelTimed;
        function _Mix_FadingChannel(channel) {
            return 0
        }
        Module["_Mix_FadingChannel"] = _Mix_FadingChannel;
        function _Mix_HaltChannel(channel) {
            function halt(channel) {
                var info = SDL.channels[channel];
                if (info.audio) {
                    info.audio.pause();
                    info.audio = null
                }
                if (SDL.channelFinished) {
                    getWasmTableEntry(SDL.channelFinished)(channel)
                }
            }
            if (channel != -1) {
                halt(channel)
            } else {
                for (var i = 0; i < SDL.channels.length; ++i)
                    halt(i)
            }
            return 0
        }
        Module["_Mix_HaltChannel"] = _Mix_HaltChannel;
        _Mix_HaltChannel.sig = "ii";
        function _Mix_HaltMusic() {
            var audio = SDL.music.audio;
            if (audio) {
                audio.src = audio.src;
                audio.currentPosition = 0;
                audio.pause()
            }
            SDL.music.audio = null;
            if (SDL.hookMusicFinished) {
                getWasmTableEntry(SDL.hookMusicFinished)()
            }
            return 0
        }
        Module["_Mix_HaltMusic"] = _Mix_HaltMusic;
        _Mix_HaltMusic.sig = "i";
        function _Mix_HookMusicFinished(func) {
            SDL.hookMusicFinished = func;
            if (SDL.music.audio) {
                SDL.music.audio["onended"] = _Mix_HaltMusic
            }
        }
        Module["_Mix_HookMusicFinished"] = _Mix_HookMusicFinished;
        _Mix_HookMusicFinished.sig = "vi";
        function _Mix_VolumeMusic(volume) {
            return SDL.setGetVolume(SDL.music, volume)
        }
        Module["_Mix_VolumeMusic"] = _Mix_VolumeMusic;
        _Mix_VolumeMusic.sig = "ii";
        var _Mix_LoadMUS_RW = _Mix_LoadWAV_RW;
        Module["_Mix_LoadMUS_RW"] = _Mix_LoadMUS_RW;
        function _Mix_LoadMUS(filename) {
            var rwops = _SDL_RWFromFile(filename);
            var result = _Mix_LoadMUS_RW(rwops);
            _SDL_FreeRW(rwops);
            return result
        }
        Module["_Mix_LoadMUS"] = _Mix_LoadMUS;
        _Mix_LoadMUS.sig = "ii";
        var _Mix_FreeMusic = _Mix_FreeChunk;
        Module["_Mix_FreeMusic"] = _Mix_FreeMusic;
        function _Mix_PlayMusic(id, loops) {
            if (SDL.music.audio) {
                if (!SDL.music.audio.paused)
                    err("Music is already playing. " + SDL.music.source);
                SDL.music.audio.pause()
            }
            var info = SDL.audios[id];
            var audio;
            if (info.webAudio) {
                audio = {};
                audio.resource = info;
                audio.paused = false;
                audio.currentPosition = 0;
                audio.play = function() {
                    SDL.playWebAudio(this)
                }
                ;
                audio.pause = function() {
                    SDL.pauseWebAudio(this)
                }
            } else if (info.audio) {
                audio = info.audio
            }
            audio["onended"] = function() {
                if (SDL.music.audio == this)
                    _Mix_HaltMusic()
            }
            ;
            audio.loop = loops != 0 && loops != 1;
            audio.volume = SDL.music.volume;
            SDL.music.audio = audio;
            audio.play();
            return 0
        }
        Module["_Mix_PlayMusic"] = _Mix_PlayMusic;
        _Mix_PlayMusic.sig = "iii";
        function _Mix_PauseMusic() {
            var audio = SDL.music.audio;
            if (audio)
                audio.pause()
        }
        Module["_Mix_PauseMusic"] = _Mix_PauseMusic;
        _Mix_PauseMusic.sig = "v";
        function _Mix_ResumeMusic() {
            var audio = SDL.music.audio;
            if (audio)
                audio.play()
        }
        Module["_Mix_ResumeMusic"] = _Mix_ResumeMusic;
        _Mix_ResumeMusic.sig = "v";
        var _Mix_FadeInMusicPos = _Mix_PlayMusic;
        Module["_Mix_FadeInMusicPos"] = _Mix_FadeInMusicPos;
        var _Mix_FadeOutMusic = _Mix_HaltMusic;
        Module["_Mix_FadeOutMusic"] = _Mix_FadeOutMusic;
        function _Mix_PlayingMusic() {
            return SDL.music.audio && !SDL.music.audio.paused ? 1 : 0
        }
        Module["_Mix_PlayingMusic"] = _Mix_PlayingMusic;
        _Mix_PlayingMusic.sig = "i";
        function _Mix_Playing(channel) {
            if (channel === -1) {
                var count = 0;
                for (var i = 0; i < SDL.channels.length; i++) {
                    count += _Mix_Playing(i)
                }
                return count
            }
            var info = SDL.channels[channel];
            if (info && info.audio && !info.audio.paused) {
                return 1
            }
            return 0
        }
        Module["_Mix_Playing"] = _Mix_Playing;
        _Mix_Playing.sig = "ii";
        function _Mix_Pause(channel) {
            if (channel === -1) {
                for (var i = 0; i < SDL.channels.length; i++) {
                    _Mix_Pause(i)
                }
                return
            }
            var info = SDL.channels[channel];
            if (info && info.audio) {
                info.audio.pause()
            } else {}
        }
        Module["_Mix_Pause"] = _Mix_Pause;
        _Mix_Pause.sig = "vi";
        function _Mix_Paused(channel) {
            if (channel === -1) {
                var pausedCount = 0;
                for (var i = 0; i < SDL.channels.length; i++) {
                    pausedCount += _Mix_Paused(i)
                }
                return pausedCount
            }
            var info = SDL.channels[channel];
            if (info && info.audio && info.audio.paused) {
                return 1
            }
            return 0
        }
        Module["_Mix_Paused"] = _Mix_Paused;
        _Mix_Paused.sig = "ii";
        function _Mix_PausedMusic() {
            return SDL.music.audio && SDL.music.audio.paused ? 1 : 0
        }
        Module["_Mix_PausedMusic"] = _Mix_PausedMusic;
        _Mix_PausedMusic.sig = "i";
        function _Mix_Resume(channel) {
            if (channel === -1) {
                for (var i = 0; i < SDL.channels.length; i++) {
                    _Mix_Resume(i)
                }
                return
            }
            var info = SDL.channels[channel];
            if (info && info.audio)
                info.audio.play()
        }
        Module["_Mix_Resume"] = _Mix_Resume;
        _Mix_Resume.sig = "vi";
        function _TTF_Init() {
            try {
                var offscreenCanvas = new OffscreenCanvas(0,0);
                SDL.ttfContext = offscreenCanvas.getContext("2d");
                if (typeof SDL.ttfContext.measureText != "function") {
                    throw "bad context"
                }
            } catch (ex) {
                var canvas = document.createElement("canvas");
                SDL.ttfContext = canvas.getContext("2d")
            }
            return 0
        }
        Module["_TTF_Init"] = _TTF_Init;
        _TTF_Init.sig = "i";
        function _TTF_OpenFont(filename, size) {
            filename = PATH.normalize(UTF8ToString(filename));
            var id = SDL.fonts.length;
            SDL.fonts.push({
                name: filename,
                size: size
            });
            return id
        }
        Module["_TTF_OpenFont"] = _TTF_OpenFont;
        _TTF_OpenFont.sig = "iii";
        function _TTF_CloseFont(font) {
            SDL.fonts[font] = null
        }
        Module["_TTF_CloseFont"] = _TTF_CloseFont;
        _TTF_CloseFont.sig = "vi";
        function _TTF_RenderText_Solid(font, text, color) {
            text = UTF8ToString(text) || " ";
            var fontData = SDL.fonts[font];
            var w = SDL.estimateTextWidth(fontData, text);
            var h = fontData.size;
            color = SDL.loadColorToCSSRGB(color);
            var fontString = SDL.makeFontString(h, fontData.name);
            var surf = SDL.makeSurface(w, h, 0, false, "text:" + text);
            var surfData = SDL.surfaces[surf];
            surfData.ctx.save();
            surfData.ctx.fillStyle = color;
            surfData.ctx.font = fontString;
            surfData.ctx.textBaseline = "bottom";
            surfData.ctx.fillText(text, 0, h | 0);
            surfData.ctx.restore();
            return surf
        }
        Module["_TTF_RenderText_Solid"] = _TTF_RenderText_Solid;
        _TTF_RenderText_Solid.sig = "iiii";
        var _TTF_RenderText_Blended = _TTF_RenderText_Solid;
        Module["_TTF_RenderText_Blended"] = _TTF_RenderText_Blended;
        var _TTF_RenderText_Shaded = _TTF_RenderText_Solid;
        Module["_TTF_RenderText_Shaded"] = _TTF_RenderText_Shaded;
        var _TTF_RenderUTF8_Solid = _TTF_RenderText_Solid;
        Module["_TTF_RenderUTF8_Solid"] = _TTF_RenderUTF8_Solid;
        function _TTF_SizeText(font, text, w, h) {
            var fontData = SDL.fonts[font];
            if (w) {
                HEAP32[w >> 2] = SDL.estimateTextWidth(fontData, UTF8ToString(text))
            }
            if (h) {
                HEAP32[h >> 2] = fontData.size
            }
            return 0
        }
        Module["_TTF_SizeText"] = _TTF_SizeText;
        _TTF_SizeText.sig = "iiiii";
        var _TTF_SizeUTF8 = _TTF_SizeText;
        Module["_TTF_SizeUTF8"] = _TTF_SizeUTF8;
        function _TTF_GlyphMetrics(font, ch, minx, maxx, miny, maxy, advance) {
            var fontData = SDL.fonts[font];
            var width = SDL.estimateTextWidth(fontData, String.fromCharCode(ch));
            if (advance) {
                HEAP32[advance >> 2] = width
            }
            if (minx) {
                HEAP32[minx >> 2] = 0
            }
            if (maxx) {
                HEAP32[maxx >> 2] = width
            }
            if (miny) {
                HEAP32[miny >> 2] = 0
            }
            if (maxy) {
                HEAP32[maxy >> 2] = fontData.size
            }
        }
        Module["_TTF_GlyphMetrics"] = _TTF_GlyphMetrics;
        _TTF_GlyphMetrics.sig = "iiiiiiii";
        function _TTF_FontAscent(font) {
            var fontData = SDL.fonts[font];
            return fontData.size * .98 | 0
        }
        Module["_TTF_FontAscent"] = _TTF_FontAscent;
        _TTF_FontAscent.sig = "ii";
        function _TTF_FontDescent(font) {
            var fontData = SDL.fonts[font];
            return fontData.size * .02 | 0
        }
        Module["_TTF_FontDescent"] = _TTF_FontDescent;
        _TTF_FontDescent.sig = "ii";
        function _TTF_FontHeight(font) {
            var fontData = SDL.fonts[font];
            return fontData.size
        }
        Module["_TTF_FontHeight"] = _TTF_FontHeight;
        _TTF_FontHeight.sig = "ii";
        var _TTF_FontLineSkip = _TTF_FontHeight;
        Module["_TTF_FontLineSkip"] = _TTF_FontLineSkip;
        function _TTF_Quit() {
            out("TTF_Quit called (and ignored)")
        }
        Module["_TTF_Quit"] = _TTF_Quit;
        var SDL_gfx = {
            drawRectangle: function(surf, x1, y1, x2, y2, action, cssColor) {
                x1 = x1 << 16 >> 16;
                y1 = y1 << 16 >> 16;
                x2 = x2 << 16 >> 16;
                y2 = y2 << 16 >> 16;
                var surfData = SDL.surfaces[surf];
                assert(!surfData.locked);
                var x = x1 < x2 ? x1 : x2;
                var y = y1 < y2 ? y1 : y2;
                var w = Math.abs(x2 - x1);
                var h = Math.abs(y2 - y1);
                surfData.ctx.save();
                surfData.ctx[action + "Style"] = cssColor;
                surfData.ctx[action + "Rect"](x, y, w, h);
                surfData.ctx.restore()
            },
            drawLine: function(surf, x1, y1, x2, y2, cssColor) {
                x1 = x1 << 16 >> 16;
                y1 = y1 << 16 >> 16;
                x2 = x2 << 16 >> 16;
                y2 = y2 << 16 >> 16;
                var surfData = SDL.surfaces[surf];
                assert(!surfData.locked);
                surfData.ctx.save();
                surfData.ctx.strokeStyle = cssColor;
                surfData.ctx.beginPath();
                surfData.ctx.moveTo(x1, y1);
                surfData.ctx.lineTo(x2, y2);
                surfData.ctx.stroke();
                surfData.ctx.restore()
            },
            drawEllipse: function(surf, x, y, rx, ry, action, cssColor) {
                x = x << 16 >> 16;
                y = y << 16 >> 16;
                rx = rx << 16 >> 16;
                ry = ry << 16 >> 16;
                var surfData = SDL.surfaces[surf];
                assert(!surfData.locked);
                surfData.ctx.save();
                surfData.ctx.beginPath();
                surfData.ctx.translate(x, y);
                surfData.ctx.scale(rx, ry);
                surfData.ctx.arc(0, 0, 1, 0, 2 * Math.PI);
                surfData.ctx.restore();
                surfData.ctx.save();
                surfData.ctx[action + "Style"] = cssColor;
                surfData.ctx[action]();
                surfData.ctx.restore()
            },
            translateColorToCSSRGBA: function(rgba) {
                return "rgba(" + (rgba >>> 24) + "," + (rgba >> 16 & 255) + "," + (rgba >> 8 & 255) + "," + (rgba & 255) + ")"
            }
        };
        Module["SDL_gfx"] = SDL_gfx;
        function _boxColor(surf, x1, y1, x2, y2, color) {
            return SDL_gfx.drawRectangle(surf, x1, y1, x2, y2, "fill", SDL_gfx.translateColorToCSSRGBA(color))
        }
        Module["_boxColor"] = _boxColor;
        function _boxRGBA(surf, x1, y1, x2, y2, r, g, b, a) {
            return SDL_gfx.drawRectangle(surf, x1, y1, x2, y2, "fill", SDL.translateRGBAToCSSRGBA(r, g, b, a))
        }
        Module["_boxRGBA"] = _boxRGBA;
        function _rectangleColor(surf, x1, y1, x2, y2, color) {
            return SDL_gfx.drawRectangle(surf, x1, y1, x2, y2, "stroke", SDL_gfx.translateColorToCSSRGBA(color))
        }
        Module["_rectangleColor"] = _rectangleColor;
        function _rectangleRGBA(surf, x1, y1, x2, y2, r, g, b, a) {
            return SDL_gfx.drawRectangle(surf, x1, y1, x2, y2, "stroke", SDL.translateRGBAToCSSRGBA(r, g, b, a))
        }
        Module["_rectangleRGBA"] = _rectangleRGBA;
        function _ellipseColor(surf, x, y, rx, ry, color) {
            return SDL_gfx.drawEllipse(surf, x, y, rx, ry, "stroke", SDL_gfx.translateColorToCSSRGBA(color))
        }
        Module["_ellipseColor"] = _ellipseColor;
        function _ellipseRGBA(surf, x, y, rx, ry, r, g, b, a) {
            return SDL_gfx.drawEllipse(surf, x, y, rx, ry, "stroke", SDL.translateRGBAToCSSRGBA(r, g, b, a))
        }
        Module["_ellipseRGBA"] = _ellipseRGBA;
        function _filledEllipseColor(surf, x, y, rx, ry, color) {
            return SDL_gfx.drawEllipse(surf, x, y, rx, ry, "fill", SDL_gfx.translateColorToCSSRGBA(color))
        }
        Module["_filledEllipseColor"] = _filledEllipseColor;
        function _filledEllipseRGBA(surf, x, y, rx, ry, r, g, b, a) {
            return SDL_gfx.drawEllipse(surf, x, y, rx, ry, "fill", SDL.translateRGBAToCSSRGBA(r, g, b, a))
        }
        Module["_filledEllipseRGBA"] = _filledEllipseRGBA;
        function _lineColor(surf, x1, y1, x2, y2, color) {
            return SDL_gfx.drawLine(surf, x1, y1, x2, y2, SDL_gfx.translateColorToCSSRGBA(color))
        }
        Module["_lineColor"] = _lineColor;
        function _lineRGBA(surf, x1, y1, x2, y2, r, g, b, a) {
            return SDL_gfx.drawLine(surf, x1, y1, x2, y2, SDL.translateRGBAToCSSRGBA(r, g, b, a))
        }
        Module["_lineRGBA"] = _lineRGBA;
        function _pixelRGBA(surf, x1, y1, r, g, b, a) {
            _boxRGBA(surf, x1, y1, x1, y1, r, g, b, a)
        }
        Module["_pixelRGBA"] = _pixelRGBA;
        function _SDL_GL_SetAttribute(attr, value) {
            if (!(attr in SDL.glAttributes)) {
                abort("Unknown SDL GL attribute (" + attr + "). Please check if your SDL version is supported.")
            }
            SDL.glAttributes[attr] = value
        }
        Module["_SDL_GL_SetAttribute"] = _SDL_GL_SetAttribute;
        _SDL_GL_SetAttribute.sig = "iii";
        function _SDL_GL_GetAttribute(attr, value) {
            if (!(attr in SDL.glAttributes)) {
                abort("Unknown SDL GL attribute (" + attr + "). Please check if your SDL version is supported.")
            }
            if (value)
                HEAP32[value >> 2] = SDL.glAttributes[attr];
            return 0
        }
        Module["_SDL_GL_GetAttribute"] = _SDL_GL_GetAttribute;
        _SDL_GL_GetAttribute.sig = "iii";
        function _SDL_GL_SwapBuffers() {
            if (Browser.doSwapBuffers)
                Browser.doSwapBuffers()
        }
        Module["_SDL_GL_SwapBuffers"] = _SDL_GL_SwapBuffers;
        _SDL_GL_SwapBuffers.sig = "v";
        function _SDL_GL_ExtensionSupported(extension) {
            return Module.ctx.getExtension(extension) | 0
        }
        Module["_SDL_GL_ExtensionSupported"] = _SDL_GL_ExtensionSupported;
        _SDL_GL_ExtensionSupported.sig = "ii";
        function _SDL_DestroyWindow(window) {}
        Module["_SDL_DestroyWindow"] = _SDL_DestroyWindow;
        function _SDL_DestroyRenderer(renderer) {}
        Module["_SDL_DestroyRenderer"] = _SDL_DestroyRenderer;
        function _SDL_GetWindowFlags() {}
        Module["_SDL_GetWindowFlags"] = _SDL_GetWindowFlags;
        _SDL_GetWindowFlags.sig = "iii";
        function _SDL_GL_SwapWindow(window) {}
        Module["_SDL_GL_SwapWindow"] = _SDL_GL_SwapWindow;
        function _SDL_GL_MakeCurrent(window, context) {}
        Module["_SDL_GL_MakeCurrent"] = _SDL_GL_MakeCurrent;
        function _SDL_GL_DeleteContext(context) {}
        Module["_SDL_GL_DeleteContext"] = _SDL_GL_DeleteContext;
        function _SDL_GL_GetSwapInterval(state) {
            if (Browser.mainLoop.timingMode == 1)
                return Browser.mainLoop.timingValue;
            else
                return 0
        }
        Module["_SDL_GL_GetSwapInterval"] = _SDL_GL_GetSwapInterval;
        _SDL_GL_GetSwapInterval.sig = "ii";
        function _SDL_GL_SetSwapInterval(state) {
            _emscripten_set_main_loop_timing(1, state)
        }
        Module["_SDL_GL_SetSwapInterval"] = _SDL_GL_SetSwapInterval;
        function _SDL_SetWindowTitle(window, title) {
            if (title)
                document.title = UTF8ToString(title)
        }
        Module["_SDL_SetWindowTitle"] = _SDL_SetWindowTitle;
        _SDL_SetWindowTitle.sig = "vii";
        function _SDL_GetWindowSize(window, width, height) {
            var w = Module["canvas"].width;
            var h = Module["canvas"].height;
            if (width)
                HEAP32[width >> 2] = w;
            if (height)
                HEAP32[height >> 2] = h
        }
        Module["_SDL_GetWindowSize"] = _SDL_GetWindowSize;
        _SDL_GetWindowSize.sig = "viii";
        function _SDL_LogSetOutputFunction(callback, userdata) {}
        Module["_SDL_LogSetOutputFunction"] = _SDL_LogSetOutputFunction;
        function _SDL_SetWindowFullscreen(window, fullscreen) {
            if (Browser.isFullscreen) {
                Module["canvas"].exitFullscreen();
                return 1
            }
            return 0
        }
        Module["_SDL_SetWindowFullscreen"] = _SDL_SetWindowFullscreen;
        _SDL_SetWindowFullscreen.sig = "iii";
        function _SDL_ClearError() {}
        Module["_SDL_ClearError"] = _SDL_ClearError;
        function _SDL_SetGamma(r, g, b) {
            return -1
        }
        Module["_SDL_SetGamma"] = _SDL_SetGamma;
        function _SDL_SetGammaRamp(redTable, greenTable, blueTable) {
            return -1
        }
        Module["_SDL_SetGammaRamp"] = _SDL_SetGammaRamp;
        function _SDL_NumJoysticks() {
            var count = 0;
            var gamepads = SDL.getGamepads();
            for (var i = 0; i < gamepads.length; i++) {
                if (gamepads[i] !== undefined)
                    count++
            }
            return count
        }
        Module["_SDL_NumJoysticks"] = _SDL_NumJoysticks;
        _SDL_NumJoysticks.sig = "i";
        function _SDL_JoystickName(deviceIndex) {
            var gamepad = SDL.getGamepad(deviceIndex);
            if (gamepad) {
                var name = gamepad.id;
                if (SDL.joystickNamePool.hasOwnProperty(name)) {
                    return SDL.joystickNamePool[name]
                }
                return SDL.joystickNamePool[name] = allocateUTF8(name)
            }
            return 0
        }
        Module["_SDL_JoystickName"] = _SDL_JoystickName;
        _SDL_JoystickName.sig = "ii";
        function _SDL_JoystickOpen(deviceIndex) {
            var gamepad = SDL.getGamepad(deviceIndex);
            if (gamepad) {
                var joystick = deviceIndex + 1;
                SDL.recordJoystickState(joystick, gamepad);
                return joystick
            }
            return 0
        }
        Module["_SDL_JoystickOpen"] = _SDL_JoystickOpen;
        _SDL_JoystickOpen.sig = "ii";
        function _SDL_JoystickOpened(deviceIndex) {
            return SDL.lastJoystickState.hasOwnProperty(deviceIndex + 1) ? 1 : 0
        }
        Module["_SDL_JoystickOpened"] = _SDL_JoystickOpened;
        _SDL_JoystickOpened.sig = "ii";
        function _SDL_JoystickIndex(joystick) {
            return joystick - 1
        }
        Module["_SDL_JoystickIndex"] = _SDL_JoystickIndex;
        function _SDL_JoystickNumAxes(joystick) {
            var gamepad = SDL.getGamepad(joystick - 1);
            if (gamepad) {
                return gamepad.axes.length
            }
            return 0
        }
        Module["_SDL_JoystickNumAxes"] = _SDL_JoystickNumAxes;
        _SDL_JoystickNumAxes.sig = "ii";
        function _SDL_JoystickNumBalls(joystick) {
            return 0
        }
        Module["_SDL_JoystickNumBalls"] = _SDL_JoystickNumBalls;
        function _SDL_JoystickNumHats(joystick) {
            return 0
        }
        Module["_SDL_JoystickNumHats"] = _SDL_JoystickNumHats;
        function _SDL_JoystickNumButtons(joystick) {
            var gamepad = SDL.getGamepad(joystick - 1);
            if (gamepad) {
                return gamepad.buttons.length
            }
            return 0
        }
        Module["_SDL_JoystickNumButtons"] = _SDL_JoystickNumButtons;
        _SDL_JoystickNumButtons.sig = "ii";
        function _SDL_JoystickUpdate() {
            SDL.queryJoysticks()
        }
        Module["_SDL_JoystickUpdate"] = _SDL_JoystickUpdate;
        _SDL_JoystickUpdate.sig = "v";
        function _SDL_JoystickEventState(state) {
            if (state < 0) {
                return SDL.joystickEventState
            }
            return SDL.joystickEventState = state
        }
        Module["_SDL_JoystickEventState"] = _SDL_JoystickEventState;
        _SDL_JoystickEventState.sig = "ii";
        function _SDL_JoystickGetAxis(joystick, axis) {
            var gamepad = SDL.getGamepad(joystick - 1);
            if (gamepad && gamepad.axes.length > axis) {
                return SDL.joystickAxisValueConversion(gamepad.axes[axis])
            }
            return 0
        }
        Module["_SDL_JoystickGetAxis"] = _SDL_JoystickGetAxis;
        _SDL_JoystickGetAxis.sig = "iii";
        function _SDL_JoystickGetHat(joystick, hat) {
            return 0
        }
        Module["_SDL_JoystickGetHat"] = _SDL_JoystickGetHat;
        function _SDL_JoystickGetBall(joystick, ball, dxptr, dyptr) {
            return -1
        }
        Module["_SDL_JoystickGetBall"] = _SDL_JoystickGetBall;
        function _SDL_JoystickGetButton(joystick, button) {
            var gamepad = SDL.getGamepad(joystick - 1);
            if (gamepad && gamepad.buttons.length > button) {
                return SDL.getJoystickButtonState(gamepad.buttons[button]) ? 1 : 0
            }
            return 0
        }
        Module["_SDL_JoystickGetButton"] = _SDL_JoystickGetButton;
        _SDL_JoystickGetButton.sig = "iii";
        function _SDL_JoystickClose(joystick) {
            delete SDL.lastJoystickState[joystick]
        }
        Module["_SDL_JoystickClose"] = _SDL_JoystickClose;
        _SDL_JoystickClose.sig = "vi";
        function _SDL_InitSubSystem(flags) {
            return 0
        }
        Module["_SDL_InitSubSystem"] = _SDL_InitSubSystem;
        function _SDL_RWFromConstMem(mem, size) {
            var id = SDL.rwops.length;
            SDL.rwops.push({
                bytes: mem,
                count: size
            });
            return id
        }
        Module["_SDL_RWFromConstMem"] = _SDL_RWFromConstMem;
        _SDL_RWFromConstMem.sig = "iii";
        var _SDL_RWFromMem = _SDL_RWFromConstMem;
        Module["_SDL_RWFromMem"] = _SDL_RWFromMem;
        function _SDL_GetNumAudioDrivers() {
            return 1
        }
        Module["_SDL_GetNumAudioDrivers"] = _SDL_GetNumAudioDrivers;
        function _SDL_GetCurrentAudioDriver() {
            return allocateUTF8("Emscripten Audio")
        }
        Module["_SDL_GetCurrentAudioDriver"] = _SDL_GetCurrentAudioDriver;
        function _SDL_GetAudioDriver(index) {
            return _SDL_GetCurrentAudioDriver()
        }
        Module["_SDL_GetAudioDriver"] = _SDL_GetAudioDriver;
        function _SDL_EnableUNICODE(on) {
            var ret = SDL.unicode || 0;
            SDL.unicode = on;
            return ret
        }
        Module["_SDL_EnableUNICODE"] = _SDL_EnableUNICODE;
        _SDL_EnableUNICODE.sig = "ii";
        function _SDL_AddTimer(interval, callback, param) {
            return window.setTimeout(function() {
                getWasmTableEntry(callback)(interval, param)
            }, interval)
        }
        Module["_SDL_AddTimer"] = _SDL_AddTimer;
        _SDL_AddTimer.sig = "iiii";
        function _SDL_RemoveTimer(id) {
            window.clearTimeout(id);
            return true
        }
        Module["_SDL_RemoveTimer"] = _SDL_RemoveTimer;
        _SDL_RemoveTimer.sig = "ii";
        function _SDL_CreateThread() {
            throw "SDL threads cannot be supported in the web platform because they assume shared state. See emscripten_create_worker etc. for a message-passing concurrency model that does let you run code in another thread."
        }
        Module["_SDL_CreateThread"] = _SDL_CreateThread;
        function _SDL_WaitThread() {
            throw "SDL_WaitThread"
        }
        Module["_SDL_WaitThread"] = _SDL_WaitThread;
        function _SDL_GetThreadID() {
            throw "SDL_GetThreadID"
        }
        Module["_SDL_GetThreadID"] = _SDL_GetThreadID;
        function _SDL_ThreadID() {
            return 0
        }
        Module["_SDL_ThreadID"] = _SDL_ThreadID;
        function _SDL_AllocRW() {
            throw "SDL_AllocRW: TODO"
        }
        Module["_SDL_AllocRW"] = _SDL_AllocRW;
        function _SDL_CondBroadcast() {
            throw "SDL_CondBroadcast: TODO"
        }
        Module["_SDL_CondBroadcast"] = _SDL_CondBroadcast;
        function _SDL_CondWaitTimeout() {
            throw "SDL_CondWaitTimeout: TODO"
        }
        Module["_SDL_CondWaitTimeout"] = _SDL_CondWaitTimeout;
        function _SDL_WM_IconifyWindow() {
            throw "SDL_WM_IconifyWindow TODO"
        }
        Module["_SDL_WM_IconifyWindow"] = _SDL_WM_IconifyWindow;
        function _Mix_SetPostMix() {
            warnOnce("Mix_SetPostMix: TODO")
        }
        Module["_Mix_SetPostMix"] = _Mix_SetPostMix;
        function _Mix_VolumeChunk(chunk, volume) {
            throw "Mix_VolumeChunk: TODO"
        }
        Module["_Mix_VolumeChunk"] = _Mix_VolumeChunk;
        function _Mix_SetPosition(channel, angle, distance) {
            throw "Mix_SetPosition: TODO"
        }
        Module["_Mix_SetPosition"] = _Mix_SetPosition;
        function _Mix_QuerySpec() {
            throw "Mix_QuerySpec: TODO"
        }
        Module["_Mix_QuerySpec"] = _Mix_QuerySpec;
        function _Mix_FadeInChannelTimed() {
            throw "Mix_FadeInChannelTimed"
        }
        Module["_Mix_FadeInChannelTimed"] = _Mix_FadeInChannelTimed;
        function _Mix_FadeOutChannel() {
            throw "Mix_FadeOutChannel"
        }
        Module["_Mix_FadeOutChannel"] = _Mix_FadeOutChannel;
        function _Mix_Linked_Version() {
            throw "Mix_Linked_Version: TODO"
        }
        Module["_Mix_Linked_Version"] = _Mix_Linked_Version;
        function _SDL_SaveBMP_RW() {
            throw "SDL_SaveBMP_RW: TODO"
        }
        Module["_SDL_SaveBMP_RW"] = _SDL_SaveBMP_RW;
        function _SDL_WM_SetIcon() {}
        Module["_SDL_WM_SetIcon"] = _SDL_WM_SetIcon;
        function _SDL_HasRDTSC() {
            return 0
        }
        Module["_SDL_HasRDTSC"] = _SDL_HasRDTSC;
        function _SDL_HasMMX() {
            return 0
        }
        Module["_SDL_HasMMX"] = _SDL_HasMMX;
        function _SDL_HasMMXExt() {
            return 0
        }
        Module["_SDL_HasMMXExt"] = _SDL_HasMMXExt;
        function _SDL_Has3DNow() {
            return 0
        }
        Module["_SDL_Has3DNow"] = _SDL_Has3DNow;
        function _SDL_Has3DNowExt() {
            return 0
        }
        Module["_SDL_Has3DNowExt"] = _SDL_Has3DNowExt;
        function _SDL_HasSSE() {
            return 0
        }
        Module["_SDL_HasSSE"] = _SDL_HasSSE;
        function _SDL_HasSSE2() {
            return 0
        }
        Module["_SDL_HasSSE2"] = _SDL_HasSSE2;
        function _SDL_HasAltiVec() {
            return 0
        }
        Module["_SDL_HasAltiVec"] = _SDL_HasAltiVec;
        function _glutPostRedisplay() {
            if (GLUT.displayFunc && !GLUT.requestedAnimationFrame) {
                GLUT.requestedAnimationFrame = true;
                Browser.requestAnimationFrame(function() {
                    GLUT.requestedAnimationFrame = false;
                    Browser.mainLoop.runIter(function() {
                        getWasmTableEntry(GLUT.displayFunc)()
                    })
                })
            }
        }
        Module["_glutPostRedisplay"] = _glutPostRedisplay;
        _glutPostRedisplay.sig = "v";
        var GLUT = {
            initTime: null,
            idleFunc: null,
            displayFunc: null,
            keyboardFunc: null,
            keyboardUpFunc: null,
            specialFunc: null,
            specialUpFunc: null,
            reshapeFunc: null,
            motionFunc: null,
            passiveMotionFunc: null,
            mouseFunc: null,
            buttons: 0,
            modifiers: 0,
            initWindowWidth: 256,
            initWindowHeight: 256,
            initDisplayMode: 18,
            windowX: 0,
            windowY: 0,
            windowWidth: 0,
            windowHeight: 0,
            requestedAnimationFrame: false,
            saveModifiers: function(event) {
                GLUT.modifiers = 0;
                if (event["shiftKey"])
                    GLUT.modifiers += 1;
                if (event["ctrlKey"])
                    GLUT.modifiers += 2;
                if (event["altKey"])
                    GLUT.modifiers += 4
            },
            onMousemove: function(event) {
                var lastX = Browser.mouseX;
                var lastY = Browser.mouseY;
                Browser.calculateMouseEvent(event);
                var newX = Browser.mouseX;
                var newY = Browser.mouseY;
                if (newX == lastX && newY == lastY)
                    return;
                if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    getWasmTableEntry(GLUT.passiveMotionFunc)(lastX, lastY)
                } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    getWasmTableEntry(GLUT.motionFunc)(lastX, lastY)
                }
            },
            getSpecialKey: function(keycode) {
                var key = null;
                switch (keycode) {
                case 8:
                    key = 120;
                    break;
                case 46:
                    key = 111;
                    break;
                case 112:
                    key = 1;
                    break;
                case 113:
                    key = 2;
                    break;
                case 114:
                    key = 3;
                    break;
                case 115:
                    key = 4;
                    break;
                case 116:
                    key = 5;
                    break;
                case 117:
                    key = 6;
                    break;
                case 118:
                    key = 7;
                    break;
                case 119:
                    key = 8;
                    break;
                case 120:
                    key = 9;
                    break;
                case 121:
                    key = 10;
                    break;
                case 122:
                    key = 11;
                    break;
                case 123:
                    key = 12;
                    break;
                case 37:
                    key = 100;
                    break;
                case 38:
                    key = 101;
                    break;
                case 39:
                    key = 102;
                    break;
                case 40:
                    key = 103;
                    break;
                case 33:
                    key = 104;
                    break;
                case 34:
                    key = 105;
                    break;
                case 36:
                    key = 106;
                    break;
                case 35:
                    key = 107;
                    break;
                case 45:
                    key = 108;
                    break;
                case 16:
                case 5:
                    key = 112;
                    break;
                case 6:
                    key = 113;
                    break;
                case 17:
                case 3:
                    key = 114;
                    break;
                case 4:
                    key = 115;
                    break;
                case 18:
                case 2:
                    key = 116;
                    break;
                case 1:
                    key = 117;
                    break
                }
                return key
            },
            getASCIIKey: function(event) {
                if (event["ctrlKey"] || event["altKey"] || event["metaKey"])
                    return null;
                var keycode = event["keyCode"];
                if (48 <= keycode && keycode <= 57)
                    return keycode;
                if (65 <= keycode && keycode <= 90)
                    return event["shiftKey"] ? keycode : keycode + 32;
                if (96 <= keycode && keycode <= 105)
                    return keycode - 48;
                if (106 <= keycode && keycode <= 111)
                    return keycode - 106 + 42;
                switch (keycode) {
                case 9:
                case 13:
                case 27:
                case 32:
                case 61:
                    return keycode
                }
                var s = event["shiftKey"];
                switch (keycode) {
                case 186:
                    return s ? 58 : 59;
                case 187:
                    return s ? 43 : 61;
                case 188:
                    return s ? 60 : 44;
                case 189:
                    return s ? 95 : 45;
                case 190:
                    return s ? 62 : 46;
                case 191:
                    return s ? 63 : 47;
                case 219:
                    return s ? 123 : 91;
                case 220:
                    return s ? 124 : 47;
                case 221:
                    return s ? 125 : 93;
                case 222:
                    return s ? 34 : 39
                }
                return null
            },
            onKeydown: function(event) {
                if (GLUT.specialFunc || GLUT.keyboardFunc) {
                    var key = GLUT.getSpecialKey(event["keyCode"]);
                    if (key !== null) {
                        if (GLUT.specialFunc) {
                            event.preventDefault();
                            GLUT.saveModifiers(event);
                            getWasmTableEntry(GLUT.specialFunc)(key, Browser.mouseX, Browser.mouseY)
                        }
                    } else {
                        key = GLUT.getASCIIKey(event);
                        if (key !== null && GLUT.keyboardFunc) {
                            event.preventDefault();
                            GLUT.saveModifiers(event);
                            getWasmTableEntry(GLUT.keyboardFunc)(key, Browser.mouseX, Browser.mouseY)
                        }
                    }
                }
            },
            onKeyup: function(event) {
                if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
                    var key = GLUT.getSpecialKey(event["keyCode"]);
                    if (key !== null) {
                        if (GLUT.specialUpFunc) {
                            event.preventDefault();
                            GLUT.saveModifiers(event);
                            getWasmTableEntry(GLUT.specialUpFunc)(key, Browser.mouseX, Browser.mouseY)
                        }
                    } else {
                        key = GLUT.getASCIIKey(event);
                        if (key !== null && GLUT.keyboardUpFunc) {
                            event.preventDefault();
                            GLUT.saveModifiers(event);
                            getWasmTableEntry(GLUT.keyboardUpFunc)(key, Browser.mouseX, Browser.mouseY)
                        }
                    }
                }
            },
            touchHandler: function(event) {
                if (event.target != Module["canvas"]) {
                    return
                }
                var touches = event.changedTouches
                  , main = touches[0]
                  , type = "";
                switch (event.type) {
                case "touchstart":
                    type = "mousedown";
                    break;
                case "touchmove":
                    type = "mousemove";
                    break;
                case "touchend":
                    type = "mouseup";
                    break;
                default:
                    return
                }
                var simulatedEvent = document.createEvent("MouseEvent");
                simulatedEvent.initMouseEvent(type, true, true, window, 1, main.screenX, main.screenY, main.clientX, main.clientY, false, false, false, false, 0, null);
                main.target.dispatchEvent(simulatedEvent);
                event.preventDefault()
            },
            onMouseButtonDown: function(event) {
                Browser.calculateMouseEvent(event);
                GLUT.buttons |= 1 << event["button"];
                if (event.target == Module["canvas"] && GLUT.mouseFunc) {
                    try {
                        event.target.setCapture()
                    } catch (e) {}
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    getWasmTableEntry(GLUT.mouseFunc)(event["button"], 0, Browser.mouseX, Browser.mouseY)
                }
            },
            onMouseButtonUp: function(event) {
                Browser.calculateMouseEvent(event);
                GLUT.buttons &= ~(1 << event["button"]);
                if (GLUT.mouseFunc) {
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    getWasmTableEntry(GLUT.mouseFunc)(event["button"], 1, Browser.mouseX, Browser.mouseY)
                }
            },
            onMouseWheel: function(event) {
                Browser.calculateMouseEvent(event);
                var e = window.event || event;
                var delta = -Browser.getMouseWheelDelta(event);
                delta = delta == 0 ? 0 : delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1);
                var button = 3;
                if (delta < 0) {
                    button = 4
                }
                if (GLUT.mouseFunc) {
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    getWasmTableEntry(GLUT.mouseFunc)(button, 0, Browser.mouseX, Browser.mouseY)
                }
            },
            onFullscreenEventChange: function(event) {
                var width;
                var height;
                if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
                    width = screen["width"];
                    height = screen["height"]
                } else {
                    width = GLUT.windowWidth;
                    height = GLUT.windowHeight;
                    document.removeEventListener("fullscreenchange", GLUT.onFullscreenEventChange, true);
                    document.removeEventListener("mozfullscreenchange", GLUT.onFullscreenEventChange, true);
                    document.removeEventListener("webkitfullscreenchange", GLUT.onFullscreenEventChange, true)
                }
                Browser.setCanvasSize(width, height, true);
                if (GLUT.reshapeFunc) {
                    getWasmTableEntry(GLUT.reshapeFunc)(width, height)
                }
                _glutPostRedisplay()
            }
        };
        Module["GLUT"] = GLUT;
        function _glutGetModifiers() {
            return GLUT.modifiers
        }
        Module["_glutGetModifiers"] = _glutGetModifiers;
        _glutGetModifiers.sig = "i";
        function _glutInit(argcp, argv) {
            GLUT.initTime = Date.now();
            var isTouchDevice = "ontouchstart"in document.documentElement;
            if (isTouchDevice) {
                window.addEventListener("touchmove", GLUT.touchHandler, true);
                window.addEventListener("touchstart", GLUT.touchHandler, true);
                window.addEventListener("touchend", GLUT.touchHandler, true)
            }
            window.addEventListener("keydown", GLUT.onKeydown, true);
            window.addEventListener("keyup", GLUT.onKeyup, true);
            window.addEventListener("mousemove", GLUT.onMousemove, true);
            window.addEventListener("mousedown", GLUT.onMouseButtonDown, true);
            window.addEventListener("mouseup", GLUT.onMouseButtonUp, true);
            window.addEventListener("mousewheel", GLUT.onMouseWheel, true);
            window.addEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
            Browser.resizeListeners.push(function(width, height) {
                if (GLUT.reshapeFunc) {
                    getWasmTableEntry(GLUT.reshapeFunc)(width, height)
                }
            });
            __ATEXIT__.push(function() {
                if (isTouchDevice) {
                    window.removeEventListener("touchmove", GLUT.touchHandler, true);
                    window.removeEventListener("touchstart", GLUT.touchHandler, true);
                    window.removeEventListener("touchend", GLUT.touchHandler, true)
                }
                window.removeEventListener("keydown", GLUT.onKeydown, true);
                window.removeEventListener("keyup", GLUT.onKeyup, true);
                window.removeEventListener("mousemove", GLUT.onMousemove, true);
                window.removeEventListener("mousedown", GLUT.onMouseButtonDown, true);
                window.removeEventListener("mouseup", GLUT.onMouseButtonUp, true);
                window.removeEventListener("mousewheel", GLUT.onMouseWheel, true);
                window.removeEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
                Module["canvas"].width = Module["canvas"].height = 1
            })
        }
        Module["_glutInit"] = _glutInit;
        _glutInit.sig = "vii";
        function _glutInitWindowSize(width, height) {
            Browser.setCanvasSize(GLUT.initWindowWidth = width, GLUT.initWindowHeight = height)
        }
        Module["_glutInitWindowSize"] = _glutInitWindowSize;
        _glutInitWindowSize.sig = "vii";
        function _glutInitWindowPosition(x, y) {}
        Module["_glutInitWindowPosition"] = _glutInitWindowPosition;
        _glutInitWindowPosition.sig = "vii";
        function _glutGet(type) {
            switch (type) {
            case 100:
                return 0;
            case 101:
                return 0;
            case 102:
                return Module["canvas"].width;
            case 103:
                return Module["canvas"].height;
            case 200:
                return Module["canvas"].width;
            case 201:
                return Module["canvas"].height;
            case 500:
                return 0;
            case 501:
                return 0;
            case 502:
                return GLUT.initWindowWidth;
            case 503:
                return GLUT.initWindowHeight;
            case 700:
                var now = Date.now();
                return now - GLUT.initTime;
            case 105:
                return Module.ctx.getContextAttributes().stencil ? 8 : 0;
            case 106:
                return Module.ctx.getContextAttributes().depth ? 8 : 0;
            case 110:
                return Module.ctx.getContextAttributes().alpha ? 8 : 0;
            case 120:
                return Module.ctx.getContextAttributes().antialias ? 1 : 0;
            default:
                throw "glutGet(" + type + ") not implemented yet"
            }
        }
        Module["_glutGet"] = _glutGet;
        function _glutIdleFunc(func) {
            function callback() {
                if (GLUT.idleFunc) {
                    getWasmTableEntry(GLUT.idleFunc)();
                    safeSetTimeout(callback, 4)
                }
            }
            if (!GLUT.idleFunc) {
                safeSetTimeout(callback, 0)
            }
            GLUT.idleFunc = func
        }
        Module["_glutIdleFunc"] = _glutIdleFunc;
        _glutIdleFunc.sig = "vi";
        function _glutTimerFunc(msec, func, value) {
            safeSetTimeout(function() {
                getWasmTableEntry(func)(value)
            }, msec)
        }
        Module["_glutTimerFunc"] = _glutTimerFunc;
        _glutTimerFunc.sig = "viii";
        function _glutDisplayFunc(func) {
            GLUT.displayFunc = func
        }
        Module["_glutDisplayFunc"] = _glutDisplayFunc;
        _glutDisplayFunc.sig = "vi";
        function _glutKeyboardFunc(func) {
            GLUT.keyboardFunc = func
        }
        Module["_glutKeyboardFunc"] = _glutKeyboardFunc;
        _glutKeyboardFunc.sig = "vi";
        function _glutKeyboardUpFunc(func) {
            GLUT.keyboardUpFunc = func
        }
        Module["_glutKeyboardUpFunc"] = _glutKeyboardUpFunc;
        _glutKeyboardUpFunc.sig = "vi";
        function _glutSpecialFunc(func) {
            GLUT.specialFunc = func
        }
        Module["_glutSpecialFunc"] = _glutSpecialFunc;
        _glutSpecialFunc.sig = "vi";
        function _glutSpecialUpFunc(func) {
            GLUT.specialUpFunc = func
        }
        Module["_glutSpecialUpFunc"] = _glutSpecialUpFunc;
        _glutSpecialUpFunc.sig = "vi";
        function _glutReshapeFunc(func) {
            GLUT.reshapeFunc = func
        }
        Module["_glutReshapeFunc"] = _glutReshapeFunc;
        _glutReshapeFunc.sig = "vi";
        function _glutMotionFunc(func) {
            GLUT.motionFunc = func
        }
        Module["_glutMotionFunc"] = _glutMotionFunc;
        _glutMotionFunc.sig = "vi";
        function _glutPassiveMotionFunc(func) {
            GLUT.passiveMotionFunc = func
        }
        Module["_glutPassiveMotionFunc"] = _glutPassiveMotionFunc;
        _glutPassiveMotionFunc.sig = "vi";
        function _glutMouseFunc(func) {
            GLUT.mouseFunc = func
        }
        Module["_glutMouseFunc"] = _glutMouseFunc;
        _glutMouseFunc.sig = "vi";
        function _glutSetCursor(cursor) {
            var cursorStyle = "auto";
            switch (cursor) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                cursorStyle = "pointer";
                break;
            case 3:
                break;
            case 4:
                cursorStyle = "help";
                break;
            case 5:
                break;
            case 6:
                break;
            case 7:
                cursorStyle = "wait";
                break;
            case 8:
                cursorStyle = "text";
                break;
            case 9:
            case 102:
                cursorStyle = "crosshair";
                break;
            case 10:
                cursorStyle = "ns-resize";
                break;
            case 11:
                cursorStyle = "ew-resize";
                break;
            case 12:
                cursorStyle = "n-resize";
                break;
            case 13:
                cursorStyle = "s-resize";
                break;
            case 14:
                cursorStyle = "w-resize";
                break;
            case 15:
                cursorStyle = "e-resize";
                break;
            case 16:
                cursorStyle = "nw-resize";
                break;
            case 17:
                cursorStyle = "ne-resize";
                break;
            case 18:
                cursorStyle = "se-resize";
                break;
            case 19:
                cursorStyle = "sw-resize";
                break;
            case 100:
                break;
            case 101:
                cursorStyle = "none";
                break;
            default:
                throw "glutSetCursor: Unknown cursor type: " + cursor
            }
            Module["canvas"].style.cursor = cursorStyle
        }
        Module["_glutSetCursor"] = _glutSetCursor;
        _glutSetCursor.sig = "vi";
        function _glutCreateWindow(name) {
            var contextAttributes = {
                antialias: (GLUT.initDisplayMode & 128) != 0,
                depth: (GLUT.initDisplayMode & 16) != 0,
                stencil: (GLUT.initDisplayMode & 32) != 0,
                alpha: (GLUT.initDisplayMode & 8) != 0
            };
            Module.ctx = Browser.createContext(Module["canvas"], true, true, contextAttributes);
            return Module.ctx ? 1 : 0
        }
        Module["_glutCreateWindow"] = _glutCreateWindow;
        _glutCreateWindow.sig = "ii";
        function _glutDestroyWindow(name) {
            Module.ctx = Browser.destroyContext(Module["canvas"], true, true);
            return 1
        }
        Module["_glutDestroyWindow"] = _glutDestroyWindow;
        _glutDestroyWindow.sig = "ii";
        function _glutReshapeWindow(width, height) {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height, true);
            if (GLUT.reshapeFunc) {
                getWasmTableEntry(GLUT.reshapeFunc)(width, height)
            }
            _glutPostRedisplay()
        }
        Module["_glutReshapeWindow"] = _glutReshapeWindow;
        _glutReshapeWindow.sig = "vi";
        function _glutPositionWindow(x, y) {
            Browser.exitFullscreen();
            _glutPostRedisplay()
        }
        Module["_glutPositionWindow"] = _glutPositionWindow;
        _glutPositionWindow.sig = "vii";
        function _glutFullScreen() {
            GLUT.windowX = 0;
            GLUT.windowY = 0;
            GLUT.windowWidth = Module["canvas"].width;
            GLUT.windowHeight = Module["canvas"].height;
            document.addEventListener("fullscreenchange", GLUT.onFullscreenEventChange, true);
            document.addEventListener("mozfullscreenchange", GLUT.onFullscreenEventChange, true);
            document.addEventListener("webkitfullscreenchange", GLUT.onFullscreenEventChange, true);
            Browser.requestFullscreen(false, false)
        }
        Module["_glutFullScreen"] = _glutFullScreen;
        _glutFullScreen.sig = "v";
        function _glutInitDisplayMode(mode) {
            GLUT.initDisplayMode = mode
        }
        Module["_glutInitDisplayMode"] = _glutInitDisplayMode;
        _glutInitDisplayMode.sig = "vi";
        function _glutSwapBuffers() {}
        Module["_glutSwapBuffers"] = _glutSwapBuffers;
        _glutSwapBuffers.sig = "v";
        function _glutMainLoop() {
            _glutReshapeWindow(Module["canvas"].width, Module["canvas"].height);
            _glutPostRedisplay();
            throw "unwind"
        }
        Module["_glutMainLoop"] = _glutMainLoop;
        _glutMainLoop.sig = "v";
        function _XOpenDisplay() {
            return 1
        }
        Module["_XOpenDisplay"] = _XOpenDisplay;
        function _XCreateWindow(display, parent, x, y, width, height, border_width, depth, class_, visual, valuemask, attributes) {
            Browser.setCanvasSize(width, height);
            return 2
        }
        Module["_XCreateWindow"] = _XCreateWindow;
        function _XChangeWindowAttributes() {}
        Module["_XChangeWindowAttributes"] = _XChangeWindowAttributes;
        function _XSetWMHints() {}
        Module["_XSetWMHints"] = _XSetWMHints;
        function _XMapWindow() {}
        Module["_XMapWindow"] = _XMapWindow;
        function _XStoreName() {}
        Module["_XStoreName"] = _XStoreName;
        function _XInternAtom(display, name_, hmm) {
            return 0
        }
        Module["_XInternAtom"] = _XInternAtom;
        function _XSendEvent() {}
        Module["_XSendEvent"] = _XSendEvent;
        function _XPending(display) {
            return 0
        }
        Module["_XPending"] = _XPending;
        var EGL = {
            errorCode: 12288,
            defaultDisplayInitialized: false,
            currentContext: 0,
            currentReadSurface: 0,
            currentDrawSurface: 0,
            contextAttributes: {
                alpha: false,
                depth: false,
                stencil: false,
                antialias: false
            },
            stringCache: {},
            setErrorCode: function(code) {
                EGL.errorCode = code
            },
            chooseConfig: function(display, attribList, config, config_size, numConfigs) {
                if (display != 62e3) {
                    EGL.setErrorCode(12296);
                    return 0
                }
                if (attribList) {
                    for (; ; ) {
                        var param = HEAP32[attribList >> 2];
                        if (param == 12321) {
                            var alphaSize = HEAP32[attribList + 4 >> 2];
                            EGL.contextAttributes.alpha = alphaSize > 0
                        } else if (param == 12325) {
                            var depthSize = HEAP32[attribList + 4 >> 2];
                            EGL.contextAttributes.depth = depthSize > 0
                        } else if (param == 12326) {
                            var stencilSize = HEAP32[attribList + 4 >> 2];
                            EGL.contextAttributes.stencil = stencilSize > 0
                        } else if (param == 12337) {
                            var samples = HEAP32[attribList + 4 >> 2];
                            EGL.contextAttributes.antialias = samples > 0
                        } else if (param == 12338) {
                            var samples = HEAP32[attribList + 4 >> 2];
                            EGL.contextAttributes.antialias = samples == 1
                        } else if (param == 12544) {
                            var requestedPriority = HEAP32[attribList + 4 >> 2];
                            EGL.contextAttributes.lowLatency = requestedPriority != 12547
                        } else if (param == 12344) {
                            break
                        }
                        attribList += 8
                    }
                }
                if ((!config || !config_size) && !numConfigs) {
                    EGL.setErrorCode(12300);
                    return 0
                }
                if (numConfigs) {
                    HEAP32[numConfigs >> 2] = 1
                }
                if (config && config_size > 0) {
                    HEAP32[config >> 2] = 62002
                }
                EGL.setErrorCode(12288);
                return 1
            }
        };
        Module["EGL"] = EGL;
        function _eglGetDisplay(nativeDisplayType) {
            EGL.setErrorCode(12288);
            return 62e3
        }
        Module["_eglGetDisplay"] = _eglGetDisplay;
        _eglGetDisplay.sig = "ii";
        function _eglInitialize(display, majorVersion, minorVersion) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (majorVersion) {
                HEAP32[majorVersion >> 2] = 1
            }
            if (minorVersion) {
                HEAP32[minorVersion >> 2] = 4
            }
            EGL.defaultDisplayInitialized = true;
            EGL.setErrorCode(12288);
            return 1
        }
        Module["_eglInitialize"] = _eglInitialize;
        _eglInitialize.sig = "iiii";
        function _eglTerminate(display) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            EGL.currentContext = 0;
            EGL.currentReadSurface = 0;
            EGL.currentDrawSurface = 0;
            EGL.defaultDisplayInitialized = false;
            EGL.setErrorCode(12288);
            return 1
        }
        Module["_eglTerminate"] = _eglTerminate;
        _eglTerminate.sig = "ii";
        function _eglGetConfigs(display, configs, config_size, numConfigs) {
            return EGL.chooseConfig(display, 0, configs, config_size, numConfigs)
        }
        Module["_eglGetConfigs"] = _eglGetConfigs;
        _eglGetConfigs.sig = "iiiii";
        function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) {
            return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs)
        }
        Module["_eglChooseConfig"] = _eglChooseConfig;
        _eglChooseConfig.sig = "iiiiii";
        function _eglGetConfigAttrib(display, config, attribute, value) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (config != 62002) {
                EGL.setErrorCode(12293);
                return 0
            }
            if (!value) {
                EGL.setErrorCode(12300);
                return 0
            }
            EGL.setErrorCode(12288);
            switch (attribute) {
            case 12320:
                HEAP32[value >> 2] = EGL.contextAttributes.alpha ? 32 : 24;
                return 1;
            case 12321:
                HEAP32[value >> 2] = EGL.contextAttributes.alpha ? 8 : 0;
                return 1;
            case 12322:
                HEAP32[value >> 2] = 8;
                return 1;
            case 12323:
                HEAP32[value >> 2] = 8;
                return 1;
            case 12324:
                HEAP32[value >> 2] = 8;
                return 1;
            case 12325:
                HEAP32[value >> 2] = EGL.contextAttributes.depth ? 24 : 0;
                return 1;
            case 12326:
                HEAP32[value >> 2] = EGL.contextAttributes.stencil ? 8 : 0;
                return 1;
            case 12327:
                HEAP32[value >> 2] = 12344;
                return 1;
            case 12328:
                HEAP32[value >> 2] = 62002;
                return 1;
            case 12329:
                HEAP32[value >> 2] = 0;
                return 1;
            case 12330:
                HEAP32[value >> 2] = 4096;
                return 1;
            case 12331:
                HEAP32[value >> 2] = 16777216;
                return 1;
            case 12332:
                HEAP32[value >> 2] = 4096;
                return 1;
            case 12333:
                HEAP32[value >> 2] = 0;
                return 1;
            case 12334:
                HEAP32[value >> 2] = 0;
                return 1;
            case 12335:
                HEAP32[value >> 2] = 12344;
                return 1;
            case 12337:
                HEAP32[value >> 2] = EGL.contextAttributes.antialias ? 4 : 0;
                return 1;
            case 12338:
                HEAP32[value >> 2] = EGL.contextAttributes.antialias ? 1 : 0;
                return 1;
            case 12339:
                HEAP32[value >> 2] = 4;
                return 1;
            case 12340:
                HEAP32[value >> 2] = 12344;
                return 1;
            case 12341:
            case 12342:
            case 12343:
                HEAP32[value >> 2] = -1;
                return 1;
            case 12345:
            case 12346:
                HEAP32[value >> 2] = 0;
                return 1;
            case 12347:
                HEAP32[value >> 2] = 0;
                return 1;
            case 12348:
                HEAP32[value >> 2] = 1;
                return 1;
            case 12349:
            case 12350:
                HEAP32[value >> 2] = 0;
                return 1;
            case 12351:
                HEAP32[value >> 2] = 12430;
                return 1;
            case 12352:
                HEAP32[value >> 2] = 4;
                return 1;
            case 12354:
                HEAP32[value >> 2] = 0;
                return 1;
            default:
                EGL.setErrorCode(12292);
                return 0
            }
        }
        Module["_eglGetConfigAttrib"] = _eglGetConfigAttrib;
        _eglGetConfigAttrib.sig = "iiiii";
        function _eglCreateWindowSurface(display, config, win, attrib_list) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (config != 62002) {
                EGL.setErrorCode(12293);
                return 0
            }
            EGL.setErrorCode(12288);
            return 62006
        }
        Module["_eglCreateWindowSurface"] = _eglCreateWindowSurface;
        _eglCreateWindowSurface.sig = "iiiii";
        function _eglDestroySurface(display, surface) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (surface != 62006) {
                EGL.setErrorCode(12301);
                return 1
            }
            if (EGL.currentReadSurface == surface) {
                EGL.currentReadSurface = 0
            }
            if (EGL.currentDrawSurface == surface) {
                EGL.currentDrawSurface = 0
            }
            EGL.setErrorCode(12288);
            return 1
        }
        Module["_eglDestroySurface"] = _eglDestroySurface;
        _eglDestroySurface.sig = "iii";
        function _eglCreateContext(display, config, hmm, contextAttribs) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            var glesContextVersion = 1;
            for (; ; ) {
                var param = HEAP32[contextAttribs >> 2];
                if (param == 12440) {
                    glesContextVersion = HEAP32[contextAttribs + 4 >> 2]
                } else if (param == 12344) {
                    break
                } else {
                    EGL.setErrorCode(12292);
                    return 0
                }
                contextAttribs += 8
            }
            if (glesContextVersion != 2) {
                EGL.setErrorCode(12293);
                return 0
            }
            EGL.contextAttributes.majorVersion = glesContextVersion - 1;
            EGL.contextAttributes.minorVersion = 0;
            EGL.context = GL.createContext(Module["canvas"], EGL.contextAttributes);
            if (EGL.context != 0) {
                EGL.setErrorCode(12288);
                GL.makeContextCurrent(EGL.context);
                Module.useWebGL = true;
                Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
                    callback()
                });
                GL.makeContextCurrent(null);
                return 62004
            } else {
                EGL.setErrorCode(12297);
                return 0
            }
        }
        Module["_eglCreateContext"] = _eglCreateContext;
        _eglCreateContext.sig = "iiiii";
        function _eglDestroyContext(display, context) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (context != 62004) {
                EGL.setErrorCode(12294);
                return 0
            }
            GL.deleteContext(EGL.context);
            EGL.setErrorCode(12288);
            if (EGL.currentContext == context) {
                EGL.currentContext = 0
            }
            return 1
        }
        Module["_eglDestroyContext"] = _eglDestroyContext;
        _eglDestroyContext.sig = "iii";
        function _eglQuerySurface(display, surface, attribute, value) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (surface != 62006) {
                EGL.setErrorCode(12301);
                return 0
            }
            if (!value) {
                EGL.setErrorCode(12300);
                return 0
            }
            EGL.setErrorCode(12288);
            switch (attribute) {
            case 12328:
                HEAP32[value >> 2] = 62002;
                return 1;
            case 12376:
                return 1;
            case 12375:
                HEAP32[value >> 2] = Module["canvas"].width;
                return 1;
            case 12374:
                HEAP32[value >> 2] = Module["canvas"].height;
                return 1;
            case 12432:
                HEAP32[value >> 2] = -1;
                return 1;
            case 12433:
                HEAP32[value >> 2] = -1;
                return 1;
            case 12434:
                HEAP32[value >> 2] = -1;
                return 1;
            case 12422:
                HEAP32[value >> 2] = 12420;
                return 1;
            case 12441:
                HEAP32[value >> 2] = 12442;
                return 1;
            case 12435:
                HEAP32[value >> 2] = 12437;
                return 1;
            case 12416:
            case 12417:
            case 12418:
            case 12419:
                return 1;
            default:
                EGL.setErrorCode(12292);
                return 0
            }
        }
        Module["_eglQuerySurface"] = _eglQuerySurface;
        _eglQuerySurface.sig = "iiiii";
        function _eglQueryContext(display, context, attribute, value) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (context != 62004) {
                EGL.setErrorCode(12294);
                return 0
            }
            if (!value) {
                EGL.setErrorCode(12300);
                return 0
            }
            EGL.setErrorCode(12288);
            switch (attribute) {
            case 12328:
                HEAP32[value >> 2] = 62002;
                return 1;
            case 12439:
                HEAP32[value >> 2] = 12448;
                return 1;
            case 12440:
                HEAP32[value >> 2] = EGL.contextAttributes.majorVersion + 1;
                return 1;
            case 12422:
                HEAP32[value >> 2] = 12420;
                return 1;
            default:
                EGL.setErrorCode(12292);
                return 0
            }
        }
        Module["_eglQueryContext"] = _eglQueryContext;
        _eglQueryContext.sig = "iiiii";
        function _eglGetError() {
            return EGL.errorCode
        }
        Module["_eglGetError"] = _eglGetError;
        _eglGetError.sig = "i";
        function _eglQueryString(display, name) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            EGL.setErrorCode(12288);
            if (EGL.stringCache[name])
                return EGL.stringCache[name];
            var ret;
            switch (name) {
            case 12371:
                ret = allocateUTF8("Emscripten");
                break;
            case 12372:
                ret = allocateUTF8("1.4 Emscripten EGL");
                break;
            case 12373:
                ret = allocateUTF8("");
                break;
            case 12429:
                ret = allocateUTF8("OpenGL_ES");
                break;
            default:
                EGL.setErrorCode(12300);
                return 0
            }
            EGL.stringCache[name] = ret;
            return ret
        }
        Module["_eglQueryString"] = _eglQueryString;
        _eglQueryString.sig = "iii";
        function _eglBindAPI(api) {
            if (api == 12448) {
                EGL.setErrorCode(12288);
                return 1
            }
            EGL.setErrorCode(12300);
            return 0
        }
        Module["_eglBindAPI"] = _eglBindAPI;
        _eglBindAPI.sig = "ii";
        function _eglQueryAPI() {
            EGL.setErrorCode(12288);
            return 12448
        }
        Module["_eglQueryAPI"] = _eglQueryAPI;
        _eglQueryAPI.sig = "i";
        function _eglWaitClient() {
            EGL.setErrorCode(12288);
            return 1
        }
        Module["_eglWaitClient"] = _eglWaitClient;
        _eglWaitClient.sig = "i";
        function _eglWaitNative(nativeEngineId) {
            EGL.setErrorCode(12288);
            return 1
        }
        Module["_eglWaitNative"] = _eglWaitNative;
        _eglWaitNative.sig = "ii";
        var _eglWaitGL = _eglWaitClient;
        Module["_eglWaitGL"] = _eglWaitGL;
        function _eglSwapInterval(display, interval) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (interval == 0)
                _emscripten_set_main_loop_timing(0, 0);
            else
                _emscripten_set_main_loop_timing(1, interval);
            EGL.setErrorCode(12288);
            return 1
        }
        Module["_eglSwapInterval"] = _eglSwapInterval;
        _eglSwapInterval.sig = "iii";
        function _eglMakeCurrent(display, draw, read, context) {
            if (display != 62e3) {
                EGL.setErrorCode(12296);
                return 0
            }
            if (context != 0 && context != 62004) {
                EGL.setErrorCode(12294);
                return 0
            }
            if (read != 0 && read != 62006 || draw != 0 && draw != 62006) {
                EGL.setErrorCode(12301);
                return 0
            }
            GL.makeContextCurrent(context ? EGL.context : null);
            EGL.currentContext = context;
            EGL.currentDrawSurface = draw;
            EGL.currentReadSurface = read;
            EGL.setErrorCode(12288);
            return 1
        }
        Module["_eglMakeCurrent"] = _eglMakeCurrent;
        _eglMakeCurrent.sig = "iiiii";
        function _eglGetCurrentContext() {
            return EGL.currentContext
        }
        Module["_eglGetCurrentContext"] = _eglGetCurrentContext;
        _eglGetCurrentContext.sig = "i";
        function _eglGetCurrentSurface(readdraw) {
            if (readdraw == 12378) {
                return EGL.currentReadSurface
            } else if (readdraw == 12377) {
                return EGL.currentDrawSurface
            } else {
                EGL.setErrorCode(12300);
                return 0
            }
        }
        Module["_eglGetCurrentSurface"] = _eglGetCurrentSurface;
        _eglGetCurrentSurface.sig = "ii";
        function _eglGetCurrentDisplay() {
            return EGL.currentContext ? 62e3 : 0
        }
        Module["_eglGetCurrentDisplay"] = _eglGetCurrentDisplay;
        _eglGetCurrentDisplay.sig = "i";
        function _eglSwapBuffers() {
            if (!EGL.defaultDisplayInitialized) {
                EGL.setErrorCode(12289)
            } else if (!Module.ctx) {
                EGL.setErrorCode(12290)
            } else if (Module.ctx.isContextLost()) {
                EGL.setErrorCode(12302)
            } else {
                EGL.setErrorCode(12288);
                return 1
            }
            return 0
        }
        Module["_eglSwapBuffers"] = _eglSwapBuffers;
        _eglSwapBuffers.sig = "iii";
        function _eglReleaseThread() {
            EGL.currentContext = 0;
            EGL.currentReadSurface = 0;
            EGL.currentDrawSurface = 0;
            EGL.setErrorCode(12288);
            return 1
        }
        Module["_eglReleaseThread"] = _eglReleaseThread;
        _eglReleaseThread.sig = "i";
        var GLFW = {
            WindowFromId: function(id) {
                if (id <= 0 || !GLFW.windows)
                    return null;
                return GLFW.windows[id - 1]
            },
            joystickFunc: null,
            errorFunc: null,
            monitorFunc: null,
            active: null,
            windows: null,
            monitors: null,
            monitorString: null,
            versionString: null,
            initialTime: null,
            extensions: null,
            hints: null,
            defaultHints: {
                131073: 0,
                131074: 0,
                131075: 1,
                131076: 1,
                131077: 1,
                135169: 8,
                135170: 8,
                135171: 8,
                135172: 8,
                135173: 24,
                135174: 8,
                135175: 0,
                135176: 0,
                135177: 0,
                135178: 0,
                135179: 0,
                135180: 0,
                135181: 0,
                135182: 0,
                135183: 0,
                139265: 196609,
                139266: 1,
                139267: 0,
                139268: 0,
                139269: 0,
                139270: 0,
                139271: 0,
                139272: 0
            },
            DOMToGLFWKeyCode: function(keycode) {
                switch (keycode) {
                case 32:
                    return 32;
                case 222:
                    return 39;
                case 188:
                    return 44;
                case 173:
                    return 45;
                case 189:
                    return 45;
                case 190:
                    return 46;
                case 191:
                    return 47;
                case 48:
                    return 48;
                case 49:
                    return 49;
                case 50:
                    return 50;
                case 51:
                    return 51;
                case 52:
                    return 52;
                case 53:
                    return 53;
                case 54:
                    return 54;
                case 55:
                    return 55;
                case 56:
                    return 56;
                case 57:
                    return 57;
                case 59:
                    return 59;
                case 61:
                    return 61;
                case 187:
                    return 61;
                case 65:
                    return 65;
                case 66:
                    return 66;
                case 67:
                    return 67;
                case 68:
                    return 68;
                case 69:
                    return 69;
                case 70:
                    return 70;
                case 71:
                    return 71;
                case 72:
                    return 72;
                case 73:
                    return 73;
                case 74:
                    return 74;
                case 75:
                    return 75;
                case 76:
                    return 76;
                case 77:
                    return 77;
                case 78:
                    return 78;
                case 79:
                    return 79;
                case 80:
                    return 80;
                case 81:
                    return 81;
                case 82:
                    return 82;
                case 83:
                    return 83;
                case 84:
                    return 84;
                case 85:
                    return 85;
                case 86:
                    return 86;
                case 87:
                    return 87;
                case 88:
                    return 88;
                case 89:
                    return 89;
                case 90:
                    return 90;
                case 219:
                    return 91;
                case 220:
                    return 92;
                case 221:
                    return 93;
                case 192:
                    return 96;
                case 27:
                    return 256 + 1;
                case 112:
                    return 256 + 2;
                case 113:
                    return 256 + 3;
                case 114:
                    return 256 + 4;
                case 115:
                    return 256 + 5;
                case 116:
                    return 256 + 6;
                case 117:
                    return 256 + 7;
                case 118:
                    return 256 + 8;
                case 119:
                    return 256 + 9;
                case 120:
                    return 256 + 10;
                case 121:
                    return 256 + 11;
                case 122:
                    return 256 + 12;
                case 123:
                    return 256 + 13;
                case 124:
                    return 256 + 14;
                case 125:
                    return 256 + 15;
                case 126:
                    return 256 + 16;
                case 127:
                    return 256 + 17;
                case 128:
                    return 256 + 18;
                case 129:
                    return 256 + 19;
                case 130:
                    return 256 + 20;
                case 131:
                    return 256 + 21;
                case 132:
                    return 256 + 22;
                case 133:
                    return 256 + 23;
                case 134:
                    return 256 + 24;
                case 135:
                    return 256 + 25;
                case 136:
                    return 256 + 26;
                case 39:
                    return 256 + 30;
                case 37:
                    return 256 + 29;
                case 40:
                    return 256 + 28;
                case 38:
                    return 256 + 27;
                case 16:
                    return 256 + 31;
                case 17:
                    return 256 + 33;
                case 18:
                    return 256 + 35;
                case 9:
                    return 256 + 37;
                case 13:
                    return 256 + 38;
                case 8:
                    return 256 + 39;
                case 45:
                    return 256 + 40;
                case 46:
                    return 256 + 41;
                case 33:
                    return 256 + 42;
                case 34:
                    return 256 + 43;
                case 36:
                    return 256 + 44;
                case 35:
                    return 256 + 45;
                case 96:
                    return 256 + 46;
                case 97:
                    return 256 + 47;
                case 98:
                    return 256 + 48;
                case 99:
                    return 256 + 49;
                case 100:
                    return 256 + 50;
                case 101:
                    return 256 + 51;
                case 102:
                    return 256 + 52;
                case 103:
                    return 256 + 53;
                case 104:
                    return 256 + 54;
                case 105:
                    return 256 + 55;
                case 111:
                    return 256 + 56;
                case 106:
                    return 256 + 57;
                case 109:
                    return 256 + 58;
                case 107:
                    return 256 + 59;
                case 110:
                    return 256 + 60;
                case 144:
                    return 256 + 63;
                case 20:
                    return 256 + 64;
                case 145:
                    return 256 + 65;
                case 19:
                    return 256 + 66;
                case 91:
                    return 256 + 67;
                case 93:
                    return 256 + 69;
                default:
                    return -1
                }
            },
            getModBits: function(win) {
                var mod = 0;
                if (win.keys[340])
                    mod |= 1;
                if (win.keys[341])
                    mod |= 2;
                if (win.keys[342])
                    mod |= 4;
                if (win.keys[343])
                    mod |= 8;
                return mod
            },
            onKeyPress: function(event) {
                if (!GLFW.active || !GLFW.active.charFunc)
                    return;
                if (event.ctrlKey || event.metaKey)
                    return;
                var charCode = event.charCode;
                if (charCode == 0 || charCode >= 0 && charCode <= 31)
                    return;
                getWasmTableEntry(GLFW.active.charFunc)(charCode, 1)
            },
            onKeyChanged: function(keyCode, status) {
                if (!GLFW.active)
                    return;
                var key = GLFW.DOMToGLFWKeyCode(keyCode);
                if (key == -1)
                    return;
                GLFW.active.keys[key] = status;
                GLFW.active.domKeys[keyCode] = status;
                if (!GLFW.active.keyFunc)
                    return;
                getWasmTableEntry(GLFW.active.keyFunc)(key, status)
            },
            onGamepadConnected: function(event) {
                GLFW.refreshJoysticks()
            },
            onGamepadDisconnected: function(event) {
                GLFW.refreshJoysticks()
            },
            onKeydown: function(event) {
                GLFW.onKeyChanged(event.keyCode, 1);
                if (event.keyCode === 8 || event.keyCode === 9) {
                    event.preventDefault()
                }
            },
            onKeyup: function(event) {
                GLFW.onKeyChanged(event.keyCode, 0)
            },
            onBlur: function(event) {
                if (!GLFW.active)
                    return;
                for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
                    if (GLFW.active.domKeys[i]) {
                        GLFW.onKeyChanged(i, 0)
                    }
                }
            },
            onMousemove: function(event) {
                if (!GLFW.active)
                    return;
                Browser.calculateMouseEvent(event);
                if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc)
                    return;
                getWasmTableEntry(GLFW.active.cursorPosFunc)(Browser.mouseX, Browser.mouseY)
            },
            DOMToGLFWMouseButton: function(event) {
                var eventButton = event["button"];
                if (eventButton > 0) {
                    if (eventButton == 1) {
                        eventButton = 2
                    } else {
                        eventButton = 1
                    }
                }
                return eventButton
            },
            onMouseenter: function(event) {
                if (!GLFW.active)
                    return;
                if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc)
                    return
            },
            onMouseleave: function(event) {
                if (!GLFW.active)
                    return;
                if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc)
                    return
            },
            onMouseButtonChanged: function(event, status) {
                if (!GLFW.active)
                    return;
                Browser.calculateMouseEvent(event);
                if (event.target != Module["canvas"])
                    return;
                var eventButton = GLFW.DOMToGLFWMouseButton(event);
                if (status == 1) {
                    GLFW.active.buttons |= 1 << eventButton;
                    try {
                        event.target.setCapture()
                    } catch (e) {}
                } else {
                    GLFW.active.buttons &= ~(1 << eventButton)
                }
                if (!GLFW.active.mouseButtonFunc)
                    return;
                getWasmTableEntry(GLFW.active.mouseButtonFunc)(eventButton, status)
            },
            onMouseButtonDown: function(event) {
                if (!GLFW.active)
                    return;
                GLFW.onMouseButtonChanged(event, 1)
            },
            onMouseButtonUp: function(event) {
                if (!GLFW.active)
                    return;
                GLFW.onMouseButtonChanged(event, 0)
            },
            onMouseWheel: function(event) {
                var delta = -Browser.getMouseWheelDelta(event);
                delta = delta == 0 ? 0 : delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1);
                GLFW.wheelPos += delta;
                if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module["canvas"])
                    return;
                getWasmTableEntry(GLFW.active.scrollFunc)(GLFW.wheelPos);
                event.preventDefault()
            },
            onCanvasResize: function(width, height) {
                if (!GLFW.active)
                    return;
                var resizeNeeded = true;
                if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
                    GLFW.active.storedX = GLFW.active.x;
                    GLFW.active.storedY = GLFW.active.y;
                    GLFW.active.storedWidth = GLFW.active.width;
                    GLFW.active.storedHeight = GLFW.active.height;
                    GLFW.active.x = GLFW.active.y = 0;
                    GLFW.active.width = screen.width;
                    GLFW.active.height = screen.height;
                    GLFW.active.fullscreen = true
                } else if (GLFW.active.fullscreen == true) {
                    GLFW.active.x = GLFW.active.storedX;
                    GLFW.active.y = GLFW.active.storedY;
                    GLFW.active.width = GLFW.active.storedWidth;
                    GLFW.active.height = GLFW.active.storedHeight;
                    GLFW.active.fullscreen = false
                } else if (GLFW.active.width != width || GLFW.active.height != height) {
                    GLFW.active.width = width;
                    GLFW.active.height = height
                } else {
                    resizeNeeded = false
                }
                if (resizeNeeded) {
                    Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
                    GLFW.onWindowSizeChanged();
                    GLFW.onFramebufferSizeChanged()
                }
            },
            onWindowSizeChanged: function() {
                if (!GLFW.active)
                    return;
                if (!GLFW.active.windowSizeFunc)
                    return;
                getWasmTableEntry(GLFW.active.windowSizeFunc)(GLFW.active.width, GLFW.active.height)
            },
            onFramebufferSizeChanged: function() {
                if (!GLFW.active)
                    return;
                if (!GLFW.active.framebufferSizeFunc)
                    return
            },
            getTime: function() {
                return _emscripten_get_now() / 1e3
            },
            setWindowTitle: function(winid, title) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return;
                win.title = UTF8ToString(title);
                if (GLFW.active.id == win.id) {
                    document.title = win.title
                }
            },
            setJoystickCallback: function(cbfun) {
                GLFW.joystickFunc = cbfun;
                GLFW.refreshJoysticks()
            },
            joys: {},
            lastGamepadState: [],
            lastGamepadStateFrame: null,
            refreshJoysticks: function() {
                if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
                    GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads : [];
                    GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
                    for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
                        var gamepad = GLFW.lastGamepadState[joy];
                        if (gamepad) {
                            if (!GLFW.joys[joy]) {
                                out("glfw joystick connected:", joy);
                                GLFW.joys[joy] = {
                                    id: allocateUTF8(gamepad.id),
                                    buttonsCount: gamepad.buttons.length,
                                    axesCount: gamepad.axes.length,
                                    buttons: _malloc(gamepad.buttons.length),
                                    axes: _malloc(gamepad.axes.length * 4)
                                };
                                if (GLFW.joystickFunc) {
                                    getWasmTableEntry(GLFW.joystickFunc)(joy, 262145)
                                }
                            }
                            var data = GLFW.joys[joy];
                            for (var i = 0; i < gamepad.buttons.length; ++i) {
                                HEAP8[data.buttons + i >> 0] = gamepad.buttons[i].pressed
                            }
                            for (var i = 0; i < gamepad.axes.length; ++i) {
                                HEAPF32[data.axes + i * 4 >> 2] = gamepad.axes[i]
                            }
                        } else {
                            if (GLFW.joys[joy]) {
                                out("glfw joystick disconnected", joy);
                                if (GLFW.joystickFunc) {
                                    getWasmTableEntry(GLFW.joystickFunc)(joy, 262146)
                                }
                                _free(GLFW.joys[joy].id);
                                _free(GLFW.joys[joy].buttons);
                                _free(GLFW.joys[joy].axes);
                                delete GLFW.joys[joy]
                            }
                        }
                    }
                }
            },
            setKeyCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.keyFunc;
                win.keyFunc = cbfun;
                return prevcbfun
            },
            setCharCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.charFunc;
                win.charFunc = cbfun;
                return prevcbfun
            },
            setMouseButtonCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.mouseButtonFunc;
                win.mouseButtonFunc = cbfun;
                return prevcbfun
            },
            setCursorPosCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.cursorPosFunc;
                win.cursorPosFunc = cbfun;
                return prevcbfun
            },
            setScrollCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.scrollFunc;
                win.scrollFunc = cbfun;
                return prevcbfun
            },
            setDropCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.dropFunc;
                win.dropFunc = cbfun;
                return prevcbfun
            },
            onDrop: function(event) {
                if (!GLFW.active || !GLFW.active.dropFunc)
                    return;
                if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0)
                    return;
                event.preventDefault();
                var filenames = _malloc(event.dataTransfer.files.length * 4);
                var filenamesArray = [];
                var count = event.dataTransfer.files.length;
                var written = 0;
                var drop_dir = ".glfw_dropped_files";
                FS.createPath("/", drop_dir);
                function save(file) {
                    var path = "/" + drop_dir + "/" + file.name.replace(/\//g, "_");
                    var reader = new FileReader;
                    reader.onloadend = e=>{
                        if (reader.readyState != 2) {
                            ++written;
                            out("failed to read dropped file: " + file.name + ": " + reader.error);
                            return
                        }
                        var data = e.target.result;
                        FS.writeFile(path, new Uint8Array(data));
                        if (++written === count) {
                            getWasmTableEntry(GLFW.active.dropFunc)(GLFW.active.id, count, filenames);
                            for (var i = 0; i < filenamesArray.length; ++i) {
                                _free(filenamesArray[i])
                            }
                            _free(filenames)
                        }
                    }
                    ;
                    reader.readAsArrayBuffer(file);
                    var filename = allocateUTF8(path);
                    filenamesArray.push(filename);
                    HEAPU32[filenames + i * 4 >> 2] = filename
                }
                for (var i = 0; i < count; ++i) {
                    save(event.dataTransfer.files[i])
                }
                return false
            },
            onDragover: function(event) {
                if (!GLFW.active || !GLFW.active.dropFunc)
                    return;
                event.preventDefault();
                return false
            },
            setWindowSizeCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.windowSizeFunc;
                win.windowSizeFunc = cbfun;
                if (!win.windowSizeFunc)
                    return null;
                getWasmTableEntry(win.windowSizeFunc)(win.width, win.height);
                return prevcbfun
            },
            setWindowCloseCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.windowCloseFunc;
                win.windowCloseFunc = cbfun;
                return prevcbfun
            },
            setWindowRefreshCallback: function(winid, cbfun) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return null;
                var prevcbfun = win.windowRefreshFunc;
                win.windowRefreshFunc = cbfun;
                return prevcbfun
            },
            onClickRequestPointerLock: function(e) {
                if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
                    Module["canvas"].requestPointerLock();
                    e.preventDefault()
                }
            },
            setInputMode: function(winid, mode, value) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return;
                switch (mode) {
                case 208897:
                    {
                        switch (value) {
                        case 212993:
                            {
                                win.inputModes[mode] = value;
                                Module["canvas"].removeEventListener("click", GLFW.onClickRequestPointerLock, true);
                                Module["canvas"].exitPointerLock();
                                break
                            }
                        case 212994:
                            {
                                out("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                                break
                            }
                        case 212995:
                            {
                                win.inputModes[mode] = value;
                                Module["canvas"].addEventListener("click", GLFW.onClickRequestPointerLock, true);
                                Module["canvas"].requestPointerLock();
                                break
                            }
                        default:
                            {
                                out("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                                break
                            }
                        }
                        break
                    }
                case 208898:
                    {
                        out("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
                        break
                    }
                case 208899:
                    {
                        out("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
                        break
                    }
                default:
                    {
                        out("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
                        break
                    }
                }
            },
            getKey: function(winid, key) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return 0;
                return win.keys[key]
            },
            getMouseButton: function(winid, button) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return 0;
                return (win.buttons & 1 << button) > 0
            },
            getCursorPos: function(winid, x, y) {
                HEAPF64[x >> 3] = Browser.mouseX;
                HEAPF64[y >> 3] = Browser.mouseY
            },
            getMousePos: function(winid, x, y) {
                HEAP32[x >> 2] = Browser.mouseX;
                HEAP32[y >> 2] = Browser.mouseY
            },
            setCursorPos: function(winid, x, y) {},
            getWindowPos: function(winid, x, y) {
                var wx = 0;
                var wy = 0;
                var win = GLFW.WindowFromId(winid);
                if (win) {
                    wx = win.x;
                    wy = win.y
                }
                if (x) {
                    HEAP32[x >> 2] = wx
                }
                if (y) {
                    HEAP32[y >> 2] = wy
                }
            },
            setWindowPos: function(winid, x, y) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return;
                win.x = x;
                win.y = y
            },
            getWindowSize: function(winid, width, height) {
                var ww = 0;
                var wh = 0;
                var win = GLFW.WindowFromId(winid);
                if (win) {
                    ww = win.width;
                    wh = win.height
                }
                if (width) {
                    HEAP32[width >> 2] = ww
                }
                if (height) {
                    HEAP32[height >> 2] = wh
                }
            },
            setWindowSize: function(winid, width, height) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return;
                if (GLFW.active.id == win.id) {
                    if (width == screen.width && height == screen.height) {
                        Browser.requestFullscreen()
                    } else {
                        Browser.exitFullscreen();
                        Browser.setCanvasSize(width, height);
                        win.width = width;
                        win.height = height
                    }
                }
                if (!win.windowSizeFunc)
                    return;
                getWasmTableEntry(win.windowSizeFunc)(width, height)
            },
            createWindow: function(width, height, title, monitor, share) {
                var i, id;
                for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++) {}
                if (i > 0)
                    throw "glfwCreateWindow only supports one window at time currently";
                id = i + 1;
                if (width <= 0 || height <= 0)
                    return 0;
                if (monitor) {
                    Browser.requestFullscreen()
                } else {
                    Browser.setCanvasSize(width, height)
                }
                for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++) {}
                var useWebGL = GLFW.hints[139265] > 0;
                if (i == GLFW.windows.length) {
                    if (useWebGL) {
                        var contextAttributes = {
                            antialias: GLFW.hints[135181] > 1,
                            depth: GLFW.hints[135173] > 0,
                            stencil: GLFW.hints[135174] > 0,
                            alpha: GLFW.hints[135172] > 0
                        };
                        Module.ctx = Browser.createContext(Module["canvas"], true, true, contextAttributes)
                    } else {
                        Browser.init()
                    }
                }
                if (!Module.ctx && useWebGL)
                    return 0;
                var win = new GLFW_Window(id,width,height,title,monitor,share);
                if (id - 1 == GLFW.windows.length) {
                    GLFW.windows.push(win)
                } else {
                    GLFW.windows[id - 1] = win
                }
                GLFW.active = win;
                return win.id
            },
            destroyWindow: function(winid) {
                var win = GLFW.WindowFromId(winid);
                if (!win)
                    return;
                GLFW.windows[win.id - 1] = null;
                if (GLFW.active.id == win.id)
                    GLFW.active = null;
                for (var i = 0; i < GLFW.windows.length; i++)
                    if (GLFW.windows[i] !== null)
                        return;
                Module.ctx = Browser.destroyContext(Module["canvas"], true, true)
            },
            swapBuffers: function(winid) {},
            GLFW2ParamToGLFW3Param: function(param) {
                var table = {
                    196609: 0,
                    196610: 0,
                    196611: 0,
                    196612: 0,
                    196613: 0,
                    196614: 0,
                    131073: 0,
                    131074: 0,
                    131075: 0,
                    131076: 0,
                    131077: 135169,
                    131078: 135170,
                    131079: 135171,
                    131080: 135172,
                    131081: 135173,
                    131082: 135174,
                    131083: 135183,
                    131084: 135175,
                    131085: 135176,
                    131086: 135177,
                    131087: 135178,
                    131088: 135179,
                    131089: 135180,
                    131090: 0,
                    131091: 135181,
                    131092: 139266,
                    131093: 139267,
                    131094: 139270,
                    131095: 139271,
                    131096: 139272
                };
                return table[param]
            }
        };
        Module["GLFW"] = GLFW;
        function GLFW_Window(id, width, height, title, monitor, share) {
            this.id = id;
            this.x = 0;
            this.y = 0;
            this.fullscreen = false;
            this.storedX = 0;
            this.storedY = 0;
            this.width = width;
            this.height = height;
            this.storedWidth = width;
            this.storedHeight = height;
            this.title = title;
            this.monitor = monitor;
            this.share = share;
            this.attributes = GLFW.hints;
            this.inputModes = {
                208897: 212993,
                208898: 0,
                208899: 0
            };
            this.buttons = 0;
            this.keys = new Array;
            this.domKeys = new Array;
            this.shouldClose = 0;
            this.title = null;
            this.windowPosFunc = null;
            this.windowSizeFunc = null;
            this.windowCloseFunc = null;
            this.windowRefreshFunc = null;
            this.windowFocusFunc = null;
            this.windowIconifyFunc = null;
            this.framebufferSizeFunc = null;
            this.mouseButtonFunc = null;
            this.cursorPosFunc = null;
            this.cursorEnterFunc = null;
            this.scrollFunc = null;
            this.dropFunc = null;
            this.keyFunc = null;
            this.charFunc = null;
            this.userptr = null
        }
        Module["GLFW_Window"] = GLFW_Window;
        function _glfwInit() {
            if (GLFW.windows)
                return 1;
            GLFW.initialTime = GLFW.getTime();
            GLFW.hints = GLFW.defaultHints;
            GLFW.windows = new Array;
            GLFW.active = null;
            window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
            window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
            window.addEventListener("keydown", GLFW.onKeydown, true);
            window.addEventListener("keypress", GLFW.onKeyPress, true);
            window.addEventListener("keyup", GLFW.onKeyup, true);
            window.addEventListener("blur", GLFW.onBlur, true);
            Module["canvas"].addEventListener("touchmove", GLFW.onMousemove, true);
            Module["canvas"].addEventListener("touchstart", GLFW.onMouseButtonDown, true);
            Module["canvas"].addEventListener("touchcancel", GLFW.onMouseButtonUp, true);
            Module["canvas"].addEventListener("touchend", GLFW.onMouseButtonUp, true);
            Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
            Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
            Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
            Module["canvas"].addEventListener("wheel", GLFW.onMouseWheel, true);
            Module["canvas"].addEventListener("mousewheel", GLFW.onMouseWheel, true);
            Module["canvas"].addEventListener("mouseenter", GLFW.onMouseenter, true);
            Module["canvas"].addEventListener("mouseleave", GLFW.onMouseleave, true);
            Module["canvas"].addEventListener("drop", GLFW.onDrop, true);
            Module["canvas"].addEventListener("dragover", GLFW.onDragover, true);
            Browser.resizeListeners.push((width,height)=>{
                GLFW.onCanvasResize(width, height)
            }
            );
            return 1
        }
        Module["_glfwInit"] = _glfwInit;
        _glfwInit.sig = "i";
        function _glfwTerminate() {
            window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
            window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
            window.removeEventListener("keydown", GLFW.onKeydown, true);
            window.removeEventListener("keypress", GLFW.onKeyPress, true);
            window.removeEventListener("keyup", GLFW.onKeyup, true);
            window.removeEventListener("blur", GLFW.onBlur, true);
            Module["canvas"].removeEventListener("touchmove", GLFW.onMousemove, true);
            Module["canvas"].removeEventListener("touchstart", GLFW.onMouseButtonDown, true);
            Module["canvas"].removeEventListener("touchcancel", GLFW.onMouseButtonUp, true);
            Module["canvas"].removeEventListener("touchend", GLFW.onMouseButtonUp, true);
            Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
            Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
            Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
            Module["canvas"].removeEventListener("wheel", GLFW.onMouseWheel, true);
            Module["canvas"].removeEventListener("mousewheel", GLFW.onMouseWheel, true);
            Module["canvas"].removeEventListener("mouseenter", GLFW.onMouseenter, true);
            Module["canvas"].removeEventListener("mouseleave", GLFW.onMouseleave, true);
            Module["canvas"].removeEventListener("drop", GLFW.onDrop, true);
            Module["canvas"].removeEventListener("dragover", GLFW.onDragover, true);
            Module["canvas"].width = Module["canvas"].height = 1;
            GLFW.windows = null;
            GLFW.active = null
        }
        Module["_glfwTerminate"] = _glfwTerminate;
        _glfwTerminate.sig = "v";
        function _glfwGetVersion(major, minor, rev) {
            HEAP32[major >> 2] = 2;
            HEAP32[minor >> 2] = 7;
            HEAP32[rev >> 2] = 7
        }
        Module["_glfwGetVersion"] = _glfwGetVersion;
        _glfwGetVersion.sig = "viii";
        function _glfwPollEvents() {}
        Module["_glfwPollEvents"] = _glfwPollEvents;
        _glfwPollEvents.sig = "v";
        function _glfwWaitEvents() {}
        Module["_glfwWaitEvents"] = _glfwWaitEvents;
        _glfwWaitEvents.sig = "v";
        function _glfwGetTime() {
            return GLFW.getTime() - GLFW.initialTime
        }
        Module["_glfwGetTime"] = _glfwGetTime;
        _glfwGetTime.sig = "d";
        function _glfwSetTime(time) {
            GLFW.initialTime = GLFW.getTime() - time
        }
        Module["_glfwSetTime"] = _glfwSetTime;
        _glfwSetTime.sig = "vd";
        function _glfwExtensionSupported(extension) {
            if (!GLFW.extensions) {
                GLFW.extensions = UTF8ToString(_glGetString(7939)).split(" ")
            }
            if (GLFW.extensions.includes(extension))
                return 1;
            return GLFW.extensions.includes("GL_" + extension)
        }
        Module["_glfwExtensionSupported"] = _glfwExtensionSupported;
        _glfwExtensionSupported.sig = "ii";
        function _glfwSwapInterval(interval) {
            interval = Math.abs(interval);
            if (interval == 0)
                _emscripten_set_main_loop_timing(0, 0);
            else
                _emscripten_set_main_loop_timing(1, interval)
        }
        Module["_glfwSwapInterval"] = _glfwSwapInterval;
        _glfwSwapInterval.sig = "vi";
        function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
            GLFW.hints[135169] = redbits;
            GLFW.hints[135170] = greenbits;
            GLFW.hints[135171] = bluebits;
            GLFW.hints[135172] = alphabits;
            GLFW.hints[135173] = depthbits;
            GLFW.hints[135174] = stencilbits;
            GLFW.createWindow(width, height, "GLFW2 Window", 0, 0);
            return 1
        }
        Module["_glfwOpenWindow"] = _glfwOpenWindow;
        function _glfwCloseWindow() {
            GLFW.destroyWindow(GLFW.active.id)
        }
        Module["_glfwCloseWindow"] = _glfwCloseWindow;
        function _glfwOpenWindowHint(target, hint) {
            target = GLFW.GLFW2ParamToGLFW3Param(target);
            GLFW.hints[target] = hint
        }
        Module["_glfwOpenWindowHint"] = _glfwOpenWindowHint;
        function _glfwGetWindowSize(width, height) {
            GLFW.getWindowSize(GLFW.active.id, width, height)
        }
        Module["_glfwGetWindowSize"] = _glfwGetWindowSize;
        function _glfwSetWindowSize(width, height) {
            GLFW.setWindowSize(GLFW.active.id, width, height)
        }
        Module["_glfwSetWindowSize"] = _glfwSetWindowSize;
        function _glfwGetWindowPos(x, y) {
            GLFW.getWindowPos(GLFW.active.id, x, y)
        }
        Module["_glfwGetWindowPos"] = _glfwGetWindowPos;
        function _glfwSetWindowPos(x, y) {
            GLFW.setWindowPos(GLFW.active.id, x, y)
        }
        Module["_glfwSetWindowPos"] = _glfwSetWindowPos;
        function _glfwSetWindowTitle(title) {
            GLFW.setWindowTitle(GLFW.active.id, title)
        }
        Module["_glfwSetWindowTitle"] = _glfwSetWindowTitle;
        function _glfwIconifyWindow() {}
        Module["_glfwIconifyWindow"] = _glfwIconifyWindow;
        function _glfwRestoreWindow() {}
        Module["_glfwRestoreWindow"] = _glfwRestoreWindow;
        function _glfwSwapBuffers() {
            GLFW.swapBuffers(GLFW.active.id)
        }
        Module["_glfwSwapBuffers"] = _glfwSwapBuffers;
        function _glfwGetWindowParam(param) {
            param = GLFW.GLFW2ParamToGLFW3Param(param);
            return GLFW.hints[param]
        }
        Module["_glfwGetWindowParam"] = _glfwGetWindowParam;
        function _glfwSetWindowSizeCallback(cbfun) {
            GLFW.setWindowSizeCallback(GLFW.active.id, cbfun)
        }
        Module["_glfwSetWindowSizeCallback"] = _glfwSetWindowSizeCallback;
        function _glfwSetWindowCloseCallback(cbfun) {
            GLFW.setWindowCloseCallback(GLFW.active.id, cbfun)
        }
        Module["_glfwSetWindowCloseCallback"] = _glfwSetWindowCloseCallback;
        function _glfwSetWindowRefreshCallback(cbfun) {
            GLFW.setWindowRefreshCallback(GLFW.active.id, cbfun)
        }
        Module["_glfwSetWindowRefreshCallback"] = _glfwSetWindowRefreshCallback;
        function _glfwGetKey(key) {
            return GLFW.getKey(GLFW.active.id, key)
        }
        Module["_glfwGetKey"] = _glfwGetKey;
        function _glfwGetMouseButton(button) {
            return GLFW.getMouseButton(GLFW.active.id, button)
        }
        Module["_glfwGetMouseButton"] = _glfwGetMouseButton;
        function _glfwGetMousePos(x, y) {
            GLFW.getMousePos(GLFW.active.id, x, y)
        }
        Module["_glfwGetMousePos"] = _glfwGetMousePos;
        function _glfwSetMousePos(x, y) {
            GLFW.setCursorPos(GLFW.active.id, x, y)
        }
        Module["_glfwSetMousePos"] = _glfwSetMousePos;
        function _glfwGetMouseWheel() {
            return 0
        }
        Module["_glfwGetMouseWheel"] = _glfwGetMouseWheel;
        function _glfwSetMouseWheel(pos) {}
        Module["_glfwSetMouseWheel"] = _glfwSetMouseWheel;
        function _glfwSetKeyCallback(cbfun) {
            GLFW.setKeyCallback(GLFW.active.id, cbfun)
        }
        Module["_glfwSetKeyCallback"] = _glfwSetKeyCallback;
        function _glfwSetCharCallback(cbfun) {
            GLFW.setCharCallback(GLFW.active.id, cbfun)
        }
        Module["_glfwSetCharCallback"] = _glfwSetCharCallback;
        function _glfwSetMouseButtonCallback(cbfun) {
            GLFW.setMouseButtonCallback(GLFW.active.id, cbfun)
        }
        Module["_glfwSetMouseButtonCallback"] = _glfwSetMouseButtonCallback;
        function _glfwSetMousePosCallback(cbfun) {
            GLFW.setCursorPosCallback(GLFW.active.id, cbfun)
        }
        Module["_glfwSetMousePosCallback"] = _glfwSetMousePosCallback;
        function _glfwSetMouseWheelCallback(cbfun) {
            GLFW.setScrollCallback(GLFW.active.id, cbfun)
        }
        Module["_glfwSetMouseWheelCallback"] = _glfwSetMouseWheelCallback;
        function _glfwGetDesktopMode(mode) {
            throw "glfwGetDesktopMode is not implemented."
        }
        Module["_glfwGetDesktopMode"] = _glfwGetDesktopMode;
        function _glfwSleep(time) {
            _sleep(time)
        }
        Module["_glfwSleep"] = _glfwSleep;
        function _glfwEnable(target) {
            target = GLFW.GLFW2ParamToGLFW3Param(target);
            GLFW.hints[target] = false
        }
        Module["_glfwEnable"] = _glfwEnable;
        function _glfwDisable(target) {
            target = GLFW.GLFW2ParamToGLFW3Param(target);
            GLFW.hints[target] = true
        }
        Module["_glfwDisable"] = _glfwDisable;
        function _glfwGetGLVersion(major, minor, rev) {
            HEAP32[major >> 2] = 0;
            HEAP32[minor >> 2] = 0;
            HEAP32[rev >> 2] = 1
        }
        Module["_glfwGetGLVersion"] = _glfwGetGLVersion;
        function _glfwCreateThread(fun, arg) {
            getWasmTableEntry(fun)(arg);
            return 0
        }
        Module["_glfwCreateThread"] = _glfwCreateThread;
        function _glfwDestroyThread(ID) {}
        Module["_glfwDestroyThread"] = _glfwDestroyThread;
        function _glfwWaitThread(ID, waitmode) {}
        Module["_glfwWaitThread"] = _glfwWaitThread;
        function _glfwGetThreadID() {
            return 0
        }
        Module["_glfwGetThreadID"] = _glfwGetThreadID;
        function _glfwCreateMutex() {
            throw "glfwCreateMutex is not implemented."
        }
        Module["_glfwCreateMutex"] = _glfwCreateMutex;
        function _glfwDestroyMutex(mutex) {
            throw "glfwDestroyMutex is not implemented."
        }
        Module["_glfwDestroyMutex"] = _glfwDestroyMutex;
        function _glfwLockMutex(mutex) {
            throw "glfwLockMutex is not implemented."
        }
        Module["_glfwLockMutex"] = _glfwLockMutex;
        function _glfwUnlockMutex(mutex) {
            throw "glfwUnlockMutex is not implemented."
        }
        Module["_glfwUnlockMutex"] = _glfwUnlockMutex;
        function _glfwCreateCond() {
            throw "glfwCreateCond is not implemented."
        }
        Module["_glfwCreateCond"] = _glfwCreateCond;
        function _glfwDestroyCond(cond) {
            throw "glfwDestroyCond is not implemented."
        }
        Module["_glfwDestroyCond"] = _glfwDestroyCond;
        function _glfwWaitCond(cond, mutex, timeout) {
            throw "glfwWaitCond is not implemented."
        }
        Module["_glfwWaitCond"] = _glfwWaitCond;
        function _glfwSignalCond(cond) {
            throw "glfwSignalCond is not implemented."
        }
        Module["_glfwSignalCond"] = _glfwSignalCond;
        function _glfwBroadcastCond(cond) {
            throw "glfwBroadcastCond is not implemented."
        }
        Module["_glfwBroadcastCond"] = _glfwBroadcastCond;
        function _glfwGetNumberOfProcessors() {
            return 1
        }
        Module["_glfwGetNumberOfProcessors"] = _glfwGetNumberOfProcessors;
        function _glfwReadImage(name, img, flags) {
            throw "glfwReadImage is not implemented."
        }
        Module["_glfwReadImage"] = _glfwReadImage;
        function _glfwReadMemoryImage(data, size, img, flags) {
            throw "glfwReadMemoryImage is not implemented."
        }
        Module["_glfwReadMemoryImage"] = _glfwReadMemoryImage;
        function _glfwFreeImage(img) {
            throw "glfwFreeImage is not implemented."
        }
        Module["_glfwFreeImage"] = _glfwFreeImage;
        function _glfwLoadTexture2D(name, flags) {
            throw "glfwLoadTexture2D is not implemented."
        }
        Module["_glfwLoadTexture2D"] = _glfwLoadTexture2D;
        function _glfwLoadMemoryTexture2D(data, size, flags) {
            throw "glfwLoadMemoryTexture2D is not implemented."
        }
        Module["_glfwLoadMemoryTexture2D"] = _glfwLoadMemoryTexture2D;
        function _glfwLoadTextureImage2D(img, flags) {
            throw "glfwLoadTextureImage2D is not implemented."
        }
        Module["_glfwLoadTextureImage2D"] = _glfwLoadTextureImage2D;
        function _uuid_clear(uu) {
            zeroMemory(uu, 16)
        }
        Module["_uuid_clear"] = _uuid_clear;
        function _uuid_compare(uu1, uu2) {
            return _memcmp(uu1, uu2, 16)
        }
        Module["_uuid_compare"] = _uuid_compare;
        function _uuid_copy(dst, src) {
            _memcpy(dst, src, 16)
        }
        Module["_uuid_copy"] = _uuid_copy;
        function _uuid_generate(out) {
            var uuid = null;
            if (ENVIRONMENT_IS_NODE) {
                try {
                    var rb = require("crypto")["randomBytes"];
                    uuid = rb(16)
                } catch (e) {}
            } else if (ENVIRONMENT_IS_WEB && typeof window.crypto != "undefined" && typeof window.crypto.getRandomValues != "undefined") {
                uuid = new Uint8Array(16);
                window.crypto.getRandomValues(uuid)
            }
            if (!uuid) {
                uuid = new Array(16);
                var d = (new Date).getTime();
                for (var i = 0; i < 16; i++) {
                    var r = (d + Math.random() * 256) % 256 | 0;
                    d = d / 256 | 0;
                    uuid[i] = r
                }
            }
            uuid[6] = uuid[6] & 15 | 64;
            uuid[8] = uuid[8] & 63 | 128;
            writeArrayToMemory(uuid, out)
        }
        Module["_uuid_generate"] = _uuid_generate;
        function _uuid_is_null(uu) {
            for (var i = 0; i < 4; i++,
            uu = uu + 4 | 0) {
                var val = HEAP32[uu >> 2];
                if (val) {
                    return 0
                }
            }
            return 1
        }
        Module["_uuid_is_null"] = _uuid_is_null;
        function _uuid_parse(inp, uu) {
            inp = UTF8ToString(inp);
            if (inp.length === 36) {
                var i = 0;
                var uuid = new Array(16);
                inp.toLowerCase().replace(/[0-9a-f]{2}/g, function(byte) {
                    if (i < 16) {
                        uuid[i++] = parseInt(byte, 16)
                    }
                });
                if (i < 16) {
                    return -1
                }
                writeArrayToMemory(uuid, uu);
                return 0
            }
            return -1
        }
        Module["_uuid_parse"] = _uuid_parse;
        function _uuid_unparse(uu, out, upper) {
            var i = 0;
            var uuid = "xxxx-xx-xx-xx-xxxxxx".replace(/[x]/g, function(c) {
                var r = upper ? HEAPU8[uu + i >> 0].toString(16).toUpperCase() : HEAPU8[uu + i >> 0].toString(16);
                r = r.length === 1 ? "0" + r : r;
                i++;
                return r
            });
            stringToUTF8(uuid, out, 37)
        }
        Module["_uuid_unparse"] = _uuid_unparse;
        function _uuid_unparse_lower(uu, out) {
            _uuid_unparse(uu, out)
        }
        Module["_uuid_unparse_lower"] = _uuid_unparse_lower;
        function _uuid_unparse_upper(uu, out) {
            _uuid_unparse(uu, out, true)
        }
        Module["_uuid_unparse_upper"] = _uuid_unparse_upper;
        function _uuid_type(uu) {
            return 4
        }
        Module["_uuid_type"] = _uuid_type;
        function _uuid_variant(uu) {
            return 1
        }
        Module["_uuid_variant"] = _uuid_variant;
        var GLEW = {
            isLinaroFork: 1,
            extensions: null,
            error: {
                0: null,
                1: null,
                2: null,
                3: null,
                4: null,
                5: null,
                6: null,
                7: null,
                8: null
            },
            version: {
                1: null,
                2: null,
                3: null,
                4: null
            },
            errorStringConstantFromCode: function(error) {
                if (GLEW.isLinaroFork) {
                    switch (error) {
                    case 4:
                        return "OpenGL ES lib expected, found OpenGL lib";
                    case 5:
                        return "OpenGL lib expected, found OpenGL ES lib";
                    case 6:
                        return "Missing EGL version";
                    case 7:
                        return "EGL 1.1 and up are supported";
                    default:
                        break
                    }
                }
                switch (error) {
                case 0:
                    return "No error";
                case 1:
                    return "Missing GL version";
                case 2:
                    return "GL 1.1 and up are supported";
                case 3:
                    return "GLX 1.2 and up are supported";
                default:
                    return null
                }
            },
            errorString: function(error) {
                if (!GLEW.error[error]) {
                    var string = GLEW.errorStringConstantFromCode(error);
                    if (!string) {
                        string = "Unknown error";
                        error = 8
                    }
                    GLEW.error[error] = allocateUTF8(string)
                }
                return GLEW.error[error]
            },
            versionStringConstantFromCode: function(name) {
                switch (name) {
                case 1:
                    return "1.10.0";
                case 2:
                    return "1";
                case 3:
                    return "10";
                case 4:
                    return "0";
                default:
                    return null
                }
            },
            versionString: function(name) {
                if (!GLEW.version[name]) {
                    var string = GLEW.versionStringConstantFromCode(name);
                    if (!string)
                        return 0;
                    GLEW.version[name] = allocateUTF8(string)
                }
                return GLEW.version[name]
            },
            extensionIsSupported: function(name) {
                if (!GLEW.extensions) {
                    GLEW.extensions = UTF8ToString(_glGetString(7939)).split(" ")
                }
                if (GLEW.extensions.includes(name))
                    return 1;
                return GLEW.extensions.includes("GL_" + name)
            }
        };
        Module["GLEW"] = GLEW;
        function _glewInit() {
            return 0
        }
        Module["_glewInit"] = _glewInit;
        function _glewIsSupported(name) {
            var exts = UTF8ToString(name).split(" ");
            for (var i = 0; i < exts.length; ++i) {
                if (!GLEW.extensionIsSupported(exts[i]))
                    return 0
            }
            return 1
        }
        Module["_glewIsSupported"] = _glewIsSupported;
        function _glewGetExtension(name) {
            return GLEW.extensionIsSupported(UTF8ToString(name))
        }
        Module["_glewGetExtension"] = _glewGetExtension;
        function _glewGetErrorString(error) {
            return GLEW.errorString(error)
        }
        Module["_glewGetErrorString"] = _glewGetErrorString;
        _glewGetErrorString.sig = "ii";
        function _glewGetString(name) {
            return GLEW.versionString(name)
        }
        Module["_glewGetString"] = _glewGetString;
        var IDBStore = {
            indexedDB: function() {
                if (typeof indexedDB != "undefined")
                    return indexedDB;
                var ret = null;
                if (typeof window == "object")
                    ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
                assert(ret, "IDBStore used, but indexedDB not supported");
                return ret
            },
            DB_VERSION: 22,
            DB_STORE_NAME: "FILE_DATA",
            dbs: {},
            blobs: [0],
            getDB: function(name, callback) {
                var db = IDBStore.dbs[name];
                if (db) {
                    return callback(null, db)
                }
                var req;
                try {
                    req = IDBStore.indexedDB().open(name, IDBStore.DB_VERSION)
                } catch (e) {
                    return callback(e)
                }
                req.onupgradeneeded = function(e) {
                    var db = e.target.result;
                    var transaction = e.target.transaction;
                    var fileStore;
                    if (db.objectStoreNames.contains(IDBStore.DB_STORE_NAME)) {
                        fileStore = transaction.objectStore(IDBStore.DB_STORE_NAME)
                    } else {
                        fileStore = db.createObjectStore(IDBStore.DB_STORE_NAME)
                    }
                }
                ;
                req.onsuccess = function() {
                    db = req.result;
                    IDBStore.dbs[name] = db;
                    callback(null, db)
                }
                ;
                req.onerror = function(e) {
                    callback(this.error);
                    e.preventDefault()
                }
            },
            getStore: function(dbName, type, callback) {
                IDBStore.getDB(dbName, function(error, db) {
                    if (error)
                        return callback(error);
                    var transaction = db.transaction([IDBStore.DB_STORE_NAME], type);
                    transaction.onerror = function(e) {
                        callback(this.error || "unknown error");
                        e.preventDefault()
                    }
                    ;
                    var store = transaction.objectStore(IDBStore.DB_STORE_NAME);
                    callback(null, store)
                })
            },
            getFile: function(dbName, id, callback) {
                IDBStore.getStore(dbName, "readonly", function(err, store) {
                    if (err)
                        return callback(err);
                    var req = store.get(id);
                    req.onsuccess = function(event) {
                        var result = event.target.result;
                        if (!result) {
                            return callback("file " + id + " not found")
                        }
                        return callback(null, result)
                    }
                    ;
                    req.onerror = function(error) {
                        callback(error)
                    }
                })
            },
            setFile: function(dbName, id, data, callback) {
                IDBStore.getStore(dbName, "readwrite", function(err, store) {
                    if (err)
                        return callback(err);
                    var req = store.put(data, id);
                    req.onsuccess = function(event) {
                        callback()
                    }
                    ;
                    req.onerror = function(error) {
                        callback(error)
                    }
                })
            },
            deleteFile: function(dbName, id, callback) {
                IDBStore.getStore(dbName, "readwrite", function(err, store) {
                    if (err)
                        return callback(err);
                    var req = store.delete(id);
                    req.onsuccess = function(event) {
                        callback()
                    }
                    ;
                    req.onerror = function(error) {
                        callback(error)
                    }
                })
            },
            existsFile: function(dbName, id, callback) {
                IDBStore.getStore(dbName, "readonly", function(err, store) {
                    if (err)
                        return callback(err);
                    var req = store.count(id);
                    req.onsuccess = function(event) {
                        callback(null, event.target.result > 0)
                    }
                    ;
                    req.onerror = function(error) {
                        callback(error)
                    }
                })
            }
        };
        Module["IDBStore"] = IDBStore;
        function _emscripten_idb_async_load(db, id, arg, onload, onerror) {
            IDBStore.getFile(UTF8ToString(db), UTF8ToString(id), function(error, byteArray) {
                if (error) {
                    if (onerror)
                        getWasmTableEntry(onerror)(arg);
                    return
                }
                var buffer = _malloc(byteArray.length);
                HEAPU8.set(byteArray, buffer);
                getWasmTableEntry(onload)(arg, buffer, byteArray.length);
                _free(buffer)
            })
        }
        Module["_emscripten_idb_async_load"] = _emscripten_idb_async_load;
        _emscripten_idb_async_load.sig = "vppppp";
        function _emscripten_idb_async_store(db, id, ptr, num, arg, onstore, onerror) {
            IDBStore.setFile(UTF8ToString(db), UTF8ToString(id), new Uint8Array(HEAPU8.subarray(ptr, ptr + num)), function(error) {
                if (error) {
                    if (onerror)
                        getWasmTableEntry(onerror)(arg);
                    return
                }
                if (onstore)
                    getWasmTableEntry(onstore)(arg)
            })
        }
        Module["_emscripten_idb_async_store"] = _emscripten_idb_async_store;
        _emscripten_idb_async_store.sig = "vpppippp";
        function _emscripten_idb_async_delete(db, id, arg, ondelete, onerror) {
            IDBStore.deleteFile(UTF8ToString(db), UTF8ToString(id), function(error) {
                if (error) {
                    if (onerror)
                        getWasmTableEntry(onerror)(arg);
                    return
                }
                if (ondelete)
                    getWasmTableEntry(ondelete)(arg)
            })
        }
        Module["_emscripten_idb_async_delete"] = _emscripten_idb_async_delete;
        _emscripten_idb_async_delete.sig = "vppppp";
        function _emscripten_idb_async_exists(db, id, arg, oncheck, onerror) {
            IDBStore.existsFile(UTF8ToString(db), UTF8ToString(id), function(error, exists) {
                if (error) {
                    if (onerror)
                        getWasmTableEntry(onerror)(arg);
                    return
                }
                if (oncheck)
                    getWasmTableEntry(oncheck)(arg, exists)
            })
        }
        Module["_emscripten_idb_async_exists"] = _emscripten_idb_async_exists;
        _emscripten_idb_async_exists.sig = "vppppp";
        function _emscripten_idb_load() {
            throw "Please compile your program with async support in order to use synchronous operations like emscripten_idb_load, etc."
        }
        Module["_emscripten_idb_load"] = _emscripten_idb_load;
        function _emscripten_idb_store() {
            throw "Please compile your program with async support in order to use synchronous operations like emscripten_idb_store, etc."
        }
        Module["_emscripten_idb_store"] = _emscripten_idb_store;
        function _emscripten_idb_delete() {
            throw "Please compile your program with async support in order to use synchronous operations like emscripten_idb_delete, etc."
        }
        Module["_emscripten_idb_delete"] = _emscripten_idb_delete;
        function _emscripten_idb_exists() {
            throw "Please compile your program with async support in order to use synchronous operations like emscripten_idb_exists, etc."
        }
        Module["_emscripten_idb_exists"] = _emscripten_idb_exists;
        function runAndAbortIfError(func) {
            try {
                return func()
            } catch (e) {
                abort(e)
            }
        }
        Module["runAndAbortIfError"] = runAndAbortIfError;
        function _emscripten_sleep() {
            throw "Please compile your program with async support in order to use asynchronous operations like emscripten_sleep"
        }
        Module["_emscripten_sleep"] = _emscripten_sleep;
        function _emscripten_wget() {
            throw "Please compile your program with async support in order to use asynchronous operations like emscripten_wget"
        }
        Module["_emscripten_wget"] = _emscripten_wget;
        function _emscripten_wget_data() {
            throw "Please compile your program with async support in order to use asynchronous operations like emscripten_wget_data"
        }
        Module["_emscripten_wget_data"] = _emscripten_wget_data;
        function _emscripten_scan_registers() {
            throw "Please compile your program with async support in order to use asynchronous operations like emscripten_scan_registers"
        }
        Module["_emscripten_scan_registers"] = _emscripten_scan_registers;
        function _emscripten_fiber_init() {
            throw "Please compile your program with async support in order to use asynchronous operations like emscripten_fiber_init"
        }
        Module["_emscripten_fiber_init"] = _emscripten_fiber_init;
        function _emscripten_fiber_init_from_current_context() {
            throw "Please compile your program with async support in order to use asynchronous operations like emscripten_fiber_init_from_current_context"
        }
        Module["_emscripten_fiber_init_from_current_context"] = _emscripten_fiber_init_from_current_context;
        function _emscripten_fiber_swap() {
            throw "Please compile your program with async support in order to use asynchronous operations like emscripten_fiber_swap"
        }
        Module["_emscripten_fiber_swap"] = _emscripten_fiber_swap;
        var ALLOC_NORMAL = 0;
        Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
        var ALLOC_STACK = 1;
        Module["ALLOC_STACK"] = ALLOC_STACK;
        function allocate(slab, allocator) {
            var ret;
            if (allocator == ALLOC_STACK) {
                ret = stackAlloc(slab.length)
            } else {
                ret = _malloc(slab.length)
            }
            if (!slab.subarray && !slab.slice) {
                slab = new Uint8Array(slab)
            }
            HEAPU8.set(slab, ret);
            return ret
        }
        Module["allocate"] = allocate;
        function _emscripten_is_main_browser_thread() {
            return !ENVIRONMENT_IS_WORKER
        }
        Module["_emscripten_is_main_browser_thread"] = _emscripten_is_main_browser_thread;
        var WS = {
            sockets: [null],
            socketEvent: null
        };
        Module["WS"] = WS;
        function _emscripten_websocket_get_ready_state(socketId, readyState) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            HEAP16[readyState >> 1] = socket.readyState;
            return 0
        }
        Module["_emscripten_websocket_get_ready_state"] = _emscripten_websocket_get_ready_state;
        _emscripten_websocket_get_ready_state.sig = "iii";
        function _emscripten_websocket_get_buffered_amount(socketId, bufferedAmount) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            tempI64 = [socket.bufferedAmount >>> 0, (tempDouble = socket.bufferedAmount,
            +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
            HEAP32[bufferedAmount >> 2] = tempI64[0],
            HEAP32[bufferedAmount + 4 >> 2] = tempI64[1];
            return 0
        }
        Module["_emscripten_websocket_get_buffered_amount"] = _emscripten_websocket_get_buffered_amount;
        _emscripten_websocket_get_buffered_amount.sig = "iii";
        function _emscripten_websocket_get_extensions(socketId, extensions, extensionsLength) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            if (!extensions)
                return -5;
            stringToUTF8(socket.extensions, extensions, extensionsLength);
            return 0
        }
        Module["_emscripten_websocket_get_extensions"] = _emscripten_websocket_get_extensions;
        _emscripten_websocket_get_extensions.sig = "iiii";
        function _emscripten_websocket_get_extensions_length(socketId, extensionsLength) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            if (!extensionsLength)
                return -5;
            HEAP32[extensionsLength >> 2] = lengthBytesUTF8(socket.extensions) + 1;
            return 0
        }
        Module["_emscripten_websocket_get_extensions_length"] = _emscripten_websocket_get_extensions_length;
        _emscripten_websocket_get_extensions_length.sig = "iii";
        function _emscripten_websocket_get_protocol(socketId, protocol, protocolLength) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            if (!protocol)
                return -5;
            stringToUTF8(socket.protocol, protocol, protocolLength);
            return 0
        }
        Module["_emscripten_websocket_get_protocol"] = _emscripten_websocket_get_protocol;
        _emscripten_websocket_get_protocol.sig = "iiii";
        function _emscripten_websocket_get_protocol_length(socketId, protocolLength) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            if (!protocolLength)
                return -5;
            HEAP32[protocolLength >> 2] = lengthBytesUTF8(socket.protocol) + 1;
            return 0
        }
        Module["_emscripten_websocket_get_protocol_length"] = _emscripten_websocket_get_protocol_length;
        _emscripten_websocket_get_protocol_length.sig = "iii";
        function _emscripten_websocket_get_url(socketId, url, urlLength) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            if (!url)
                return -5;
            stringToUTF8(socket.url, url, urlLength);
            return 0
        }
        Module["_emscripten_websocket_get_url"] = _emscripten_websocket_get_url;
        _emscripten_websocket_get_url.sig = "iiii";
        function _emscripten_websocket_get_url_length(socketId, urlLength) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            if (!urlLength)
                return -5;
            HEAP32[urlLength >> 2] = lengthBytesUTF8(socket.url) + 1;
            return 0
        }
        Module["_emscripten_websocket_get_url_length"] = _emscripten_websocket_get_url_length;
        _emscripten_websocket_get_url_length.sig = "iii";
        function _emscripten_websocket_set_onopen_callback_on_thread(socketId, userData, callbackFunc, thread) {
            if (!WS.socketEvent)
                WS.socketEvent = _malloc(1024);
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            socket.onopen = function(e) {
                HEAPU32[WS.socketEvent >> 2] = socketId;
                getWasmTableEntry(callbackFunc)(0, WS.socketEvent, userData)
            }
            ;
            return 0
        }
        Module["_emscripten_websocket_set_onopen_callback_on_thread"] = _emscripten_websocket_set_onopen_callback_on_thread;
        _emscripten_websocket_set_onopen_callback_on_thread.sig = "iiiii";
        function _emscripten_websocket_set_onerror_callback_on_thread(socketId, userData, callbackFunc, thread) {
            if (!WS.socketEvent)
                WS.socketEvent = _malloc(1024);
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            socket.onerror = function(e) {
                HEAPU32[WS.socketEvent >> 2] = socketId;
                getWasmTableEntry(callbackFunc)(0, WS.socketEvent, userData)
            }
            ;
            return 0
        }
        Module["_emscripten_websocket_set_onerror_callback_on_thread"] = _emscripten_websocket_set_onerror_callback_on_thread;
        _emscripten_websocket_set_onerror_callback_on_thread.sig = "iiiii";
        function _emscripten_websocket_set_onclose_callback_on_thread(socketId, userData, callbackFunc, thread) {
            if (!WS.socketEvent)
                WS.socketEvent = _malloc(1024);
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            socket.onclose = function(e) {
                HEAPU32[WS.socketEvent >> 2] = socketId;
                HEAPU32[WS.socketEvent + 4 >> 2] = e.wasClean;
                HEAPU32[WS.socketEvent + 8 >> 2] = e.code;
                stringToUTF8(e.reason, WS.socketEvent + 10, 512);
                getWasmTableEntry(callbackFunc)(0, WS.socketEvent, userData)
            }
            ;
            return 0
        }
        Module["_emscripten_websocket_set_onclose_callback_on_thread"] = _emscripten_websocket_set_onclose_callback_on_thread;
        _emscripten_websocket_set_onclose_callback_on_thread.sig = "iiiii";
        function _emscripten_websocket_set_onmessage_callback_on_thread(socketId, userData, callbackFunc, thread) {
            if (!WS.socketEvent)
                WS.socketEvent = _malloc(1024);
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            socket.onmessage = function(e) {
                HEAPU32[WS.socketEvent >> 2] = socketId;
                if (typeof e.data == "string") {
                    var len = lengthBytesUTF8(e.data) + 1;
                    var buf = _malloc(len);
                    stringToUTF8(e.data, buf, len);
                    HEAPU32[WS.socketEvent + 12 >> 2] = 1
                } else {
                    var len = e.data.byteLength;
                    var buf = _malloc(len);
                    HEAP8.set(new Uint8Array(e.data), buf);
                    HEAPU32[WS.socketEvent + 12 >> 2] = 0
                }
                HEAPU32[WS.socketEvent + 4 >> 2] = buf;
                HEAPU32[WS.socketEvent + 8 >> 2] = len;
                getWasmTableEntry(callbackFunc)(0, WS.socketEvent, userData);
                _free(buf)
            }
            ;
            return 0
        }
        Module["_emscripten_websocket_set_onmessage_callback_on_thread"] = _emscripten_websocket_set_onmessage_callback_on_thread;
        _emscripten_websocket_set_onmessage_callback_on_thread.sig = "iiiii";
        function _emscripten_websocket_new(createAttributes) {
            if (typeof WebSocket == "undefined") {
                return -1
            }
            if (!createAttributes) {
                return -5
            }
            var createAttrs = createAttributes >> 2;
            var url = UTF8ToString(HEAP32[createAttrs]);
            var protocols = HEAP32[createAttrs + 1];
            var socket = protocols ? new WebSocket(url,UTF8ToString(protocols).split(",")) : new WebSocket(url);
            socket.binaryType = "arraybuffer";
            var socketId = WS.sockets.length;
            WS.sockets[socketId] = socket;
            return socketId
        }
        Module["_emscripten_websocket_new"] = _emscripten_websocket_new;
        _emscripten_websocket_new.sig = "ii";
        function _emscripten_websocket_send_utf8_text(socketId, textData) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            var str = UTF8ToString(textData);
            socket.send(str);
            return 0
        }
        Module["_emscripten_websocket_send_utf8_text"] = _emscripten_websocket_send_utf8_text;
        _emscripten_websocket_send_utf8_text.sig = "iii";
        function _emscripten_websocket_send_binary(socketId, binaryData, dataLength) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            socket.send(HEAPU8.subarray(binaryData, binaryData + dataLength));
            return 0
        }
        Module["_emscripten_websocket_send_binary"] = _emscripten_websocket_send_binary;
        _emscripten_websocket_send_binary.sig = "iiii";
        function _emscripten_websocket_close(socketId, code, reason) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            var reasonStr = reason ? UTF8ToString(reason) : undefined;
            if (reason)
                socket.close(code || undefined, UTF8ToString(reason));
            else if (code)
                socket.close(code);
            else
                socket.close();
            return 0
        }
        Module["_emscripten_websocket_close"] = _emscripten_websocket_close;
        _emscripten_websocket_close.sig = "iiii";
        function _emscripten_websocket_delete(socketId) {
            var socket = WS.sockets[socketId];
            if (!socket) {
                return -3
            }
            socket.onopen = socket.onerror = socket.onclose = socket.onmessage = null;
            delete WS.sockets[socketId];
            return 0
        }
        Module["_emscripten_websocket_delete"] = _emscripten_websocket_delete;
        _emscripten_websocket_delete.sig = "ii";
        function _emscripten_websocket_is_supported() {
            return typeof WebSocket != "undefined"
        }
        Module["_emscripten_websocket_is_supported"] = _emscripten_websocket_is_supported;
        _emscripten_websocket_is_supported.sig = "i";
        function _emscripten_websocket_deinitialize() {
            for (var i in WS.sockets) {
                var socket = WS.sockets[i];
                if (socket) {
                    socket.close();
                    _emscripten_websocket_delete(i)
                }
            }
            WS.sockets = []
        }
        Module["_emscripten_websocket_deinitialize"] = _emscripten_websocket_deinitialize;
        _emscripten_websocket_deinitialize.sig = "v";
        Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) {
            Browser.requestFullscreen(lockPointer, resizeCanvas)
        }
        ;
        Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
            Browser.requestAnimationFrame(func)
        }
        ;
        Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
            Browser.setCanvasSize(width, height, noUpdates)
        }
        ;
        Module["pauseMainLoop"] = function Module_pauseMainLoop() {
            Browser.mainLoop.pause()
        }
        ;
        Module["resumeMainLoop"] = function Module_resumeMainLoop() {
            Browser.mainLoop.resume()
        }
        ;
        Module["getUserMedia"] = function Module_getUserMedia() {
            Browser.getUserMedia()
        }
        ;
        Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
            return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes)
        }
        ;
        var preloadedWasm = {};
        var preloadedImages = {};
        var preloadedAudios = {};
        var FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
                parent = this
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev
        };
        var readMode = 292 | 73;
        var writeMode = 146;
        Object.defineProperties(FSNode.prototype, {
            read: {
                get: function() {
                    return (this.mode & readMode) === readMode
                },
                set: function(val) {
                    val ? this.mode |= readMode : this.mode &= ~readMode
                }
            },
            write: {
                get: function() {
                    return (this.mode & writeMode) === writeMode
                },
                set: function(val) {
                    val ? this.mode |= writeMode : this.mode &= ~writeMode
                }
            },
            isFolder: {
                get: function() {
                    return FS.isDir(this.mode)
                }
            },
            isDevice: {
                get: function() {
                    return FS.isChrdev(this.mode)
                }
            }
        });
        FS.FSNode = FSNode;
        FS.staticInit();
        Module["FS_createPath"] = FS.createPath;
        Module["FS_createDataFile"] = FS.createDataFile;
        Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
        Module["FS_unlink"] = FS.unlink;
        Module["FS_createLazyFile"] = FS.createLazyFile;
        Module["FS_createDevice"] = FS.createDevice;
        if (ENVIRONMENT_IS_NODE) {
            requireNodeFS();
            NODEFS.staticInit()
        }
        ERRNO_CODES = {
            "EPERM": 63,
            "ENOENT": 44,
            "ESRCH": 71,
            "EINTR": 27,
            "EIO": 29,
            "ENXIO": 60,
            "E2BIG": 1,
            "ENOEXEC": 45,
            "EBADF": 8,
            "ECHILD": 12,
            "EAGAIN": 6,
            "EWOULDBLOCK": 6,
            "ENOMEM": 48,
            "EACCES": 2,
            "EFAULT": 21,
            "ENOTBLK": 105,
            "EBUSY": 10,
            "EEXIST": 20,
            "EXDEV": 75,
            "ENODEV": 43,
            "ENOTDIR": 54,
            "EISDIR": 31,
            "EINVAL": 28,
            "ENFILE": 41,
            "EMFILE": 33,
            "ENOTTY": 59,
            "ETXTBSY": 74,
            "EFBIG": 22,
            "ENOSPC": 51,
            "ESPIPE": 70,
            "EROFS": 69,
            "EMLINK": 34,
            "EPIPE": 64,
            "EDOM": 18,
            "ERANGE": 68,
            "ENOMSG": 49,
            "EIDRM": 24,
            "ECHRNG": 106,
            "EL2NSYNC": 156,
            "EL3HLT": 107,
            "EL3RST": 108,
            "ELNRNG": 109,
            "EUNATCH": 110,
            "ENOCSI": 111,
            "EL2HLT": 112,
            "EDEADLK": 16,
            "ENOLCK": 46,
            "EBADE": 113,
            "EBADR": 114,
            "EXFULL": 115,
            "ENOANO": 104,
            "EBADRQC": 103,
            "EBADSLT": 102,
            "EDEADLOCK": 16,
            "EBFONT": 101,
            "ENOSTR": 100,
            "ENODATA": 116,
            "ETIME": 117,
            "ENOSR": 118,
            "ENONET": 119,
            "ENOPKG": 120,
            "EREMOTE": 121,
            "ENOLINK": 47,
            "EADV": 122,
            "ESRMNT": 123,
            "ECOMM": 124,
            "EPROTO": 65,
            "EMULTIHOP": 36,
            "EDOTDOT": 125,
            "EBADMSG": 9,
            "ENOTUNIQ": 126,
            "EBADFD": 127,
            "EREMCHG": 128,
            "ELIBACC": 129,
            "ELIBBAD": 130,
            "ELIBSCN": 131,
            "ELIBMAX": 132,
            "ELIBEXEC": 133,
            "ENOSYS": 52,
            "ENOTEMPTY": 55,
            "ENAMETOOLONG": 37,
            "ELOOP": 32,
            "EOPNOTSUPP": 138,
            "EPFNOSUPPORT": 139,
            "ECONNRESET": 15,
            "ENOBUFS": 42,
            "EAFNOSUPPORT": 5,
            "EPROTOTYPE": 67,
            "ENOTSOCK": 57,
            "ENOPROTOOPT": 50,
            "ESHUTDOWN": 140,
            "ECONNREFUSED": 14,
            "EADDRINUSE": 3,
            "ECONNABORTED": 13,
            "ENETUNREACH": 40,
            "ENETDOWN": 38,
            "ETIMEDOUT": 73,
            "EHOSTDOWN": 142,
            "EHOSTUNREACH": 23,
            "EINPROGRESS": 26,
            "EALREADY": 7,
            "EDESTADDRREQ": 17,
            "EMSGSIZE": 35,
            "EPROTONOSUPPORT": 66,
            "ESOCKTNOSUPPORT": 137,
            "EADDRNOTAVAIL": 4,
            "ENETRESET": 39,
            "EISCONN": 30,
            "ENOTCONN": 53,
            "ETOOMANYREFS": 141,
            "EUSERS": 136,
            "EDQUOT": 19,
            "ESTALE": 72,
            "ENOTSUP": 138,
            "ENOMEDIUM": 148,
            "EILSEQ": 25,
            "EOVERFLOW": 61,
            "ECANCELED": 11,
            "ENOTRECOVERABLE": 56,
            "EOWNERDEAD": 62,
            "ESTRPIPE": 135
        };
        var GLctx;
        for (var i = 0; i < 32; ++i)
            tempFixedLengthArray.push(new Array(i));
        var miniTempWebGLFloatBuffersStorage = new Float32Array(288);
        for (var i = 0; i < 288; ++i) {
            miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i + 1)
        }
        var __miniTempWebGLIntBuffersStorage = new Int32Array(288);
        for (var i = 0; i < 288; ++i) {
            __miniTempWebGLIntBuffers[i] = __miniTempWebGLIntBuffersStorage.subarray(0, i + 1)
        }
        var emSetImmediate;
        var emClearImmediate;
        if (typeof setImmediate != "undefined") {
            emSetImmediate = setImmediateWrapped;
            emClearImmediate = clearImmediateWrapped
        } else if (typeof addEventListener == "function") {
            var __setImmediate_id_counter = 0;
            var __setImmediate_queue = [];
            var __setImmediate_message_id = "_si";
            var __setImmediate_cb = e=>{
                if (e.data === __setImmediate_message_id) {
                    e.stopPropagation();
                    __setImmediate_queue.shift()();
                    ++__setImmediate_id_counter
                }
            }
            ;
            addEventListener("message", __setImmediate_cb, true);
            emSetImmediate = func=>{
                postMessage(__setImmediate_message_id, "*");
                return __setImmediate_id_counter + __setImmediate_queue.push(func) - 1
            }
            ;
            emClearImmediate = id=>{
                var index = id - __setImmediate_id_counter;
                if (index >= 0 && index < __setImmediate_queue.length)
                    __setImmediate_queue[index] = ()=>{}
            }
        }
        var ASSERTIONS = false;
        var decodeBase64 = typeof atob == "function" ? atob : function(input) {
            var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));
                chr1 = enc1 << 2 | enc2 >> 4;
                chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                chr3 = (enc3 & 3) << 6 | enc4;
                output = output + String.fromCharCode(chr1);
                if (enc3 !== 64) {
                    output = output + String.fromCharCode(chr2)
                }
                if (enc4 !== 64) {
                    output = output + String.fromCharCode(chr3)
                }
            } while (i < input.length);
            return output
        }
        ;
        function intArrayFromBase64(s) {
            if (typeof ENVIRONMENT_IS_NODE == "boolean" && ENVIRONMENT_IS_NODE) {
                var buf = Buffer.from(s, "base64");
                return new Uint8Array(buf["buffer"],buf["byteOffset"],buf["byteLength"])
            }
            try {
                var decoded = decodeBase64(s);
                var bytes = new Uint8Array(decoded.length);
                for (var i = 0; i < decoded.length; ++i) {
                    bytes[i] = decoded.charCodeAt(i)
                }
                return bytes
            } catch (_) {
                throw new Error("Converting base64 string to bytes failed.")
            }
        }
        function tryParseAsDataURI(filename) {
            if (!isDataURI(filename)) {
                return
            }
            return intArrayFromBase64(filename.slice(dataURIPrefix.length))
        }
        var asmLibraryArg = {
            "JsArray_Check": JsArray_Check,
            "JsArray_Clear": JsArray_Clear,
            "JsArray_Delete": JsArray_Delete,
            "JsArray_Get": JsArray_Get,
            "JsArray_New": JsArray_New,
            "JsArray_Push": JsArray_Push,
            "JsArray_Push_unchecked": JsArray_Push_unchecked,
            "JsArray_Set": JsArray_Set,
            "JsArray_Splice": JsArray_Splice,
            "JsArray_count_helper": JsArray_count_helper,
            "JsArray_index_helper": JsArray_index_helper,
            "JsArray_reverse_helper": JsArray_reverse_helper,
            "JsArray_slice": JsArray_slice,
            "JsArray_slice_assign": JsArray_slice_assign,
            "JsBuffer_DecodeString_js": JsBuffer_DecodeString_js,
            "JsDoubleProxy_unwrap_helper": JsDoubleProxy_unwrap_helper,
            "JsMap_New": JsMap_New,
            "JsMap_Set": JsMap_Set,
            "JsObject_DeleteString": JsObject_DeleteString,
            "JsObject_Dir": JsObject_Dir,
            "JsObject_Entries": JsObject_Entries,
            "JsObject_GetString": JsObject_GetString,
            "JsObject_Keys": JsObject_Keys,
            "JsObject_New": JsObject_New,
            "JsObject_SetString": JsObject_SetString,
            "JsObject_Values": JsObject_Values,
            "JsProxy_array_detect": JsProxy_array_detect,
            "JsProxy_subscript_js": JsProxy_subscript_js,
            "JsSet_Add": JsSet_Add,
            "JsSet_New": JsSet_New,
            "JsString_InternFromCString": JsString_InternFromCString,
            "_JsArray_PostProcess_helper": _JsArray_PostProcess_helper,
            "_JsArray_PushEntry_helper": _JsArray_PushEntry_helper,
            "_Py_CheckEmscriptenSignals_Helper": _Py_CheckEmscriptenSignals_Helper,
            "__assert_fail": ___assert_fail,
            "__call_sighandler": ___call_sighandler,
            "__cxa_allocate_exception": ___cxa_allocate_exception,
            "__cxa_begin_catch": ___cxa_begin_catch,
            "__cxa_call_unexpected": ___cxa_call_unexpected,
            "__cxa_current_primary_exception": ___cxa_current_primary_exception,
            "__cxa_decrement_exception_refcount": ___cxa_decrement_exception_refcount,
            "__cxa_end_catch": ___cxa_end_catch,
            "__cxa_find_matching_catch_2": ___cxa_find_matching_catch_2,
            "__cxa_find_matching_catch_3": ___cxa_find_matching_catch_3,
            "__cxa_free_exception": ___cxa_free_exception,
            "__cxa_increment_exception_refcount": ___cxa_increment_exception_refcount,
            "__cxa_rethrow": ___cxa_rethrow,
            "__cxa_rethrow_primary_exception": ___cxa_rethrow_primary_exception,
            "__cxa_throw": ___cxa_throw,
            "__cxa_uncaught_exceptions": ___cxa_uncaught_exceptions,
            "__heap_base": ___heap_base,
            "__indirect_function_table": wasmTable,
            "__memory_base": ___memory_base,
            "__resumeException": ___resumeException,
            "__stack_pointer": ___stack_pointer,
            "__syscall__newselect": ___syscall__newselect,
            "__syscall_accept4": ___syscall_accept4,
            "__syscall_bind": ___syscall_bind,
            "__syscall_chdir": ___syscall_chdir,
            "__syscall_chmod": ___syscall_chmod,
            "__syscall_connect": ___syscall_connect,
            "__syscall_dup": ___syscall_dup,
            "__syscall_dup3": ___syscall_dup3,
            "__syscall_faccessat": ___syscall_faccessat,
            "__syscall_fadvise64": ___syscall_fadvise64,
            "__syscall_fallocate": ___syscall_fallocate,
            "__syscall_fchdir": ___syscall_fchdir,
            "__syscall_fchmod": ___syscall_fchmod,
            "__syscall_fchmodat": ___syscall_fchmodat,
            "__syscall_fchown32": ___syscall_fchown32,
            "__syscall_fchownat": ___syscall_fchownat,
            "__syscall_fcntl64": ___syscall_fcntl64,
            "__syscall_fdatasync": ___syscall_fdatasync,
            "__syscall_fstat64": ___syscall_fstat64,
            "__syscall_fstatfs64": ___syscall_fstatfs64,
            "__syscall_ftruncate64": ___syscall_ftruncate64,
            "__syscall_getcwd": ___syscall_getcwd,
            "__syscall_getdents64": ___syscall_getdents64,
            "__syscall_getpeername": ___syscall_getpeername,
            "__syscall_getsockname": ___syscall_getsockname,
            "__syscall_getsockopt": ___syscall_getsockopt,
            "__syscall_ioctl": ___syscall_ioctl,
            "__syscall_linkat": ___syscall_linkat,
            "__syscall_listen": ___syscall_listen,
            "__syscall_lstat64": ___syscall_lstat64,
            "__syscall_mkdirat": ___syscall_mkdirat,
            "__syscall_mknodat": ___syscall_mknodat,
            "__syscall_newfstatat": ___syscall_newfstatat,
            "__syscall_openat": ___syscall_openat,
            "__syscall_pipe": ___syscall_pipe,
            "__syscall_poll": ___syscall_poll,
            "__syscall_readlinkat": ___syscall_readlinkat,
            "__syscall_recvfrom": ___syscall_recvfrom,
            "__syscall_recvmsg": ___syscall_recvmsg,
            "__syscall_renameat": ___syscall_renameat,
            "__syscall_rmdir": ___syscall_rmdir,
            "__syscall_sendmsg": ___syscall_sendmsg,
            "__syscall_sendto": ___syscall_sendto,
            "__syscall_socket": ___syscall_socket,
            "__syscall_stat64": ___syscall_stat64,
            "__syscall_statfs64": ___syscall_statfs64,
            "__syscall_symlink": ___syscall_symlink,
            "__syscall_symlinkat": ___syscall_symlinkat,
            "__syscall_truncate64": ___syscall_truncate64,
            "__syscall_unlinkat": ___syscall_unlinkat,
            "__syscall_utimensat": ___syscall_utimensat,
            "__table_base": ___table_base,
            "_dlinit": __dlinit,
            "_dlopen_js": __dlopen_js,
            "_dlsym_js": __dlsym_js,
            "_emscripten_dlopen_js": __emscripten_dlopen_js,
            "_emscripten_err": __emscripten_err,
            "_emscripten_get_now_is_monotonic": __emscripten_get_now_is_monotonic,
            "_emscripten_get_progname": __emscripten_get_progname,
            "_emscripten_out": __emscripten_out,
            "_emscripten_throw_longjmp": __emscripten_throw_longjmp,
            "_gmtime_js": __gmtime_js,
            "_localtime_js": __localtime_js,
            "_mktime_js": __mktime_js,
            "_mmap_js": __mmap_js,
            "_msync_js": __msync_js,
            "_munmap_js": __munmap_js,
            "_python2js_add_to_cache": _python2js_add_to_cache,
            "_python2js_addto_postprocess_list": _python2js_addto_postprocess_list,
            "_python2js_buffer_inner": _python2js_buffer_inner,
            "_python2js_cache_lookup": _python2js_cache_lookup,
            "_python2js_destroy_cache": _python2js_destroy_cache,
            "_python2js_handle_postprocess_list": _python2js_handle_postprocess_list,
            "_timegm_js": __timegm_js,
            "_tzset_js": __tzset_js,
            "abort": _abort,
            "alBuffer3f": _alBuffer3f,
            "alBuffer3i": _alBuffer3i,
            "alBufferData": _alBufferData,
            "alBufferf": _alBufferf,
            "alBufferfv": _alBufferfv,
            "alBufferi": _alBufferi,
            "alBufferiv": _alBufferiv,
            "alDeleteBuffers": _alDeleteBuffers,
            "alDeleteSources": _alDeleteSources,
            "alDisable": _alDisable,
            "alDistanceModel": _alDistanceModel,
            "alDopplerFactor": _alDopplerFactor,
            "alDopplerVelocity": _alDopplerVelocity,
            "alEnable": _alEnable,
            "alGenBuffers": _alGenBuffers,
            "alGenSources": _alGenSources,
            "alGetBoolean": _alGetBoolean,
            "alGetBooleanv": _alGetBooleanv,
            "alGetBuffer3f": _alGetBuffer3f,
            "alGetBuffer3i": _alGetBuffer3i,
            "alGetBufferf": _alGetBufferf,
            "alGetBufferfv": _alGetBufferfv,
            "alGetBufferi": _alGetBufferi,
            "alGetBufferiv": _alGetBufferiv,
            "alGetDouble": _alGetDouble,
            "alGetDoublev": _alGetDoublev,
            "alGetEnumValue": _alGetEnumValue,
            "alGetError": _alGetError,
            "alGetFloat": _alGetFloat,
            "alGetFloatv": _alGetFloatv,
            "alGetInteger": _alGetInteger,
            "alGetIntegerv": _alGetIntegerv,
            "alGetListener3f": _alGetListener3f,
            "alGetListener3i": _alGetListener3i,
            "alGetListenerf": _alGetListenerf,
            "alGetListenerfv": _alGetListenerfv,
            "alGetListeneri": _alGetListeneri,
            "alGetListeneriv": _alGetListeneriv,
            "alGetSource3f": _alGetSource3f,
            "alGetSource3i": _alGetSource3i,
            "alGetSourcef": _alGetSourcef,
            "alGetSourcefv": _alGetSourcefv,
            "alGetSourcei": _alGetSourcei,
            "alGetSourceiv": _alGetSourceiv,
            "alGetString": _alGetString,
            "alIsBuffer": _alIsBuffer,
            "alIsEnabled": _alIsEnabled,
            "alIsExtensionPresent": _alIsExtensionPresent,
            "alIsSource": _alIsSource,
            "alListener3f": _alListener3f,
            "alListener3i": _alListener3i,
            "alListenerf": _alListenerf,
            "alListenerfv": _alListenerfv,
            "alListeneri": _alListeneri,
            "alListeneriv": _alListeneriv,
            "alSource3f": _alSource3f,
            "alSource3i": _alSource3i,
            "alSourcePause": _alSourcePause,
            "alSourcePausev": _alSourcePausev,
            "alSourcePlay": _alSourcePlay,
            "alSourcePlayv": _alSourcePlayv,
            "alSourceQueueBuffers": _alSourceQueueBuffers,
            "alSourceRewind": _alSourceRewind,
            "alSourceRewindv": _alSourceRewindv,
            "alSourceStop": _alSourceStop,
            "alSourceStopv": _alSourceStopv,
            "alSourceUnqueueBuffers": _alSourceUnqueueBuffers,
            "alSourcef": _alSourcef,
            "alSourcefv": _alSourcefv,
            "alSourcei": _alSourcei,
            "alSourceiv": _alSourceiv,
            "alSpeedOfSound": _alSpeedOfSound,
            "alarm": _alarm,
            "alcCaptureCloseDevice": _alcCaptureCloseDevice,
            "alcCaptureOpenDevice": _alcCaptureOpenDevice,
            "alcCaptureSamples": _alcCaptureSamples,
            "alcCaptureStart": _alcCaptureStart,
            "alcCaptureStop": _alcCaptureStop,
            "alcCloseDevice": _alcCloseDevice,
            "alcCreateContext": _alcCreateContext,
            "alcDestroyContext": _alcDestroyContext,
            "alcGetContextsDevice": _alcGetContextsDevice,
            "alcGetCurrentContext": _alcGetCurrentContext,
            "alcGetEnumValue": _alcGetEnumValue,
            "alcGetError": _alcGetError,
            "alcGetIntegerv": _alcGetIntegerv,
            "alcGetString": _alcGetString,
            "alcIsExtensionPresent": _alcIsExtensionPresent,
            "alcMakeContextCurrent": _alcMakeContextCurrent,
            "alcOpenDevice": _alcOpenDevice,
            "alcProcessContext": _alcProcessContext,
            "alcSuspendContext": _alcSuspendContext,
            "array_to_js": array_to_js,
            "console_error": console_error,
            "console_error_obj": console_error_obj,
            "create_once_callable": create_once_callable,
            "create_promise_handles": create_promise_handles,
            "destroy_proxies": destroy_proxies,
            "destroy_proxies_js": destroy_proxies_js,
            "destroy_proxy": destroy_proxy,
            "em_call_init_function": em_call_init_function,
            "emscripten_alcDevicePauseSOFT": _emscripten_alcDevicePauseSOFT,
            "emscripten_alcDeviceResumeSOFT": _emscripten_alcDeviceResumeSOFT,
            "emscripten_alcGetStringiSOFT": _emscripten_alcGetStringiSOFT,
            "emscripten_alcResetDeviceSOFT": _emscripten_alcResetDeviceSOFT,
            "emscripten_asm_const_int": _emscripten_asm_const_int,
            "emscripten_console_error": _emscripten_console_error,
            "emscripten_console_log": _emscripten_console_log,
            "emscripten_console_warn": _emscripten_console_warn,
            "emscripten_date_now": _emscripten_date_now,
            "emscripten_exit_with_live_runtime": _emscripten_exit_with_live_runtime,
            "emscripten_get_heap_max": _emscripten_get_heap_max,
            "emscripten_get_now": _emscripten_get_now,
            "emscripten_get_now_res": _emscripten_get_now_res,
            "emscripten_glActiveTexture": _emscripten_glActiveTexture,
            "emscripten_glAttachShader": _emscripten_glAttachShader,
            "emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT,
            "emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation,
            "emscripten_glBindBuffer": _emscripten_glBindBuffer,
            "emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer,
            "emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer,
            "emscripten_glBindTexture": _emscripten_glBindTexture,
            "emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES,
            "emscripten_glBlendColor": _emscripten_glBlendColor,
            "emscripten_glBlendEquation": _emscripten_glBlendEquation,
            "emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate,
            "emscripten_glBlendFunc": _emscripten_glBlendFunc,
            "emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate,
            "emscripten_glBufferData": _emscripten_glBufferData,
            "emscripten_glBufferSubData": _emscripten_glBufferSubData,
            "emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus,
            "emscripten_glClear": _emscripten_glClear,
            "emscripten_glClearColor": _emscripten_glClearColor,
            "emscripten_glClearDepthf": _emscripten_glClearDepthf,
            "emscripten_glClearStencil": _emscripten_glClearStencil,
            "emscripten_glColorMask": _emscripten_glColorMask,
            "emscripten_glCompileShader": _emscripten_glCompileShader,
            "emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D,
            "emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D,
            "emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D,
            "emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D,
            "emscripten_glCreateProgram": _emscripten_glCreateProgram,
            "emscripten_glCreateShader": _emscripten_glCreateShader,
            "emscripten_glCullFace": _emscripten_glCullFace,
            "emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers,
            "emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers,
            "emscripten_glDeleteProgram": _emscripten_glDeleteProgram,
            "emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT,
            "emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers,
            "emscripten_glDeleteShader": _emscripten_glDeleteShader,
            "emscripten_glDeleteTextures": _emscripten_glDeleteTextures,
            "emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES,
            "emscripten_glDepthFunc": _emscripten_glDepthFunc,
            "emscripten_glDepthMask": _emscripten_glDepthMask,
            "emscripten_glDepthRangef": _emscripten_glDepthRangef,
            "emscripten_glDetachShader": _emscripten_glDetachShader,
            "emscripten_glDisable": _emscripten_glDisable,
            "emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray,
            "emscripten_glDrawArrays": _emscripten_glDrawArrays,
            "emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE,
            "emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL,
            "emscripten_glDrawElements": _emscripten_glDrawElements,
            "emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE,
            "emscripten_glEnable": _emscripten_glEnable,
            "emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray,
            "emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT,
            "emscripten_glFinish": _emscripten_glFinish,
            "emscripten_glFlush": _emscripten_glFlush,
            "emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer,
            "emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D,
            "emscripten_glFrontFace": _emscripten_glFrontFace,
            "emscripten_glGenBuffers": _emscripten_glGenBuffers,
            "emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers,
            "emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT,
            "emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers,
            "emscripten_glGenTextures": _emscripten_glGenTextures,
            "emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES,
            "emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap,
            "emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib,
            "emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform,
            "emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders,
            "emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation,
            "emscripten_glGetBooleanv": _emscripten_glGetBooleanv,
            "emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv,
            "emscripten_glGetError": _emscripten_glGetError,
            "emscripten_glGetFloatv": _emscripten_glGetFloatv,
            "emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv,
            "emscripten_glGetIntegerv": _emscripten_glGetIntegerv,
            "emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog,
            "emscripten_glGetProgramiv": _emscripten_glGetProgramiv,
            "emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT,
            "emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT,
            "emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT,
            "emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT,
            "emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT,
            "emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv,
            "emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog,
            "emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat,
            "emscripten_glGetShaderSource": _emscripten_glGetShaderSource,
            "emscripten_glGetShaderiv": _emscripten_glGetShaderiv,
            "emscripten_glGetString": _emscripten_glGetString,
            "emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv,
            "emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv,
            "emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation,
            "emscripten_glGetUniformfv": _emscripten_glGetUniformfv,
            "emscripten_glGetUniformiv": _emscripten_glGetUniformiv,
            "emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv,
            "emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv,
            "emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv,
            "emscripten_glHint": _emscripten_glHint,
            "emscripten_glIsBuffer": _emscripten_glIsBuffer,
            "emscripten_glIsEnabled": _emscripten_glIsEnabled,
            "emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer,
            "emscripten_glIsProgram": _emscripten_glIsProgram,
            "emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT,
            "emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer,
            "emscripten_glIsShader": _emscripten_glIsShader,
            "emscripten_glIsTexture": _emscripten_glIsTexture,
            "emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES,
            "emscripten_glLineWidth": _emscripten_glLineWidth,
            "emscripten_glLinkProgram": _emscripten_glLinkProgram,
            "emscripten_glPixelStorei": _emscripten_glPixelStorei,
            "emscripten_glPolygonOffset": _emscripten_glPolygonOffset,
            "emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT,
            "emscripten_glReadPixels": _emscripten_glReadPixels,
            "emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler,
            "emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage,
            "emscripten_glSampleCoverage": _emscripten_glSampleCoverage,
            "emscripten_glScissor": _emscripten_glScissor,
            "emscripten_glShaderBinary": _emscripten_glShaderBinary,
            "emscripten_glShaderSource": _emscripten_glShaderSource,
            "emscripten_glStencilFunc": _emscripten_glStencilFunc,
            "emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate,
            "emscripten_glStencilMask": _emscripten_glStencilMask,
            "emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate,
            "emscripten_glStencilOp": _emscripten_glStencilOp,
            "emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate,
            "emscripten_glTexImage2D": _emscripten_glTexImage2D,
            "emscripten_glTexParameterf": _emscripten_glTexParameterf,
            "emscripten_glTexParameterfv": _emscripten_glTexParameterfv,
            "emscripten_glTexParameteri": _emscripten_glTexParameteri,
            "emscripten_glTexParameteriv": _emscripten_glTexParameteriv,
            "emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D,
            "emscripten_glUniform1f": _emscripten_glUniform1f,
            "emscripten_glUniform1fv": _emscripten_glUniform1fv,
            "emscripten_glUniform1i": _emscripten_glUniform1i,
            "emscripten_glUniform1iv": _emscripten_glUniform1iv,
            "emscripten_glUniform2f": _emscripten_glUniform2f,
            "emscripten_glUniform2fv": _emscripten_glUniform2fv,
            "emscripten_glUniform2i": _emscripten_glUniform2i,
            "emscripten_glUniform2iv": _emscripten_glUniform2iv,
            "emscripten_glUniform3f": _emscripten_glUniform3f,
            "emscripten_glUniform3fv": _emscripten_glUniform3fv,
            "emscripten_glUniform3i": _emscripten_glUniform3i,
            "emscripten_glUniform3iv": _emscripten_glUniform3iv,
            "emscripten_glUniform4f": _emscripten_glUniform4f,
            "emscripten_glUniform4fv": _emscripten_glUniform4fv,
            "emscripten_glUniform4i": _emscripten_glUniform4i,
            "emscripten_glUniform4iv": _emscripten_glUniform4iv,
            "emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv,
            "emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv,
            "emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv,
            "emscripten_glUseProgram": _emscripten_glUseProgram,
            "emscripten_glValidateProgram": _emscripten_glValidateProgram,
            "emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f,
            "emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv,
            "emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f,
            "emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv,
            "emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f,
            "emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv,
            "emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f,
            "emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv,
            "emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE,
            "emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer,
            "emscripten_glViewport": _emscripten_glViewport,
            "emscripten_memcpy_big": _emscripten_memcpy_big,
            "emscripten_resize_heap": _emscripten_resize_heap,
            "environ_get": _environ_get,
            "environ_sizes_get": _environ_sizes_get,
            "exit": _exit,
            "fail_test": fail_test,
            "fd_close": _fd_close,
            "fd_fdstat_get": _fd_fdstat_get,
            "fd_pread": _fd_pread,
            "fd_pwrite": _fd_pwrite,
            "fd_read": _fd_read,
            "fd_seek": _fd_seek,
            "fd_sync": _fd_sync,
            "fd_write": _fd_write,
            "ffi_call": ffi_call,
            "ffi_closure_alloc_helper": ffi_closure_alloc_helper,
            "ffi_closure_free_helper": ffi_closure_free_helper,
            "ffi_prep_closure_loc_helper": ffi_prep_closure_loc_helper,
            "get_async_js_call_done_callback": get_async_js_call_done_callback,
            "getaddrinfo": _getaddrinfo,
            "getentropy": _getentropy,
            "gethostbyaddr": _gethostbyaddr,
            "gethostbyname": _gethostbyname,
            "getloadavg": _getloadavg,
            "getnameinfo": _getnameinfo,
            "getprotobyname": _getprotobyname,
            "getter_call_trampoline": getter_call_trampoline,
            "hiwire_CallMethod": hiwire_CallMethod,
            "hiwire_CallMethodString": hiwire_CallMethodString,
            "hiwire_CallMethod_OneArg": hiwire_CallMethod_OneArg,
            "hiwire_HasMethod": hiwire_HasMethod,
            "hiwire_assign_from_ptr": hiwire_assign_from_ptr,
            "hiwire_assign_to_ptr": hiwire_assign_to_ptr,
            "hiwire_call": hiwire_call,
            "hiwire_call_OneArg": hiwire_call_OneArg,
            "hiwire_call_bound": hiwire_call_bound,
            "hiwire_construct": hiwire_construct,
            "hiwire_constructor_name": hiwire_constructor_name,
            "hiwire_decref": hiwire_decref,
            "hiwire_double": hiwire_double,
            "hiwire_equal": hiwire_equal,
            "hiwire_get_bool": hiwire_get_bool,
            "hiwire_get_buffer_info": hiwire_get_buffer_info,
            "hiwire_get_iterator": hiwire_get_iterator,
            "hiwire_get_length_helper": hiwire_get_length_helper,
            "hiwire_get_length_string": hiwire_get_length_string,
            "hiwire_greater_than": hiwire_greater_than,
            "hiwire_greater_than_equal": hiwire_greater_than_equal,
            "hiwire_has_length": hiwire_has_length,
            "hiwire_incref": hiwire_incref,
            "hiwire_init": hiwire_init,
            "hiwire_int": hiwire_int,
            "hiwire_int_from_digits": hiwire_int_from_digits,
            "hiwire_into_file": hiwire_into_file,
            "hiwire_is_comlink_proxy": hiwire_is_comlink_proxy,
            "hiwire_is_error": hiwire_is_error,
            "hiwire_is_function": hiwire_is_function,
            "hiwire_is_iterable": hiwire_is_iterable,
            "hiwire_is_iterator": hiwire_is_iterator,
            "hiwire_is_promise": hiwire_is_promise,
            "hiwire_is_pyproxy": hiwire_is_pyproxy,
            "hiwire_is_typedarray": hiwire_is_typedarray,
            "hiwire_less_than": hiwire_less_than,
            "hiwire_less_than_equal": hiwire_less_than_equal,
            "hiwire_next": hiwire_next,
            "hiwire_not_equal": hiwire_not_equal,
            "hiwire_read_from_file": hiwire_read_from_file,
            "hiwire_resolve_promise": hiwire_resolve_promise,
            "hiwire_reversed_iterator": hiwire_reversed_iterator,
            "hiwire_string_ascii": hiwire_string_ascii,
            "hiwire_string_ucs1": hiwire_string_ucs1,
            "hiwire_string_ucs2": hiwire_string_ucs2,
            "hiwire_string_ucs4": hiwire_string_ucs4,
            "hiwire_string_utf8": hiwire_string_utf8,
            "hiwire_subarray": hiwire_subarray,
            "hiwire_throw_error": hiwire_throw_error,
            "hiwire_to_bool": hiwire_to_bool,
            "hiwire_to_string": hiwire_to_string,
            "hiwire_typeof": hiwire_typeof,
            "hiwire_write_to_file": hiwire_write_to_file,
            "invoke_diii": invoke_diii,
            "invoke_fiii": invoke_fiii,
            "invoke_i": invoke_i,
            "invoke_ii": invoke_ii,
            "invoke_iii": invoke_iii,
            "invoke_iiii": invoke_iiii,
            "invoke_iiiii": invoke_iiiii,
            "invoke_iiiiid": invoke_iiiiid,
            "invoke_iiiiii": invoke_iiiiii,
            "invoke_iiiiiii": invoke_iiiiiii,
            "invoke_iiiiiiii": invoke_iiiiiiii,
            "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii,
            "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii,
            "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii,
            "invoke_iiiiij": invoke_iiiiij,
            "invoke_iiiiijj": invoke_iiiiijj,
            "invoke_j": invoke_j,
            "invoke_ji": invoke_ji,
            "invoke_jii": invoke_jii,
            "invoke_jiii": invoke_jiii,
            "invoke_jiiii": invoke_jiiii,
            "invoke_v": invoke_v,
            "invoke_vi": invoke_vi,
            "invoke_vii": invoke_vii,
            "invoke_viid": invoke_viid,
            "invoke_viif": invoke_viif,
            "invoke_viii": invoke_viii,
            "invoke_viiidi": invoke_viiidi,
            "invoke_viiifi": invoke_viiifi,
            "invoke_viiii": invoke_viiii,
            "invoke_viiiii": invoke_viiiii,
            "invoke_viiiiii": invoke_viiiiii,
            "invoke_viiiiiii": invoke_viiiiiii,
            "invoke_viiiiiiiiii": invoke_viiiiiiiiii,
            "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii,
            "invoke_viijii": invoke_viijii,
            "invoke_viijj": invoke_viijj,
            "js2python": js2python,
            "js2python_convert": js2python_convert,
            "js2python_init": js2python_init,
            "memory": wasmMemory,
            "method_call_trampoline": method_call_trampoline,
            "new_error": new_error,
            "proc_exit": _proc_exit,
            "proxy_cache_get": proxy_cache_get,
            "proxy_cache_set": proxy_cache_set,
            "pyproxy_AsPyObject": pyproxy_AsPyObject,
            "pyproxy_Check": pyproxy_Check,
            "pyproxy_new": pyproxy_new,
            "pyproxy_new_ex": pyproxy_new_ex,
            "python2js__default_converter": python2js__default_converter,
            "python2js_buffer_init": python2js_buffer_init,
            "python2js_custom__create_jscontext": python2js_custom__create_jscontext,
            "setter_call_trampoline": setter_call_trampoline,
            "strftime": _strftime,
            "strftime_l": _strftime_l,
            "system": _system,
            "unbox_small_structs": unbox_small_structs
        };
        var asm = createWasm();
        var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
            return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments)
        }
        ;
        var ___wasm_apply_data_relocs = Module["___wasm_apply_data_relocs"] = function() {
            return (___wasm_apply_data_relocs = Module["___wasm_apply_data_relocs"] = Module["asm"]["__wasm_apply_data_relocs"]).apply(null, arguments)
        }
        ;
        var _set_method_docstring = Module["_set_method_docstring"] = function() {
            return (_set_method_docstring = Module["_set_method_docstring"] = Module["asm"]["set_method_docstring"]).apply(null, arguments)
        }
        ;
        var _PyObject_GetAttrString = Module["_PyObject_GetAttrString"] = function() {
            return (_PyObject_GetAttrString = Module["_PyObject_GetAttrString"] = Module["asm"]["PyObject_GetAttrString"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_FromId = Module["__PyUnicode_FromId"] = function() {
            return (__PyUnicode_FromId = Module["__PyUnicode_FromId"] = Module["asm"]["_PyUnicode_FromId"]).apply(null, arguments)
        }
        ;
        var _PyObject_VectorcallMethod = Module["_PyObject_VectorcallMethod"] = function() {
            return (_PyObject_VectorcallMethod = Module["_PyObject_VectorcallMethod"] = Module["asm"]["PyObject_VectorcallMethod"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUTF8AndSize = Module["_PyUnicode_AsUTF8AndSize"] = function() {
            return (_PyUnicode_AsUTF8AndSize = Module["_PyUnicode_AsUTF8AndSize"] = Module["asm"]["PyUnicode_AsUTF8AndSize"]).apply(null, arguments)
        }
        ;
        var _malloc = Module["_malloc"] = function() {
            return (_malloc = Module["_malloc"] = Module["asm"]["malloc"]).apply(null, arguments)
        }
        ;
        var _memcpy = Module["_memcpy"] = function() {
            return (_memcpy = Module["_memcpy"] = Module["asm"]["memcpy"]).apply(null, arguments)
        }
        ;
        var __Py_Dealloc = Module["__Py_Dealloc"] = function() {
            return (__Py_Dealloc = Module["__Py_Dealloc"] = Module["asm"]["_Py_Dealloc"]).apply(null, arguments)
        }
        ;
        var _PyErr_Format = Module["_PyErr_Format"] = function() {
            return (_PyErr_Format = Module["_PyErr_Format"] = Module["asm"]["PyErr_Format"]).apply(null, arguments)
        }
        ;
        var _add_methods_and_set_docstrings = Module["_add_methods_and_set_docstrings"] = function() {
            return (_add_methods_and_set_docstrings = Module["_add_methods_and_set_docstrings"] = Module["asm"]["add_methods_and_set_docstrings"]).apply(null, arguments)
        }
        ;
        var _PyModule_AddFunctions = Module["_PyModule_AddFunctions"] = function() {
            return (_PyModule_AddFunctions = Module["_PyModule_AddFunctions"] = Module["asm"]["PyModule_AddFunctions"]).apply(null, arguments)
        }
        ;
        var _docstring_init = Module["_docstring_init"] = function() {
            return (_docstring_init = Module["_docstring_init"] = Module["asm"]["docstring_init"]).apply(null, arguments)
        }
        ;
        var _PyImport_ImportModule = Module["_PyImport_ImportModule"] = function() {
            return (_PyImport_ImportModule = Module["_PyImport_ImportModule"] = Module["asm"]["PyImport_ImportModule"]).apply(null, arguments)
        }
        ;
        var _dump_traceback = Module["_dump_traceback"] = function() {
            return (_dump_traceback = Module["_dump_traceback"] = Module["asm"]["dump_traceback"]).apply(null, arguments)
        }
        ;
        var _fileno = Module["_fileno"] = function() {
            return (_fileno = Module["_fileno"] = Module["asm"]["fileno"]).apply(null, arguments)
        }
        ;
        var _PyGILState_GetThisThreadState = Module["_PyGILState_GetThisThreadState"] = function() {
            return (_PyGILState_GetThisThreadState = Module["_PyGILState_GetThisThreadState"] = Module["asm"]["PyGILState_GetThisThreadState"]).apply(null, arguments)
        }
        ;
        var _set_error = Module["_set_error"] = function() {
            return (_set_error = Module["_set_error"] = Module["asm"]["set_error"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetObject = Module["_PyErr_SetObject"] = function() {
            return (_PyErr_SetObject = Module["_PyErr_SetObject"] = Module["asm"]["PyErr_SetObject"]).apply(null, arguments)
        }
        ;
        var _restore_sys_last_exception = Module["_restore_sys_last_exception"] = function() {
            return (_restore_sys_last_exception = Module["_restore_sys_last_exception"] = Module["asm"]["restore_sys_last_exception"]).apply(null, arguments)
        }
        ;
        var __PySys_GetObjectId = Module["__PySys_GetObjectId"] = function() {
            return (__PySys_GetObjectId = Module["__PySys_GetObjectId"] = Module["asm"]["_PySys_GetObjectId"]).apply(null, arguments)
        }
        ;
        var _PyErr_Restore = Module["_PyErr_Restore"] = function() {
            return (_PyErr_Restore = Module["_PyErr_Restore"] = Module["asm"]["PyErr_Restore"]).apply(null, arguments)
        }
        ;
        var _wrap_exception = Module["_wrap_exception"] = function() {
            return (_wrap_exception = Module["_wrap_exception"] = Module["asm"]["wrap_exception"]).apply(null, arguments)
        }
        ;
        var _PyErr_Fetch = Module["_PyErr_Fetch"] = function() {
            return (_PyErr_Fetch = Module["_PyErr_Fetch"] = Module["asm"]["PyErr_Fetch"]).apply(null, arguments)
        }
        ;
        var _PyErr_NormalizeException = Module["_PyErr_NormalizeException"] = function() {
            return (_PyErr_NormalizeException = Module["_PyErr_NormalizeException"] = Module["asm"]["PyErr_NormalizeException"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetString = Module["_PyErr_SetString"] = function() {
            return (_PyErr_SetString = Module["_PyErr_SetString"] = Module["asm"]["PyErr_SetString"]).apply(null, arguments)
        }
        ;
        var _PyException_SetTraceback = Module["_PyException_SetTraceback"] = function() {
            return (_PyException_SetTraceback = Module["_PyException_SetTraceback"] = Module["asm"]["PyException_SetTraceback"]).apply(null, arguments)
        }
        ;
        var __PySys_SetObjectId = Module["__PySys_SetObjectId"] = function() {
            return (__PySys_SetObjectId = Module["__PySys_SetObjectId"] = Module["asm"]["_PySys_SetObjectId"]).apply(null, arguments)
        }
        ;
        var __PyObject_CallMethodIdObjArgs = Module["__PyObject_CallMethodIdObjArgs"] = function() {
            return (__PyObject_CallMethodIdObjArgs = Module["__PyObject_CallMethodIdObjArgs"] = Module["asm"]["_PyObject_CallMethodIdObjArgs"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_New = Module["_PyUnicode_New"] = function() {
            return (_PyUnicode_New = Module["_PyUnicode_New"] = Module["asm"]["PyUnicode_New"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Join = Module["_PyUnicode_Join"] = function() {
            return (_PyUnicode_Join = Module["_PyUnicode_Join"] = Module["asm"]["PyUnicode_Join"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUTF8 = Module["_PyUnicode_AsUTF8"] = function() {
            return (_PyUnicode_AsUTF8 = Module["_PyUnicode_AsUTF8"] = Module["asm"]["PyUnicode_AsUTF8"]).apply(null, arguments)
        }
        ;
        var _PySys_WriteStderr = Module["_PySys_WriteStderr"] = function() {
            return (_PySys_WriteStderr = Module["_PySys_WriteStderr"] = Module["asm"]["PySys_WriteStderr"]).apply(null, arguments)
        }
        ;
        var _PyErr_Print = Module["_PyErr_Print"] = function() {
            return (_PyErr_Print = Module["_PyErr_Print"] = Module["asm"]["PyErr_Print"]).apply(null, arguments)
        }
        ;
        var _PyErr_Display = Module["_PyErr_Display"] = function() {
            return (_PyErr_Display = Module["_PyErr_Display"] = Module["asm"]["PyErr_Display"]).apply(null, arguments)
        }
        ;
        var _pythonexc2js = Module["_pythonexc2js"] = function() {
            return (_pythonexc2js = Module["_pythonexc2js"] = Module["asm"]["pythonexc2js"]).apply(null, arguments)
        }
        ;
        var _trigger_fatal_error = Module["_trigger_fatal_error"] = function() {
            return (_trigger_fatal_error = Module["_trigger_fatal_error"] = Module["asm"]["trigger_fatal_error"]).apply(null, arguments)
        }
        ;
        var _raw_call = Module["_raw_call"] = function() {
            return (_raw_call = Module["_raw_call"] = Module["asm"]["raw_call"]).apply(null, arguments)
        }
        ;
        var _JsProxy_AsJs = Module["_JsProxy_AsJs"] = function() {
            return (_JsProxy_AsJs = Module["_JsProxy_AsJs"] = Module["asm"]["JsProxy_AsJs"]).apply(null, arguments)
        }
        ;
        var _error_handling_init = Module["_error_handling_init"] = function() {
            return (_error_handling_init = Module["_error_handling_init"] = Module["asm"]["error_handling_init"]).apply(null, arguments)
        }
        ;
        var _PyErr_NewException = Module["_PyErr_NewException"] = function() {
            return (_PyErr_NewException = Module["_PyErr_NewException"] = Module["asm"]["PyErr_NewException"]).apply(null, arguments)
        }
        ;
        var _PyErr_NewExceptionWithDoc = Module["_PyErr_NewExceptionWithDoc"] = function() {
            return (_PyErr_NewExceptionWithDoc = Module["_PyErr_NewExceptionWithDoc"] = Module["asm"]["PyErr_NewExceptionWithDoc"]).apply(null, arguments)
        }
        ;
        var _PyObject_SetAttrString = Module["_PyObject_SetAttrString"] = function() {
            return (_PyObject_SetAttrString = Module["_PyObject_SetAttrString"] = Module["asm"]["PyObject_SetAttrString"]).apply(null, arguments)
        }
        ;
        var _hiwire_from_bool = Module["_hiwire_from_bool"] = function() {
            return (_hiwire_from_bool = Module["_hiwire_from_bool"] = Module["asm"]["hiwire_from_bool"]).apply(null, arguments)
        }
        ;
        var _hiwire_call_va = Module["_hiwire_call_va"] = function() {
            return (_hiwire_call_va = Module["_hiwire_call_va"] = Module["asm"]["hiwire_call_va"]).apply(null, arguments)
        }
        ;
        var _hiwire_HasMethodId = Module["_hiwire_HasMethodId"] = function() {
            return (_hiwire_HasMethodId = Module["_hiwire_HasMethodId"] = Module["asm"]["hiwire_HasMethodId"]).apply(null, arguments)
        }
        ;
        var _JsString_FromId = Module["_JsString_FromId"] = function() {
            return (_JsString_FromId = Module["_JsString_FromId"] = Module["asm"]["JsString_FromId"]).apply(null, arguments)
        }
        ;
        var _hiwire_CallMethodId = Module["_hiwire_CallMethodId"] = function() {
            return (_hiwire_CallMethodId = Module["_hiwire_CallMethodId"] = Module["asm"]["hiwire_CallMethodId"]).apply(null, arguments)
        }
        ;
        var _hiwire_CallMethodString_va = Module["_hiwire_CallMethodString_va"] = function() {
            return (_hiwire_CallMethodString_va = Module["_hiwire_CallMethodString_va"] = Module["asm"]["hiwire_CallMethodString_va"]).apply(null, arguments)
        }
        ;
        var _hiwire_CallMethodId_va = Module["_hiwire_CallMethodId_va"] = function() {
            return (_hiwire_CallMethodId_va = Module["_hiwire_CallMethodId_va"] = Module["asm"]["hiwire_CallMethodId_va"]).apply(null, arguments)
        }
        ;
        var _hiwire_CallMethodId_OneArg = Module["_hiwire_CallMethodId_OneArg"] = function() {
            return (_hiwire_CallMethodId_OneArg = Module["_hiwire_CallMethodId_OneArg"] = Module["asm"]["hiwire_CallMethodId_OneArg"]).apply(null, arguments)
        }
        ;
        var _hiwire_get_length = Module["_hiwire_get_length"] = function() {
            return (_hiwire_get_length = Module["_hiwire_get_length"] = Module["asm"]["hiwire_get_length"]).apply(null, arguments)
        }
        ;
        var _free = Module["_free"] = function() {
            return (_free = Module["_free"] = Module["asm"]["free"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Data = Module["_PyUnicode_Data"] = function() {
            return (_PyUnicode_Data = Module["_PyUnicode_Data"] = Module["asm"]["PyUnicode_Data"]).apply(null, arguments)
        }
        ;
        var __js2python_none = Module["__js2python_none"] = function() {
            return (__js2python_none = Module["__js2python_none"] = Module["asm"]["_js2python_none"]).apply(null, arguments)
        }
        ;
        var __js2python_true = Module["__js2python_true"] = function() {
            return (__js2python_true = Module["__js2python_true"] = Module["asm"]["_js2python_true"]).apply(null, arguments)
        }
        ;
        var __js2python_false = Module["__js2python_false"] = function() {
            return (__js2python_false = Module["__js2python_false"] = Module["asm"]["_js2python_false"]).apply(null, arguments)
        }
        ;
        var __js2python_pyproxy = Module["__js2python_pyproxy"] = function() {
            return (__js2python_pyproxy = Module["__js2python_pyproxy"] = Module["asm"]["_js2python_pyproxy"]).apply(null, arguments)
        }
        ;
        var _JsArray_index = Module["_JsArray_index"] = function() {
            return (_JsArray_index = Module["_JsArray_index"] = Module["asm"]["JsArray_index"]).apply(null, arguments)
        }
        ;
        var __PyArg_ParseTuple_SizeT = Module["__PyArg_ParseTuple_SizeT"] = function() {
            return (__PyArg_ParseTuple_SizeT = Module["__PyArg_ParseTuple_SizeT"] = Module["asm"]["_PyArg_ParseTuple_SizeT"]).apply(null, arguments)
        }
        ;
        var _python2js_track_proxies = Module["_python2js_track_proxies"] = function() {
            return (_python2js_track_proxies = Module["_python2js_track_proxies"] = Module["asm"]["python2js_track_proxies"]).apply(null, arguments)
        }
        ;
        var _PyErr_Clear = Module["_PyErr_Clear"] = function() {
            return (_PyErr_Clear = Module["_PyErr_Clear"] = Module["asm"]["PyErr_Clear"]).apply(null, arguments)
        }
        ;
        var _PyObject_RichCompareBool = Module["_PyObject_RichCompareBool"] = function() {
            return (_PyObject_RichCompareBool = Module["_PyObject_RichCompareBool"] = Module["asm"]["PyObject_RichCompareBool"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromSsize_t = Module["_PyLong_FromSsize_t"] = function() {
            return (_PyLong_FromSsize_t = Module["_PyLong_FromSsize_t"] = Module["asm"]["PyLong_FromSsize_t"]).apply(null, arguments)
        }
        ;
        var _PyErr_Occurred = Module["_PyErr_Occurred"] = function() {
            return (_PyErr_Occurred = Module["_PyErr_Occurred"] = Module["asm"]["PyErr_Occurred"]).apply(null, arguments)
        }
        ;
        var _JsArray_count = Module["_JsArray_count"] = function() {
            return (_JsArray_count = Module["_JsArray_count"] = Module["asm"]["JsArray_count"]).apply(null, arguments)
        }
        ;
        var _JsArray_reverse = Module["_JsArray_reverse"] = function() {
            return (_JsArray_reverse = Module["_JsArray_reverse"] = Module["asm"]["JsArray_reverse"]).apply(null, arguments)
        }
        ;
        var _JsProxy_then = Module["_JsProxy_then"] = function() {
            return (_JsProxy_then = Module["_JsProxy_then"] = Module["asm"]["JsProxy_then"]).apply(null, arguments)
        }
        ;
        var __PyArg_ParseTupleAndKeywords_SizeT = Module["__PyArg_ParseTupleAndKeywords_SizeT"] = function() {
            return (__PyArg_ParseTupleAndKeywords_SizeT = Module["__PyArg_ParseTupleAndKeywords_SizeT"] = Module["asm"]["_PyArg_ParseTupleAndKeywords_SizeT"]).apply(null, arguments)
        }
        ;
        var _JsProxy_create_with_this = Module["_JsProxy_create_with_this"] = function() {
            return (_JsProxy_create_with_this = Module["_JsProxy_create_with_this"] = Module["asm"]["JsProxy_create_with_this"]).apply(null, arguments)
        }
        ;
        var _JsProxy_create = Module["_JsProxy_create"] = function() {
            return (_JsProxy_create = Module["_JsProxy_create"] = Module["asm"]["JsProxy_create"]).apply(null, arguments)
        }
        ;
        var _JsProxy_catch = Module["_JsProxy_catch"] = function() {
            return (_JsProxy_catch = Module["_JsProxy_catch"] = Module["asm"]["JsProxy_catch"]).apply(null, arguments)
        }
        ;
        var _JsProxy_finally = Module["_JsProxy_finally"] = function() {
            return (_JsProxy_finally = Module["_JsProxy_finally"] = Module["asm"]["JsProxy_finally"]).apply(null, arguments)
        }
        ;
        var _JsMethod_ConvertArgs = Module["_JsMethod_ConvertArgs"] = function() {
            return (_JsMethod_ConvertArgs = Module["_JsMethod_ConvertArgs"] = Module["asm"]["JsMethod_ConvertArgs"]).apply(null, arguments)
        }
        ;
        var _PyTuple_GetItem = Module["_PyTuple_GetItem"] = function() {
            return (_PyTuple_GetItem = Module["_PyTuple_GetItem"] = Module["asm"]["PyTuple_GetItem"]).apply(null, arguments)
        }
        ;
        var _PyTuple_Size = Module["_PyTuple_Size"] = function() {
            return (_PyTuple_Size = Module["_PyTuple_Size"] = Module["asm"]["PyTuple_Size"]).apply(null, arguments)
        }
        ;
        var _Buffer_dealloc = Module["_Buffer_dealloc"] = function() {
            return (_Buffer_dealloc = Module["_Buffer_dealloc"] = Module["asm"]["Buffer_dealloc"]).apply(null, arguments)
        }
        ;
        var _PyMem_Free = Module["_PyMem_Free"] = function() {
            return (_PyMem_Free = Module["_PyMem_Free"] = Module["asm"]["PyMem_Free"]).apply(null, arguments)
        }
        ;
        var _JsBuffer_CopyIntoMemoryView = Module["_JsBuffer_CopyIntoMemoryView"] = function() {
            return (_JsBuffer_CopyIntoMemoryView = Module["_JsBuffer_CopyIntoMemoryView"] = Module["asm"]["JsBuffer_CopyIntoMemoryView"]).apply(null, arguments)
        }
        ;
        var _PyMem_Malloc = Module["_PyMem_Malloc"] = function() {
            return (_PyMem_Malloc = Module["_PyMem_Malloc"] = Module["asm"]["PyMem_Malloc"]).apply(null, arguments)
        }
        ;
        var _PyMemoryView_FromObject = Module["_PyMemoryView_FromObject"] = function() {
            return (_PyMemoryView_FromObject = Module["_PyMemoryView_FromObject"] = Module["asm"]["PyMemoryView_FromObject"]).apply(null, arguments)
        }
        ;
        var _JsBuffer_CopyIntoBytes = Module["_JsBuffer_CopyIntoBytes"] = function() {
            return (_JsBuffer_CopyIntoBytes = Module["_JsBuffer_CopyIntoBytes"] = Module["asm"]["JsBuffer_CopyIntoBytes"]).apply(null, arguments)
        }
        ;
        var _PyBytes_FromStringAndSize = Module["_PyBytes_FromStringAndSize"] = function() {
            return (_PyBytes_FromStringAndSize = Module["_PyBytes_FromStringAndSize"] = Module["asm"]["PyBytes_FromStringAndSize"]).apply(null, arguments)
        }
        ;
        var _JsBuffer_ToString = Module["_JsBuffer_ToString"] = function() {
            return (_JsBuffer_ToString = Module["_JsBuffer_ToString"] = Module["asm"]["JsBuffer_ToString"]).apply(null, arguments)
        }
        ;
        var _JsBuffer_cinit = Module["_JsBuffer_cinit"] = function() {
            return (_JsBuffer_cinit = Module["_JsBuffer_cinit"] = Module["asm"]["JsBuffer_cinit"]).apply(null, arguments)
        }
        ;
        var _JsDoubleProxy_unwrap = Module["_JsDoubleProxy_unwrap"] = function() {
            return (_JsDoubleProxy_unwrap = Module["_JsDoubleProxy_unwrap"] = Module["asm"]["JsDoubleProxy_unwrap"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromLong = Module["_PyLong_FromLong"] = function() {
            return (_PyLong_FromLong = Module["_PyLong_FromLong"] = Module["asm"]["PyLong_FromLong"]).apply(null, arguments)
        }
        ;
        var _PyDict_GetItemWithError = Module["_PyDict_GetItemWithError"] = function() {
            return (_PyDict_GetItemWithError = Module["_PyDict_GetItemWithError"] = Module["asm"]["PyDict_GetItemWithError"]).apply(null, arguments)
        }
        ;
        var _PyObject_SelfIter = Module["_PyObject_SelfIter"] = function() {
            return (_PyObject_SelfIter = Module["_PyObject_SelfIter"] = Module["asm"]["PyObject_SelfIter"]).apply(null, arguments)
        }
        ;
        var _PyVectorcall_Call = Module["_PyVectorcall_Call"] = function() {
            return (_PyVectorcall_Call = Module["_PyVectorcall_Call"] = Module["asm"]["PyVectorcall_Call"]).apply(null, arguments)
        }
        ;
        var _PyErr_NoMemory = Module["_PyErr_NoMemory"] = function() {
            return (_PyErr_NoMemory = Module["_PyErr_NoMemory"] = Module["asm"]["PyErr_NoMemory"]).apply(null, arguments)
        }
        ;
        var __Py_BuildValue_SizeT = Module["__Py_BuildValue_SizeT"] = function() {
            return (__Py_BuildValue_SizeT = Module["__Py_BuildValue_SizeT"] = Module["asm"]["_Py_BuildValue_SizeT"]).apply(null, arguments)
        }
        ;
        var _PyType_FromSpecWithBases = Module["_PyType_FromSpecWithBases"] = function() {
            return (_PyType_FromSpecWithBases = Module["_PyType_FromSpecWithBases"] = Module["asm"]["PyType_FromSpecWithBases"]).apply(null, arguments)
        }
        ;
        var _PyDict_SetItem = Module["_PyDict_SetItem"] = function() {
            return (_PyDict_SetItem = Module["_PyDict_SetItem"] = Module["asm"]["PyDict_SetItem"]).apply(null, arguments)
        }
        ;
        var _JsProxy_Check = Module["_JsProxy_Check"] = function() {
            return (_JsProxy_Check = Module["_JsProxy_Check"] = Module["asm"]["JsProxy_Check"]).apply(null, arguments)
        }
        ;
        var _PyType_IsSubtype = Module["_PyType_IsSubtype"] = function() {
            return (_PyType_IsSubtype = Module["_PyType_IsSubtype"] = Module["asm"]["PyType_IsSubtype"]).apply(null, arguments)
        }
        ;
        var _JsException_Check = Module["_JsException_Check"] = function() {
            return (_JsException_Check = Module["_JsException_Check"] = Module["asm"]["JsException_Check"]).apply(null, arguments)
        }
        ;
        var _JsException_AsJs = Module["_JsException_AsJs"] = function() {
            return (_JsException_AsJs = Module["_JsException_AsJs"] = Module["asm"]["JsException_AsJs"]).apply(null, arguments)
        }
        ;
        var _JsProxy_init = Module["_JsProxy_init"] = function() {
            return (_JsProxy_init = Module["_JsProxy_init"] = Module["asm"]["JsProxy_init"]).apply(null, arguments)
        }
        ;
        var __PyObject_GetAttrId = Module["__PyObject_GetAttrId"] = function() {
            return (__PyObject_GetAttrId = Module["__PyObject_GetAttrId"] = Module["asm"]["_PyObject_GetAttrId"]).apply(null, arguments)
        }
        ;
        var _PyDict_New = Module["_PyDict_New"] = function() {
            return (_PyDict_New = Module["_PyDict_New"] = Module["asm"]["PyDict_New"]).apply(null, arguments)
        }
        ;
        var _PyModule_AddObject = Module["_PyModule_AddObject"] = function() {
            return (_PyModule_AddObject = Module["_PyModule_AddObject"] = Module["asm"]["PyModule_AddObject"]).apply(null, arguments)
        }
        ;
        var _PyType_Ready = Module["_PyType_Ready"] = function() {
            return (_PyType_Ready = Module["_PyType_Ready"] = Module["asm"]["PyType_Ready"]).apply(null, arguments)
        }
        ;
        var _PyModule_AddType = Module["_PyModule_AddType"] = function() {
            return (_PyModule_AddType = Module["_PyModule_AddType"] = Module["asm"]["PyModule_AddType"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_Get = Module["_PyThreadState_Get"] = function() {
            return (_PyThreadState_Get = Module["_PyThreadState_Get"] = Module["asm"]["PyThreadState_Get"]).apply(null, arguments)
        }
        ;
        var _PyCallable_Check = Module["_PyCallable_Check"] = function() {
            return (_PyCallable_Check = Module["_PyCallable_Check"] = Module["asm"]["PyCallable_Check"]).apply(null, arguments)
        }
        ;
        var __PyObject_MakeTpCall = Module["__PyObject_MakeTpCall"] = function() {
            return (__PyObject_MakeTpCall = Module["__PyObject_MakeTpCall"] = Module["asm"]["_PyObject_MakeTpCall"]).apply(null, arguments)
        }
        ;
        var __Py_CheckFunctionResult = Module["__Py_CheckFunctionResult"] = function() {
            return (__Py_CheckFunctionResult = Module["__Py_CheckFunctionResult"] = Module["asm"]["_Py_CheckFunctionResult"]).apply(null, arguments)
        }
        ;
        var _python2js = Module["_python2js"] = function() {
            return (_python2js = Module["_python2js"] = Module["asm"]["python2js"]).apply(null, arguments)
        }
        ;
        var __PyObject_CallMethodId_SizeT = Module["__PyObject_CallMethodId_SizeT"] = function() {
            return (__PyObject_CallMethodId_SizeT = Module["__PyObject_CallMethodId_SizeT"] = Module["asm"]["_PyObject_CallMethodId_SizeT"]).apply(null, arguments)
        }
        ;
        var _PyIndex_Check = Module["_PyIndex_Check"] = function() {
            return (_PyIndex_Check = Module["_PyIndex_Check"] = Module["asm"]["PyIndex_Check"]).apply(null, arguments)
        }
        ;
        var _PyNumber_AsSsize_t = Module["_PyNumber_AsSsize_t"] = function() {
            return (_PyNumber_AsSsize_t = Module["_PyNumber_AsSsize_t"] = Module["asm"]["PyNumber_AsSsize_t"]).apply(null, arguments)
        }
        ;
        var _PySlice_Unpack = Module["_PySlice_Unpack"] = function() {
            return (_PySlice_Unpack = Module["_PySlice_Unpack"] = Module["asm"]["PySlice_Unpack"]).apply(null, arguments)
        }
        ;
        var _PySlice_AdjustIndices = Module["_PySlice_AdjustIndices"] = function() {
            return (_PySlice_AdjustIndices = Module["_PySlice_AdjustIndices"] = Module["asm"]["PySlice_AdjustIndices"]).apply(null, arguments)
        }
        ;
        var _PySequence_Fast = Module["_PySequence_Fast"] = function() {
            return (_PySequence_Fast = Module["_PySequence_Fast"] = Module["asm"]["PySequence_Fast"]).apply(null, arguments)
        }
        ;
        var _PySet_New = Module["_PySet_New"] = function() {
            return (_PySet_New = Module["_PySet_New"] = Module["asm"]["PySet_New"]).apply(null, arguments)
        }
        ;
        var __PySet_Update = Module["__PySet_Update"] = function() {
            return (__PySet_Update = Module["__PySet_Update"] = Module["asm"]["_PySet_Update"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromString = Module["_PyUnicode_FromString"] = function() {
            return (_PyUnicode_FromString = Module["_PyUnicode_FromString"] = Module["asm"]["PyUnicode_FromString"]).apply(null, arguments)
        }
        ;
        var _PySet_Discard = Module["_PySet_Discard"] = function() {
            return (_PySet_Discard = Module["_PySet_Discard"] = Module["asm"]["PySet_Discard"]).apply(null, arguments)
        }
        ;
        var _PyList_New = Module["_PyList_New"] = function() {
            return (_PyList_New = Module["_PyList_New"] = Module["asm"]["PyList_New"]).apply(null, arguments)
        }
        ;
        var __PyList_Extend = Module["__PyList_Extend"] = function() {
            return (__PyList_Extend = Module["__PyList_Extend"] = Module["asm"]["_PyList_Extend"]).apply(null, arguments)
        }
        ;
        var _PyList_Sort = Module["_PyList_Sort"] = function() {
            return (_PyList_Sort = Module["_PyList_Sort"] = Module["asm"]["PyList_Sort"]).apply(null, arguments)
        }
        ;
        var _PyObject_CallNoArgs = Module["_PyObject_CallNoArgs"] = function() {
            return (_PyObject_CallNoArgs = Module["_PyObject_CallNoArgs"] = Module["asm"]["PyObject_CallNoArgs"]).apply(null, arguments)
        }
        ;
        var _PyObject_GetIter = Module["_PyObject_GetIter"] = function() {
            return (_PyObject_GetIter = Module["_PyObject_GetIter"] = Module["asm"]["PyObject_GetIter"]).apply(null, arguments)
        }
        ;
        var _PyErr_ExceptionMatches = Module["_PyErr_ExceptionMatches"] = function() {
            return (_PyErr_ExceptionMatches = Module["_PyErr_ExceptionMatches"] = Module["asm"]["PyErr_ExceptionMatches"]).apply(null, arguments)
        }
        ;
        var _Py_EnterRecursiveCall = Module["_Py_EnterRecursiveCall"] = function() {
            return (_Py_EnterRecursiveCall = Module["_Py_EnterRecursiveCall"] = Module["asm"]["Py_EnterRecursiveCall"]).apply(null, arguments)
        }
        ;
        var _Py_LeaveRecursiveCall = Module["_Py_LeaveRecursiveCall"] = function() {
            return (_Py_LeaveRecursiveCall = Module["_Py_LeaveRecursiveCall"] = Module["asm"]["Py_LeaveRecursiveCall"]).apply(null, arguments)
        }
        ;
        var _PyObject_GenericGetAttr = Module["_PyObject_GenericGetAttr"] = function() {
            return (_PyObject_GenericGetAttr = Module["_PyObject_GenericGetAttr"] = Module["asm"]["PyObject_GenericGetAttr"]).apply(null, arguments)
        }
        ;
        var _strcmp = Module["_strcmp"] = function() {
            return (_strcmp = Module["_strcmp"] = Module["asm"]["strcmp"]).apply(null, arguments)
        }
        ;
        var _strncmp = Module["_strncmp"] = function() {
            return (_strncmp = Module["_strncmp"] = Module["asm"]["strncmp"]).apply(null, arguments)
        }
        ;
        var _PyObject_GenericSetAttr = Module["_PyObject_GenericSetAttr"] = function() {
            return (_PyObject_GenericSetAttr = Module["_PyObject_GenericSetAttr"] = Module["asm"]["PyObject_GenericSetAttr"]).apply(null, arguments)
        }
        ;
        var __Py_HashBytes = Module["__Py_HashBytes"] = function() {
            return (__Py_HashBytes = Module["__Py_HashBytes"] = Module["asm"]["_Py_HashBytes"]).apply(null, arguments)
        }
        ;
        var __PyArg_ParseStackAndKeywords_SizeT = Module["__PyArg_ParseStackAndKeywords_SizeT"] = function() {
            return (__PyArg_ParseStackAndKeywords_SizeT = Module["__PyArg_ParseStackAndKeywords_SizeT"] = Module["asm"]["_PyArg_ParseStackAndKeywords_SizeT"]).apply(null, arguments)
        }
        ;
        var __PyArg_CheckPositional = Module["__PyArg_CheckPositional"] = function() {
            return (__PyArg_CheckPositional = Module["__PyArg_CheckPositional"] = Module["asm"]["_PyArg_CheckPositional"]).apply(null, arguments)
        }
        ;
        var __PyNumber_Index = Module["__PyNumber_Index"] = function() {
            return (__PyNumber_Index = Module["__PyNumber_Index"] = Module["asm"]["_PyNumber_Index"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsSsize_t = Module["_PyLong_AsSsize_t"] = function() {
            return (_PyLong_AsSsize_t = Module["_PyLong_AsSsize_t"] = Module["asm"]["PyLong_AsSsize_t"]).apply(null, arguments)
        }
        ;
        var _PyObject_GetBuffer = Module["_PyObject_GetBuffer"] = function() {
            return (_PyObject_GetBuffer = Module["_PyObject_GetBuffer"] = Module["asm"]["PyObject_GetBuffer"]).apply(null, arguments)
        }
        ;
        var _PyBuffer_Release = Module["_PyBuffer_Release"] = function() {
            return (_PyBuffer_Release = Module["_PyBuffer_Release"] = Module["asm"]["PyBuffer_Release"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsLong = Module["_PyLong_AsLong"] = function() {
            return (_PyLong_AsLong = Module["_PyLong_AsLong"] = Module["asm"]["PyLong_AsLong"]).apply(null, arguments)
        }
        ;
        var _PyTuple_New = Module["_PyTuple_New"] = function() {
            return (_PyTuple_New = Module["_PyTuple_New"] = Module["asm"]["PyTuple_New"]).apply(null, arguments)
        }
        ;
        var _PyObject_Repr = Module["_PyObject_Repr"] = function() {
            return (_PyObject_Repr = Module["_PyObject_Repr"] = Module["asm"]["PyObject_Repr"]).apply(null, arguments)
        }
        ;
        var _PyTuple_Pack = Module["_PyTuple_Pack"] = function() {
            return (_PyTuple_Pack = Module["_PyTuple_Pack"] = Module["asm"]["PyTuple_Pack"]).apply(null, arguments)
        }
        ;
        var _main = Module["_main"] = function() {
            return (_main = Module["_main"] = Module["asm"]["__main_argc_argv"]).apply(null, arguments)
        }
        ;
        var _PyPreConfig_InitPythonConfig = Module["_PyPreConfig_InitPythonConfig"] = function() {
            return (_PyPreConfig_InitPythonConfig = Module["_PyPreConfig_InitPythonConfig"] = Module["asm"]["PyPreConfig_InitPythonConfig"]).apply(null, arguments)
        }
        ;
        var _Py_PreInitializeFromBytesArgs = Module["_Py_PreInitializeFromBytesArgs"] = function() {
            return (_Py_PreInitializeFromBytesArgs = Module["_Py_PreInitializeFromBytesArgs"] = Module["asm"]["Py_PreInitializeFromBytesArgs"]).apply(null, arguments)
        }
        ;
        var _PyStatus_Exception = Module["_PyStatus_Exception"] = function() {
            return (_PyStatus_Exception = Module["_PyStatus_Exception"] = Module["asm"]["PyStatus_Exception"]).apply(null, arguments)
        }
        ;
        var _PyConfig_InitPythonConfig = Module["_PyConfig_InitPythonConfig"] = function() {
            return (_PyConfig_InitPythonConfig = Module["_PyConfig_InitPythonConfig"] = Module["asm"]["PyConfig_InitPythonConfig"]).apply(null, arguments)
        }
        ;
        var _PyConfig_SetBytesArgv = Module["_PyConfig_SetBytesArgv"] = function() {
            return (_PyConfig_SetBytesArgv = Module["_PyConfig_SetBytesArgv"] = Module["asm"]["PyConfig_SetBytesArgv"]).apply(null, arguments)
        }
        ;
        var _PyConfig_SetBytesString = Module["_PyConfig_SetBytesString"] = function() {
            return (_PyConfig_SetBytesString = Module["_PyConfig_SetBytesString"] = Module["asm"]["PyConfig_SetBytesString"]).apply(null, arguments)
        }
        ;
        var _Py_InitializeFromConfig = Module["_Py_InitializeFromConfig"] = function() {
            return (_Py_InitializeFromConfig = Module["_Py_InitializeFromConfig"] = Module["asm"]["Py_InitializeFromConfig"]).apply(null, arguments)
        }
        ;
        var _PyConfig_Clear = Module["_PyConfig_Clear"] = function() {
            return (_PyConfig_Clear = Module["_PyConfig_Clear"] = Module["asm"]["PyConfig_Clear"]).apply(null, arguments)
        }
        ;
        var _Py_ExitStatusException = Module["_Py_ExitStatusException"] = function() {
            return (_Py_ExitStatusException = Module["_Py_ExitStatusException"] = Module["asm"]["Py_ExitStatusException"]).apply(null, arguments)
        }
        ;
        var _pyodide_init = Module["_pyodide_init"] = function() {
            return (_pyodide_init = Module["_pyodide_init"] = Module["asm"]["pyodide_init"]).apply(null, arguments)
        }
        ;
        var _PyModule_Create2 = Module["_PyModule_Create2"] = function() {
            return (_PyModule_Create2 = Module["_PyModule_Create2"] = Module["asm"]["PyModule_Create2"]).apply(null, arguments)
        }
        ;
        var _python2js_init = Module["_python2js_init"] = function() {
            return (_python2js_init = Module["_python2js_init"] = Module["asm"]["python2js_init"]).apply(null, arguments)
        }
        ;
        var _pyproxy_init = Module["_pyproxy_init"] = function() {
            return (_pyproxy_init = Module["_pyproxy_init"] = Module["asm"]["pyproxy_init"]).apply(null, arguments)
        }
        ;
        var _PyImport_GetModuleDict = Module["_PyImport_GetModuleDict"] = function() {
            return (_PyImport_GetModuleDict = Module["_PyImport_GetModuleDict"] = Module["asm"]["PyImport_GetModuleDict"]).apply(null, arguments)
        }
        ;
        var _PyDict_SetItemString = Module["_PyDict_SetItemString"] = function() {
            return (_PyDict_SetItemString = Module["_PyDict_SetItemString"] = Module["asm"]["PyDict_SetItemString"]).apply(null, arguments)
        }
        ;
        var _run_main = Module["_run_main"] = function() {
            return (_run_main = Module["_run_main"] = Module["asm"]["run_main"]).apply(null, arguments)
        }
        ;
        var _pyproxy_getflags = Module["_pyproxy_getflags"] = function() {
            return (_pyproxy_getflags = Module["_pyproxy_getflags"] = Module["asm"]["pyproxy_getflags"]).apply(null, arguments)
        }
        ;
        var _PyObject_HasAttr = Module["_PyObject_HasAttr"] = function() {
            return (_PyObject_HasAttr = Module["_PyObject_HasAttr"] = Module["asm"]["PyObject_HasAttr"]).apply(null, arguments)
        }
        ;
        var _PySequence_Check = Module["_PySequence_Check"] = function() {
            return (_PySequence_Check = Module["_PySequence_Check"] = Module["asm"]["PySequence_Check"]).apply(null, arguments)
        }
        ;
        var _PyIter_Check = Module["_PyIter_Check"] = function() {
            return (_PyIter_Check = Module["_PyIter_Check"] = Module["asm"]["PyIter_Check"]).apply(null, arguments)
        }
        ;
        var __pyproxy_repr = Module["__pyproxy_repr"] = function() {
            return (__pyproxy_repr = Module["__pyproxy_repr"] = Module["asm"]["_pyproxy_repr"]).apply(null, arguments)
        }
        ;
        var __pyproxy_type = Module["__pyproxy_type"] = function() {
            return (__pyproxy_type = Module["__pyproxy_type"] = Module["asm"]["_pyproxy_type"]).apply(null, arguments)
        }
        ;
        var __pyproxy_hasattr = Module["__pyproxy_hasattr"] = function() {
            return (__pyproxy_hasattr = Module["__pyproxy_hasattr"] = Module["asm"]["_pyproxy_hasattr"]).apply(null, arguments)
        }
        ;
        var __pyproxy_getattr = Module["__pyproxy_getattr"] = function() {
            return (__pyproxy_getattr = Module["__pyproxy_getattr"] = Module["asm"]["_pyproxy_getattr"]).apply(null, arguments)
        }
        ;
        var __PyObject_GetMethod = Module["__PyObject_GetMethod"] = function() {
            return (__PyObject_GetMethod = Module["__PyObject_GetMethod"] = Module["asm"]["_PyObject_GetMethod"]).apply(null, arguments)
        }
        ;
        var __pyproxy_setattr = Module["__pyproxy_setattr"] = function() {
            return (__pyproxy_setattr = Module["__pyproxy_setattr"] = Module["asm"]["_pyproxy_setattr"]).apply(null, arguments)
        }
        ;
        var _PyObject_SetAttr = Module["_PyObject_SetAttr"] = function() {
            return (_PyObject_SetAttr = Module["_PyObject_SetAttr"] = Module["asm"]["PyObject_SetAttr"]).apply(null, arguments)
        }
        ;
        var __pyproxy_delattr = Module["__pyproxy_delattr"] = function() {
            return (__pyproxy_delattr = Module["__pyproxy_delattr"] = Module["asm"]["_pyproxy_delattr"]).apply(null, arguments)
        }
        ;
        var __pyproxy_getitem = Module["__pyproxy_getitem"] = function() {
            return (__pyproxy_getitem = Module["__pyproxy_getitem"] = Module["asm"]["_pyproxy_getitem"]).apply(null, arguments)
        }
        ;
        var _PyObject_GetItem = Module["_PyObject_GetItem"] = function() {
            return (_PyObject_GetItem = Module["_PyObject_GetItem"] = Module["asm"]["PyObject_GetItem"]).apply(null, arguments)
        }
        ;
        var __pyproxy_setitem = Module["__pyproxy_setitem"] = function() {
            return (__pyproxy_setitem = Module["__pyproxy_setitem"] = Module["asm"]["_pyproxy_setitem"]).apply(null, arguments)
        }
        ;
        var _PyObject_SetItem = Module["_PyObject_SetItem"] = function() {
            return (_PyObject_SetItem = Module["_PyObject_SetItem"] = Module["asm"]["PyObject_SetItem"]).apply(null, arguments)
        }
        ;
        var __pyproxy_delitem = Module["__pyproxy_delitem"] = function() {
            return (__pyproxy_delitem = Module["__pyproxy_delitem"] = Module["asm"]["_pyproxy_delitem"]).apply(null, arguments)
        }
        ;
        var _PyObject_DelItem = Module["_PyObject_DelItem"] = function() {
            return (_PyObject_DelItem = Module["_PyObject_DelItem"] = Module["asm"]["PyObject_DelItem"]).apply(null, arguments)
        }
        ;
        var __pyproxy_contains = Module["__pyproxy_contains"] = function() {
            return (__pyproxy_contains = Module["__pyproxy_contains"] = Module["asm"]["_pyproxy_contains"]).apply(null, arguments)
        }
        ;
        var _PySequence_Contains = Module["_PySequence_Contains"] = function() {
            return (_PySequence_Contains = Module["_PySequence_Contains"] = Module["asm"]["PySequence_Contains"]).apply(null, arguments)
        }
        ;
        var __pyproxy_ownKeys = Module["__pyproxy_ownKeys"] = function() {
            return (__pyproxy_ownKeys = Module["__pyproxy_ownKeys"] = Module["asm"]["_pyproxy_ownKeys"]).apply(null, arguments)
        }
        ;
        var _PyObject_Dir = Module["_PyObject_Dir"] = function() {
            return (_PyObject_Dir = Module["_PyObject_Dir"] = Module["asm"]["PyObject_Dir"]).apply(null, arguments)
        }
        ;
        var _PyList_Size = Module["_PyList_Size"] = function() {
            return (_PyList_Size = Module["_PyList_Size"] = Module["asm"]["PyList_Size"]).apply(null, arguments)
        }
        ;
        var _PyList_GetItem = Module["_PyList_GetItem"] = function() {
            return (_PyList_GetItem = Module["_PyList_GetItem"] = Module["asm"]["PyList_GetItem"]).apply(null, arguments)
        }
        ;
        var __pyproxy_apply = Module["__pyproxy_apply"] = function() {
            return (__pyproxy_apply = Module["__pyproxy_apply"] = Module["asm"]["_pyproxy_apply"]).apply(null, arguments)
        }
        ;
        var __pyproxy_iter_next = Module["__pyproxy_iter_next"] = function() {
            return (__pyproxy_iter_next = Module["__pyproxy_iter_next"] = Module["asm"]["_pyproxy_iter_next"]).apply(null, arguments)
        }
        ;
        var _PyIter_Next = Module["_PyIter_Next"] = function() {
            return (_PyIter_Next = Module["_PyIter_Next"] = Module["asm"]["PyIter_Next"]).apply(null, arguments)
        }
        ;
        var __pyproxyGen_Send = Module["__pyproxyGen_Send"] = function() {
            return (__pyproxyGen_Send = Module["__pyproxyGen_Send"] = Module["asm"]["_pyproxyGen_Send"]).apply(null, arguments)
        }
        ;
        var _PyIter_Send = Module["_PyIter_Send"] = function() {
            return (_PyIter_Send = Module["_PyIter_Send"] = Module["asm"]["PyIter_Send"]).apply(null, arguments)
        }
        ;
        var _FutureDoneCallback_call_resolve = Module["_FutureDoneCallback_call_resolve"] = function() {
            return (_FutureDoneCallback_call_resolve = Module["_FutureDoneCallback_call_resolve"] = Module["asm"]["FutureDoneCallback_call_resolve"]).apply(null, arguments)
        }
        ;
        var _FutureDoneCallback_call_reject = Module["_FutureDoneCallback_call_reject"] = function() {
            return (_FutureDoneCallback_call_reject = Module["_FutureDoneCallback_call_reject"] = Module["asm"]["FutureDoneCallback_call_reject"]).apply(null, arguments)
        }
        ;
        var _FutureDoneCallback_call = Module["_FutureDoneCallback_call"] = function() {
            return (_FutureDoneCallback_call = Module["_FutureDoneCallback_call"] = Module["asm"]["FutureDoneCallback_call"]).apply(null, arguments)
        }
        ;
        var _PyArg_UnpackTuple = Module["_PyArg_UnpackTuple"] = function() {
            return (_PyArg_UnpackTuple = Module["_PyArg_UnpackTuple"] = Module["asm"]["PyArg_UnpackTuple"]).apply(null, arguments)
        }
        ;
        var __pyproxy_ensure_future = Module["__pyproxy_ensure_future"] = function() {
            return (__pyproxy_ensure_future = Module["__pyproxy_ensure_future"] = Module["asm"]["_pyproxy_ensure_future"]).apply(null, arguments)
        }
        ;
        var __pyproxy_get_buffer = Module["__pyproxy_get_buffer"] = function() {
            return (__pyproxy_get_buffer = Module["__pyproxy_get_buffer"] = Module["asm"]["_pyproxy_get_buffer"]).apply(null, arguments)
        }
        ;
        var _PyBuffer_FillContiguousStrides = Module["_PyBuffer_FillContiguousStrides"] = function() {
            return (_PyBuffer_FillContiguousStrides = Module["_PyBuffer_FillContiguousStrides"] = Module["asm"]["PyBuffer_FillContiguousStrides"]).apply(null, arguments)
        }
        ;
        var _PyBuffer_IsContiguous = Module["_PyBuffer_IsContiguous"] = function() {
            return (_PyBuffer_IsContiguous = Module["_PyBuffer_IsContiguous"] = Module["asm"]["PyBuffer_IsContiguous"]).apply(null, arguments)
        }
        ;
        var __python2js_buffer = Module["__python2js_buffer"] = function() {
            return (__python2js_buffer = Module["__python2js_buffer"] = Module["asm"]["_python2js_buffer"]).apply(null, arguments)
        }
        ;
        var __python2js = Module["__python2js"] = function() {
            return (__python2js = Module["__python2js"] = Module["asm"]["_python2js"]).apply(null, arguments)
        }
        ;
        var _python2js_inner = Module["_python2js_inner"] = function() {
            return (_python2js_inner = Module["_python2js_inner"] = Module["asm"]["python2js_inner"]).apply(null, arguments)
        }
        ;
        var _PySequence_Size = Module["_PySequence_Size"] = function() {
            return (_PySequence_Size = Module["_PySequence_Size"] = Module["asm"]["PySequence_Size"]).apply(null, arguments)
        }
        ;
        var _PySequence_GetItem = Module["_PySequence_GetItem"] = function() {
            return (_PySequence_GetItem = Module["_PySequence_GetItem"] = Module["asm"]["PySequence_GetItem"]).apply(null, arguments)
        }
        ;
        var _PyObject_CheckBuffer = Module["_PyObject_CheckBuffer"] = function() {
            return (_PyObject_CheckBuffer = Module["_PyObject_CheckBuffer"] = Module["asm"]["PyObject_CheckBuffer"]).apply(null, arguments)
        }
        ;
        var _PyFloat_AsDouble = Module["_PyFloat_AsDouble"] = function() {
            return (_PyFloat_AsDouble = Module["_PyFloat_AsDouble"] = Module["asm"]["PyFloat_AsDouble"]).apply(null, arguments)
        }
        ;
        var __PyErr_FormatFromCause = Module["__PyErr_FormatFromCause"] = function() {
            return (__PyErr_FormatFromCause = Module["__PyErr_FormatFromCause"] = Module["asm"]["_PyErr_FormatFromCause"]).apply(null, arguments)
        }
        ;
        var _python2js_with_depth = Module["_python2js_with_depth"] = function() {
            return (_python2js_with_depth = Module["_python2js_with_depth"] = Module["asm"]["python2js_with_depth"]).apply(null, arguments)
        }
        ;
        var _python2js_custom = Module["_python2js_custom"] = function() {
            return (_python2js_custom = Module["_python2js_custom"] = Module["asm"]["python2js_custom"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsLongAndOverflow = Module["_PyLong_AsLongAndOverflow"] = function() {
            return (_PyLong_AsLongAndOverflow = Module["_PyLong_AsLongAndOverflow"] = Module["asm"]["PyLong_AsLongAndOverflow"]).apply(null, arguments)
        }
        ;
        var __PyLong_AsByteArray = Module["__PyLong_AsByteArray"] = function() {
            return (__PyLong_AsByteArray = Module["__PyLong_AsByteArray"] = Module["asm"]["_PyLong_AsByteArray"]).apply(null, arguments)
        }
        ;
        var _PyDict_Next = Module["_PyDict_Next"] = function() {
            return (_PyDict_Next = Module["_PyDict_Next"] = Module["asm"]["PyDict_Next"]).apply(null, arguments)
        }
        ;
        var _Py_GetBuildInfo = Module["_Py_GetBuildInfo"] = function() {
            return (_Py_GetBuildInfo = Module["_Py_GetBuildInfo"] = Module["asm"]["Py_GetBuildInfo"]).apply(null, arguments)
        }
        ;
        var _PyOS_snprintf = Module["_PyOS_snprintf"] = function() {
            return (_PyOS_snprintf = Module["_PyOS_snprintf"] = Module["asm"]["PyOS_snprintf"]).apply(null, arguments)
        }
        ;
        var __Py_gitversion = Module["__Py_gitversion"] = function() {
            return (__Py_gitversion = Module["__Py_gitversion"] = Module["asm"]["_Py_gitversion"]).apply(null, arguments)
        }
        ;
        var __Py_gitidentifier = Module["__Py_gitidentifier"] = function() {
            return (__Py_gitidentifier = Module["__Py_gitidentifier"] = Module["asm"]["_Py_gitidentifier"]).apply(null, arguments)
        }
        ;
        var _PyToken_OneChar = Module["_PyToken_OneChar"] = function() {
            return (_PyToken_OneChar = Module["_PyToken_OneChar"] = Module["asm"]["PyToken_OneChar"]).apply(null, arguments)
        }
        ;
        var _PyToken_TwoChars = Module["_PyToken_TwoChars"] = function() {
            return (_PyToken_TwoChars = Module["_PyToken_TwoChars"] = Module["asm"]["PyToken_TwoChars"]).apply(null, arguments)
        }
        ;
        var _PyToken_ThreeChars = Module["_PyToken_ThreeChars"] = function() {
            return (_PyToken_ThreeChars = Module["_PyToken_ThreeChars"] = Module["asm"]["PyToken_ThreeChars"]).apply(null, arguments)
        }
        ;
        var _strlen = Module["_strlen"] = function() {
            return (_strlen = Module["_strlen"] = Module["asm"]["strlen"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUTF8 = Module["_PyUnicode_DecodeUTF8"] = function() {
            return (_PyUnicode_DecodeUTF8 = Module["_PyUnicode_DecodeUTF8"] = Module["asm"]["PyUnicode_DecodeUTF8"]).apply(null, arguments)
        }
        ;
        var __PyArena_AddPyObject = Module["__PyArena_AddPyObject"] = function() {
            return (__PyArena_AddPyObject = Module["__PyArena_AddPyObject"] = Module["asm"]["_PyArena_AddPyObject"]).apply(null, arguments)
        }
        ;
        var _PyBytes_AsString = Module["_PyBytes_AsString"] = function() {
            return (_PyBytes_AsString = Module["_PyBytes_AsString"] = Module["asm"]["PyBytes_AsString"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_CompareWithASCIIString = Module["_PyUnicode_CompareWithASCIIString"] = function() {
            return (_PyUnicode_CompareWithASCIIString = Module["_PyUnicode_CompareWithASCIIString"] = Module["asm"]["PyUnicode_CompareWithASCIIString"]).apply(null, arguments)
        }
        ;
        var _PyImport_ImportModuleNoBlock = Module["_PyImport_ImportModuleNoBlock"] = function() {
            return (_PyImport_ImportModuleNoBlock = Module["_PyImport_ImportModuleNoBlock"] = Module["asm"]["PyImport_ImportModuleNoBlock"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_InternFromString = Module["_PyUnicode_InternFromString"] = function() {
            return (_PyUnicode_InternFromString = Module["_PyUnicode_InternFromString"] = Module["asm"]["PyUnicode_InternFromString"]).apply(null, arguments)
        }
        ;
        var __PyType_Name = Module["__PyType_Name"] = function() {
            return (__PyType_Name = Module["__PyType_Name"] = Module["asm"]["_PyType_Name"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_InternInPlace = Module["_PyUnicode_InternInPlace"] = function() {
            return (_PyUnicode_InternInPlace = Module["_PyUnicode_InternInPlace"] = Module["asm"]["PyUnicode_InternInPlace"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromFormatV = Module["_PyUnicode_FromFormatV"] = function() {
            return (_PyUnicode_FromFormatV = Module["_PyUnicode_FromFormatV"] = Module["asm"]["PyUnicode_FromFormatV"]).apply(null, arguments)
        }
        ;
        var _strchr = Module["_strchr"] = function() {
            return (_strchr = Module["_strchr"] = Module["asm"]["strchr"]).apply(null, arguments)
        }
        ;
        var __PyErr_ProgramDecodedTextObject = Module["__PyErr_ProgramDecodedTextObject"] = function() {
            return (__PyErr_ProgramDecodedTextObject = Module["__PyErr_ProgramDecodedTextObject"] = Module["asm"]["_PyErr_ProgramDecodedTextObject"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromStringAndSize = Module["_PyUnicode_FromStringAndSize"] = function() {
            return (_PyUnicode_FromStringAndSize = Module["_PyUnicode_FromStringAndSize"] = Module["asm"]["PyUnicode_FromStringAndSize"]).apply(null, arguments)
        }
        ;
        var _Py_BuildValue = Module["_Py_BuildValue"] = function() {
            return (_Py_BuildValue = Module["_Py_BuildValue"] = Module["asm"]["Py_BuildValue"]).apply(null, arguments)
        }
        ;
        var __PyArena_Malloc = Module["__PyArena_Malloc"] = function() {
            return (__PyArena_Malloc = Module["__PyArena_Malloc"] = Module["asm"]["_PyArena_Malloc"]).apply(null, arguments)
        }
        ;
        var _strncpy = Module["_strncpy"] = function() {
            return (_strncpy = Module["_strncpy"] = Module["asm"]["strncpy"]).apply(null, arguments)
        }
        ;
        var _PyMem_Realloc = Module["_PyMem_Realloc"] = function() {
            return (_PyMem_Realloc = Module["_PyMem_Realloc"] = Module["asm"]["PyMem_Realloc"]).apply(null, arguments)
        }
        ;
        var _PyMem_Calloc = Module["_PyMem_Calloc"] = function() {
            return (_PyMem_Calloc = Module["_PyMem_Calloc"] = Module["asm"]["PyMem_Calloc"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetNone = Module["_PyErr_SetNone"] = function() {
            return (_PyErr_SetNone = Module["_PyErr_SetNone"] = Module["asm"]["PyErr_SetNone"]).apply(null, arguments)
        }
        ;
        var _PyBytes_AsStringAndSize = Module["_PyBytes_AsStringAndSize"] = function() {
            return (_PyBytes_AsStringAndSize = Module["_PyBytes_AsStringAndSize"] = Module["asm"]["PyBytes_AsStringAndSize"]).apply(null, arguments)
        }
        ;
        var _PyObject_Str = Module["_PyObject_Str"] = function() {
            return (_PyObject_Str = Module["_PyObject_Str"] = Module["asm"]["PyObject_Str"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_Ready = Module["__PyUnicode_Ready"] = function() {
            return (__PyUnicode_Ready = Module["__PyUnicode_Ready"] = Module["asm"]["_PyUnicode_Ready"]).apply(null, arguments)
        }
        ;
        var _strcpy = Module["_strcpy"] = function() {
            return (_strcpy = Module["_strcpy"] = Module["asm"]["strcpy"]).apply(null, arguments)
        }
        ;
        var _PyBytes_ConcatAndDel = Module["_PyBytes_ConcatAndDel"] = function() {
            return (_PyBytes_ConcatAndDel = Module["_PyBytes_ConcatAndDel"] = Module["asm"]["PyBytes_ConcatAndDel"]).apply(null, arguments)
        }
        ;
        var ___errno_location = Module["___errno_location"] = function() {
            return (___errno_location = Module["___errno_location"] = Module["asm"]["__errno_location"]).apply(null, arguments)
        }
        ;
        var _PyOS_strtoul = Module["_PyOS_strtoul"] = function() {
            return (_PyOS_strtoul = Module["_PyOS_strtoul"] = Module["asm"]["PyOS_strtoul"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromString = Module["_PyLong_FromString"] = function() {
            return (_PyLong_FromString = Module["_PyLong_FromString"] = Module["asm"]["PyLong_FromString"]).apply(null, arguments)
        }
        ;
        var _PyOS_strtol = Module["_PyOS_strtol"] = function() {
            return (_PyOS_strtol = Module["_PyOS_strtol"] = Module["asm"]["PyOS_strtol"]).apply(null, arguments)
        }
        ;
        var _PyOS_string_to_double = Module["_PyOS_string_to_double"] = function() {
            return (_PyOS_string_to_double = Module["_PyOS_string_to_double"] = Module["asm"]["PyOS_string_to_double"]).apply(null, arguments)
        }
        ;
        var _PyComplex_FromCComplex = Module["_PyComplex_FromCComplex"] = function() {
            return (_PyComplex_FromCComplex = Module["_PyComplex_FromCComplex"] = Module["asm"]["PyComplex_FromCComplex"]).apply(null, arguments)
        }
        ;
        var _PyFloat_FromDouble = Module["_PyFloat_FromDouble"] = function() {
            return (_PyFloat_FromDouble = Module["_PyFloat_FromDouble"] = Module["asm"]["PyFloat_FromDouble"]).apply(null, arguments)
        }
        ;
        var __PyErr_BadInternalCall = Module["__PyErr_BadInternalCall"] = function() {
            return (__PyErr_BadInternalCall = Module["__PyErr_BadInternalCall"] = Module["asm"]["_PyErr_BadInternalCall"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUTF8Stateful = Module["_PyUnicode_DecodeUTF8Stateful"] = function() {
            return (_PyUnicode_DecodeUTF8Stateful = Module["_PyUnicode_DecodeUTF8Stateful"] = Module["asm"]["PyUnicode_DecodeUTF8Stateful"]).apply(null, arguments)
        }
        ;
        var __PyBytes_DecodeEscape = Module["__PyBytes_DecodeEscape"] = function() {
            return (__PyBytes_DecodeEscape = Module["__PyBytes_DecodeEscape"] = Module["asm"]["_PyBytes_DecodeEscape"]).apply(null, arguments)
        }
        ;
        var _siprintf = Module["_siprintf"] = function() {
            return (_siprintf = Module["_siprintf"] = Module["asm"]["siprintf"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_DecodeUnicodeEscapeInternal = Module["__PyUnicode_DecodeUnicodeEscapeInternal"] = function() {
            return (__PyUnicode_DecodeUnicodeEscapeInternal = Module["__PyUnicode_DecodeUnicodeEscapeInternal"] = Module["asm"]["_PyUnicode_DecodeUnicodeEscapeInternal"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AppendAndDel = Module["_PyUnicode_AppendAndDel"] = function() {
            return (_PyUnicode_AppendAndDel = Module["_PyUnicode_AppendAndDel"] = Module["asm"]["PyUnicode_AppendAndDel"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromFormat = Module["_PyUnicode_FromFormat"] = function() {
            return (_PyUnicode_FromFormat = Module["_PyUnicode_FromFormat"] = Module["asm"]["PyUnicode_FromFormat"]).apply(null, arguments)
        }
        ;
        var _PyErr_WarnExplicitObject = Module["_PyErr_WarnExplicitObject"] = function() {
            return (_PyErr_WarnExplicitObject = Module["_PyErr_WarnExplicitObject"] = Module["asm"]["PyErr_WarnExplicitObject"]).apply(null, arguments)
        }
        ;
        var _PySys_Audit = Module["_PySys_Audit"] = function() {
            return (_PySys_Audit = Module["_PySys_Audit"] = Module["asm"]["PySys_Audit"]).apply(null, arguments)
        }
        ;
        var _fflush = Module["_fflush"] = function() {
            return (_fflush = Module["_fflush"] = Module["asm"]["fflush"]).apply(null, arguments)
        }
        ;
        var _fputs = Module["_fputs"] = function() {
            return (_fputs = Module["_fputs"] = Module["asm"]["fputs"]).apply(null, arguments)
        }
        ;
        var _PyMem_RawFree = Module["_PyMem_RawFree"] = function() {
            return (_PyMem_RawFree = Module["_PyMem_RawFree"] = Module["asm"]["PyMem_RawFree"]).apply(null, arguments)
        }
        ;
        var _PyEval_RestoreThread = Module["_PyEval_RestoreThread"] = function() {
            return (_PyEval_RestoreThread = Module["_PyEval_RestoreThread"] = Module["asm"]["PyEval_RestoreThread"]).apply(null, arguments)
        }
        ;
        var _PyEval_SaveThread = Module["_PyEval_SaveThread"] = function() {
            return (_PyEval_SaveThread = Module["_PyEval_SaveThread"] = Module["asm"]["PyEval_SaveThread"]).apply(null, arguments)
        }
        ;
        var _PyMem_RawRealloc = Module["_PyMem_RawRealloc"] = function() {
            return (_PyMem_RawRealloc = Module["_PyMem_RawRealloc"] = Module["asm"]["PyMem_RawRealloc"]).apply(null, arguments)
        }
        ;
        var _clearerr = Module["_clearerr"] = function() {
            return (_clearerr = Module["_clearerr"] = Module["asm"]["clearerr"]).apply(null, arguments)
        }
        ;
        var _fgets = Module["_fgets"] = function() {
            return (_fgets = Module["_fgets"] = Module["asm"]["fgets"]).apply(null, arguments)
        }
        ;
        var _feof = Module["_feof"] = function() {
            return (_feof = Module["_feof"] = Module["asm"]["feof"]).apply(null, arguments)
        }
        ;
        var __PyOS_InterruptOccurred = Module["__PyOS_InterruptOccurred"] = function() {
            return (__PyOS_InterruptOccurred = Module["__PyOS_InterruptOccurred"] = Module["asm"]["_PyOS_InterruptOccurred"]).apply(null, arguments)
        }
        ;
        var _PyErr_CheckSignals = Module["_PyErr_CheckSignals"] = function() {
            return (_PyErr_CheckSignals = Module["_PyErr_CheckSignals"] = Module["asm"]["PyErr_CheckSignals"]).apply(null, arguments)
        }
        ;
        var _PyOS_Readline = Module["_PyOS_Readline"] = function() {
            return (_PyOS_Readline = Module["_PyOS_Readline"] = Module["asm"]["PyOS_Readline"]).apply(null, arguments)
        }
        ;
        var _PyThread_allocate_lock = Module["_PyThread_allocate_lock"] = function() {
            return (_PyThread_allocate_lock = Module["_PyThread_allocate_lock"] = Module["asm"]["PyThread_allocate_lock"]).apply(null, arguments)
        }
        ;
        var _PyThread_acquire_lock = Module["_PyThread_acquire_lock"] = function() {
            return (_PyThread_acquire_lock = Module["_PyThread_acquire_lock"] = Module["asm"]["PyThread_acquire_lock"]).apply(null, arguments)
        }
        ;
        var _isatty = Module["_isatty"] = function() {
            return (_isatty = Module["_isatty"] = Module["asm"]["isatty"]).apply(null, arguments)
        }
        ;
        var _PyThread_release_lock = Module["_PyThread_release_lock"] = function() {
            return (_PyThread_release_lock = Module["_PyThread_release_lock"] = Module["asm"]["PyThread_release_lock"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Decode = Module["_PyUnicode_Decode"] = function() {
            return (_PyUnicode_Decode = Module["_PyUnicode_Decode"] = Module["asm"]["PyUnicode_Decode"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUTF8String = Module["_PyUnicode_AsUTF8String"] = function() {
            return (_PyUnicode_AsUTF8String = Module["_PyUnicode_AsUTF8String"] = Module["asm"]["PyUnicode_AsUTF8String"]).apply(null, arguments)
        }
        ;
        var _memcmp = Module["_memcmp"] = function() {
            return (_memcmp = Module["_memcmp"] = Module["asm"]["memcmp"]).apply(null, arguments)
        }
        ;
        var __Py_FatalErrorFunc = Module["__Py_FatalErrorFunc"] = function() {
            return (__Py_FatalErrorFunc = Module["__Py_FatalErrorFunc"] = Module["asm"]["_Py_FatalErrorFunc"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ScanIdentifier = Module["__PyUnicode_ScanIdentifier"] = function() {
            return (__PyUnicode_ScanIdentifier = Module["__PyUnicode_ScanIdentifier"] = Module["asm"]["_PyUnicode_ScanIdentifier"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Substring = Module["_PyUnicode_Substring"] = function() {
            return (_PyUnicode_Substring = Module["_PyUnicode_Substring"] = Module["asm"]["PyUnicode_Substring"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsPrintable = Module["__PyUnicode_IsPrintable"] = function() {
            return (__PyUnicode_IsPrintable = Module["__PyUnicode_IsPrintable"] = Module["asm"]["_PyUnicode_IsPrintable"]).apply(null, arguments)
        }
        ;
        var _isxdigit = Module["_isxdigit"] = function() {
            return (_isxdigit = Module["_isxdigit"] = Module["asm"]["isxdigit"]).apply(null, arguments)
        }
        ;
        var __Py_dup = Module["__Py_dup"] = function() {
            return (__Py_dup = Module["__Py_dup"] = Module["asm"]["_Py_dup"]).apply(null, arguments)
        }
        ;
        var _fdopen = Module["_fdopen"] = function() {
            return (_fdopen = Module["_fdopen"] = Module["asm"]["fdopen"]).apply(null, arguments)
        }
        ;
        var _fclose = Module["_fclose"] = function() {
            return (_fclose = Module["_fclose"] = Module["asm"]["fclose"]).apply(null, arguments)
        }
        ;
        var _tolower = Module["_tolower"] = function() {
            return (_tolower = Module["_tolower"] = Module["asm"]["tolower"]).apply(null, arguments)
        }
        ;
        var _getc = Module["_getc"] = function() {
            return (_getc = Module["_getc"] = Module["asm"]["getc"]).apply(null, arguments)
        }
        ;
        var _ungetc = Module["_ungetc"] = function() {
            return (_ungetc = Module["_ungetc"] = Module["asm"]["ungetc"]).apply(null, arguments)
        }
        ;
        var _Py_UniversalNewlineFgets = Module["_Py_UniversalNewlineFgets"] = function() {
            return (_Py_UniversalNewlineFgets = Module["_Py_UniversalNewlineFgets"] = Module["asm"]["Py_UniversalNewlineFgets"]).apply(null, arguments)
        }
        ;
        var _ftell = Module["_ftell"] = function() {
            return (_ftell = Module["_ftell"] = Module["asm"]["ftell"]).apply(null, arguments)
        }
        ;
        var _lseek = Module["_lseek"] = function() {
            return (_lseek = Module["_lseek"] = Module["asm"]["lseek"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetFromErrnoWithFilename = Module["_PyErr_SetFromErrnoWithFilename"] = function() {
            return (_PyErr_SetFromErrnoWithFilename = Module["_PyErr_SetFromErrnoWithFilename"] = Module["asm"]["PyErr_SetFromErrnoWithFilename"]).apply(null, arguments)
        }
        ;
        var _strcspn = Module["_strcspn"] = function() {
            return (_strcspn = Module["_strcspn"] = Module["asm"]["strcspn"]).apply(null, arguments)
        }
        ;
        var _PyObject_Type = Module["_PyObject_Type"] = function() {
            return (_PyObject_Type = Module["_PyObject_Type"] = Module["asm"]["PyObject_Type"]).apply(null, arguments)
        }
        ;
        var __PyErr_SetString = Module["__PyErr_SetString"] = function() {
            return (__PyErr_SetString = Module["__PyErr_SetString"] = Module["asm"]["_PyErr_SetString"]).apply(null, arguments)
        }
        ;
        var _PyObject_Size = Module["_PyObject_Size"] = function() {
            return (_PyObject_Size = Module["_PyObject_Size"] = Module["asm"]["PyObject_Size"]).apply(null, arguments)
        }
        ;
        var _PyMapping_Size = Module["_PyMapping_Size"] = function() {
            return (_PyMapping_Size = Module["_PyMapping_Size"] = Module["asm"]["PyMapping_Size"]).apply(null, arguments)
        }
        ;
        var _PyObject_Length = Module["_PyObject_Length"] = function() {
            return (_PyObject_Length = Module["_PyObject_Length"] = Module["asm"]["PyObject_Length"]).apply(null, arguments)
        }
        ;
        var __PyObject_HasLen = Module["__PyObject_HasLen"] = function() {
            return (__PyObject_HasLen = Module["__PyObject_HasLen"] = Module["asm"]["_PyObject_HasLen"]).apply(null, arguments)
        }
        ;
        var _PyObject_LengthHint = Module["_PyObject_LengthHint"] = function() {
            return (_PyObject_LengthHint = Module["_PyObject_LengthHint"] = Module["asm"]["PyObject_LengthHint"]).apply(null, arguments)
        }
        ;
        var __PyErr_ExceptionMatches = Module["__PyErr_ExceptionMatches"] = function() {
            return (__PyErr_ExceptionMatches = Module["__PyErr_ExceptionMatches"] = Module["asm"]["_PyErr_ExceptionMatches"]).apply(null, arguments)
        }
        ;
        var __PyErr_Clear = Module["__PyErr_Clear"] = function() {
            return (__PyErr_Clear = Module["__PyErr_Clear"] = Module["asm"]["_PyErr_Clear"]).apply(null, arguments)
        }
        ;
        var __PyObject_LookupSpecial = Module["__PyObject_LookupSpecial"] = function() {
            return (__PyObject_LookupSpecial = Module["__PyObject_LookupSpecial"] = Module["asm"]["_PyObject_LookupSpecial"]).apply(null, arguments)
        }
        ;
        var _Py_GenericAlias = Module["_Py_GenericAlias"] = function() {
            return (_Py_GenericAlias = Module["_Py_GenericAlias"] = Module["asm"]["Py_GenericAlias"]).apply(null, arguments)
        }
        ;
        var __PyObject_LookupAttrId = Module["__PyObject_LookupAttrId"] = function() {
            return (__PyObject_LookupAttrId = Module["__PyObject_LookupAttrId"] = Module["asm"]["_PyObject_LookupAttrId"]).apply(null, arguments)
        }
        ;
        var _PyErr_GivenExceptionMatches = Module["_PyErr_GivenExceptionMatches"] = function() {
            return (_PyErr_GivenExceptionMatches = Module["_PyErr_GivenExceptionMatches"] = Module["asm"]["PyErr_GivenExceptionMatches"]).apply(null, arguments)
        }
        ;
        var __PyLong_Sign = Module["__PyLong_Sign"] = function() {
            return (__PyLong_Sign = Module["__PyLong_Sign"] = Module["asm"]["_PyLong_Sign"]).apply(null, arguments)
        }
        ;
        var __PyErr_Format = Module["__PyErr_Format"] = function() {
            return (__PyErr_Format = Module["__PyErr_Format"] = Module["asm"]["_PyErr_Format"]).apply(null, arguments)
        }
        ;
        var _PySequence_SetItem = Module["_PySequence_SetItem"] = function() {
            return (_PySequence_SetItem = Module["_PySequence_SetItem"] = Module["asm"]["PySequence_SetItem"]).apply(null, arguments)
        }
        ;
        var _PySequence_DelItem = Module["_PySequence_DelItem"] = function() {
            return (_PySequence_DelItem = Module["_PySequence_DelItem"] = Module["asm"]["PySequence_DelItem"]).apply(null, arguments)
        }
        ;
        var _PyObject_DelItemString = Module["_PyObject_DelItemString"] = function() {
            return (_PyObject_DelItemString = Module["_PyObject_DelItemString"] = Module["asm"]["PyObject_DelItemString"]).apply(null, arguments)
        }
        ;
        var _PyObject_CheckReadBuffer = Module["_PyObject_CheckReadBuffer"] = function() {
            return (_PyObject_CheckReadBuffer = Module["_PyObject_CheckReadBuffer"] = Module["asm"]["PyObject_CheckReadBuffer"]).apply(null, arguments)
        }
        ;
        var _PyObject_AsCharBuffer = Module["_PyObject_AsCharBuffer"] = function() {
            return (_PyObject_AsCharBuffer = Module["_PyObject_AsCharBuffer"] = Module["asm"]["PyObject_AsCharBuffer"]).apply(null, arguments)
        }
        ;
        var _PyObject_AsReadBuffer = Module["_PyObject_AsReadBuffer"] = function() {
            return (_PyObject_AsReadBuffer = Module["_PyObject_AsReadBuffer"] = Module["asm"]["PyObject_AsReadBuffer"]).apply(null, arguments)
        }
        ;
        var _PyObject_AsWriteBuffer = Module["_PyObject_AsWriteBuffer"] = function() {
            return (_PyObject_AsWriteBuffer = Module["_PyObject_AsWriteBuffer"] = Module["asm"]["PyObject_AsWriteBuffer"]).apply(null, arguments)
        }
        ;
        var _PyBuffer_GetPointer = Module["_PyBuffer_GetPointer"] = function() {
            return (_PyBuffer_GetPointer = Module["_PyBuffer_GetPointer"] = Module["asm"]["PyBuffer_GetPointer"]).apply(null, arguments)
        }
        ;
        var __Py_add_one_to_index_F = Module["__Py_add_one_to_index_F"] = function() {
            return (__Py_add_one_to_index_F = Module["__Py_add_one_to_index_F"] = Module["asm"]["_Py_add_one_to_index_F"]).apply(null, arguments)
        }
        ;
        var __Py_add_one_to_index_C = Module["__Py_add_one_to_index_C"] = function() {
            return (__Py_add_one_to_index_C = Module["__Py_add_one_to_index_C"] = Module["asm"]["_Py_add_one_to_index_C"]).apply(null, arguments)
        }
        ;
        var _PyBuffer_SizeFromFormat = Module["_PyBuffer_SizeFromFormat"] = function() {
            return (_PyBuffer_SizeFromFormat = Module["_PyBuffer_SizeFromFormat"] = Module["asm"]["PyBuffer_SizeFromFormat"]).apply(null, arguments)
        }
        ;
        var _PyObject_CallFunctionObjArgs = Module["_PyObject_CallFunctionObjArgs"] = function() {
            return (_PyObject_CallFunctionObjArgs = Module["_PyObject_CallFunctionObjArgs"] = Module["asm"]["PyObject_CallFunctionObjArgs"]).apply(null, arguments)
        }
        ;
        var _PyBuffer_FromContiguous = Module["_PyBuffer_FromContiguous"] = function() {
            return (_PyBuffer_FromContiguous = Module["_PyBuffer_FromContiguous"] = Module["asm"]["PyBuffer_FromContiguous"]).apply(null, arguments)
        }
        ;
        var _memset = Module["_memset"] = function() {
            return (_memset = Module["_memset"] = Module["asm"]["memset"]).apply(null, arguments)
        }
        ;
        var _PyObject_CopyData = Module["_PyObject_CopyData"] = function() {
            return (_PyObject_CopyData = Module["_PyObject_CopyData"] = Module["asm"]["PyObject_CopyData"]).apply(null, arguments)
        }
        ;
        var _PyBuffer_FillInfo = Module["_PyBuffer_FillInfo"] = function() {
            return (_PyBuffer_FillInfo = Module["_PyBuffer_FillInfo"] = Module["asm"]["PyBuffer_FillInfo"]).apply(null, arguments)
        }
        ;
        var _PyObject_Format = Module["_PyObject_Format"] = function() {
            return (_PyObject_Format = Module["_PyObject_Format"] = Module["asm"]["PyObject_Format"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Check = Module["_PyNumber_Check"] = function() {
            return (_PyNumber_Check = Module["_PyNumber_Check"] = Module["asm"]["PyNumber_Check"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Or = Module["_PyNumber_Or"] = function() {
            return (_PyNumber_Or = Module["_PyNumber_Or"] = Module["asm"]["PyNumber_Or"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Xor = Module["_PyNumber_Xor"] = function() {
            return (_PyNumber_Xor = Module["_PyNumber_Xor"] = Module["asm"]["PyNumber_Xor"]).apply(null, arguments)
        }
        ;
        var _PyNumber_And = Module["_PyNumber_And"] = function() {
            return (_PyNumber_And = Module["_PyNumber_And"] = Module["asm"]["PyNumber_And"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Lshift = Module["_PyNumber_Lshift"] = function() {
            return (_PyNumber_Lshift = Module["_PyNumber_Lshift"] = Module["asm"]["PyNumber_Lshift"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Rshift = Module["_PyNumber_Rshift"] = function() {
            return (_PyNumber_Rshift = Module["_PyNumber_Rshift"] = Module["asm"]["PyNumber_Rshift"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Subtract = Module["_PyNumber_Subtract"] = function() {
            return (_PyNumber_Subtract = Module["_PyNumber_Subtract"] = Module["asm"]["PyNumber_Subtract"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Divmod = Module["_PyNumber_Divmod"] = function() {
            return (_PyNumber_Divmod = Module["_PyNumber_Divmod"] = Module["asm"]["PyNumber_Divmod"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Add = Module["_PyNumber_Add"] = function() {
            return (_PyNumber_Add = Module["_PyNumber_Add"] = Module["asm"]["PyNumber_Add"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Multiply = Module["_PyNumber_Multiply"] = function() {
            return (_PyNumber_Multiply = Module["_PyNumber_Multiply"] = Module["asm"]["PyNumber_Multiply"]).apply(null, arguments)
        }
        ;
        var _PyNumber_MatrixMultiply = Module["_PyNumber_MatrixMultiply"] = function() {
            return (_PyNumber_MatrixMultiply = Module["_PyNumber_MatrixMultiply"] = Module["asm"]["PyNumber_MatrixMultiply"]).apply(null, arguments)
        }
        ;
        var _PyNumber_FloorDivide = Module["_PyNumber_FloorDivide"] = function() {
            return (_PyNumber_FloorDivide = Module["_PyNumber_FloorDivide"] = Module["asm"]["PyNumber_FloorDivide"]).apply(null, arguments)
        }
        ;
        var _PyNumber_TrueDivide = Module["_PyNumber_TrueDivide"] = function() {
            return (_PyNumber_TrueDivide = Module["_PyNumber_TrueDivide"] = Module["asm"]["PyNumber_TrueDivide"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Remainder = Module["_PyNumber_Remainder"] = function() {
            return (_PyNumber_Remainder = Module["_PyNumber_Remainder"] = Module["asm"]["PyNumber_Remainder"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Power = Module["_PyNumber_Power"] = function() {
            return (_PyNumber_Power = Module["_PyNumber_Power"] = Module["asm"]["PyNumber_Power"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceOr = Module["_PyNumber_InPlaceOr"] = function() {
            return (_PyNumber_InPlaceOr = Module["_PyNumber_InPlaceOr"] = Module["asm"]["PyNumber_InPlaceOr"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceXor = Module["_PyNumber_InPlaceXor"] = function() {
            return (_PyNumber_InPlaceXor = Module["_PyNumber_InPlaceXor"] = Module["asm"]["PyNumber_InPlaceXor"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceAnd = Module["_PyNumber_InPlaceAnd"] = function() {
            return (_PyNumber_InPlaceAnd = Module["_PyNumber_InPlaceAnd"] = Module["asm"]["PyNumber_InPlaceAnd"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceLshift = Module["_PyNumber_InPlaceLshift"] = function() {
            return (_PyNumber_InPlaceLshift = Module["_PyNumber_InPlaceLshift"] = Module["asm"]["PyNumber_InPlaceLshift"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceRshift = Module["_PyNumber_InPlaceRshift"] = function() {
            return (_PyNumber_InPlaceRshift = Module["_PyNumber_InPlaceRshift"] = Module["asm"]["PyNumber_InPlaceRshift"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceSubtract = Module["_PyNumber_InPlaceSubtract"] = function() {
            return (_PyNumber_InPlaceSubtract = Module["_PyNumber_InPlaceSubtract"] = Module["asm"]["PyNumber_InPlaceSubtract"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceFloorDivide = Module["_PyNumber_InPlaceFloorDivide"] = function() {
            return (_PyNumber_InPlaceFloorDivide = Module["_PyNumber_InPlaceFloorDivide"] = Module["asm"]["PyNumber_InPlaceFloorDivide"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceTrueDivide = Module["_PyNumber_InPlaceTrueDivide"] = function() {
            return (_PyNumber_InPlaceTrueDivide = Module["_PyNumber_InPlaceTrueDivide"] = Module["asm"]["PyNumber_InPlaceTrueDivide"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceAdd = Module["_PyNumber_InPlaceAdd"] = function() {
            return (_PyNumber_InPlaceAdd = Module["_PyNumber_InPlaceAdd"] = Module["asm"]["PyNumber_InPlaceAdd"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceMultiply = Module["_PyNumber_InPlaceMultiply"] = function() {
            return (_PyNumber_InPlaceMultiply = Module["_PyNumber_InPlaceMultiply"] = Module["asm"]["PyNumber_InPlaceMultiply"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceMatrixMultiply = Module["_PyNumber_InPlaceMatrixMultiply"] = function() {
            return (_PyNumber_InPlaceMatrixMultiply = Module["_PyNumber_InPlaceMatrixMultiply"] = Module["asm"]["PyNumber_InPlaceMatrixMultiply"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlaceRemainder = Module["_PyNumber_InPlaceRemainder"] = function() {
            return (_PyNumber_InPlaceRemainder = Module["_PyNumber_InPlaceRemainder"] = Module["asm"]["PyNumber_InPlaceRemainder"]).apply(null, arguments)
        }
        ;
        var _PyNumber_InPlacePower = Module["_PyNumber_InPlacePower"] = function() {
            return (_PyNumber_InPlacePower = Module["_PyNumber_InPlacePower"] = Module["asm"]["PyNumber_InPlacePower"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Negative = Module["_PyNumber_Negative"] = function() {
            return (_PyNumber_Negative = Module["_PyNumber_Negative"] = Module["asm"]["PyNumber_Negative"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Positive = Module["_PyNumber_Positive"] = function() {
            return (_PyNumber_Positive = Module["_PyNumber_Positive"] = Module["asm"]["PyNumber_Positive"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Invert = Module["_PyNumber_Invert"] = function() {
            return (_PyNumber_Invert = Module["_PyNumber_Invert"] = Module["asm"]["PyNumber_Invert"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Absolute = Module["_PyNumber_Absolute"] = function() {
            return (_PyNumber_Absolute = Module["_PyNumber_Absolute"] = Module["asm"]["PyNumber_Absolute"]).apply(null, arguments)
        }
        ;
        var _PyErr_WarnFormat = Module["_PyErr_WarnFormat"] = function() {
            return (_PyErr_WarnFormat = Module["_PyErr_WarnFormat"] = Module["asm"]["PyErr_WarnFormat"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Index = Module["_PyNumber_Index"] = function() {
            return (_PyNumber_Index = Module["_PyNumber_Index"] = Module["asm"]["PyNumber_Index"]).apply(null, arguments)
        }
        ;
        var __PyLong_Copy = Module["__PyLong_Copy"] = function() {
            return (__PyLong_Copy = Module["__PyLong_Copy"] = Module["asm"]["_PyLong_Copy"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Long = Module["_PyNumber_Long"] = function() {
            return (_PyNumber_Long = Module["_PyNumber_Long"] = Module["asm"]["PyNumber_Long"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromUnicodeObject = Module["_PyLong_FromUnicodeObject"] = function() {
            return (_PyLong_FromUnicodeObject = Module["_PyLong_FromUnicodeObject"] = Module["asm"]["PyLong_FromUnicodeObject"]).apply(null, arguments)
        }
        ;
        var __PyLong_FromBytes = Module["__PyLong_FromBytes"] = function() {
            return (__PyLong_FromBytes = Module["__PyLong_FromBytes"] = Module["asm"]["_PyLong_FromBytes"]).apply(null, arguments)
        }
        ;
        var _PyNumber_Float = Module["_PyNumber_Float"] = function() {
            return (_PyNumber_Float = Module["_PyNumber_Float"] = Module["asm"]["PyNumber_Float"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsDouble = Module["_PyLong_AsDouble"] = function() {
            return (_PyLong_AsDouble = Module["_PyLong_AsDouble"] = Module["asm"]["PyLong_AsDouble"]).apply(null, arguments)
        }
        ;
        var _PyFloat_FromString = Module["_PyFloat_FromString"] = function() {
            return (_PyFloat_FromString = Module["_PyFloat_FromString"] = Module["asm"]["PyFloat_FromString"]).apply(null, arguments)
        }
        ;
        var _PyNumber_ToBase = Module["_PyNumber_ToBase"] = function() {
            return (_PyNumber_ToBase = Module["_PyNumber_ToBase"] = Module["asm"]["PyNumber_ToBase"]).apply(null, arguments)
        }
        ;
        var __PyLong_Format = Module["__PyLong_Format"] = function() {
            return (__PyLong_Format = Module["__PyLong_Format"] = Module["asm"]["_PyLong_Format"]).apply(null, arguments)
        }
        ;
        var _PySequence_Length = Module["_PySequence_Length"] = function() {
            return (_PySequence_Length = Module["_PySequence_Length"] = Module["asm"]["PySequence_Length"]).apply(null, arguments)
        }
        ;
        var _PySequence_Concat = Module["_PySequence_Concat"] = function() {
            return (_PySequence_Concat = Module["_PySequence_Concat"] = Module["asm"]["PySequence_Concat"]).apply(null, arguments)
        }
        ;
        var _PySequence_Repeat = Module["_PySequence_Repeat"] = function() {
            return (_PySequence_Repeat = Module["_PySequence_Repeat"] = Module["asm"]["PySequence_Repeat"]).apply(null, arguments)
        }
        ;
        var _PySequence_InPlaceConcat = Module["_PySequence_InPlaceConcat"] = function() {
            return (_PySequence_InPlaceConcat = Module["_PySequence_InPlaceConcat"] = Module["asm"]["PySequence_InPlaceConcat"]).apply(null, arguments)
        }
        ;
        var _PySequence_InPlaceRepeat = Module["_PySequence_InPlaceRepeat"] = function() {
            return (_PySequence_InPlaceRepeat = Module["_PySequence_InPlaceRepeat"] = Module["asm"]["PySequence_InPlaceRepeat"]).apply(null, arguments)
        }
        ;
        var _PySequence_GetSlice = Module["_PySequence_GetSlice"] = function() {
            return (_PySequence_GetSlice = Module["_PySequence_GetSlice"] = Module["asm"]["PySequence_GetSlice"]).apply(null, arguments)
        }
        ;
        var __PySlice_FromIndices = Module["__PySlice_FromIndices"] = function() {
            return (__PySlice_FromIndices = Module["__PySlice_FromIndices"] = Module["asm"]["_PySlice_FromIndices"]).apply(null, arguments)
        }
        ;
        var _PySequence_SetSlice = Module["_PySequence_SetSlice"] = function() {
            return (_PySequence_SetSlice = Module["_PySequence_SetSlice"] = Module["asm"]["PySequence_SetSlice"]).apply(null, arguments)
        }
        ;
        var _PySequence_DelSlice = Module["_PySequence_DelSlice"] = function() {
            return (_PySequence_DelSlice = Module["_PySequence_DelSlice"] = Module["asm"]["PySequence_DelSlice"]).apply(null, arguments)
        }
        ;
        var _PySequence_Tuple = Module["_PySequence_Tuple"] = function() {
            return (_PySequence_Tuple = Module["_PySequence_Tuple"] = Module["asm"]["PySequence_Tuple"]).apply(null, arguments)
        }
        ;
        var _PyList_AsTuple = Module["_PyList_AsTuple"] = function() {
            return (_PyList_AsTuple = Module["_PyList_AsTuple"] = Module["asm"]["PyList_AsTuple"]).apply(null, arguments)
        }
        ;
        var __PyTuple_Resize = Module["__PyTuple_Resize"] = function() {
            return (__PyTuple_Resize = Module["__PyTuple_Resize"] = Module["asm"]["_PyTuple_Resize"]).apply(null, arguments)
        }
        ;
        var _PySeqIter_New = Module["_PySeqIter_New"] = function() {
            return (_PySeqIter_New = Module["_PySeqIter_New"] = Module["asm"]["PySeqIter_New"]).apply(null, arguments)
        }
        ;
        var __PyObject_NextNotImplemented = Module["__PyObject_NextNotImplemented"] = function() {
            return (__PyObject_NextNotImplemented = Module["__PyObject_NextNotImplemented"] = Module["asm"]["_PyObject_NextNotImplemented"]).apply(null, arguments)
        }
        ;
        var _PySequence_List = Module["_PySequence_List"] = function() {
            return (_PySequence_List = Module["_PySequence_List"] = Module["asm"]["PySequence_List"]).apply(null, arguments)
        }
        ;
        var __PySequence_IterSearch = Module["__PySequence_IterSearch"] = function() {
            return (__PySequence_IterSearch = Module["__PySequence_IterSearch"] = Module["asm"]["_PySequence_IterSearch"]).apply(null, arguments)
        }
        ;
        var _PySequence_Count = Module["_PySequence_Count"] = function() {
            return (_PySequence_Count = Module["_PySequence_Count"] = Module["asm"]["PySequence_Count"]).apply(null, arguments)
        }
        ;
        var _PySequence_In = Module["_PySequence_In"] = function() {
            return (_PySequence_In = Module["_PySequence_In"] = Module["asm"]["PySequence_In"]).apply(null, arguments)
        }
        ;
        var _PySequence_Index = Module["_PySequence_Index"] = function() {
            return (_PySequence_Index = Module["_PySequence_Index"] = Module["asm"]["PySequence_Index"]).apply(null, arguments)
        }
        ;
        var _PyMapping_Check = Module["_PyMapping_Check"] = function() {
            return (_PyMapping_Check = Module["_PyMapping_Check"] = Module["asm"]["PyMapping_Check"]).apply(null, arguments)
        }
        ;
        var _PyMapping_Length = Module["_PyMapping_Length"] = function() {
            return (_PyMapping_Length = Module["_PyMapping_Length"] = Module["asm"]["PyMapping_Length"]).apply(null, arguments)
        }
        ;
        var _PyMapping_GetItemString = Module["_PyMapping_GetItemString"] = function() {
            return (_PyMapping_GetItemString = Module["_PyMapping_GetItemString"] = Module["asm"]["PyMapping_GetItemString"]).apply(null, arguments)
        }
        ;
        var _PyMapping_SetItemString = Module["_PyMapping_SetItemString"] = function() {
            return (_PyMapping_SetItemString = Module["_PyMapping_SetItemString"] = Module["asm"]["PyMapping_SetItemString"]).apply(null, arguments)
        }
        ;
        var _PyMapping_HasKeyString = Module["_PyMapping_HasKeyString"] = function() {
            return (_PyMapping_HasKeyString = Module["_PyMapping_HasKeyString"] = Module["asm"]["PyMapping_HasKeyString"]).apply(null, arguments)
        }
        ;
        var _PyMapping_HasKey = Module["_PyMapping_HasKey"] = function() {
            return (_PyMapping_HasKey = Module["_PyMapping_HasKey"] = Module["asm"]["PyMapping_HasKey"]).apply(null, arguments)
        }
        ;
        var _PyMapping_Keys = Module["_PyMapping_Keys"] = function() {
            return (_PyMapping_Keys = Module["_PyMapping_Keys"] = Module["asm"]["PyMapping_Keys"]).apply(null, arguments)
        }
        ;
        var _PyDict_Keys = Module["_PyDict_Keys"] = function() {
            return (_PyDict_Keys = Module["_PyDict_Keys"] = Module["asm"]["PyDict_Keys"]).apply(null, arguments)
        }
        ;
        var _PyMapping_Items = Module["_PyMapping_Items"] = function() {
            return (_PyMapping_Items = Module["_PyMapping_Items"] = Module["asm"]["PyMapping_Items"]).apply(null, arguments)
        }
        ;
        var _PyDict_Items = Module["_PyDict_Items"] = function() {
            return (_PyDict_Items = Module["_PyDict_Items"] = Module["asm"]["PyDict_Items"]).apply(null, arguments)
        }
        ;
        var _PyMapping_Values = Module["_PyMapping_Values"] = function() {
            return (_PyMapping_Values = Module["_PyMapping_Values"] = Module["asm"]["PyMapping_Values"]).apply(null, arguments)
        }
        ;
        var _PyDict_Values = Module["_PyDict_Values"] = function() {
            return (_PyDict_Values = Module["_PyDict_Values"] = Module["asm"]["PyDict_Values"]).apply(null, arguments)
        }
        ;
        var _PyObject_IsInstance = Module["_PyObject_IsInstance"] = function() {
            return (_PyObject_IsInstance = Module["_PyObject_IsInstance"] = Module["asm"]["PyObject_IsInstance"]).apply(null, arguments)
        }
        ;
        var __Py_CheckRecursiveCall = Module["__Py_CheckRecursiveCall"] = function() {
            return (__Py_CheckRecursiveCall = Module["__Py_CheckRecursiveCall"] = Module["asm"]["_Py_CheckRecursiveCall"]).apply(null, arguments)
        }
        ;
        var _PyObject_IsTrue = Module["_PyObject_IsTrue"] = function() {
            return (_PyObject_IsTrue = Module["_PyObject_IsTrue"] = Module["asm"]["PyObject_IsTrue"]).apply(null, arguments)
        }
        ;
        var _PyObject_IsSubclass = Module["_PyObject_IsSubclass"] = function() {
            return (_PyObject_IsSubclass = Module["_PyObject_IsSubclass"] = Module["asm"]["PyObject_IsSubclass"]).apply(null, arguments)
        }
        ;
        var __PyObject_RealIsInstance = Module["__PyObject_RealIsInstance"] = function() {
            return (__PyObject_RealIsInstance = Module["__PyObject_RealIsInstance"] = Module["asm"]["_PyObject_RealIsInstance"]).apply(null, arguments)
        }
        ;
        var __PyObject_RealIsSubclass = Module["__PyObject_RealIsSubclass"] = function() {
            return (__PyObject_RealIsSubclass = Module["__PyObject_RealIsSubclass"] = Module["asm"]["_PyObject_RealIsSubclass"]).apply(null, arguments)
        }
        ;
        var _PyObject_GetAIter = Module["_PyObject_GetAIter"] = function() {
            return (_PyObject_GetAIter = Module["_PyObject_GetAIter"] = Module["asm"]["PyObject_GetAIter"]).apply(null, arguments)
        }
        ;
        var _PyAIter_Check = Module["_PyAIter_Check"] = function() {
            return (_PyAIter_Check = Module["_PyAIter_Check"] = Module["asm"]["PyAIter_Check"]).apply(null, arguments)
        }
        ;
        var __PyGen_FetchStopIterationValue = Module["__PyGen_FetchStopIterationValue"] = function() {
            return (__PyGen_FetchStopIterationValue = Module["__PyGen_FetchStopIterationValue"] = Module["asm"]["_PyGen_FetchStopIterationValue"]).apply(null, arguments)
        }
        ;
        var __PySequence_BytesToCharpArray = Module["__PySequence_BytesToCharpArray"] = function() {
            return (__PySequence_BytesToCharpArray = Module["__PySequence_BytesToCharpArray"] = Module["asm"]["_PySequence_BytesToCharpArray"]).apply(null, arguments)
        }
        ;
        var __Py_FreeCharPArray = Module["__Py_FreeCharPArray"] = function() {
            return (__Py_FreeCharPArray = Module["__Py_FreeCharPArray"] = Module["asm"]["_Py_FreeCharPArray"]).apply(null, arguments)
        }
        ;
        var __PyAccu_Init = Module["__PyAccu_Init"] = function() {
            return (__PyAccu_Init = Module["__PyAccu_Init"] = Module["asm"]["_PyAccu_Init"]).apply(null, arguments)
        }
        ;
        var __PyAccu_Accumulate = Module["__PyAccu_Accumulate"] = function() {
            return (__PyAccu_Accumulate = Module["__PyAccu_Accumulate"] = Module["asm"]["_PyAccu_Accumulate"]).apply(null, arguments)
        }
        ;
        var _PyList_Append = Module["_PyList_Append"] = function() {
            return (_PyList_Append = Module["_PyList_Append"] = Module["asm"]["PyList_Append"]).apply(null, arguments)
        }
        ;
        var _PyList_SetSlice = Module["_PyList_SetSlice"] = function() {
            return (_PyList_SetSlice = Module["_PyList_SetSlice"] = Module["asm"]["PyList_SetSlice"]).apply(null, arguments)
        }
        ;
        var __PyAccu_FinishAsList = Module["__PyAccu_FinishAsList"] = function() {
            return (__PyAccu_FinishAsList = Module["__PyAccu_FinishAsList"] = Module["asm"]["_PyAccu_FinishAsList"]).apply(null, arguments)
        }
        ;
        var __PyAccu_Finish = Module["__PyAccu_Finish"] = function() {
            return (__PyAccu_Finish = Module["__PyAccu_Finish"] = Module["asm"]["_PyAccu_Finish"]).apply(null, arguments)
        }
        ;
        var __PyAccu_Destroy = Module["__PyAccu_Destroy"] = function() {
            return (__PyAccu_Destroy = Module["__PyAccu_Destroy"] = Module["asm"]["_PyAccu_Destroy"]).apply(null, arguments)
        }
        ;
        var _PyBool_FromLong = Module["_PyBool_FromLong"] = function() {
            return (_PyBool_FromLong = Module["_PyBool_FromLong"] = Module["asm"]["PyBool_FromLong"]).apply(null, arguments)
        }
        ;
        var __PyArg_NoKeywords = Module["__PyArg_NoKeywords"] = function() {
            return (__PyArg_NoKeywords = Module["__PyArg_NoKeywords"] = Module["asm"]["_PyArg_NoKeywords"]).apply(null, arguments)
        }
        ;
        var __PyArg_NoKwnames = Module["__PyArg_NoKwnames"] = function() {
            return (__PyArg_NoKwnames = Module["__PyArg_NoKwnames"] = Module["asm"]["_PyArg_NoKwnames"]).apply(null, arguments)
        }
        ;
        var _memrchr = Module["_memrchr"] = function() {
            return (_memrchr = Module["_memrchr"] = Module["asm"]["memrchr"]).apply(null, arguments)
        }
        ;
        var _memchr = Module["_memchr"] = function() {
            return (_memchr = Module["_memchr"] = Module["asm"]["memchr"]).apply(null, arguments)
        }
        ;
        var __PyEval_SliceIndex = Module["__PyEval_SliceIndex"] = function() {
            return (__PyEval_SliceIndex = Module["__PyEval_SliceIndex"] = Module["asm"]["_PyEval_SliceIndex"]).apply(null, arguments)
        }
        ;
        var _PyByteArray_FromObject = Module["_PyByteArray_FromObject"] = function() {
            return (_PyByteArray_FromObject = Module["_PyByteArray_FromObject"] = Module["asm"]["PyByteArray_FromObject"]).apply(null, arguments)
        }
        ;
        var _PyByteArray_FromStringAndSize = Module["_PyByteArray_FromStringAndSize"] = function() {
            return (_PyByteArray_FromStringAndSize = Module["_PyByteArray_FromStringAndSize"] = Module["asm"]["PyByteArray_FromStringAndSize"]).apply(null, arguments)
        }
        ;
        var __PyObject_New = Module["__PyObject_New"] = function() {
            return (__PyObject_New = Module["__PyObject_New"] = Module["asm"]["_PyObject_New"]).apply(null, arguments)
        }
        ;
        var _PyObject_Malloc = Module["_PyObject_Malloc"] = function() {
            return (_PyObject_Malloc = Module["_PyObject_Malloc"] = Module["asm"]["PyObject_Malloc"]).apply(null, arguments)
        }
        ;
        var _PyByteArray_Size = Module["_PyByteArray_Size"] = function() {
            return (_PyByteArray_Size = Module["_PyByteArray_Size"] = Module["asm"]["PyByteArray_Size"]).apply(null, arguments)
        }
        ;
        var _PyByteArray_AsString = Module["_PyByteArray_AsString"] = function() {
            return (_PyByteArray_AsString = Module["_PyByteArray_AsString"] = Module["asm"]["PyByteArray_AsString"]).apply(null, arguments)
        }
        ;
        var _PyByteArray_Resize = Module["_PyByteArray_Resize"] = function() {
            return (_PyByteArray_Resize = Module["_PyByteArray_Resize"] = Module["asm"]["PyByteArray_Resize"]).apply(null, arguments)
        }
        ;
        var _PyObject_Free = Module["_PyObject_Free"] = function() {
            return (_PyObject_Free = Module["_PyObject_Free"] = Module["asm"]["PyObject_Free"]).apply(null, arguments)
        }
        ;
        var _PyObject_Realloc = Module["_PyObject_Realloc"] = function() {
            return (_PyObject_Realloc = Module["_PyObject_Realloc"] = Module["asm"]["PyObject_Realloc"]).apply(null, arguments)
        }
        ;
        var _PyByteArray_Concat = Module["_PyByteArray_Concat"] = function() {
            return (_PyByteArray_Concat = Module["_PyByteArray_Concat"] = Module["asm"]["PyByteArray_Concat"]).apply(null, arguments)
        }
        ;
        var __Py_GetConfig = Module["__Py_GetConfig"] = function() {
            return (__Py_GetConfig = Module["__Py_GetConfig"] = Module["asm"]["_Py_GetConfig"]).apply(null, arguments)
        }
        ;
        var _PyErr_WarnEx = Module["_PyErr_WarnEx"] = function() {
            return (_PyErr_WarnEx = Module["_PyErr_WarnEx"] = Module["asm"]["PyErr_WarnEx"]).apply(null, arguments)
        }
        ;
        var __PyObject_GC_New = Module["__PyObject_GC_New"] = function() {
            return (__PyObject_GC_New = Module["__PyObject_GC_New"] = Module["asm"]["_PyObject_GC_New"]).apply(null, arguments)
        }
        ;
        var __PyArg_UnpackKeywords = Module["__PyArg_UnpackKeywords"] = function() {
            return (__PyArg_UnpackKeywords = Module["__PyArg_UnpackKeywords"] = Module["asm"]["_PyArg_UnpackKeywords"]).apply(null, arguments)
        }
        ;
        var __PyArg_BadArgument = Module["__PyArg_BadArgument"] = function() {
            return (__PyArg_BadArgument = Module["__PyArg_BadArgument"] = Module["asm"]["_PyArg_BadArgument"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsEncodedString = Module["_PyUnicode_AsEncodedString"] = function() {
            return (_PyUnicode_AsEncodedString = Module["_PyUnicode_AsEncodedString"] = Module["asm"]["PyUnicode_AsEncodedString"]).apply(null, arguments)
        }
        ;
        var _PyBuffer_ToContiguous = Module["_PyBuffer_ToContiguous"] = function() {
            return (_PyBuffer_ToContiguous = Module["_PyBuffer_ToContiguous"] = Module["asm"]["PyBuffer_ToContiguous"]).apply(null, arguments)
        }
        ;
        var _PyObject_GC_Del = Module["_PyObject_GC_Del"] = function() {
            return (_PyObject_GC_Del = Module["_PyObject_GC_Del"] = Module["asm"]["PyObject_GC_Del"]).apply(null, arguments)
        }
        ;
        var __PyBytes_FormatEx = Module["__PyBytes_FormatEx"] = function() {
            return (__PyBytes_FormatEx = Module["__PyBytes_FormatEx"] = Module["asm"]["_PyBytes_FormatEx"]).apply(null, arguments)
        }
        ;
        var _memmove = Module["_memmove"] = function() {
            return (_memmove = Module["_memmove"] = Module["asm"]["memmove"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeLatin1 = Module["_PyUnicode_DecodeLatin1"] = function() {
            return (_PyUnicode_DecodeLatin1 = Module["_PyUnicode_DecodeLatin1"] = Module["asm"]["PyUnicode_DecodeLatin1"]).apply(null, arguments)
        }
        ;
        var __PyLong_AsInt = Module["__PyLong_AsInt"] = function() {
            return (__PyLong_AsInt = Module["__PyLong_AsInt"] = Module["asm"]["_PyLong_AsInt"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_GetDefaultEncoding = Module["_PyUnicode_GetDefaultEncoding"] = function() {
            return (_PyUnicode_GetDefaultEncoding = Module["_PyUnicode_GetDefaultEncoding"] = Module["asm"]["PyUnicode_GetDefaultEncoding"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromEncodedObject = Module["_PyUnicode_FromEncodedObject"] = function() {
            return (_PyUnicode_FromEncodedObject = Module["_PyUnicode_FromEncodedObject"] = Module["asm"]["PyUnicode_FromEncodedObject"]).apply(null, arguments)
        }
        ;
        var __PyBytes_FromHex = Module["__PyBytes_FromHex"] = function() {
            return (__PyBytes_FromHex = Module["__PyBytes_FromHex"] = Module["asm"]["_PyBytes_FromHex"]).apply(null, arguments)
        }
        ;
        var __Py_strhex_with_sep = Module["__Py_strhex_with_sep"] = function() {
            return (__Py_strhex_with_sep = Module["__Py_strhex_with_sep"] = Module["asm"]["_Py_strhex_with_sep"]).apply(null, arguments)
        }
        ;
        var _PyList_Reverse = Module["_PyList_Reverse"] = function() {
            return (_PyList_Reverse = Module["_PyList_Reverse"] = Module["asm"]["PyList_Reverse"]).apply(null, arguments)
        }
        ;
        var __PyEval_GetBuiltinId = Module["__PyEval_GetBuiltinId"] = function() {
            return (__PyEval_GetBuiltinId = Module["__PyEval_GetBuiltinId"] = Module["asm"]["_PyEval_GetBuiltinId"]).apply(null, arguments)
        }
        ;
        var _PyType_GenericAlloc = Module["_PyType_GenericAlloc"] = function() {
            return (_PyType_GenericAlloc = Module["_PyType_GenericAlloc"] = Module["asm"]["PyType_GenericAlloc"]).apply(null, arguments)
        }
        ;
        var _PyType_GenericNew = Module["_PyType_GenericNew"] = function() {
            return (_PyType_GenericNew = Module["_PyType_GenericNew"] = Module["asm"]["PyType_GenericNew"]).apply(null, arguments)
        }
        ;
        var _PyObject_Calloc = Module["_PyObject_Calloc"] = function() {
            return (_PyObject_Calloc = Module["_PyObject_Calloc"] = Module["asm"]["PyObject_Calloc"]).apply(null, arguments)
        }
        ;
        var __Py_NewReference = Module["__Py_NewReference"] = function() {
            return (__Py_NewReference = Module["__Py_NewReference"] = Module["asm"]["_Py_NewReference"]).apply(null, arguments)
        }
        ;
        var _PyBytes_FromString = Module["_PyBytes_FromString"] = function() {
            return (_PyBytes_FromString = Module["_PyBytes_FromString"] = Module["asm"]["PyBytes_FromString"]).apply(null, arguments)
        }
        ;
        var _PyBytes_FromFormatV = Module["_PyBytes_FromFormatV"] = function() {
            return (_PyBytes_FromFormatV = Module["_PyBytes_FromFormatV"] = Module["asm"]["PyBytes_FromFormatV"]).apply(null, arguments)
        }
        ;
        var __PyBytesWriter_Resize = Module["__PyBytesWriter_Resize"] = function() {
            return (__PyBytesWriter_Resize = Module["__PyBytesWriter_Resize"] = Module["asm"]["_PyBytesWriter_Resize"]).apply(null, arguments)
        }
        ;
        var __PyBytesWriter_Finish = Module["__PyBytesWriter_Finish"] = function() {
            return (__PyBytesWriter_Finish = Module["__PyBytesWriter_Finish"] = Module["asm"]["_PyBytesWriter_Finish"]).apply(null, arguments)
        }
        ;
        var __PyBytesWriter_Init = Module["__PyBytesWriter_Init"] = function() {
            return (__PyBytesWriter_Init = Module["__PyBytesWriter_Init"] = Module["asm"]["_PyBytesWriter_Init"]).apply(null, arguments)
        }
        ;
        var __PyBytesWriter_Alloc = Module["__PyBytesWriter_Alloc"] = function() {
            return (__PyBytesWriter_Alloc = Module["__PyBytesWriter_Alloc"] = Module["asm"]["_PyBytesWriter_Alloc"]).apply(null, arguments)
        }
        ;
        var __PyBytesWriter_WriteBytes = Module["__PyBytesWriter_WriteBytes"] = function() {
            return (__PyBytesWriter_WriteBytes = Module["__PyBytesWriter_WriteBytes"] = Module["asm"]["_PyBytesWriter_WriteBytes"]).apply(null, arguments)
        }
        ;
        var __PyBytes_Resize = Module["__PyBytes_Resize"] = function() {
            return (__PyBytes_Resize = Module["__PyBytes_Resize"] = Module["asm"]["_PyBytes_Resize"]).apply(null, arguments)
        }
        ;
        var __PyBytesWriter_Dealloc = Module["__PyBytesWriter_Dealloc"] = function() {
            return (__PyBytesWriter_Dealloc = Module["__PyBytesWriter_Dealloc"] = Module["asm"]["_PyBytesWriter_Dealloc"]).apply(null, arguments)
        }
        ;
        var _PyBytes_FromFormat = Module["_PyBytes_FromFormat"] = function() {
            return (_PyBytes_FromFormat = Module["_PyBytes_FromFormat"] = Module["asm"]["PyBytes_FromFormat"]).apply(null, arguments)
        }
        ;
        var _PyObject_ASCII = Module["_PyObject_ASCII"] = function() {
            return (_PyObject_ASCII = Module["_PyObject_ASCII"] = Module["asm"]["PyObject_ASCII"]).apply(null, arguments)
        }
        ;
        var __PyLong_FormatBytesWriter = Module["__PyLong_FormatBytesWriter"] = function() {
            return (__PyLong_FormatBytesWriter = Module["__PyLong_FormatBytesWriter"] = Module["asm"]["_PyLong_FormatBytesWriter"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_FormatLong = Module["__PyUnicode_FormatLong"] = function() {
            return (__PyUnicode_FormatLong = Module["__PyUnicode_FormatLong"] = Module["asm"]["_PyUnicode_FormatLong"]).apply(null, arguments)
        }
        ;
        var _PyOS_double_to_string = Module["_PyOS_double_to_string"] = function() {
            return (_PyOS_double_to_string = Module["_PyOS_double_to_string"] = Module["asm"]["PyOS_double_to_string"]).apply(null, arguments)
        }
        ;
        var __PyBytesWriter_Prepare = Module["__PyBytesWriter_Prepare"] = function() {
            return (__PyBytesWriter_Prepare = Module["__PyBytesWriter_Prepare"] = Module["asm"]["_PyBytesWriter_Prepare"]).apply(null, arguments)
        }
        ;
        var _PyBytes_DecodeEscape = Module["_PyBytes_DecodeEscape"] = function() {
            return (_PyBytes_DecodeEscape = Module["_PyBytes_DecodeEscape"] = Module["asm"]["PyBytes_DecodeEscape"]).apply(null, arguments)
        }
        ;
        var _PyBytes_Size = Module["_PyBytes_Size"] = function() {
            return (_PyBytes_Size = Module["_PyBytes_Size"] = Module["asm"]["PyBytes_Size"]).apply(null, arguments)
        }
        ;
        var _PyBytes_Repr = Module["_PyBytes_Repr"] = function() {
            return (_PyBytes_Repr = Module["_PyBytes_Repr"] = Module["asm"]["PyBytes_Repr"]).apply(null, arguments)
        }
        ;
        var __PyBytes_Join = Module["__PyBytes_Join"] = function() {
            return (__PyBytes_Join = Module["__PyBytes_Join"] = Module["asm"]["_PyBytes_Join"]).apply(null, arguments)
        }
        ;
        var _PyBytes_FromObject = Module["_PyBytes_FromObject"] = function() {
            return (_PyBytes_FromObject = Module["_PyBytes_FromObject"] = Module["asm"]["PyBytes_FromObject"]).apply(null, arguments)
        }
        ;
        var _PyErr_BadArgument = Module["_PyErr_BadArgument"] = function() {
            return (_PyErr_BadArgument = Module["_PyErr_BadArgument"] = Module["asm"]["PyErr_BadArgument"]).apply(null, arguments)
        }
        ;
        var _PyBytes_Concat = Module["_PyBytes_Concat"] = function() {
            return (_PyBytes_Concat = Module["_PyBytes_Concat"] = Module["asm"]["PyBytes_Concat"]).apply(null, arguments)
        }
        ;
        var __PyErr_FormatFromCauseTstate = Module["__PyErr_FormatFromCauseTstate"] = function() {
            return (__PyErr_FormatFromCauseTstate = Module["__PyErr_FormatFromCauseTstate"] = Module["asm"]["_PyErr_FormatFromCauseTstate"]).apply(null, arguments)
        }
        ;
        var __Py_FatalErrorFormat = Module["__Py_FatalErrorFormat"] = function() {
            return (__Py_FatalErrorFormat = Module["__Py_FatalErrorFormat"] = Module["asm"]["_Py_FatalErrorFormat"]).apply(null, arguments)
        }
        ;
        var __PyObject_FastCallDictTstate = Module["__PyObject_FastCallDictTstate"] = function() {
            return (__PyObject_FastCallDictTstate = Module["__PyObject_FastCallDictTstate"] = Module["asm"]["_PyObject_FastCallDictTstate"]).apply(null, arguments)
        }
        ;
        var __PyDict_NewPresized = Module["__PyDict_NewPresized"] = function() {
            return (__PyDict_NewPresized = Module["__PyDict_NewPresized"] = Module["asm"]["_PyDict_NewPresized"]).apply(null, arguments)
        }
        ;
        var __PyErr_NoMemory = Module["__PyErr_NoMemory"] = function() {
            return (__PyErr_NoMemory = Module["__PyErr_NoMemory"] = Module["asm"]["_PyErr_NoMemory"]).apply(null, arguments)
        }
        ;
        var _PyObject_VectorcallDict = Module["_PyObject_VectorcallDict"] = function() {
            return (_PyObject_VectorcallDict = Module["_PyObject_VectorcallDict"] = Module["asm"]["PyObject_VectorcallDict"]).apply(null, arguments)
        }
        ;
        var __PyStack_AsDict = Module["__PyStack_AsDict"] = function() {
            return (__PyStack_AsDict = Module["__PyStack_AsDict"] = Module["asm"]["_PyStack_AsDict"]).apply(null, arguments)
        }
        ;
        var __PyObject_Call = Module["__PyObject_Call"] = function() {
            return (__PyObject_Call = Module["__PyObject_Call"] = Module["asm"]["_PyObject_Call"]).apply(null, arguments)
        }
        ;
        var _PyObject_Call = Module["_PyObject_Call"] = function() {
            return (_PyObject_Call = Module["_PyObject_Call"] = Module["asm"]["PyObject_Call"]).apply(null, arguments)
        }
        ;
        var _PyCFunction_Call = Module["_PyCFunction_Call"] = function() {
            return (_PyCFunction_Call = Module["_PyCFunction_Call"] = Module["asm"]["PyCFunction_Call"]).apply(null, arguments)
        }
        ;
        var __PyFunction_Vectorcall = Module["__PyFunction_Vectorcall"] = function() {
            return (__PyFunction_Vectorcall = Module["__PyFunction_Vectorcall"] = Module["asm"]["_PyFunction_Vectorcall"]).apply(null, arguments)
        }
        ;
        var _PyEval_CallObjectWithKeywords = Module["_PyEval_CallObjectWithKeywords"] = function() {
            return (_PyEval_CallObjectWithKeywords = Module["_PyEval_CallObjectWithKeywords"] = Module["asm"]["PyEval_CallObjectWithKeywords"]).apply(null, arguments)
        }
        ;
        var _PyObject_CallObject = Module["_PyObject_CallObject"] = function() {
            return (_PyObject_CallObject = Module["_PyObject_CallObject"] = Module["asm"]["PyObject_CallObject"]).apply(null, arguments)
        }
        ;
        var __PyObject_Call_Prepend = Module["__PyObject_Call_Prepend"] = function() {
            return (__PyObject_Call_Prepend = Module["__PyObject_Call_Prepend"] = Module["asm"]["_PyObject_Call_Prepend"]).apply(null, arguments)
        }
        ;
        var _PyObject_CallFunction = Module["_PyObject_CallFunction"] = function() {
            return (_PyObject_CallFunction = Module["_PyObject_CallFunction"] = Module["asm"]["PyObject_CallFunction"]).apply(null, arguments)
        }
        ;
        var __Py_VaBuildStack_SizeT = Module["__Py_VaBuildStack_SizeT"] = function() {
            return (__Py_VaBuildStack_SizeT = Module["__Py_VaBuildStack_SizeT"] = Module["asm"]["_Py_VaBuildStack_SizeT"]).apply(null, arguments)
        }
        ;
        var __Py_VaBuildStack = Module["__Py_VaBuildStack"] = function() {
            return (__Py_VaBuildStack = Module["__Py_VaBuildStack"] = Module["asm"]["_Py_VaBuildStack"]).apply(null, arguments)
        }
        ;
        var _PyEval_CallFunction = Module["_PyEval_CallFunction"] = function() {
            return (_PyEval_CallFunction = Module["_PyEval_CallFunction"] = Module["asm"]["PyEval_CallFunction"]).apply(null, arguments)
        }
        ;
        var __PyObject_CallFunction_SizeT = Module["__PyObject_CallFunction_SizeT"] = function() {
            return (__PyObject_CallFunction_SizeT = Module["__PyObject_CallFunction_SizeT"] = Module["asm"]["_PyObject_CallFunction_SizeT"]).apply(null, arguments)
        }
        ;
        var _PyObject_CallMethod = Module["_PyObject_CallMethod"] = function() {
            return (_PyObject_CallMethod = Module["_PyObject_CallMethod"] = Module["asm"]["PyObject_CallMethod"]).apply(null, arguments)
        }
        ;
        var _PyEval_CallMethod = Module["_PyEval_CallMethod"] = function() {
            return (_PyEval_CallMethod = Module["_PyEval_CallMethod"] = Module["asm"]["PyEval_CallMethod"]).apply(null, arguments)
        }
        ;
        var __PyObject_CallMethodId = Module["__PyObject_CallMethodId"] = function() {
            return (__PyObject_CallMethodId = Module["__PyObject_CallMethodId"] = Module["asm"]["_PyObject_CallMethodId"]).apply(null, arguments)
        }
        ;
        var __PyObject_CallMethod_SizeT = Module["__PyObject_CallMethod_SizeT"] = function() {
            return (__PyObject_CallMethod_SizeT = Module["__PyObject_CallMethod_SizeT"] = Module["asm"]["_PyObject_CallMethod_SizeT"]).apply(null, arguments)
        }
        ;
        var _PyObject_CallMethodObjArgs = Module["_PyObject_CallMethodObjArgs"] = function() {
            return (_PyObject_CallMethodObjArgs = Module["_PyObject_CallMethodObjArgs"] = Module["asm"]["PyObject_CallMethodObjArgs"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_New = Module["_PyCapsule_New"] = function() {
            return (_PyCapsule_New = Module["_PyCapsule_New"] = Module["asm"]["PyCapsule_New"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_IsValid = Module["_PyCapsule_IsValid"] = function() {
            return (_PyCapsule_IsValid = Module["_PyCapsule_IsValid"] = Module["asm"]["PyCapsule_IsValid"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_GetPointer = Module["_PyCapsule_GetPointer"] = function() {
            return (_PyCapsule_GetPointer = Module["_PyCapsule_GetPointer"] = Module["asm"]["PyCapsule_GetPointer"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_GetName = Module["_PyCapsule_GetName"] = function() {
            return (_PyCapsule_GetName = Module["_PyCapsule_GetName"] = Module["asm"]["PyCapsule_GetName"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_GetDestructor = Module["_PyCapsule_GetDestructor"] = function() {
            return (_PyCapsule_GetDestructor = Module["_PyCapsule_GetDestructor"] = Module["asm"]["PyCapsule_GetDestructor"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_GetContext = Module["_PyCapsule_GetContext"] = function() {
            return (_PyCapsule_GetContext = Module["_PyCapsule_GetContext"] = Module["asm"]["PyCapsule_GetContext"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_SetPointer = Module["_PyCapsule_SetPointer"] = function() {
            return (_PyCapsule_SetPointer = Module["_PyCapsule_SetPointer"] = Module["asm"]["PyCapsule_SetPointer"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_SetName = Module["_PyCapsule_SetName"] = function() {
            return (_PyCapsule_SetName = Module["_PyCapsule_SetName"] = Module["asm"]["PyCapsule_SetName"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_SetDestructor = Module["_PyCapsule_SetDestructor"] = function() {
            return (_PyCapsule_SetDestructor = Module["_PyCapsule_SetDestructor"] = Module["asm"]["PyCapsule_SetDestructor"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_SetContext = Module["_PyCapsule_SetContext"] = function() {
            return (_PyCapsule_SetContext = Module["_PyCapsule_SetContext"] = Module["asm"]["PyCapsule_SetContext"]).apply(null, arguments)
        }
        ;
        var _PyCapsule_Import = Module["_PyCapsule_Import"] = function() {
            return (_PyCapsule_Import = Module["_PyCapsule_Import"] = Module["asm"]["PyCapsule_Import"]).apply(null, arguments)
        }
        ;
        var _PyCell_New = Module["_PyCell_New"] = function() {
            return (_PyCell_New = Module["_PyCell_New"] = Module["asm"]["PyCell_New"]).apply(null, arguments)
        }
        ;
        var _PyCell_Get = Module["_PyCell_Get"] = function() {
            return (_PyCell_Get = Module["_PyCell_Get"] = Module["asm"]["PyCell_Get"]).apply(null, arguments)
        }
        ;
        var _PyCell_Set = Module["_PyCell_Set"] = function() {
            return (_PyCell_Set = Module["_PyCell_Set"] = Module["asm"]["PyCell_Set"]).apply(null, arguments)
        }
        ;
        var _PyObject_RichCompare = Module["_PyObject_RichCompare"] = function() {
            return (_PyObject_RichCompare = Module["_PyObject_RichCompare"] = Module["asm"]["PyObject_RichCompare"]).apply(null, arguments)
        }
        ;
        var _PyMethod_Function = Module["_PyMethod_Function"] = function() {
            return (_PyMethod_Function = Module["_PyMethod_Function"] = Module["asm"]["PyMethod_Function"]).apply(null, arguments)
        }
        ;
        var _PyMethod_Self = Module["_PyMethod_Self"] = function() {
            return (_PyMethod_Self = Module["_PyMethod_Self"] = Module["asm"]["PyMethod_Self"]).apply(null, arguments)
        }
        ;
        var _PyMethod_New = Module["_PyMethod_New"] = function() {
            return (_PyMethod_New = Module["_PyMethod_New"] = Module["asm"]["PyMethod_New"]).apply(null, arguments)
        }
        ;
        var _PyObject_ClearWeakRefs = Module["_PyObject_ClearWeakRefs"] = function() {
            return (_PyObject_ClearWeakRefs = Module["_PyObject_ClearWeakRefs"] = Module["asm"]["PyObject_ClearWeakRefs"]).apply(null, arguments)
        }
        ;
        var __Py_HashPointer = Module["__Py_HashPointer"] = function() {
            return (__Py_HashPointer = Module["__Py_HashPointer"] = Module["asm"]["_Py_HashPointer"]).apply(null, arguments)
        }
        ;
        var _PyObject_Hash = Module["_PyObject_Hash"] = function() {
            return (_PyObject_Hash = Module["_PyObject_Hash"] = Module["asm"]["PyObject_Hash"]).apply(null, arguments)
        }
        ;
        var __PyType_Lookup = Module["__PyType_Lookup"] = function() {
            return (__PyType_Lookup = Module["__PyType_Lookup"] = Module["asm"]["_PyType_Lookup"]).apply(null, arguments)
        }
        ;
        var _PyObject_GetAttr = Module["_PyObject_GetAttr"] = function() {
            return (_PyObject_GetAttr = Module["_PyObject_GetAttr"] = Module["asm"]["PyObject_GetAttr"]).apply(null, arguments)
        }
        ;
        var _PyInstanceMethod_New = Module["_PyInstanceMethod_New"] = function() {
            return (_PyInstanceMethod_New = Module["_PyInstanceMethod_New"] = Module["asm"]["PyInstanceMethod_New"]).apply(null, arguments)
        }
        ;
        var _PyInstanceMethod_Function = Module["_PyInstanceMethod_Function"] = function() {
            return (_PyInstanceMethod_Function = Module["_PyInstanceMethod_Function"] = Module["asm"]["PyInstanceMethod_Function"]).apply(null, arguments)
        }
        ;
        var _PyCode_NewWithPosOnlyArgs = Module["_PyCode_NewWithPosOnlyArgs"] = function() {
            return (_PyCode_NewWithPosOnlyArgs = Module["_PyCode_NewWithPosOnlyArgs"] = Module["asm"]["PyCode_NewWithPosOnlyArgs"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Compare = Module["_PyUnicode_Compare"] = function() {
            return (_PyUnicode_Compare = Module["_PyUnicode_Compare"] = Module["asm"]["PyUnicode_Compare"]).apply(null, arguments)
        }
        ;
        var _PyFrozenSet_New = Module["_PyFrozenSet_New"] = function() {
            return (_PyFrozenSet_New = Module["_PyFrozenSet_New"] = Module["asm"]["PyFrozenSet_New"]).apply(null, arguments)
        }
        ;
        var _PyCode_New = Module["_PyCode_New"] = function() {
            return (_PyCode_New = Module["_PyCode_New"] = Module["asm"]["PyCode_New"]).apply(null, arguments)
        }
        ;
        var _PyCode_NewEmpty = Module["_PyCode_NewEmpty"] = function() {
            return (_PyCode_NewEmpty = Module["_PyCode_NewEmpty"] = Module["asm"]["PyCode_NewEmpty"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeFSDefault = Module["_PyUnicode_DecodeFSDefault"] = function() {
            return (_PyUnicode_DecodeFSDefault = Module["_PyUnicode_DecodeFSDefault"] = Module["asm"]["PyUnicode_DecodeFSDefault"]).apply(null, arguments)
        }
        ;
        var __PyCode_ConstantKey = Module["__PyCode_ConstantKey"] = function() {
            return (__PyCode_ConstantKey = Module["__PyCode_ConstantKey"] = Module["asm"]["_PyCode_ConstantKey"]).apply(null, arguments)
        }
        ;
        var _PyComplex_AsCComplex = Module["_PyComplex_AsCComplex"] = function() {
            return (_PyComplex_AsCComplex = Module["_PyComplex_AsCComplex"] = Module["asm"]["PyComplex_AsCComplex"]).apply(null, arguments)
        }
        ;
        var __PySet_NextEntry = Module["__PySet_NextEntry"] = function() {
            return (__PySet_NextEntry = Module["__PySet_NextEntry"] = Module["asm"]["_PySet_NextEntry"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromVoidPtr = Module["_PyLong_FromVoidPtr"] = function() {
            return (_PyLong_FromVoidPtr = Module["_PyLong_FromVoidPtr"] = Module["asm"]["PyLong_FromVoidPtr"]).apply(null, arguments)
        }
        ;
        var _PyCode_Addr2Line = Module["_PyCode_Addr2Line"] = function() {
            return (_PyCode_Addr2Line = Module["_PyCode_Addr2Line"] = Module["asm"]["PyCode_Addr2Line"]).apply(null, arguments)
        }
        ;
        var __PyCode_CheckLineNumber = Module["__PyCode_CheckLineNumber"] = function() {
            return (__PyCode_CheckLineNumber = Module["__PyCode_CheckLineNumber"] = Module["asm"]["_PyCode_CheckLineNumber"]).apply(null, arguments)
        }
        ;
        var __PyCode_GetExtra = Module["__PyCode_GetExtra"] = function() {
            return (__PyCode_GetExtra = Module["__PyCode_GetExtra"] = Module["asm"]["_PyCode_GetExtra"]).apply(null, arguments)
        }
        ;
        var __PyCode_SetExtra = Module["__PyCode_SetExtra"] = function() {
            return (__PyCode_SetExtra = Module["__PyCode_SetExtra"] = Module["asm"]["_PyCode_SetExtra"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_Copy = Module["__PyUnicode_Copy"] = function() {
            return (__PyUnicode_Copy = Module["__PyUnicode_Copy"] = Module["asm"]["_PyUnicode_Copy"]).apply(null, arguments)
        }
        ;
        var __Py_c_sum = Module["__Py_c_sum"] = function() {
            return (__Py_c_sum = Module["__Py_c_sum"] = Module["asm"]["_Py_c_sum"]).apply(null, arguments)
        }
        ;
        var __Py_c_diff = Module["__Py_c_diff"] = function() {
            return (__Py_c_diff = Module["__Py_c_diff"] = Module["asm"]["_Py_c_diff"]).apply(null, arguments)
        }
        ;
        var __Py_c_neg = Module["__Py_c_neg"] = function() {
            return (__Py_c_neg = Module["__Py_c_neg"] = Module["asm"]["_Py_c_neg"]).apply(null, arguments)
        }
        ;
        var __Py_c_prod = Module["__Py_c_prod"] = function() {
            return (__Py_c_prod = Module["__Py_c_prod"] = Module["asm"]["_Py_c_prod"]).apply(null, arguments)
        }
        ;
        var __Py_c_quot = Module["__Py_c_quot"] = function() {
            return (__Py_c_quot = Module["__Py_c_quot"] = Module["asm"]["_Py_c_quot"]).apply(null, arguments)
        }
        ;
        var __Py_c_pow = Module["__Py_c_pow"] = function() {
            return (__Py_c_pow = Module["__Py_c_pow"] = Module["asm"]["_Py_c_pow"]).apply(null, arguments)
        }
        ;
        var _hypot = Module["_hypot"] = function() {
            return (_hypot = Module["_hypot"] = Module["asm"]["hypot"]).apply(null, arguments)
        }
        ;
        var _atan2 = Module["_atan2"] = function() {
            return (_atan2 = Module["_atan2"] = Module["asm"]["atan2"]).apply(null, arguments)
        }
        ;
        var _pow = Module["_pow"] = function() {
            return (_pow = Module["_pow"] = Module["asm"]["pow"]).apply(null, arguments)
        }
        ;
        var _log = Module["_log"] = function() {
            return (_log = Module["_log"] = Module["asm"]["log"]).apply(null, arguments)
        }
        ;
        var _exp = Module["_exp"] = function() {
            return (_exp = Module["_exp"] = Module["asm"]["exp"]).apply(null, arguments)
        }
        ;
        var _sin = Module["_sin"] = function() {
            return (_sin = Module["_sin"] = Module["asm"]["sin"]).apply(null, arguments)
        }
        ;
        var _cos = Module["_cos"] = function() {
            return (_cos = Module["_cos"] = Module["asm"]["cos"]).apply(null, arguments)
        }
        ;
        var __Py_c_abs = Module["__Py_c_abs"] = function() {
            return (__Py_c_abs = Module["__Py_c_abs"] = Module["asm"]["_Py_c_abs"]).apply(null, arguments)
        }
        ;
        var _PyComplex_FromDoubles = Module["_PyComplex_FromDoubles"] = function() {
            return (_PyComplex_FromDoubles = Module["_PyComplex_FromDoubles"] = Module["asm"]["PyComplex_FromDoubles"]).apply(null, arguments)
        }
        ;
        var _PyComplex_RealAsDouble = Module["_PyComplex_RealAsDouble"] = function() {
            return (_PyComplex_RealAsDouble = Module["_PyComplex_RealAsDouble"] = Module["asm"]["PyComplex_RealAsDouble"]).apply(null, arguments)
        }
        ;
        var _PyComplex_ImagAsDouble = Module["_PyComplex_ImagAsDouble"] = function() {
            return (_PyComplex_ImagAsDouble = Module["_PyComplex_ImagAsDouble"] = Module["asm"]["PyComplex_ImagAsDouble"]).apply(null, arguments)
        }
        ;
        var __Py_HashDouble = Module["__Py_HashDouble"] = function() {
            return (__Py_HashDouble = Module["__Py_HashDouble"] = Module["asm"]["_Py_HashDouble"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_TransformDecimalAndSpaceToASCII = Module["__PyUnicode_TransformDecimalAndSpaceToASCII"] = function() {
            return (__PyUnicode_TransformDecimalAndSpaceToASCII = Module["__PyUnicode_TransformDecimalAndSpaceToASCII"] = Module["asm"]["_PyUnicode_TransformDecimalAndSpaceToASCII"]).apply(null, arguments)
        }
        ;
        var __Py_string_to_number_with_underscores = Module["__Py_string_to_number_with_underscores"] = function() {
            return (__Py_string_to_number_with_underscores = Module["__Py_string_to_number_with_underscores"] = Module["asm"]["_Py_string_to_number_with_underscores"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_Init = Module["__PyUnicodeWriter_Init"] = function() {
            return (__PyUnicodeWriter_Init = Module["__PyUnicodeWriter_Init"] = Module["asm"]["_PyUnicodeWriter_Init"]).apply(null, arguments)
        }
        ;
        var __PyComplex_FormatAdvancedWriter = Module["__PyComplex_FormatAdvancedWriter"] = function() {
            return (__PyComplex_FormatAdvancedWriter = Module["__PyComplex_FormatAdvancedWriter"] = Module["asm"]["_PyComplex_FormatAdvancedWriter"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_Dealloc = Module["__PyUnicodeWriter_Dealloc"] = function() {
            return (__PyUnicodeWriter_Dealloc = Module["__PyUnicodeWriter_Dealloc"] = Module["asm"]["_PyUnicodeWriter_Dealloc"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_Finish = Module["__PyUnicodeWriter_Finish"] = function() {
            return (__PyUnicodeWriter_Finish = Module["__PyUnicodeWriter_Finish"] = Module["asm"]["_PyUnicodeWriter_Finish"]).apply(null, arguments)
        }
        ;
        var _PyCMethod_New = Module["_PyCMethod_New"] = function() {
            return (_PyCMethod_New = Module["_PyCMethod_New"] = Module["asm"]["PyCMethod_New"]).apply(null, arguments)
        }
        ;
        var _PyMember_GetOne = Module["_PyMember_GetOne"] = function() {
            return (_PyMember_GetOne = Module["_PyMember_GetOne"] = Module["asm"]["PyMember_GetOne"]).apply(null, arguments)
        }
        ;
        var _PyMember_SetOne = Module["_PyMember_SetOne"] = function() {
            return (_PyMember_SetOne = Module["_PyMember_SetOne"] = Module["asm"]["PyMember_SetOne"]).apply(null, arguments)
        }
        ;
        var _PyTuple_GetSlice = Module["_PyTuple_GetSlice"] = function() {
            return (_PyTuple_GetSlice = Module["_PyTuple_GetSlice"] = Module["asm"]["PyTuple_GetSlice"]).apply(null, arguments)
        }
        ;
        var _PyDescr_NewMethod = Module["_PyDescr_NewMethod"] = function() {
            return (_PyDescr_NewMethod = Module["_PyDescr_NewMethod"] = Module["asm"]["PyDescr_NewMethod"]).apply(null, arguments)
        }
        ;
        var __PyObject_FunctionStr = Module["__PyObject_FunctionStr"] = function() {
            return (__PyObject_FunctionStr = Module["__PyObject_FunctionStr"] = Module["asm"]["_PyObject_FunctionStr"]).apply(null, arguments)
        }
        ;
        var _PyDescr_NewClassMethod = Module["_PyDescr_NewClassMethod"] = function() {
            return (_PyDescr_NewClassMethod = Module["_PyDescr_NewClassMethod"] = Module["asm"]["PyDescr_NewClassMethod"]).apply(null, arguments)
        }
        ;
        var _PyDescr_NewMember = Module["_PyDescr_NewMember"] = function() {
            return (_PyDescr_NewMember = Module["_PyDescr_NewMember"] = Module["asm"]["PyDescr_NewMember"]).apply(null, arguments)
        }
        ;
        var _PyDescr_NewGetSet = Module["_PyDescr_NewGetSet"] = function() {
            return (_PyDescr_NewGetSet = Module["_PyDescr_NewGetSet"] = Module["asm"]["PyDescr_NewGetSet"]).apply(null, arguments)
        }
        ;
        var _PyDescr_NewWrapper = Module["_PyDescr_NewWrapper"] = function() {
            return (_PyDescr_NewWrapper = Module["_PyDescr_NewWrapper"] = Module["asm"]["PyDescr_NewWrapper"]).apply(null, arguments)
        }
        ;
        var _PyDescr_IsData = Module["_PyDescr_IsData"] = function() {
            return (_PyDescr_IsData = Module["_PyDescr_IsData"] = Module["asm"]["PyDescr_IsData"]).apply(null, arguments)
        }
        ;
        var _PyDictProxy_New = Module["_PyDictProxy_New"] = function() {
            return (_PyDictProxy_New = Module["_PyDictProxy_New"] = Module["asm"]["PyDictProxy_New"]).apply(null, arguments)
        }
        ;
        var _PyObject_GC_UnTrack = Module["_PyObject_GC_UnTrack"] = function() {
            return (_PyObject_GC_UnTrack = Module["_PyObject_GC_UnTrack"] = Module["asm"]["PyObject_GC_UnTrack"]).apply(null, arguments)
        }
        ;
        var __PyTrash_cond = Module["__PyTrash_cond"] = function() {
            return (__PyTrash_cond = Module["__PyTrash_cond"] = Module["asm"]["_PyTrash_cond"]).apply(null, arguments)
        }
        ;
        var __PyTrash_begin = Module["__PyTrash_begin"] = function() {
            return (__PyTrash_begin = Module["__PyTrash_begin"] = Module["asm"]["_PyTrash_begin"]).apply(null, arguments)
        }
        ;
        var __PyTrash_end = Module["__PyTrash_end"] = function() {
            return (__PyTrash_end = Module["__PyTrash_end"] = Module["asm"]["_PyTrash_end"]).apply(null, arguments)
        }
        ;
        var _PyWrapper_New = Module["_PyWrapper_New"] = function() {
            return (_PyWrapper_New = Module["_PyWrapper_New"] = Module["asm"]["PyWrapper_New"]).apply(null, arguments)
        }
        ;
        var __PyObject_SetAttrId = Module["__PyObject_SetAttrId"] = function() {
            return (__PyObject_SetAttrId = Module["__PyObject_SetAttrId"] = Module["asm"]["_PyObject_SetAttrId"]).apply(null, arguments)
        }
        ;
        var __PyType_GetDocFromInternalDoc = Module["__PyType_GetDocFromInternalDoc"] = function() {
            return (__PyType_GetDocFromInternalDoc = Module["__PyType_GetDocFromInternalDoc"] = Module["asm"]["_PyType_GetDocFromInternalDoc"]).apply(null, arguments)
        }
        ;
        var __PyType_GetTextSignatureFromInternalDoc = Module["__PyType_GetTextSignatureFromInternalDoc"] = function() {
            return (__PyType_GetTextSignatureFromInternalDoc = Module["__PyType_GetTextSignatureFromInternalDoc"] = Module["asm"]["_PyType_GetTextSignatureFromInternalDoc"]).apply(null, arguments)
        }
        ;
        var _PyDict_Contains = Module["_PyDict_Contains"] = function() {
            return (_PyDict_Contains = Module["_PyDict_Contains"] = Module["asm"]["PyDict_Contains"]).apply(null, arguments)
        }
        ;
        var __PyArg_UnpackStack = Module["__PyArg_UnpackStack"] = function() {
            return (__PyArg_UnpackStack = Module["__PyArg_UnpackStack"] = Module["asm"]["_PyArg_UnpackStack"]).apply(null, arguments)
        }
        ;
        var __PyObject_IsAbstract = Module["__PyObject_IsAbstract"] = function() {
            return (__PyObject_IsAbstract = Module["__PyObject_IsAbstract"] = Module["asm"]["_PyObject_IsAbstract"]).apply(null, arguments)
        }
        ;
        var _PyException_GetTraceback = Module["_PyException_GetTraceback"] = function() {
            return (_PyException_GetTraceback = Module["_PyException_GetTraceback"] = Module["asm"]["PyException_GetTraceback"]).apply(null, arguments)
        }
        ;
        var _PyException_GetCause = Module["_PyException_GetCause"] = function() {
            return (_PyException_GetCause = Module["_PyException_GetCause"] = Module["asm"]["PyException_GetCause"]).apply(null, arguments)
        }
        ;
        var _PyException_SetCause = Module["_PyException_SetCause"] = function() {
            return (_PyException_SetCause = Module["_PyException_SetCause"] = Module["asm"]["PyException_SetCause"]).apply(null, arguments)
        }
        ;
        var _PyException_GetContext = Module["_PyException_GetContext"] = function() {
            return (_PyException_GetContext = Module["_PyException_GetContext"] = Module["asm"]["PyException_GetContext"]).apply(null, arguments)
        }
        ;
        var _PyException_SetContext = Module["_PyException_SetContext"] = function() {
            return (_PyException_SetContext = Module["_PyException_SetContext"] = Module["asm"]["PyException_SetContext"]).apply(null, arguments)
        }
        ;
        var _PyExceptionClass_Name = Module["_PyExceptionClass_Name"] = function() {
            return (_PyExceptionClass_Name = Module["_PyExceptionClass_Name"] = Module["asm"]["PyExceptionClass_Name"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_GetEncoding = Module["_PyUnicodeEncodeError_GetEncoding"] = function() {
            return (_PyUnicodeEncodeError_GetEncoding = Module["_PyUnicodeEncodeError_GetEncoding"] = Module["asm"]["PyUnicodeEncodeError_GetEncoding"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_GetEncoding = Module["_PyUnicodeDecodeError_GetEncoding"] = function() {
            return (_PyUnicodeDecodeError_GetEncoding = Module["_PyUnicodeDecodeError_GetEncoding"] = Module["asm"]["PyUnicodeDecodeError_GetEncoding"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_GetObject = Module["_PyUnicodeEncodeError_GetObject"] = function() {
            return (_PyUnicodeEncodeError_GetObject = Module["_PyUnicodeEncodeError_GetObject"] = Module["asm"]["PyUnicodeEncodeError_GetObject"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_GetObject = Module["_PyUnicodeDecodeError_GetObject"] = function() {
            return (_PyUnicodeDecodeError_GetObject = Module["_PyUnicodeDecodeError_GetObject"] = Module["asm"]["PyUnicodeDecodeError_GetObject"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeTranslateError_GetObject = Module["_PyUnicodeTranslateError_GetObject"] = function() {
            return (_PyUnicodeTranslateError_GetObject = Module["_PyUnicodeTranslateError_GetObject"] = Module["asm"]["PyUnicodeTranslateError_GetObject"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_GetStart = Module["_PyUnicodeEncodeError_GetStart"] = function() {
            return (_PyUnicodeEncodeError_GetStart = Module["_PyUnicodeEncodeError_GetStart"] = Module["asm"]["PyUnicodeEncodeError_GetStart"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_GetStart = Module["_PyUnicodeDecodeError_GetStart"] = function() {
            return (_PyUnicodeDecodeError_GetStart = Module["_PyUnicodeDecodeError_GetStart"] = Module["asm"]["PyUnicodeDecodeError_GetStart"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeTranslateError_GetStart = Module["_PyUnicodeTranslateError_GetStart"] = function() {
            return (_PyUnicodeTranslateError_GetStart = Module["_PyUnicodeTranslateError_GetStart"] = Module["asm"]["PyUnicodeTranslateError_GetStart"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_SetStart = Module["_PyUnicodeEncodeError_SetStart"] = function() {
            return (_PyUnicodeEncodeError_SetStart = Module["_PyUnicodeEncodeError_SetStart"] = Module["asm"]["PyUnicodeEncodeError_SetStart"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_SetStart = Module["_PyUnicodeDecodeError_SetStart"] = function() {
            return (_PyUnicodeDecodeError_SetStart = Module["_PyUnicodeDecodeError_SetStart"] = Module["asm"]["PyUnicodeDecodeError_SetStart"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeTranslateError_SetStart = Module["_PyUnicodeTranslateError_SetStart"] = function() {
            return (_PyUnicodeTranslateError_SetStart = Module["_PyUnicodeTranslateError_SetStart"] = Module["asm"]["PyUnicodeTranslateError_SetStart"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_GetEnd = Module["_PyUnicodeEncodeError_GetEnd"] = function() {
            return (_PyUnicodeEncodeError_GetEnd = Module["_PyUnicodeEncodeError_GetEnd"] = Module["asm"]["PyUnicodeEncodeError_GetEnd"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_GetEnd = Module["_PyUnicodeDecodeError_GetEnd"] = function() {
            return (_PyUnicodeDecodeError_GetEnd = Module["_PyUnicodeDecodeError_GetEnd"] = Module["asm"]["PyUnicodeDecodeError_GetEnd"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeTranslateError_GetEnd = Module["_PyUnicodeTranslateError_GetEnd"] = function() {
            return (_PyUnicodeTranslateError_GetEnd = Module["_PyUnicodeTranslateError_GetEnd"] = Module["asm"]["PyUnicodeTranslateError_GetEnd"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_SetEnd = Module["_PyUnicodeEncodeError_SetEnd"] = function() {
            return (_PyUnicodeEncodeError_SetEnd = Module["_PyUnicodeEncodeError_SetEnd"] = Module["asm"]["PyUnicodeEncodeError_SetEnd"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_SetEnd = Module["_PyUnicodeDecodeError_SetEnd"] = function() {
            return (_PyUnicodeDecodeError_SetEnd = Module["_PyUnicodeDecodeError_SetEnd"] = Module["asm"]["PyUnicodeDecodeError_SetEnd"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeTranslateError_SetEnd = Module["_PyUnicodeTranslateError_SetEnd"] = function() {
            return (_PyUnicodeTranslateError_SetEnd = Module["_PyUnicodeTranslateError_SetEnd"] = Module["asm"]["PyUnicodeTranslateError_SetEnd"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_GetReason = Module["_PyUnicodeEncodeError_GetReason"] = function() {
            return (_PyUnicodeEncodeError_GetReason = Module["_PyUnicodeEncodeError_GetReason"] = Module["asm"]["PyUnicodeEncodeError_GetReason"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_GetReason = Module["_PyUnicodeDecodeError_GetReason"] = function() {
            return (_PyUnicodeDecodeError_GetReason = Module["_PyUnicodeDecodeError_GetReason"] = Module["asm"]["PyUnicodeDecodeError_GetReason"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeTranslateError_GetReason = Module["_PyUnicodeTranslateError_GetReason"] = function() {
            return (_PyUnicodeTranslateError_GetReason = Module["_PyUnicodeTranslateError_GetReason"] = Module["asm"]["PyUnicodeTranslateError_GetReason"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_SetReason = Module["_PyUnicodeEncodeError_SetReason"] = function() {
            return (_PyUnicodeEncodeError_SetReason = Module["_PyUnicodeEncodeError_SetReason"] = Module["asm"]["PyUnicodeEncodeError_SetReason"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_SetReason = Module["_PyUnicodeDecodeError_SetReason"] = function() {
            return (_PyUnicodeDecodeError_SetReason = Module["_PyUnicodeDecodeError_SetReason"] = Module["asm"]["PyUnicodeDecodeError_SetReason"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeTranslateError_SetReason = Module["_PyUnicodeTranslateError_SetReason"] = function() {
            return (_PyUnicodeTranslateError_SetReason = Module["_PyUnicodeTranslateError_SetReason"] = Module["asm"]["PyUnicodeTranslateError_SetReason"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeEncodeError_Create = Module["_PyUnicodeEncodeError_Create"] = function() {
            return (_PyUnicodeEncodeError_Create = Module["_PyUnicodeEncodeError_Create"] = Module["asm"]["PyUnicodeEncodeError_Create"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeDecodeError_Create = Module["_PyUnicodeDecodeError_Create"] = function() {
            return (_PyUnicodeDecodeError_Create = Module["_PyUnicodeDecodeError_Create"] = Module["asm"]["PyUnicodeDecodeError_Create"]).apply(null, arguments)
        }
        ;
        var _PyUnicodeTranslateError_Create = Module["_PyUnicodeTranslateError_Create"] = function() {
            return (_PyUnicodeTranslateError_Create = Module["_PyUnicodeTranslateError_Create"] = Module["asm"]["PyUnicodeTranslateError_Create"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeTranslateError_Create = Module["__PyUnicodeTranslateError_Create"] = function() {
            return (__PyUnicodeTranslateError_Create = Module["__PyUnicodeTranslateError_Create"] = Module["asm"]["_PyUnicodeTranslateError_Create"]).apply(null, arguments)
        }
        ;
        var _PyModule_GetDict = Module["_PyModule_GetDict"] = function() {
            return (_PyModule_GetDict = Module["_PyModule_GetDict"] = Module["asm"]["PyModule_GetDict"]).apply(null, arguments)
        }
        ;
        var __PyErr_TrySetFromCause = Module["__PyErr_TrySetFromCause"] = function() {
            return (__PyErr_TrySetFromCause = Module["__PyErr_TrySetFromCause"] = Module["asm"]["_PyErr_TrySetFromCause"]).apply(null, arguments)
        }
        ;
        var __PyObject_GetDictPtr = Module["__PyObject_GetDictPtr"] = function() {
            return (__PyObject_GetDictPtr = Module["__PyObject_GetDictPtr"] = Module["asm"]["_PyObject_GetDictPtr"]).apply(null, arguments)
        }
        ;
        var _PyDict_Copy = Module["_PyDict_Copy"] = function() {
            return (_PyDict_Copy = Module["_PyDict_Copy"] = Module["asm"]["PyDict_Copy"]).apply(null, arguments)
        }
        ;
        var __PyDict_SetItemId = Module["__PyDict_SetItemId"] = function() {
            return (__PyDict_SetItemId = Module["__PyDict_SetItemId"] = Module["asm"]["_PyDict_SetItemId"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_ReadChar = Module["_PyUnicode_ReadChar"] = function() {
            return (_PyUnicode_ReadChar = Module["_PyUnicode_ReadChar"] = Module["asm"]["PyUnicode_ReadChar"]).apply(null, arguments)
        }
        ;
        var _PyObject_GenericGetDict = Module["_PyObject_GenericGetDict"] = function() {
            return (_PyObject_GenericGetDict = Module["_PyObject_GenericGetDict"] = Module["asm"]["PyObject_GenericGetDict"]).apply(null, arguments)
        }
        ;
        var _PyObject_GenericSetDict = Module["_PyObject_GenericSetDict"] = function() {
            return (_PyObject_GenericSetDict = Module["_PyObject_GenericSetDict"] = Module["asm"]["PyObject_GenericSetDict"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_EqualToASCIIString = Module["__PyUnicode_EqualToASCIIString"] = function() {
            return (__PyUnicode_EqualToASCIIString = Module["__PyUnicode_EqualToASCIIString"] = Module["asm"]["_PyUnicode_EqualToASCIIString"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_WriteASCIIString = Module["__PyUnicodeWriter_WriteASCIIString"] = function() {
            return (__PyUnicodeWriter_WriteASCIIString = Module["__PyUnicodeWriter_WriteASCIIString"] = Module["asm"]["_PyUnicodeWriter_WriteASCIIString"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_WriteStr = Module["__PyUnicodeWriter_WriteStr"] = function() {
            return (__PyUnicodeWriter_WriteStr = Module["__PyUnicodeWriter_WriteStr"] = Module["asm"]["_PyUnicodeWriter_WriteStr"]).apply(null, arguments)
        }
        ;
        var __PyGen_Finalize = Module["__PyGen_Finalize"] = function() {
            return (__PyGen_Finalize = Module["__PyGen_Finalize"] = Module["asm"]["_PyGen_Finalize"]).apply(null, arguments)
        }
        ;
        var _PyErr_WriteUnraisable = Module["_PyErr_WriteUnraisable"] = function() {
            return (_PyErr_WriteUnraisable = Module["_PyErr_WriteUnraisable"] = Module["asm"]["PyErr_WriteUnraisable"]).apply(null, arguments)
        }
        ;
        var __PyGen_SetStopIterationValue = Module["__PyGen_SetStopIterationValue"] = function() {
            return (__PyGen_SetStopIterationValue = Module["__PyGen_SetStopIterationValue"] = Module["asm"]["_PyGen_SetStopIterationValue"]).apply(null, arguments)
        }
        ;
        var _PyObject_CallFinalizerFromDealloc = Module["_PyObject_CallFinalizerFromDealloc"] = function() {
            return (_PyObject_CallFinalizerFromDealloc = Module["_PyObject_CallFinalizerFromDealloc"] = Module["asm"]["PyObject_CallFinalizerFromDealloc"]).apply(null, arguments)
        }
        ;
        var _PyGen_NewWithQualName = Module["_PyGen_NewWithQualName"] = function() {
            return (_PyGen_NewWithQualName = Module["_PyGen_NewWithQualName"] = Module["asm"]["PyGen_NewWithQualName"]).apply(null, arguments)
        }
        ;
        var _PyGen_New = Module["_PyGen_New"] = function() {
            return (_PyGen_New = Module["_PyGen_New"] = Module["asm"]["PyGen_New"]).apply(null, arguments)
        }
        ;
        var _PyCoro_New = Module["_PyCoro_New"] = function() {
            return (_PyCoro_New = Module["_PyCoro_New"] = Module["asm"]["PyCoro_New"]).apply(null, arguments)
        }
        ;
        var _PyEval_GetFrame = Module["_PyEval_GetFrame"] = function() {
            return (_PyEval_GetFrame = Module["_PyEval_GetFrame"] = Module["asm"]["PyEval_GetFrame"]).apply(null, arguments)
        }
        ;
        var _PyFrame_GetLineNumber = Module["_PyFrame_GetLineNumber"] = function() {
            return (_PyFrame_GetLineNumber = Module["_PyFrame_GetLineNumber"] = Module["asm"]["PyFrame_GetLineNumber"]).apply(null, arguments)
        }
        ;
        var _PyAsyncGen_New = Module["_PyAsyncGen_New"] = function() {
            return (_PyAsyncGen_New = Module["_PyAsyncGen_New"] = Module["asm"]["PyAsyncGen_New"]).apply(null, arguments)
        }
        ;
        var __PyErr_ChainStackItem = Module["__PyErr_ChainStackItem"] = function() {
            return (__PyErr_ChainStackItem = Module["__PyErr_ChainStackItem"] = Module["asm"]["_PyErr_ChainStackItem"]).apply(null, arguments)
        }
        ;
        var _PyFile_FromFd = Module["_PyFile_FromFd"] = function() {
            return (_PyFile_FromFd = Module["_PyFile_FromFd"] = Module["asm"]["PyFile_FromFd"]).apply(null, arguments)
        }
        ;
        var _PyFile_GetLine = Module["_PyFile_GetLine"] = function() {
            return (_PyFile_GetLine = Module["_PyFile_GetLine"] = Module["asm"]["PyFile_GetLine"]).apply(null, arguments)
        }
        ;
        var _PyFile_WriteObject = Module["_PyFile_WriteObject"] = function() {
            return (_PyFile_WriteObject = Module["_PyFile_WriteObject"] = Module["asm"]["PyFile_WriteObject"]).apply(null, arguments)
        }
        ;
        var _PyFile_WriteString = Module["_PyFile_WriteString"] = function() {
            return (_PyFile_WriteString = Module["_PyFile_WriteString"] = Module["asm"]["PyFile_WriteString"]).apply(null, arguments)
        }
        ;
        var _PyObject_AsFileDescriptor = Module["_PyObject_AsFileDescriptor"] = function() {
            return (_PyObject_AsFileDescriptor = Module["_PyObject_AsFileDescriptor"] = Module["asm"]["PyObject_AsFileDescriptor"]).apply(null, arguments)
        }
        ;
        var __PyLong_FileDescriptor_Converter = Module["__PyLong_FileDescriptor_Converter"] = function() {
            return (__PyLong_FileDescriptor_Converter = Module["__PyLong_FileDescriptor_Converter"] = Module["asm"]["_PyLong_FileDescriptor_Converter"]).apply(null, arguments)
        }
        ;
        var _flockfile = Module["_flockfile"] = function() {
            return (_flockfile = Module["_flockfile"] = Module["asm"]["flockfile"]).apply(null, arguments)
        }
        ;
        var _getc_unlocked = Module["_getc_unlocked"] = function() {
            return (_getc_unlocked = Module["_getc_unlocked"] = Module["asm"]["getc_unlocked"]).apply(null, arguments)
        }
        ;
        var _funlockfile = Module["_funlockfile"] = function() {
            return (_funlockfile = Module["_funlockfile"] = Module["asm"]["funlockfile"]).apply(null, arguments)
        }
        ;
        var _PyFile_NewStdPrinter = Module["_PyFile_NewStdPrinter"] = function() {
            return (_PyFile_NewStdPrinter = Module["_PyFile_NewStdPrinter"] = Module["asm"]["PyFile_NewStdPrinter"]).apply(null, arguments)
        }
        ;
        var _PyFile_SetOpenCodeHook = Module["_PyFile_SetOpenCodeHook"] = function() {
            return (_PyFile_SetOpenCodeHook = Module["_PyFile_SetOpenCodeHook"] = Module["asm"]["PyFile_SetOpenCodeHook"]).apply(null, arguments)
        }
        ;
        var _Py_IsInitialized = Module["_Py_IsInitialized"] = function() {
            return (_Py_IsInitialized = Module["_Py_IsInitialized"] = Module["asm"]["Py_IsInitialized"]).apply(null, arguments)
        }
        ;
        var _PyFile_OpenCodeObject = Module["_PyFile_OpenCodeObject"] = function() {
            return (_PyFile_OpenCodeObject = Module["_PyFile_OpenCodeObject"] = Module["asm"]["PyFile_OpenCodeObject"]).apply(null, arguments)
        }
        ;
        var _PyFile_OpenCode = Module["_PyFile_OpenCode"] = function() {
            return (_PyFile_OpenCode = Module["_PyFile_OpenCode"] = Module["asm"]["PyFile_OpenCode"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_AsUTF8String = Module["__PyUnicode_AsUTF8String"] = function() {
            return (__PyUnicode_AsUTF8String = Module["__PyUnicode_AsUTF8String"] = Module["asm"]["_PyUnicode_AsUTF8String"]).apply(null, arguments)
        }
        ;
        var __Py_write = Module["__Py_write"] = function() {
            return (__Py_write = Module["__Py_write"] = Module["asm"]["_Py_write"]).apply(null, arguments)
        }
        ;
        var _PyFloat_GetMax = Module["_PyFloat_GetMax"] = function() {
            return (_PyFloat_GetMax = Module["_PyFloat_GetMax"] = Module["asm"]["PyFloat_GetMax"]).apply(null, arguments)
        }
        ;
        var _PyFloat_GetMin = Module["_PyFloat_GetMin"] = function() {
            return (_PyFloat_GetMin = Module["_PyFloat_GetMin"] = Module["asm"]["PyFloat_GetMin"]).apply(null, arguments)
        }
        ;
        var _PyFloat_GetInfo = Module["_PyFloat_GetInfo"] = function() {
            return (_PyFloat_GetInfo = Module["_PyFloat_GetInfo"] = Module["asm"]["PyFloat_GetInfo"]).apply(null, arguments)
        }
        ;
        var _PyStructSequence_New = Module["_PyStructSequence_New"] = function() {
            return (_PyStructSequence_New = Module["_PyStructSequence_New"] = Module["asm"]["PyStructSequence_New"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_FromASCII = Module["__PyUnicode_FromASCII"] = function() {
            return (__PyUnicode_FromASCII = Module["__PyUnicode_FromASCII"] = Module["asm"]["_PyUnicode_FromASCII"]).apply(null, arguments)
        }
        ;
        var __PyLong_NumBits = Module["__PyLong_NumBits"] = function() {
            return (__PyLong_NumBits = Module["__PyLong_NumBits"] = Module["asm"]["_PyLong_NumBits"]).apply(null, arguments)
        }
        ;
        var _frexp = Module["_frexp"] = function() {
            return (_frexp = Module["_frexp"] = Module["asm"]["frexp"]).apply(null, arguments)
        }
        ;
        var _modf = Module["_modf"] = function() {
            return (_modf = Module["_modf"] = Module["asm"]["modf"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromDouble = Module["_PyLong_FromDouble"] = function() {
            return (_PyLong_FromDouble = Module["_PyLong_FromDouble"] = Module["asm"]["PyLong_FromDouble"]).apply(null, arguments)
        }
        ;
        var __PyLong_Lshift = Module["__PyLong_Lshift"] = function() {
            return (__PyLong_Lshift = Module["__PyLong_Lshift"] = Module["asm"]["_PyLong_Lshift"]).apply(null, arguments)
        }
        ;
        var _PyStructSequence_InitType2 = Module["_PyStructSequence_InitType2"] = function() {
            return (_PyStructSequence_InitType2 = Module["_PyStructSequence_InitType2"] = Module["asm"]["PyStructSequence_InitType2"]).apply(null, arguments)
        }
        ;
        var __PyFloat_DebugMallocStats = Module["__PyFloat_DebugMallocStats"] = function() {
            return (__PyFloat_DebugMallocStats = Module["__PyFloat_DebugMallocStats"] = Module["asm"]["_PyFloat_DebugMallocStats"]).apply(null, arguments)
        }
        ;
        var __PyDebugAllocatorStats = Module["__PyDebugAllocatorStats"] = function() {
            return (__PyDebugAllocatorStats = Module["__PyDebugAllocatorStats"] = Module["asm"]["_PyDebugAllocatorStats"]).apply(null, arguments)
        }
        ;
        var __PyFloat_Pack2 = Module["__PyFloat_Pack2"] = function() {
            return (__PyFloat_Pack2 = Module["__PyFloat_Pack2"] = Module["asm"]["_PyFloat_Pack2"]).apply(null, arguments)
        }
        ;
        var _ldexp = Module["_ldexp"] = function() {
            return (_ldexp = Module["_ldexp"] = Module["asm"]["ldexp"]).apply(null, arguments)
        }
        ;
        var __PyFloat_Pack4 = Module["__PyFloat_Pack4"] = function() {
            return (__PyFloat_Pack4 = Module["__PyFloat_Pack4"] = Module["asm"]["_PyFloat_Pack4"]).apply(null, arguments)
        }
        ;
        var __PyFloat_Pack8 = Module["__PyFloat_Pack8"] = function() {
            return (__PyFloat_Pack8 = Module["__PyFloat_Pack8"] = Module["asm"]["_PyFloat_Pack8"]).apply(null, arguments)
        }
        ;
        var __PyFloat_Unpack2 = Module["__PyFloat_Unpack2"] = function() {
            return (__PyFloat_Unpack2 = Module["__PyFloat_Unpack2"] = Module["asm"]["_PyFloat_Unpack2"]).apply(null, arguments)
        }
        ;
        var __Py_dg_infinity = Module["__Py_dg_infinity"] = function() {
            return (__Py_dg_infinity = Module["__Py_dg_infinity"] = Module["asm"]["_Py_dg_infinity"]).apply(null, arguments)
        }
        ;
        var __Py_dg_stdnan = Module["__Py_dg_stdnan"] = function() {
            return (__Py_dg_stdnan = Module["__Py_dg_stdnan"] = Module["asm"]["_Py_dg_stdnan"]).apply(null, arguments)
        }
        ;
        var __PyFloat_Unpack4 = Module["__PyFloat_Unpack4"] = function() {
            return (__PyFloat_Unpack4 = Module["__PyFloat_Unpack4"] = Module["asm"]["_PyFloat_Unpack4"]).apply(null, arguments)
        }
        ;
        var __PyFloat_Unpack8 = Module["__PyFloat_Unpack8"] = function() {
            return (__PyFloat_Unpack8 = Module["__PyFloat_Unpack8"] = Module["asm"]["_PyFloat_Unpack8"]).apply(null, arguments)
        }
        ;
        var _fmod = Module["_fmod"] = function() {
            return (_fmod = Module["_fmod"] = Module["asm"]["fmod"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetFromErrno = Module["_PyErr_SetFromErrno"] = function() {
            return (_PyErr_SetFromErrno = Module["_PyErr_SetFromErrno"] = Module["asm"]["PyErr_SetFromErrno"]).apply(null, arguments)
        }
        ;
        var _round = Module["_round"] = function() {
            return (_round = Module["_round"] = Module["asm"]["round"]).apply(null, arguments)
        }
        ;
        var __Py_dg_dtoa = Module["__Py_dg_dtoa"] = function() {
            return (__Py_dg_dtoa = Module["__Py_dg_dtoa"] = Module["asm"]["_Py_dg_dtoa"]).apply(null, arguments)
        }
        ;
        var __Py_dg_strtod = Module["__Py_dg_strtod"] = function() {
            return (__Py_dg_strtod = Module["__Py_dg_strtod"] = Module["asm"]["_Py_dg_strtod"]).apply(null, arguments)
        }
        ;
        var __Py_dg_freedtoa = Module["__Py_dg_freedtoa"] = function() {
            return (__Py_dg_freedtoa = Module["__Py_dg_freedtoa"] = Module["asm"]["_Py_dg_freedtoa"]).apply(null, arguments)
        }
        ;
        var __Py_parse_inf_or_nan = Module["__Py_parse_inf_or_nan"] = function() {
            return (__Py_parse_inf_or_nan = Module["__Py_parse_inf_or_nan"] = Module["asm"]["_Py_parse_inf_or_nan"]).apply(null, arguments)
        }
        ;
        var _strtol = Module["_strtol"] = function() {
            return (_strtol = Module["_strtol"] = Module["asm"]["strtol"]).apply(null, arguments)
        }
        ;
        var __PyFloat_FormatAdvancedWriter = Module["__PyFloat_FormatAdvancedWriter"] = function() {
            return (__PyFloat_FormatAdvancedWriter = Module["__PyFloat_FormatAdvancedWriter"] = Module["asm"]["_PyFloat_FormatAdvancedWriter"]).apply(null, arguments)
        }
        ;
        var __PyObject_GC_NewVar = Module["__PyObject_GC_NewVar"] = function() {
            return (__PyObject_GC_NewVar = Module["__PyObject_GC_NewVar"] = Module["asm"]["_PyObject_GC_NewVar"]).apply(null, arguments)
        }
        ;
        var __PyObject_GC_Resize = Module["__PyObject_GC_Resize"] = function() {
            return (__PyObject_GC_Resize = Module["__PyObject_GC_Resize"] = Module["asm"]["_PyObject_GC_Resize"]).apply(null, arguments)
        }
        ;
        var _PyFrame_New = Module["_PyFrame_New"] = function() {
            return (_PyFrame_New = Module["_PyFrame_New"] = Module["asm"]["PyFrame_New"]).apply(null, arguments)
        }
        ;
        var __PyDict_GetItemIdWithError = Module["__PyDict_GetItemIdWithError"] = function() {
            return (__PyDict_GetItemIdWithError = Module["__PyDict_GetItemIdWithError"] = Module["asm"]["_PyDict_GetItemIdWithError"]).apply(null, arguments)
        }
        ;
        var _PyFrame_BlockSetup = Module["_PyFrame_BlockSetup"] = function() {
            return (_PyFrame_BlockSetup = Module["_PyFrame_BlockSetup"] = Module["asm"]["PyFrame_BlockSetup"]).apply(null, arguments)
        }
        ;
        var _PyFrame_BlockPop = Module["_PyFrame_BlockPop"] = function() {
            return (_PyFrame_BlockPop = Module["_PyFrame_BlockPop"] = Module["asm"]["PyFrame_BlockPop"]).apply(null, arguments)
        }
        ;
        var _PyFrame_FastToLocalsWithError = Module["_PyFrame_FastToLocalsWithError"] = function() {
            return (_PyFrame_FastToLocalsWithError = Module["_PyFrame_FastToLocalsWithError"] = Module["asm"]["PyFrame_FastToLocalsWithError"]).apply(null, arguments)
        }
        ;
        var _PyFrame_FastToLocals = Module["_PyFrame_FastToLocals"] = function() {
            return (_PyFrame_FastToLocals = Module["_PyFrame_FastToLocals"] = Module["asm"]["PyFrame_FastToLocals"]).apply(null, arguments)
        }
        ;
        var _PyFrame_LocalsToFast = Module["_PyFrame_LocalsToFast"] = function() {
            return (_PyFrame_LocalsToFast = Module["_PyFrame_LocalsToFast"] = Module["asm"]["PyFrame_LocalsToFast"]).apply(null, arguments)
        }
        ;
        var __PyFrame_DebugMallocStats = Module["__PyFrame_DebugMallocStats"] = function() {
            return (__PyFrame_DebugMallocStats = Module["__PyFrame_DebugMallocStats"] = Module["asm"]["_PyFrame_DebugMallocStats"]).apply(null, arguments)
        }
        ;
        var _PyFrame_GetCode = Module["_PyFrame_GetCode"] = function() {
            return (_PyFrame_GetCode = Module["_PyFrame_GetCode"] = Module["asm"]["PyFrame_GetCode"]).apply(null, arguments)
        }
        ;
        var _PyFrame_GetBack = Module["_PyFrame_GetBack"] = function() {
            return (_PyFrame_GetBack = Module["_PyFrame_GetBack"] = Module["asm"]["PyFrame_GetBack"]).apply(null, arguments)
        }
        ;
        var _PyFunction_NewWithQualName = Module["_PyFunction_NewWithQualName"] = function() {
            return (_PyFunction_NewWithQualName = Module["_PyFunction_NewWithQualName"] = Module["asm"]["PyFunction_NewWithQualName"]).apply(null, arguments)
        }
        ;
        var _PyFunction_New = Module["_PyFunction_New"] = function() {
            return (_PyFunction_New = Module["_PyFunction_New"] = Module["asm"]["PyFunction_New"]).apply(null, arguments)
        }
        ;
        var _PyFunction_GetCode = Module["_PyFunction_GetCode"] = function() {
            return (_PyFunction_GetCode = Module["_PyFunction_GetCode"] = Module["asm"]["PyFunction_GetCode"]).apply(null, arguments)
        }
        ;
        var _PyFunction_GetGlobals = Module["_PyFunction_GetGlobals"] = function() {
            return (_PyFunction_GetGlobals = Module["_PyFunction_GetGlobals"] = Module["asm"]["PyFunction_GetGlobals"]).apply(null, arguments)
        }
        ;
        var _PyFunction_GetModule = Module["_PyFunction_GetModule"] = function() {
            return (_PyFunction_GetModule = Module["_PyFunction_GetModule"] = Module["asm"]["PyFunction_GetModule"]).apply(null, arguments)
        }
        ;
        var _PyFunction_GetDefaults = Module["_PyFunction_GetDefaults"] = function() {
            return (_PyFunction_GetDefaults = Module["_PyFunction_GetDefaults"] = Module["asm"]["PyFunction_GetDefaults"]).apply(null, arguments)
        }
        ;
        var _PyFunction_SetDefaults = Module["_PyFunction_SetDefaults"] = function() {
            return (_PyFunction_SetDefaults = Module["_PyFunction_SetDefaults"] = Module["asm"]["PyFunction_SetDefaults"]).apply(null, arguments)
        }
        ;
        var _PyFunction_GetKwDefaults = Module["_PyFunction_GetKwDefaults"] = function() {
            return (_PyFunction_GetKwDefaults = Module["_PyFunction_GetKwDefaults"] = Module["asm"]["PyFunction_GetKwDefaults"]).apply(null, arguments)
        }
        ;
        var _PyFunction_SetKwDefaults = Module["_PyFunction_SetKwDefaults"] = function() {
            return (_PyFunction_SetKwDefaults = Module["_PyFunction_SetKwDefaults"] = Module["asm"]["PyFunction_SetKwDefaults"]).apply(null, arguments)
        }
        ;
        var _PyFunction_GetClosure = Module["_PyFunction_GetClosure"] = function() {
            return (_PyFunction_GetClosure = Module["_PyFunction_GetClosure"] = Module["asm"]["PyFunction_GetClosure"]).apply(null, arguments)
        }
        ;
        var _PyFunction_SetClosure = Module["_PyFunction_SetClosure"] = function() {
            return (_PyFunction_SetClosure = Module["_PyFunction_SetClosure"] = Module["asm"]["PyFunction_SetClosure"]).apply(null, arguments)
        }
        ;
        var _PyFunction_GetAnnotations = Module["_PyFunction_GetAnnotations"] = function() {
            return (_PyFunction_GetAnnotations = Module["_PyFunction_GetAnnotations"] = Module["asm"]["PyFunction_GetAnnotations"]).apply(null, arguments)
        }
        ;
        var _PyFunction_SetAnnotations = Module["_PyFunction_SetAnnotations"] = function() {
            return (_PyFunction_SetAnnotations = Module["_PyFunction_SetAnnotations"] = Module["asm"]["PyFunction_SetAnnotations"]).apply(null, arguments)
        }
        ;
        var _PyClassMethod_New = Module["_PyClassMethod_New"] = function() {
            return (_PyClassMethod_New = Module["_PyClassMethod_New"] = Module["asm"]["PyClassMethod_New"]).apply(null, arguments)
        }
        ;
        var _PyStaticMethod_New = Module["_PyStaticMethod_New"] = function() {
            return (_PyStaticMethod_New = Module["_PyStaticMethod_New"] = Module["asm"]["PyStaticMethod_New"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_LookUpID = Module["__PyInterpreterState_LookUpID"] = function() {
            return (__PyInterpreterState_LookUpID = Module["__PyInterpreterState_LookUpID"] = Module["asm"]["_PyInterpreterState_LookUpID"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_IDDecref = Module["__PyInterpreterState_IDDecref"] = function() {
            return (__PyInterpreterState_IDDecref = Module["__PyInterpreterState_IDDecref"] = Module["asm"]["_PyInterpreterState_IDDecref"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromLongLong = Module["_PyLong_FromLongLong"] = function() {
            return (_PyLong_FromLongLong = Module["_PyLong_FromLongLong"] = Module["asm"]["PyLong_FromLongLong"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsLongLongAndOverflow = Module["_PyLong_AsLongLongAndOverflow"] = function() {
            return (_PyLong_AsLongLongAndOverflow = Module["_PyLong_AsLongLongAndOverflow"] = Module["asm"]["PyLong_AsLongLongAndOverflow"]).apply(null, arguments)
        }
        ;
        var _PyArg_ParseTupleAndKeywords = Module["_PyArg_ParseTupleAndKeywords"] = function() {
            return (_PyArg_ParseTupleAndKeywords = Module["_PyArg_ParseTupleAndKeywords"] = Module["asm"]["PyArg_ParseTupleAndKeywords"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_IDIncref = Module["__PyInterpreterState_IDIncref"] = function() {
            return (__PyInterpreterState_IDIncref = Module["__PyInterpreterState_IDIncref"] = Module["asm"]["_PyInterpreterState_IDIncref"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterID_New = Module["__PyInterpreterID_New"] = function() {
            return (__PyInterpreterID_New = Module["__PyInterpreterID_New"] = Module["asm"]["_PyInterpreterID_New"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_GetIDObject = Module["__PyInterpreterState_GetIDObject"] = function() {
            return (__PyInterpreterState_GetIDObject = Module["__PyInterpreterState_GetIDObject"] = Module["asm"]["_PyInterpreterState_GetIDObject"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_IDInitref = Module["__PyInterpreterState_IDInitref"] = function() {
            return (__PyInterpreterState_IDInitref = Module["__PyInterpreterState_IDInitref"] = Module["asm"]["_PyInterpreterState_IDInitref"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_GetID = Module["_PyInterpreterState_GetID"] = function() {
            return (_PyInterpreterState_GetID = Module["_PyInterpreterState_GetID"] = Module["asm"]["PyInterpreterState_GetID"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterID_LookUp = Module["__PyInterpreterID_LookUp"] = function() {
            return (__PyInterpreterID_LookUp = Module["__PyInterpreterID_LookUp"] = Module["asm"]["_PyInterpreterID_LookUp"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsLongLong = Module["_PyLong_AsLongLong"] = function() {
            return (_PyLong_AsLongLong = Module["_PyLong_AsLongLong"] = Module["asm"]["PyLong_AsLongLong"]).apply(null, arguments)
        }
        ;
        var _PyCallIter_New = Module["_PyCallIter_New"] = function() {
            return (_PyCallIter_New = Module["_PyCallIter_New"] = Module["asm"]["PyCallIter_New"]).apply(null, arguments)
        }
        ;
        var __PyList_DebugMallocStats = Module["__PyList_DebugMallocStats"] = function() {
            return (__PyList_DebugMallocStats = Module["__PyList_DebugMallocStats"] = Module["asm"]["_PyList_DebugMallocStats"]).apply(null, arguments)
        }
        ;
        var _PyList_SetItem = Module["_PyList_SetItem"] = function() {
            return (_PyList_SetItem = Module["_PyList_SetItem"] = Module["asm"]["PyList_SetItem"]).apply(null, arguments)
        }
        ;
        var _PyList_Insert = Module["_PyList_Insert"] = function() {
            return (_PyList_Insert = Module["_PyList_Insert"] = Module["asm"]["PyList_Insert"]).apply(null, arguments)
        }
        ;
        var _PyList_GetSlice = Module["_PyList_GetSlice"] = function() {
            return (_PyList_GetSlice = Module["_PyList_GetSlice"] = Module["asm"]["PyList_GetSlice"]).apply(null, arguments)
        }
        ;
        var _Py_ReprEnter = Module["_Py_ReprEnter"] = function() {
            return (_Py_ReprEnter = Module["_Py_ReprEnter"] = Module["asm"]["Py_ReprEnter"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_WriteChar = Module["__PyUnicodeWriter_WriteChar"] = function() {
            return (__PyUnicodeWriter_WriteChar = Module["__PyUnicodeWriter_WriteChar"] = Module["asm"]["_PyUnicodeWriter_WriteChar"]).apply(null, arguments)
        }
        ;
        var _Py_ReprLeave = Module["_Py_ReprLeave"] = function() {
            return (_Py_ReprLeave = Module["_Py_ReprLeave"] = Module["asm"]["Py_ReprLeave"]).apply(null, arguments)
        }
        ;
        var _PyObject_GC_Track = Module["_PyObject_GC_Track"] = function() {
            return (_PyObject_GC_Track = Module["_PyObject_GC_Track"] = Module["asm"]["PyObject_GC_Track"]).apply(null, arguments)
        }
        ;
        var __PyEval_SliceIndexNotNone = Module["__PyEval_SliceIndexNotNone"] = function() {
            return (__PyEval_SliceIndexNotNone = Module["__PyEval_SliceIndexNotNone"] = Module["asm"]["_PyEval_SliceIndexNotNone"]).apply(null, arguments)
        }
        ;
        var _PyObject_HashNotImplemented = Module["_PyObject_HashNotImplemented"] = function() {
            return (_PyObject_HashNotImplemented = Module["_PyObject_HashNotImplemented"] = Module["asm"]["PyObject_HashNotImplemented"]).apply(null, arguments)
        }
        ;
        var __PyLong_New = Module["__PyLong_New"] = function() {
            return (__PyLong_New = Module["__PyLong_New"] = Module["asm"]["_PyLong_New"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromUnsignedLong = Module["_PyLong_FromUnsignedLong"] = function() {
            return (_PyLong_FromUnsignedLong = Module["_PyLong_FromUnsignedLong"] = Module["asm"]["PyLong_FromUnsignedLong"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromUnsignedLongLong = Module["_PyLong_FromUnsignedLongLong"] = function() {
            return (_PyLong_FromUnsignedLongLong = Module["_PyLong_FromUnsignedLongLong"] = Module["asm"]["PyLong_FromUnsignedLongLong"]).apply(null, arguments)
        }
        ;
        var _PyLong_FromSize_t = Module["_PyLong_FromSize_t"] = function() {
            return (_PyLong_FromSize_t = Module["_PyLong_FromSize_t"] = Module["asm"]["PyLong_FromSize_t"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsUnsignedLong = Module["_PyLong_AsUnsignedLong"] = function() {
            return (_PyLong_AsUnsignedLong = Module["_PyLong_AsUnsignedLong"] = Module["asm"]["PyLong_AsUnsignedLong"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsSize_t = Module["_PyLong_AsSize_t"] = function() {
            return (_PyLong_AsSize_t = Module["_PyLong_AsSize_t"] = Module["asm"]["PyLong_AsSize_t"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsUnsignedLongMask = Module["_PyLong_AsUnsignedLongMask"] = function() {
            return (_PyLong_AsUnsignedLongMask = Module["_PyLong_AsUnsignedLongMask"] = Module["asm"]["PyLong_AsUnsignedLongMask"]).apply(null, arguments)
        }
        ;
        var __PyLong_FromByteArray = Module["__PyLong_FromByteArray"] = function() {
            return (__PyLong_FromByteArray = Module["__PyLong_FromByteArray"] = Module["asm"]["_PyLong_FromByteArray"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsVoidPtr = Module["_PyLong_AsVoidPtr"] = function() {
            return (_PyLong_AsVoidPtr = Module["_PyLong_AsVoidPtr"] = Module["asm"]["PyLong_AsVoidPtr"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsUnsignedLongLong = Module["_PyLong_AsUnsignedLongLong"] = function() {
            return (_PyLong_AsUnsignedLongLong = Module["_PyLong_AsUnsignedLongLong"] = Module["asm"]["PyLong_AsUnsignedLongLong"]).apply(null, arguments)
        }
        ;
        var _PyLong_AsUnsignedLongLongMask = Module["_PyLong_AsUnsignedLongLongMask"] = function() {
            return (_PyLong_AsUnsignedLongLongMask = Module["_PyLong_AsUnsignedLongLongMask"] = Module["asm"]["PyLong_AsUnsignedLongLongMask"]).apply(null, arguments)
        }
        ;
        var __PyLong_UnsignedShort_Converter = Module["__PyLong_UnsignedShort_Converter"] = function() {
            return (__PyLong_UnsignedShort_Converter = Module["__PyLong_UnsignedShort_Converter"] = Module["asm"]["_PyLong_UnsignedShort_Converter"]).apply(null, arguments)
        }
        ;
        var __PyLong_UnsignedInt_Converter = Module["__PyLong_UnsignedInt_Converter"] = function() {
            return (__PyLong_UnsignedInt_Converter = Module["__PyLong_UnsignedInt_Converter"] = Module["asm"]["_PyLong_UnsignedInt_Converter"]).apply(null, arguments)
        }
        ;
        var __PyLong_UnsignedLong_Converter = Module["__PyLong_UnsignedLong_Converter"] = function() {
            return (__PyLong_UnsignedLong_Converter = Module["__PyLong_UnsignedLong_Converter"] = Module["asm"]["_PyLong_UnsignedLong_Converter"]).apply(null, arguments)
        }
        ;
        var __PyLong_UnsignedLongLong_Converter = Module["__PyLong_UnsignedLongLong_Converter"] = function() {
            return (__PyLong_UnsignedLongLong_Converter = Module["__PyLong_UnsignedLongLong_Converter"] = Module["asm"]["_PyLong_UnsignedLongLong_Converter"]).apply(null, arguments)
        }
        ;
        var __PyLong_Size_t_Converter = Module["__PyLong_Size_t_Converter"] = function() {
            return (__PyLong_Size_t_Converter = Module["__PyLong_Size_t_Converter"] = Module["asm"]["_PyLong_Size_t_Converter"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_PrepareInternal = Module["__PyUnicodeWriter_PrepareInternal"] = function() {
            return (__PyUnicodeWriter_PrepareInternal = Module["__PyUnicodeWriter_PrepareInternal"] = Module["asm"]["_PyUnicodeWriter_PrepareInternal"]).apply(null, arguments)
        }
        ;
        var __PyLong_FormatWriter = Module["__PyLong_FormatWriter"] = function() {
            return (__PyLong_FormatWriter = Module["__PyLong_FormatWriter"] = Module["asm"]["_PyLong_FormatWriter"]).apply(null, arguments)
        }
        ;
        var __PyLong_Frexp = Module["__PyLong_Frexp"] = function() {
            return (__PyLong_Frexp = Module["__PyLong_Frexp"] = Module["asm"]["_PyLong_Frexp"]).apply(null, arguments)
        }
        ;
        var __PyLong_Rshift = Module["__PyLong_Rshift"] = function() {
            return (__PyLong_Rshift = Module["__PyLong_Rshift"] = Module["asm"]["_PyLong_Rshift"]).apply(null, arguments)
        }
        ;
        var __PyLong_GCD = Module["__PyLong_GCD"] = function() {
            return (__PyLong_GCD = Module["__PyLong_GCD"] = Module["asm"]["_PyLong_GCD"]).apply(null, arguments)
        }
        ;
        var __PyLong_DivmodNear = Module["__PyLong_DivmodNear"] = function() {
            return (__PyLong_DivmodNear = Module["__PyLong_DivmodNear"] = Module["asm"]["_PyLong_DivmodNear"]).apply(null, arguments)
        }
        ;
        var _PyLong_GetInfo = Module["_PyLong_GetInfo"] = function() {
            return (_PyLong_GetInfo = Module["_PyLong_GetInfo"] = Module["asm"]["PyLong_GetInfo"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_EqualToASCIIId = Module["__PyUnicode_EqualToASCIIId"] = function() {
            return (__PyUnicode_EqualToASCIIId = Module["__PyUnicode_EqualToASCIIId"] = Module["asm"]["_PyUnicode_EqualToASCIIId"]).apply(null, arguments)
        }
        ;
        var _PyObject_Bytes = Module["_PyObject_Bytes"] = function() {
            return (_PyObject_Bytes = Module["_PyObject_Bytes"] = Module["asm"]["PyObject_Bytes"]).apply(null, arguments)
        }
        ;
        var __PyLong_FormatAdvancedWriter = Module["__PyLong_FormatAdvancedWriter"] = function() {
            return (__PyLong_FormatAdvancedWriter = Module["__PyLong_FormatAdvancedWriter"] = Module["asm"]["_PyLong_FormatAdvancedWriter"]).apply(null, arguments)
        }
        ;
        var __PyDict_DebugMallocStats = Module["__PyDict_DebugMallocStats"] = function() {
            return (__PyDict_DebugMallocStats = Module["__PyDict_DebugMallocStats"] = Module["asm"]["_PyDict_DebugMallocStats"]).apply(null, arguments)
        }
        ;
        var __PyDict_CheckConsistency = Module["__PyDict_CheckConsistency"] = function() {
            return (__PyDict_CheckConsistency = Module["__PyDict_CheckConsistency"] = Module["asm"]["_PyDict_CheckConsistency"]).apply(null, arguments)
        }
        ;
        var __PyObject_AssertFailed = Module["__PyObject_AssertFailed"] = function() {
            return (__PyObject_AssertFailed = Module["__PyObject_AssertFailed"] = Module["asm"]["_PyObject_AssertFailed"]).apply(null, arguments)
        }
        ;
        var __PyDict_HasOnlyStringKeys = Module["__PyDict_HasOnlyStringKeys"] = function() {
            return (__PyDict_HasOnlyStringKeys = Module["__PyDict_HasOnlyStringKeys"] = Module["asm"]["_PyDict_HasOnlyStringKeys"]).apply(null, arguments)
        }
        ;
        var __PyDict_MaybeUntrack = Module["__PyDict_MaybeUntrack"] = function() {
            return (__PyDict_MaybeUntrack = Module["__PyDict_MaybeUntrack"] = Module["asm"]["_PyDict_MaybeUntrack"]).apply(null, arguments)
        }
        ;
        var _PyObject_IS_GC = Module["_PyObject_IS_GC"] = function() {
            return (_PyObject_IS_GC = Module["_PyObject_IS_GC"] = Module["asm"]["PyObject_IS_GC"]).apply(null, arguments)
        }
        ;
        var _PyDict_GetItem = Module["_PyDict_GetItem"] = function() {
            return (_PyDict_GetItem = Module["_PyDict_GetItem"] = Module["asm"]["PyDict_GetItem"]).apply(null, arguments)
        }
        ;
        var __PyErr_Fetch = Module["__PyErr_Fetch"] = function() {
            return (__PyErr_Fetch = Module["__PyErr_Fetch"] = Module["asm"]["_PyErr_Fetch"]).apply(null, arguments)
        }
        ;
        var __PyErr_Restore = Module["__PyErr_Restore"] = function() {
            return (__PyErr_Restore = Module["__PyErr_Restore"] = Module["asm"]["_PyErr_Restore"]).apply(null, arguments)
        }
        ;
        var __PyDict_GetItem_KnownHash = Module["__PyDict_GetItem_KnownHash"] = function() {
            return (__PyDict_GetItem_KnownHash = Module["__PyDict_GetItem_KnownHash"] = Module["asm"]["_PyDict_GetItem_KnownHash"]).apply(null, arguments)
        }
        ;
        var __PyDict_GetItemStringWithError = Module["__PyDict_GetItemStringWithError"] = function() {
            return (__PyDict_GetItemStringWithError = Module["__PyDict_GetItemStringWithError"] = Module["asm"]["_PyDict_GetItemStringWithError"]).apply(null, arguments)
        }
        ;
        var __PyDict_SetItem_KnownHash = Module["__PyDict_SetItem_KnownHash"] = function() {
            return (__PyDict_SetItem_KnownHash = Module["__PyDict_SetItem_KnownHash"] = Module["asm"]["_PyDict_SetItem_KnownHash"]).apply(null, arguments)
        }
        ;
        var _PyDict_DelItem = Module["_PyDict_DelItem"] = function() {
            return (_PyDict_DelItem = Module["_PyDict_DelItem"] = Module["asm"]["PyDict_DelItem"]).apply(null, arguments)
        }
        ;
        var __PyDict_DelItem_KnownHash = Module["__PyDict_DelItem_KnownHash"] = function() {
            return (__PyDict_DelItem_KnownHash = Module["__PyDict_DelItem_KnownHash"] = Module["asm"]["_PyDict_DelItem_KnownHash"]).apply(null, arguments)
        }
        ;
        var __PyErr_SetKeyError = Module["__PyErr_SetKeyError"] = function() {
            return (__PyErr_SetKeyError = Module["__PyErr_SetKeyError"] = Module["asm"]["_PyErr_SetKeyError"]).apply(null, arguments)
        }
        ;
        var __PyDict_DelItemIf = Module["__PyDict_DelItemIf"] = function() {
            return (__PyDict_DelItemIf = Module["__PyDict_DelItemIf"] = Module["asm"]["_PyDict_DelItemIf"]).apply(null, arguments)
        }
        ;
        var _PyDict_Clear = Module["_PyDict_Clear"] = function() {
            return (_PyDict_Clear = Module["_PyDict_Clear"] = Module["asm"]["PyDict_Clear"]).apply(null, arguments)
        }
        ;
        var __PyDict_Next = Module["__PyDict_Next"] = function() {
            return (__PyDict_Next = Module["__PyDict_Next"] = Module["asm"]["_PyDict_Next"]).apply(null, arguments)
        }
        ;
        var __PyDict_Pop = Module["__PyDict_Pop"] = function() {
            return (__PyDict_Pop = Module["__PyDict_Pop"] = Module["asm"]["_PyDict_Pop"]).apply(null, arguments)
        }
        ;
        var _PyDict_MergeFromSeq2 = Module["_PyDict_MergeFromSeq2"] = function() {
            return (_PyDict_MergeFromSeq2 = Module["_PyDict_MergeFromSeq2"] = Module["asm"]["PyDict_MergeFromSeq2"]).apply(null, arguments)
        }
        ;
        var _PyDict_SetDefault = Module["_PyDict_SetDefault"] = function() {
            return (_PyDict_SetDefault = Module["_PyDict_SetDefault"] = Module["asm"]["PyDict_SetDefault"]).apply(null, arguments)
        }
        ;
        var _PyDict_Update = Module["_PyDict_Update"] = function() {
            return (_PyDict_Update = Module["_PyDict_Update"] = Module["asm"]["PyDict_Update"]).apply(null, arguments)
        }
        ;
        var _PyDict_Merge = Module["_PyDict_Merge"] = function() {
            return (_PyDict_Merge = Module["_PyDict_Merge"] = Module["asm"]["PyDict_Merge"]).apply(null, arguments)
        }
        ;
        var __PyDict_MergeEx = Module["__PyDict_MergeEx"] = function() {
            return (__PyDict_MergeEx = Module["__PyDict_MergeEx"] = Module["asm"]["_PyDict_MergeEx"]).apply(null, arguments)
        }
        ;
        var _PyDict_Size = Module["_PyDict_Size"] = function() {
            return (_PyDict_Size = Module["_PyDict_Size"] = Module["asm"]["PyDict_Size"]).apply(null, arguments)
        }
        ;
        var __PyDict_SizeOf = Module["__PyDict_SizeOf"] = function() {
            return (__PyDict_SizeOf = Module["__PyDict_SizeOf"] = Module["asm"]["_PyDict_SizeOf"]).apply(null, arguments)
        }
        ;
        var __PyDict_Contains_KnownHash = Module["__PyDict_Contains_KnownHash"] = function() {
            return (__PyDict_Contains_KnownHash = Module["__PyDict_Contains_KnownHash"] = Module["asm"]["_PyDict_Contains_KnownHash"]).apply(null, arguments)
        }
        ;
        var __PyDict_ContainsId = Module["__PyDict_ContainsId"] = function() {
            return (__PyDict_ContainsId = Module["__PyDict_ContainsId"] = Module["asm"]["_PyDict_ContainsId"]).apply(null, arguments)
        }
        ;
        var _PyArg_ValidateKeywordArguments = Module["_PyArg_ValidateKeywordArguments"] = function() {
            return (_PyArg_ValidateKeywordArguments = Module["_PyArg_ValidateKeywordArguments"] = Module["asm"]["PyArg_ValidateKeywordArguments"]).apply(null, arguments)
        }
        ;
        var _PyDict_GetItemString = Module["_PyDict_GetItemString"] = function() {
            return (_PyDict_GetItemString = Module["_PyDict_GetItemString"] = Module["asm"]["PyDict_GetItemString"]).apply(null, arguments)
        }
        ;
        var __PyDict_DelItemId = Module["__PyDict_DelItemId"] = function() {
            return (__PyDict_DelItemId = Module["__PyDict_DelItemId"] = Module["asm"]["_PyDict_DelItemId"]).apply(null, arguments)
        }
        ;
        var _PyDict_DelItemString = Module["_PyDict_DelItemString"] = function() {
            return (_PyDict_DelItemString = Module["_PyDict_DelItemString"] = Module["asm"]["PyDict_DelItemString"]).apply(null, arguments)
        }
        ;
        var __PyDictView_New = Module["__PyDictView_New"] = function() {
            return (__PyDictView_New = Module["__PyDictView_New"] = Module["asm"]["_PyDictView_New"]).apply(null, arguments)
        }
        ;
        var __PyDictView_Intersect = Module["__PyDictView_Intersect"] = function() {
            return (__PyDictView_Intersect = Module["__PyDictView_Intersect"] = Module["asm"]["_PyDictView_Intersect"]).apply(null, arguments)
        }
        ;
        var _PySet_Add = Module["_PySet_Add"] = function() {
            return (_PySet_Add = Module["_PySet_Add"] = Module["asm"]["PySet_Add"]).apply(null, arguments)
        }
        ;
        var _PyODict_New = Module["_PyODict_New"] = function() {
            return (_PyODict_New = Module["_PyODict_New"] = Module["asm"]["PyODict_New"]).apply(null, arguments)
        }
        ;
        var _PyODict_SetItem = Module["_PyODict_SetItem"] = function() {
            return (_PyODict_SetItem = Module["_PyODict_SetItem"] = Module["asm"]["PyODict_SetItem"]).apply(null, arguments)
        }
        ;
        var __PyErr_ChainExceptions = Module["__PyErr_ChainExceptions"] = function() {
            return (__PyErr_ChainExceptions = Module["__PyErr_ChainExceptions"] = Module["asm"]["_PyErr_ChainExceptions"]).apply(null, arguments)
        }
        ;
        var _PyODict_DelItem = Module["_PyODict_DelItem"] = function() {
            return (_PyODict_DelItem = Module["_PyODict_DelItem"] = Module["asm"]["PyODict_DelItem"]).apply(null, arguments)
        }
        ;
        var _PyMemoryView_FromMemory = Module["_PyMemoryView_FromMemory"] = function() {
            return (_PyMemoryView_FromMemory = Module["_PyMemoryView_FromMemory"] = Module["asm"]["PyMemoryView_FromMemory"]).apply(null, arguments)
        }
        ;
        var _PyMemoryView_FromBuffer = Module["_PyMemoryView_FromBuffer"] = function() {
            return (_PyMemoryView_FromBuffer = Module["_PyMemoryView_FromBuffer"] = Module["asm"]["PyMemoryView_FromBuffer"]).apply(null, arguments)
        }
        ;
        var _PyMemoryView_GetContiguous = Module["_PyMemoryView_GetContiguous"] = function() {
            return (_PyMemoryView_GetContiguous = Module["_PyMemoryView_GetContiguous"] = Module["asm"]["PyMemoryView_GetContiguous"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsASCIIString = Module["_PyUnicode_AsASCIIString"] = function() {
            return (_PyUnicode_AsASCIIString = Module["_PyUnicode_AsASCIIString"] = Module["asm"]["PyUnicode_AsASCIIString"]).apply(null, arguments)
        }
        ;
        var _PyCFunction_New = Module["_PyCFunction_New"] = function() {
            return (_PyCFunction_New = Module["_PyCFunction_New"] = Module["asm"]["PyCFunction_New"]).apply(null, arguments)
        }
        ;
        var _PyCFunction_NewEx = Module["_PyCFunction_NewEx"] = function() {
            return (_PyCFunction_NewEx = Module["_PyCFunction_NewEx"] = Module["asm"]["PyCFunction_NewEx"]).apply(null, arguments)
        }
        ;
        var _PyCFunction_GetFunction = Module["_PyCFunction_GetFunction"] = function() {
            return (_PyCFunction_GetFunction = Module["_PyCFunction_GetFunction"] = Module["asm"]["PyCFunction_GetFunction"]).apply(null, arguments)
        }
        ;
        var _PyCFunction_GetSelf = Module["_PyCFunction_GetSelf"] = function() {
            return (_PyCFunction_GetSelf = Module["_PyCFunction_GetSelf"] = Module["asm"]["PyCFunction_GetSelf"]).apply(null, arguments)
        }
        ;
        var _PyCFunction_GetFlags = Module["_PyCFunction_GetFlags"] = function() {
            return (_PyCFunction_GetFlags = Module["_PyCFunction_GetFlags"] = Module["asm"]["PyCFunction_GetFlags"]).apply(null, arguments)
        }
        ;
        var _PyModuleDef_Init = Module["_PyModuleDef_Init"] = function() {
            return (_PyModuleDef_Init = Module["_PyModuleDef_Init"] = Module["asm"]["PyModuleDef_Init"]).apply(null, arguments)
        }
        ;
        var _PyModule_NewObject = Module["_PyModule_NewObject"] = function() {
            return (_PyModule_NewObject = Module["_PyModule_NewObject"] = Module["asm"]["PyModule_NewObject"]).apply(null, arguments)
        }
        ;
        var _PyModule_New = Module["_PyModule_New"] = function() {
            return (_PyModule_New = Module["_PyModule_New"] = Module["asm"]["PyModule_New"]).apply(null, arguments)
        }
        ;
        var __PyImport_IsInitialized = Module["__PyImport_IsInitialized"] = function() {
            return (__PyImport_IsInitialized = Module["__PyImport_IsInitialized"] = Module["asm"]["_PyImport_IsInitialized"]).apply(null, arguments)
        }
        ;
        var __PyModule_CreateInitialized = Module["__PyModule_CreateInitialized"] = function() {
            return (__PyModule_CreateInitialized = Module["__PyModule_CreateInitialized"] = Module["asm"]["_PyModule_CreateInitialized"]).apply(null, arguments)
        }
        ;
        var _strrchr = Module["_strrchr"] = function() {
            return (_strrchr = Module["_strrchr"] = Module["asm"]["strrchr"]).apply(null, arguments)
        }
        ;
        var _PyModule_GetNameObject = Module["_PyModule_GetNameObject"] = function() {
            return (_PyModule_GetNameObject = Module["_PyModule_GetNameObject"] = Module["asm"]["PyModule_GetNameObject"]).apply(null, arguments)
        }
        ;
        var _PyModule_SetDocString = Module["_PyModule_SetDocString"] = function() {
            return (_PyModule_SetDocString = Module["_PyModule_SetDocString"] = Module["asm"]["PyModule_SetDocString"]).apply(null, arguments)
        }
        ;
        var _PyModule_FromDefAndSpec2 = Module["_PyModule_FromDefAndSpec2"] = function() {
            return (_PyModule_FromDefAndSpec2 = Module["_PyModule_FromDefAndSpec2"] = Module["asm"]["PyModule_FromDefAndSpec2"]).apply(null, arguments)
        }
        ;
        var _PyModule_ExecDef = Module["_PyModule_ExecDef"] = function() {
            return (_PyModule_ExecDef = Module["_PyModule_ExecDef"] = Module["asm"]["PyModule_ExecDef"]).apply(null, arguments)
        }
        ;
        var _PyModule_GetName = Module["_PyModule_GetName"] = function() {
            return (_PyModule_GetName = Module["_PyModule_GetName"] = Module["asm"]["PyModule_GetName"]).apply(null, arguments)
        }
        ;
        var _PyModule_GetFilenameObject = Module["_PyModule_GetFilenameObject"] = function() {
            return (_PyModule_GetFilenameObject = Module["_PyModule_GetFilenameObject"] = Module["asm"]["PyModule_GetFilenameObject"]).apply(null, arguments)
        }
        ;
        var _PyModule_GetFilename = Module["_PyModule_GetFilename"] = function() {
            return (_PyModule_GetFilename = Module["_PyModule_GetFilename"] = Module["asm"]["PyModule_GetFilename"]).apply(null, arguments)
        }
        ;
        var _PyModule_GetDef = Module["_PyModule_GetDef"] = function() {
            return (_PyModule_GetDef = Module["_PyModule_GetDef"] = Module["asm"]["PyModule_GetDef"]).apply(null, arguments)
        }
        ;
        var _PyModule_GetState = Module["_PyModule_GetState"] = function() {
            return (_PyModule_GetState = Module["_PyModule_GetState"] = Module["asm"]["PyModule_GetState"]).apply(null, arguments)
        }
        ;
        var __PyModule_Clear = Module["__PyModule_Clear"] = function() {
            return (__PyModule_Clear = Module["__PyModule_Clear"] = Module["asm"]["_PyModule_Clear"]).apply(null, arguments)
        }
        ;
        var __PyModule_ClearDict = Module["__PyModule_ClearDict"] = function() {
            return (__PyModule_ClearDict = Module["__PyModule_ClearDict"] = Module["asm"]["_PyModule_ClearDict"]).apply(null, arguments)
        }
        ;
        var __PyModuleSpec_IsInitializing = Module["__PyModuleSpec_IsInitializing"] = function() {
            return (__PyModuleSpec_IsInitializing = Module["__PyModuleSpec_IsInitializing"] = Module["asm"]["_PyModuleSpec_IsInitializing"]).apply(null, arguments)
        }
        ;
        var _PySys_FormatStderr = Module["_PySys_FormatStderr"] = function() {
            return (_PySys_FormatStderr = Module["_PySys_FormatStderr"] = Module["asm"]["PySys_FormatStderr"]).apply(null, arguments)
        }
        ;
        var __PyNamespace_New = Module["__PyNamespace_New"] = function() {
            return (__PyNamespace_New = Module["__PyNamespace_New"] = Module["asm"]["_PyNamespace_New"]).apply(null, arguments)
        }
        ;
        var __PyObject_CheckConsistency = Module["__PyObject_CheckConsistency"] = function() {
            return (__PyObject_CheckConsistency = Module["__PyObject_CheckConsistency"] = Module["asm"]["_PyObject_CheckConsistency"]).apply(null, arguments)
        }
        ;
        var __PyType_CheckConsistency = Module["__PyType_CheckConsistency"] = function() {
            return (__PyType_CheckConsistency = Module["__PyType_CheckConsistency"] = Module["asm"]["_PyType_CheckConsistency"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_CheckConsistency = Module["__PyUnicode_CheckConsistency"] = function() {
            return (__PyUnicode_CheckConsistency = Module["__PyUnicode_CheckConsistency"] = Module["asm"]["_PyUnicode_CheckConsistency"]).apply(null, arguments)
        }
        ;
        var __PyObject_IsFreed = Module["__PyObject_IsFreed"] = function() {
            return (__PyObject_IsFreed = Module["__PyObject_IsFreed"] = Module["asm"]["_PyObject_IsFreed"]).apply(null, arguments)
        }
        ;
        var _fiprintf = Module["_fiprintf"] = function() {
            return (_fiprintf = Module["_fiprintf"] = Module["asm"]["fiprintf"]).apply(null, arguments)
        }
        ;
        var _fwrite = Module["_fwrite"] = function() {
            return (_fwrite = Module["_fwrite"] = Module["asm"]["fwrite"]).apply(null, arguments)
        }
        ;
        var _fputc = Module["_fputc"] = function() {
            return (_fputc = Module["_fputc"] = Module["asm"]["fputc"]).apply(null, arguments)
        }
        ;
        var __PyObject_Dump = Module["__PyObject_Dump"] = function() {
            return (__PyObject_Dump = Module["__PyObject_Dump"] = Module["asm"]["_PyObject_Dump"]).apply(null, arguments)
        }
        ;
        var _Py_IncRef = Module["_Py_IncRef"] = function() {
            return (_Py_IncRef = Module["_Py_IncRef"] = Module["asm"]["Py_IncRef"]).apply(null, arguments)
        }
        ;
        var _Py_DecRef = Module["_Py_DecRef"] = function() {
            return (_Py_DecRef = Module["_Py_DecRef"] = Module["asm"]["Py_DecRef"]).apply(null, arguments)
        }
        ;
        var __Py_IncRef = Module["__Py_IncRef"] = function() {
            return (__Py_IncRef = Module["__Py_IncRef"] = Module["asm"]["_Py_IncRef"]).apply(null, arguments)
        }
        ;
        var __Py_DecRef = Module["__Py_DecRef"] = function() {
            return (__Py_DecRef = Module["__Py_DecRef"] = Module["asm"]["_Py_DecRef"]).apply(null, arguments)
        }
        ;
        var _PyObject_Init = Module["_PyObject_Init"] = function() {
            return (_PyObject_Init = Module["_PyObject_Init"] = Module["asm"]["PyObject_Init"]).apply(null, arguments)
        }
        ;
        var _PyObject_InitVar = Module["_PyObject_InitVar"] = function() {
            return (_PyObject_InitVar = Module["_PyObject_InitVar"] = Module["asm"]["PyObject_InitVar"]).apply(null, arguments)
        }
        ;
        var __PyObject_NewVar = Module["__PyObject_NewVar"] = function() {
            return (__PyObject_NewVar = Module["__PyObject_NewVar"] = Module["asm"]["_PyObject_NewVar"]).apply(null, arguments)
        }
        ;
        var _PyObject_CallFinalizer = Module["_PyObject_CallFinalizer"] = function() {
            return (_PyObject_CallFinalizer = Module["_PyObject_CallFinalizer"] = Module["asm"]["PyObject_CallFinalizer"]).apply(null, arguments)
        }
        ;
        var _PyObject_Print = Module["_PyObject_Print"] = function() {
            return (_PyObject_Print = Module["_PyObject_Print"] = Module["asm"]["PyObject_Print"]).apply(null, arguments)
        }
        ;
        var _ferror = Module["_ferror"] = function() {
            return (_ferror = Module["_ferror"] = Module["asm"]["ferror"]).apply(null, arguments)
        }
        ;
        var __Py_BreakPoint = Module["__Py_BreakPoint"] = function() {
            return (__Py_BreakPoint = Module["__Py_BreakPoint"] = Module["asm"]["_Py_BreakPoint"]).apply(null, arguments)
        }
        ;
        var _PyGILState_Ensure = Module["_PyGILState_Ensure"] = function() {
            return (_PyGILState_Ensure = Module["_PyGILState_Ensure"] = Module["asm"]["PyGILState_Ensure"]).apply(null, arguments)
        }
        ;
        var _PyGILState_Release = Module["_PyGILState_Release"] = function() {
            return (_PyGILState_Release = Module["_PyGILState_Release"] = Module["asm"]["PyGILState_Release"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_AsASCIIString = Module["__PyUnicode_AsASCIIString"] = function() {
            return (__PyUnicode_AsASCIIString = Module["__PyUnicode_AsASCIIString"] = Module["asm"]["_PyUnicode_AsASCIIString"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeASCII = Module["_PyUnicode_DecodeASCII"] = function() {
            return (_PyUnicode_DecodeASCII = Module["_PyUnicode_DecodeASCII"] = Module["asm"]["PyUnicode_DecodeASCII"]).apply(null, arguments)
        }
        ;
        var __PyObject_LookupAttr = Module["__PyObject_LookupAttr"] = function() {
            return (__PyObject_LookupAttr = Module["__PyObject_LookupAttr"] = Module["asm"]["_PyObject_LookupAttr"]).apply(null, arguments)
        }
        ;
        var _PyObject_HasAttrString = Module["_PyObject_HasAttrString"] = function() {
            return (_PyObject_HasAttrString = Module["_PyObject_HasAttrString"] = Module["asm"]["PyObject_HasAttrString"]).apply(null, arguments)
        }
        ;
        var __PyObject_GenericGetAttrWithDict = Module["__PyObject_GenericGetAttrWithDict"] = function() {
            return (__PyObject_GenericGetAttrWithDict = Module["__PyObject_GenericGetAttrWithDict"] = Module["asm"]["_PyObject_GenericGetAttrWithDict"]).apply(null, arguments)
        }
        ;
        var __PyObject_GenericSetAttrWithDict = Module["__PyObject_GenericSetAttrWithDict"] = function() {
            return (__PyObject_GenericSetAttrWithDict = Module["__PyObject_GenericSetAttrWithDict"] = Module["asm"]["_PyObject_GenericSetAttrWithDict"]).apply(null, arguments)
        }
        ;
        var _PyObject_Not = Module["_PyObject_Not"] = function() {
            return (_PyObject_Not = Module["_PyObject_Not"] = Module["asm"]["PyObject_Not"]).apply(null, arguments)
        }
        ;
        var _PyEval_GetLocals = Module["_PyEval_GetLocals"] = function() {
            return (_PyEval_GetLocals = Module["_PyEval_GetLocals"] = Module["asm"]["PyEval_GetLocals"]).apply(null, arguments)
        }
        ;
        var __PyObject_DebugTypeStats = Module["__PyObject_DebugTypeStats"] = function() {
            return (__PyObject_DebugTypeStats = Module["__PyObject_DebugTypeStats"] = Module["asm"]["_PyObject_DebugTypeStats"]).apply(null, arguments)
        }
        ;
        var __PyTuple_DebugMallocStats = Module["__PyTuple_DebugMallocStats"] = function() {
            return (__PyTuple_DebugMallocStats = Module["__PyTuple_DebugMallocStats"] = Module["asm"]["_PyTuple_DebugMallocStats"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_GetDict = Module["_PyThreadState_GetDict"] = function() {
            return (_PyThreadState_GetDict = Module["_PyThreadState_GetDict"] = Module["asm"]["PyThreadState_GetDict"]).apply(null, arguments)
        }
        ;
        var __PyTrash_deposit_object = Module["__PyTrash_deposit_object"] = function() {
            return (__PyTrash_deposit_object = Module["__PyTrash_deposit_object"] = Module["asm"]["_PyTrash_deposit_object"]).apply(null, arguments)
        }
        ;
        var __PyTrash_thread_deposit_object = Module["__PyTrash_thread_deposit_object"] = function() {
            return (__PyTrash_thread_deposit_object = Module["__PyTrash_thread_deposit_object"] = Module["asm"]["_PyTrash_thread_deposit_object"]).apply(null, arguments)
        }
        ;
        var __PyTrash_destroy_chain = Module["__PyTrash_destroy_chain"] = function() {
            return (__PyTrash_destroy_chain = Module["__PyTrash_destroy_chain"] = Module["asm"]["_PyTrash_destroy_chain"]).apply(null, arguments)
        }
        ;
        var __PyTrash_thread_destroy_chain = Module["__PyTrash_thread_destroy_chain"] = function() {
            return (__PyTrash_thread_destroy_chain = Module["__PyTrash_thread_destroy_chain"] = Module["asm"]["_PyTrash_thread_destroy_chain"]).apply(null, arguments)
        }
        ;
        var _PyObject_GET_WEAKREFS_LISTPTR = Module["_PyObject_GET_WEAKREFS_LISTPTR"] = function() {
            return (_PyObject_GET_WEAKREFS_LISTPTR = Module["_PyObject_GET_WEAKREFS_LISTPTR"] = Module["asm"]["PyObject_GET_WEAKREFS_LISTPTR"]).apply(null, arguments)
        }
        ;
        var _Py_NewRef = Module["_Py_NewRef"] = function() {
            return (_Py_NewRef = Module["_Py_NewRef"] = Module["asm"]["Py_NewRef"]).apply(null, arguments)
        }
        ;
        var _Py_XNewRef = Module["_Py_XNewRef"] = function() {
            return (_Py_XNewRef = Module["_Py_XNewRef"] = Module["asm"]["Py_XNewRef"]).apply(null, arguments)
        }
        ;
        var _Py_Is = Module["_Py_Is"] = function() {
            return (_Py_Is = Module["_Py_Is"] = Module["asm"]["Py_Is"]).apply(null, arguments)
        }
        ;
        var _Py_IsNone = Module["_Py_IsNone"] = function() {
            return (_Py_IsNone = Module["_Py_IsNone"] = Module["asm"]["Py_IsNone"]).apply(null, arguments)
        }
        ;
        var _Py_IsTrue = Module["_Py_IsTrue"] = function() {
            return (_Py_IsTrue = Module["_Py_IsTrue"] = Module["asm"]["Py_IsTrue"]).apply(null, arguments)
        }
        ;
        var _Py_IsFalse = Module["_Py_IsFalse"] = function() {
            return (_Py_IsFalse = Module["_Py_IsFalse"] = Module["asm"]["Py_IsFalse"]).apply(null, arguments)
        }
        ;
        var __PyMem_SetDefaultAllocator = Module["__PyMem_SetDefaultAllocator"] = function() {
            return (__PyMem_SetDefaultAllocator = Module["__PyMem_SetDefaultAllocator"] = Module["asm"]["_PyMem_SetDefaultAllocator"]).apply(null, arguments)
        }
        ;
        var __PyMem_GetAllocatorName = Module["__PyMem_GetAllocatorName"] = function() {
            return (__PyMem_GetAllocatorName = Module["__PyMem_GetAllocatorName"] = Module["asm"]["_PyMem_GetAllocatorName"]).apply(null, arguments)
        }
        ;
        var __PyMem_SetupAllocators = Module["__PyMem_SetupAllocators"] = function() {
            return (__PyMem_SetupAllocators = Module["__PyMem_SetupAllocators"] = Module["asm"]["_PyMem_SetupAllocators"]).apply(null, arguments)
        }
        ;
        var _calloc = Module["_calloc"] = function() {
            return (_calloc = Module["_calloc"] = Module["asm"]["calloc"]).apply(null, arguments)
        }
        ;
        var _realloc = Module["_realloc"] = function() {
            return (_realloc = Module["_realloc"] = Module["asm"]["realloc"]).apply(null, arguments)
        }
        ;
        var _PyMem_SetAllocator = Module["_PyMem_SetAllocator"] = function() {
            return (_PyMem_SetAllocator = Module["_PyMem_SetAllocator"] = Module["asm"]["PyMem_SetAllocator"]).apply(null, arguments)
        }
        ;
        var _PyMem_SetupDebugHooks = Module["_PyMem_SetupDebugHooks"] = function() {
            return (_PyMem_SetupDebugHooks = Module["_PyMem_SetupDebugHooks"] = Module["asm"]["PyMem_SetupDebugHooks"]).apply(null, arguments)
        }
        ;
        var __PyMem_GetCurrentAllocatorName = Module["__PyMem_GetCurrentAllocatorName"] = function() {
            return (__PyMem_GetCurrentAllocatorName = Module["__PyMem_GetCurrentAllocatorName"] = Module["asm"]["_PyMem_GetCurrentAllocatorName"]).apply(null, arguments)
        }
        ;
        var _PyGILState_Check = Module["_PyGILState_Check"] = function() {
            return (_PyGILState_Check = Module["_PyGILState_Check"] = Module["asm"]["PyGILState_Check"]).apply(null, arguments)
        }
        ;
        var _PyMem_GetAllocator = Module["_PyMem_GetAllocator"] = function() {
            return (_PyMem_GetAllocator = Module["_PyMem_GetAllocator"] = Module["asm"]["PyMem_GetAllocator"]).apply(null, arguments)
        }
        ;
        var _PyObject_GetArenaAllocator = Module["_PyObject_GetArenaAllocator"] = function() {
            return (_PyObject_GetArenaAllocator = Module["_PyObject_GetArenaAllocator"] = Module["asm"]["PyObject_GetArenaAllocator"]).apply(null, arguments)
        }
        ;
        var _PyObject_SetArenaAllocator = Module["_PyObject_SetArenaAllocator"] = function() {
            return (_PyObject_SetArenaAllocator = Module["_PyObject_SetArenaAllocator"] = Module["asm"]["PyObject_SetArenaAllocator"]).apply(null, arguments)
        }
        ;
        var _PyMem_RawMalloc = Module["_PyMem_RawMalloc"] = function() {
            return (_PyMem_RawMalloc = Module["_PyMem_RawMalloc"] = Module["asm"]["PyMem_RawMalloc"]).apply(null, arguments)
        }
        ;
        var _PyMem_RawCalloc = Module["_PyMem_RawCalloc"] = function() {
            return (_PyMem_RawCalloc = Module["_PyMem_RawCalloc"] = Module["asm"]["PyMem_RawCalloc"]).apply(null, arguments)
        }
        ;
        var __PyMem_RawWcsdup = Module["__PyMem_RawWcsdup"] = function() {
            return (__PyMem_RawWcsdup = Module["__PyMem_RawWcsdup"] = Module["asm"]["_PyMem_RawWcsdup"]).apply(null, arguments)
        }
        ;
        var _wcslen = Module["_wcslen"] = function() {
            return (_wcslen = Module["_wcslen"] = Module["asm"]["wcslen"]).apply(null, arguments)
        }
        ;
        var __PyMem_RawStrdup = Module["__PyMem_RawStrdup"] = function() {
            return (__PyMem_RawStrdup = Module["__PyMem_RawStrdup"] = Module["asm"]["_PyMem_RawStrdup"]).apply(null, arguments)
        }
        ;
        var __PyMem_Strdup = Module["__PyMem_Strdup"] = function() {
            return (__PyMem_Strdup = Module["__PyMem_Strdup"] = Module["asm"]["_PyMem_Strdup"]).apply(null, arguments)
        }
        ;
        var __Py_GetAllocatedBlocks = Module["__Py_GetAllocatedBlocks"] = function() {
            return (__Py_GetAllocatedBlocks = Module["__Py_GetAllocatedBlocks"] = Module["asm"]["_Py_GetAllocatedBlocks"]).apply(null, arguments)
        }
        ;
        var _PyPickleBuffer_FromObject = Module["_PyPickleBuffer_FromObject"] = function() {
            return (_PyPickleBuffer_FromObject = Module["_PyPickleBuffer_FromObject"] = Module["asm"]["PyPickleBuffer_FromObject"]).apply(null, arguments)
        }
        ;
        var _PyPickleBuffer_GetBuffer = Module["_PyPickleBuffer_GetBuffer"] = function() {
            return (_PyPickleBuffer_GetBuffer = Module["_PyPickleBuffer_GetBuffer"] = Module["asm"]["PyPickleBuffer_GetBuffer"]).apply(null, arguments)
        }
        ;
        var _PyPickleBuffer_Release = Module["_PyPickleBuffer_Release"] = function() {
            return (_PyPickleBuffer_Release = Module["_PyPickleBuffer_Release"] = Module["asm"]["PyPickleBuffer_Release"]).apply(null, arguments)
        }
        ;
        var __PySlice_GetLongIndices = Module["__PySlice_GetLongIndices"] = function() {
            return (__PySlice_GetLongIndices = Module["__PySlice_GetLongIndices"] = Module["asm"]["_PySlice_GetLongIndices"]).apply(null, arguments)
        }
        ;
        var _PySet_Size = Module["_PySet_Size"] = function() {
            return (_PySet_Size = Module["_PySet_Size"] = Module["asm"]["PySet_Size"]).apply(null, arguments)
        }
        ;
        var _PySet_Clear = Module["_PySet_Clear"] = function() {
            return (_PySet_Clear = Module["_PySet_Clear"] = Module["asm"]["PySet_Clear"]).apply(null, arguments)
        }
        ;
        var _PySet_Contains = Module["_PySet_Contains"] = function() {
            return (_PySet_Contains = Module["_PySet_Contains"] = Module["asm"]["PySet_Contains"]).apply(null, arguments)
        }
        ;
        var _PySet_Pop = Module["_PySet_Pop"] = function() {
            return (_PySet_Pop = Module["_PySet_Pop"] = Module["asm"]["PySet_Pop"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_EQ = Module["__PyUnicode_EQ"] = function() {
            return (__PyUnicode_EQ = Module["__PyUnicode_EQ"] = Module["asm"]["_PyUnicode_EQ"]).apply(null, arguments)
        }
        ;
        var _PySlice_New = Module["_PySlice_New"] = function() {
            return (_PySlice_New = Module["_PySlice_New"] = Module["asm"]["PySlice_New"]).apply(null, arguments)
        }
        ;
        var _PySlice_GetIndices = Module["_PySlice_GetIndices"] = function() {
            return (_PySlice_GetIndices = Module["_PySlice_GetIndices"] = Module["asm"]["PySlice_GetIndices"]).apply(null, arguments)
        }
        ;
        var _PySlice_GetIndicesEx = Module["_PySlice_GetIndicesEx"] = function() {
            return (_PySlice_GetIndicesEx = Module["_PySlice_GetIndicesEx"] = Module["asm"]["PySlice_GetIndicesEx"]).apply(null, arguments)
        }
        ;
        var _PyStructSequence_SetItem = Module["_PyStructSequence_SetItem"] = function() {
            return (_PyStructSequence_SetItem = Module["_PyStructSequence_SetItem"] = Module["asm"]["PyStructSequence_SetItem"]).apply(null, arguments)
        }
        ;
        var _PyStructSequence_GetItem = Module["_PyStructSequence_GetItem"] = function() {
            return (_PyStructSequence_GetItem = Module["_PyStructSequence_GetItem"] = Module["asm"]["PyStructSequence_GetItem"]).apply(null, arguments)
        }
        ;
        var __PyStructSequence_InitType = Module["__PyStructSequence_InitType"] = function() {
            return (__PyStructSequence_InitType = Module["__PyStructSequence_InitType"] = Module["asm"]["_PyStructSequence_InitType"]).apply(null, arguments)
        }
        ;
        var _PyStructSequence_InitType = Module["_PyStructSequence_InitType"] = function() {
            return (_PyStructSequence_InitType = Module["_PyStructSequence_InitType"] = Module["asm"]["PyStructSequence_InitType"]).apply(null, arguments)
        }
        ;
        var _PyStructSequence_NewType = Module["_PyStructSequence_NewType"] = function() {
            return (_PyStructSequence_NewType = Module["_PyStructSequence_NewType"] = Module["asm"]["PyStructSequence_NewType"]).apply(null, arguments)
        }
        ;
        var _PyTuple_SetItem = Module["_PyTuple_SetItem"] = function() {
            return (_PyTuple_SetItem = Module["_PyTuple_SetItem"] = Module["asm"]["PyTuple_SetItem"]).apply(null, arguments)
        }
        ;
        var __PyTuple_MaybeUntrack = Module["__PyTuple_MaybeUntrack"] = function() {
            return (__PyTuple_MaybeUntrack = Module["__PyTuple_MaybeUntrack"] = Module["asm"]["_PyTuple_MaybeUntrack"]).apply(null, arguments)
        }
        ;
        var _PyType_ClearCache = Module["_PyType_ClearCache"] = function() {
            return (_PyType_ClearCache = Module["_PyType_ClearCache"] = Module["asm"]["PyType_ClearCache"]).apply(null, arguments)
        }
        ;
        var _PyType_Modified = Module["_PyType_Modified"] = function() {
            return (_PyType_Modified = Module["_PyType_Modified"] = Module["asm"]["PyType_Modified"]).apply(null, arguments)
        }
        ;
        var __PyObject_GC_Malloc = Module["__PyObject_GC_Malloc"] = function() {
            return (__PyObject_GC_Malloc = Module["__PyObject_GC_Malloc"] = Module["asm"]["_PyObject_GC_Malloc"]).apply(null, arguments)
        }
        ;
        var __PyType_LookupId = Module["__PyType_LookupId"] = function() {
            return (__PyType_LookupId = Module["__PyType_LookupId"] = Module["asm"]["_PyType_LookupId"]).apply(null, arguments)
        }
        ;
        var _PyType_GetFlags = Module["_PyType_GetFlags"] = function() {
            return (_PyType_GetFlags = Module["_PyType_GetFlags"] = Module["asm"]["PyType_GetFlags"]).apply(null, arguments)
        }
        ;
        var __PyType_CalculateMetaclass = Module["__PyType_CalculateMetaclass"] = function() {
            return (__PyType_CalculateMetaclass = Module["__PyType_CalculateMetaclass"] = Module["asm"]["_PyType_CalculateMetaclass"]).apply(null, arguments)
        }
        ;
        var _PyType_FromModuleAndSpec = Module["_PyType_FromModuleAndSpec"] = function() {
            return (_PyType_FromModuleAndSpec = Module["_PyType_FromModuleAndSpec"] = Module["asm"]["PyType_FromModuleAndSpec"]).apply(null, arguments)
        }
        ;
        var __PyWeakref_ClearRef = Module["__PyWeakref_ClearRef"] = function() {
            return (__PyWeakref_ClearRef = Module["__PyWeakref_ClearRef"] = Module["asm"]["_PyWeakref_ClearRef"]).apply(null, arguments)
        }
        ;
        var _PyType_FromSpec = Module["_PyType_FromSpec"] = function() {
            return (_PyType_FromSpec = Module["_PyType_FromSpec"] = Module["asm"]["PyType_FromSpec"]).apply(null, arguments)
        }
        ;
        var _PyType_GetSlot = Module["_PyType_GetSlot"] = function() {
            return (_PyType_GetSlot = Module["_PyType_GetSlot"] = Module["asm"]["PyType_GetSlot"]).apply(null, arguments)
        }
        ;
        var _PyType_GetModule = Module["_PyType_GetModule"] = function() {
            return (_PyType_GetModule = Module["_PyType_GetModule"] = Module["asm"]["PyType_GetModule"]).apply(null, arguments)
        }
        ;
        var _PyType_GetModuleState = Module["_PyType_GetModuleState"] = function() {
            return (_PyType_GetModuleState = Module["_PyType_GetModuleState"] = Module["asm"]["PyType_GetModuleState"]).apply(null, arguments)
        }
        ;
        var __PyType_GetModuleByDef = Module["__PyType_GetModuleByDef"] = function() {
            return (__PyType_GetModuleByDef = Module["__PyType_GetModuleByDef"] = Module["asm"]["_PyType_GetModuleByDef"]).apply(null, arguments)
        }
        ;
        var _PyArg_ParseTuple = Module["_PyArg_ParseTuple"] = function() {
            return (_PyArg_ParseTuple = Module["_PyArg_ParseTuple"] = Module["asm"]["PyArg_ParseTuple"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_IsIdentifier = Module["_PyUnicode_IsIdentifier"] = function() {
            return (_PyUnicode_IsIdentifier = Module["_PyUnicode_IsIdentifier"] = Module["asm"]["PyUnicode_IsIdentifier"]).apply(null, arguments)
        }
        ;
        var _PyEval_GetGlobals = Module["_PyEval_GetGlobals"] = function() {
            return (_PyEval_GetGlobals = Module["_PyEval_GetGlobals"] = Module["asm"]["PyEval_GetGlobals"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_GetFrame = Module["_PyThreadState_GetFrame"] = function() {
            return (_PyThreadState_GetFrame = Module["_PyThreadState_GetFrame"] = Module["asm"]["PyThreadState_GetFrame"]).apply(null, arguments)
        }
        ;
        var _PyWeakref_NewRef = Module["_PyWeakref_NewRef"] = function() {
            return (_PyWeakref_NewRef = Module["_PyWeakref_NewRef"] = Module["asm"]["PyWeakref_NewRef"]).apply(null, arguments)
        }
        ;
        var _PyImport_GetModule = Module["_PyImport_GetModule"] = function() {
            return (_PyImport_GetModule = Module["_PyImport_GetModule"] = Module["asm"]["PyImport_GetModule"]).apply(null, arguments)
        }
        ;
        var _PyImport_Import = Module["_PyImport_Import"] = function() {
            return (_PyImport_Import = Module["_PyImport_Import"] = Module["asm"]["PyImport_Import"]).apply(null, arguments)
        }
        ;
        var __Py_GetErrorHandler = Module["__Py_GetErrorHandler"] = function() {
            return (__Py_GetErrorHandler = Module["__Py_GetErrorHandler"] = Module["asm"]["_Py_GetErrorHandler"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_FastCopyCharacters = Module["__PyUnicode_FastCopyCharacters"] = function() {
            return (__PyUnicode_FastCopyCharacters = Module["__PyUnicode_FastCopyCharacters"] = Module["asm"]["_PyUnicode_FastCopyCharacters"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_CopyCharacters = Module["_PyUnicode_CopyCharacters"] = function() {
            return (_PyUnicode_CopyCharacters = Module["_PyUnicode_CopyCharacters"] = Module["asm"]["PyUnicode_CopyCharacters"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Resize = Module["_PyUnicode_Resize"] = function() {
            return (_PyUnicode_Resize = Module["_PyUnicode_Resize"] = Module["asm"]["PyUnicode_Resize"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromUnicode = Module["_PyUnicode_FromUnicode"] = function() {
            return (_PyUnicode_FromUnicode = Module["_PyUnicode_FromUnicode"] = Module["asm"]["PyUnicode_FromUnicode"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromWideChar = Module["_PyUnicode_FromWideChar"] = function() {
            return (_PyUnicode_FromWideChar = Module["_PyUnicode_FromWideChar"] = Module["asm"]["PyUnicode_FromWideChar"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromKindAndData = Module["_PyUnicode_FromKindAndData"] = function() {
            return (_PyUnicode_FromKindAndData = Module["_PyUnicode_FromKindAndData"] = Module["asm"]["PyUnicode_FromKindAndData"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_FindMaxChar = Module["__PyUnicode_FindMaxChar"] = function() {
            return (__PyUnicode_FindMaxChar = Module["__PyUnicode_FindMaxChar"] = Module["asm"]["_PyUnicode_FindMaxChar"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUCS4 = Module["_PyUnicode_AsUCS4"] = function() {
            return (_PyUnicode_AsUCS4 = Module["_PyUnicode_AsUCS4"] = Module["asm"]["PyUnicode_AsUCS4"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUCS4Copy = Module["_PyUnicode_AsUCS4Copy"] = function() {
            return (_PyUnicode_AsUCS4Copy = Module["_PyUnicode_AsUCS4Copy"] = Module["asm"]["PyUnicode_AsUCS4Copy"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Fill = Module["_PyUnicode_Fill"] = function() {
            return (_PyUnicode_Fill = Module["_PyUnicode_Fill"] = Module["asm"]["PyUnicode_Fill"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_WriteLatin1String = Module["__PyUnicodeWriter_WriteLatin1String"] = function() {
            return (__PyUnicodeWriter_WriteLatin1String = Module["__PyUnicodeWriter_WriteLatin1String"] = Module["asm"]["_PyUnicodeWriter_WriteLatin1String"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsWideChar = Module["_PyUnicode_AsWideChar"] = function() {
            return (_PyUnicode_AsWideChar = Module["_PyUnicode_AsWideChar"] = Module["asm"]["PyUnicode_AsWideChar"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsWideCharString = Module["_PyUnicode_AsWideCharString"] = function() {
            return (_PyUnicode_AsWideCharString = Module["_PyUnicode_AsWideCharString"] = Module["asm"]["PyUnicode_AsWideCharString"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_WideCharString_Converter = Module["__PyUnicode_WideCharString_Converter"] = function() {
            return (__PyUnicode_WideCharString_Converter = Module["__PyUnicode_WideCharString_Converter"] = Module["asm"]["_PyUnicode_WideCharString_Converter"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUnicodeAndSize = Module["_PyUnicode_AsUnicodeAndSize"] = function() {
            return (_PyUnicode_AsUnicodeAndSize = Module["_PyUnicode_AsUnicodeAndSize"] = Module["asm"]["PyUnicode_AsUnicodeAndSize"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_AsUnicode = Module["__PyUnicode_AsUnicode"] = function() {
            return (__PyUnicode_AsUnicode = Module["__PyUnicode_AsUnicode"] = Module["asm"]["_PyUnicode_AsUnicode"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_WideCharString_Opt_Converter = Module["__PyUnicode_WideCharString_Opt_Converter"] = function() {
            return (__PyUnicode_WideCharString_Opt_Converter = Module["__PyUnicode_WideCharString_Opt_Converter"] = Module["asm"]["_PyUnicode_WideCharString_Opt_Converter"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromOrdinal = Module["_PyUnicode_FromOrdinal"] = function() {
            return (_PyUnicode_FromOrdinal = Module["_PyUnicode_FromOrdinal"] = Module["asm"]["PyUnicode_FromOrdinal"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FromObject = Module["_PyUnicode_FromObject"] = function() {
            return (_PyUnicode_FromObject = Module["_PyUnicode_FromObject"] = Module["asm"]["PyUnicode_FromObject"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_GetConfig = Module["__PyInterpreterState_GetConfig"] = function() {
            return (__PyInterpreterState_GetConfig = Module["__PyInterpreterState_GetConfig"] = Module["asm"]["_PyInterpreterState_GetConfig"]).apply(null, arguments)
        }
        ;
        var __PyCodec_Lookup = Module["__PyCodec_Lookup"] = function() {
            return (__PyCodec_Lookup = Module["__PyCodec_Lookup"] = Module["asm"]["_PyCodec_Lookup"]).apply(null, arguments)
        }
        ;
        var _PyCodec_LookupError = Module["_PyCodec_LookupError"] = function() {
            return (_PyCodec_LookupError = Module["_PyCodec_LookupError"] = Module["asm"]["PyCodec_LookupError"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUTF16Stateful = Module["_PyUnicode_DecodeUTF16Stateful"] = function() {
            return (_PyUnicode_DecodeUTF16Stateful = Module["_PyUnicode_DecodeUTF16Stateful"] = Module["asm"]["PyUnicode_DecodeUTF16Stateful"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUTF32Stateful = Module["_PyUnicode_DecodeUTF32Stateful"] = function() {
            return (_PyUnicode_DecodeUTF32Stateful = Module["_PyUnicode_DecodeUTF32Stateful"] = Module["asm"]["PyUnicode_DecodeUTF32Stateful"]).apply(null, arguments)
        }
        ;
        var __PyCodec_DecodeText = Module["__PyCodec_DecodeText"] = function() {
            return (__PyCodec_DecodeText = Module["__PyCodec_DecodeText"] = Module["asm"]["_PyCodec_DecodeText"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUTF16 = Module["_PyUnicode_DecodeUTF16"] = function() {
            return (_PyUnicode_DecodeUTF16 = Module["_PyUnicode_DecodeUTF16"] = Module["asm"]["PyUnicode_DecodeUTF16"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUTF32 = Module["_PyUnicode_DecodeUTF32"] = function() {
            return (_PyUnicode_DecodeUTF32 = Module["_PyUnicode_DecodeUTF32"] = Module["asm"]["PyUnicode_DecodeUTF32"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsDecodedObject = Module["_PyUnicode_AsDecodedObject"] = function() {
            return (_PyUnicode_AsDecodedObject = Module["_PyUnicode_AsDecodedObject"] = Module["asm"]["PyUnicode_AsDecodedObject"]).apply(null, arguments)
        }
        ;
        var _PyCodec_Decode = Module["_PyCodec_Decode"] = function() {
            return (_PyCodec_Decode = Module["_PyCodec_Decode"] = Module["asm"]["PyCodec_Decode"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsDecodedUnicode = Module["_PyUnicode_AsDecodedUnicode"] = function() {
            return (_PyUnicode_AsDecodedUnicode = Module["_PyUnicode_AsDecodedUnicode"] = Module["asm"]["PyUnicode_AsDecodedUnicode"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Encode = Module["_PyUnicode_Encode"] = function() {
            return (_PyUnicode_Encode = Module["_PyUnicode_Encode"] = Module["asm"]["PyUnicode_Encode"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_EncodeUTF16 = Module["__PyUnicode_EncodeUTF16"] = function() {
            return (__PyUnicode_EncodeUTF16 = Module["__PyUnicode_EncodeUTF16"] = Module["asm"]["_PyUnicode_EncodeUTF16"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_EncodeUTF32 = Module["__PyUnicode_EncodeUTF32"] = function() {
            return (__PyUnicode_EncodeUTF32 = Module["__PyUnicode_EncodeUTF32"] = Module["asm"]["_PyUnicode_EncodeUTF32"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_AsLatin1String = Module["__PyUnicode_AsLatin1String"] = function() {
            return (__PyUnicode_AsLatin1String = Module["__PyUnicode_AsLatin1String"] = Module["asm"]["_PyUnicode_AsLatin1String"]).apply(null, arguments)
        }
        ;
        var __PyCodec_EncodeText = Module["__PyCodec_EncodeText"] = function() {
            return (__PyCodec_EncodeText = Module["__PyCodec_EncodeText"] = Module["asm"]["_PyCodec_EncodeText"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsEncodedObject = Module["_PyUnicode_AsEncodedObject"] = function() {
            return (_PyUnicode_AsEncodedObject = Module["_PyUnicode_AsEncodedObject"] = Module["asm"]["PyUnicode_AsEncodedObject"]).apply(null, arguments)
        }
        ;
        var _PyCodec_Encode = Module["_PyCodec_Encode"] = function() {
            return (_PyCodec_Encode = Module["_PyCodec_Encode"] = Module["asm"]["PyCodec_Encode"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeLocale = Module["_PyUnicode_EncodeLocale"] = function() {
            return (_PyUnicode_EncodeLocale = Module["_PyUnicode_EncodeLocale"] = Module["asm"]["PyUnicode_EncodeLocale"]).apply(null, arguments)
        }
        ;
        var __Py_EncodeLocaleEx = Module["__Py_EncodeLocaleEx"] = function() {
            return (__Py_EncodeLocaleEx = Module["__Py_EncodeLocaleEx"] = Module["asm"]["_Py_EncodeLocaleEx"]).apply(null, arguments)
        }
        ;
        var _PyCodec_StrictErrors = Module["_PyCodec_StrictErrors"] = function() {
            return (_PyCodec_StrictErrors = Module["_PyCodec_StrictErrors"] = Module["asm"]["PyCodec_StrictErrors"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeFSDefault = Module["_PyUnicode_EncodeFSDefault"] = function() {
            return (_PyUnicode_EncodeFSDefault = Module["_PyUnicode_EncodeFSDefault"] = Module["asm"]["PyUnicode_EncodeFSDefault"]).apply(null, arguments)
        }
        ;
        var _wcscmp = Module["_wcscmp"] = function() {
            return (_wcscmp = Module["_wcscmp"] = Module["asm"]["wcscmp"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsEncodedUnicode = Module["_PyUnicode_AsEncodedUnicode"] = function() {
            return (_PyUnicode_AsEncodedUnicode = Module["_PyUnicode_AsEncodedUnicode"] = Module["asm"]["PyUnicode_AsEncodedUnicode"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeLocaleAndSize = Module["_PyUnicode_DecodeLocaleAndSize"] = function() {
            return (_PyUnicode_DecodeLocaleAndSize = Module["_PyUnicode_DecodeLocaleAndSize"] = Module["asm"]["PyUnicode_DecodeLocaleAndSize"]).apply(null, arguments)
        }
        ;
        var __Py_DecodeLocaleEx = Module["__Py_DecodeLocaleEx"] = function() {
            return (__Py_DecodeLocaleEx = Module["__Py_DecodeLocaleEx"] = Module["asm"]["_Py_DecodeLocaleEx"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeLocale = Module["_PyUnicode_DecodeLocale"] = function() {
            return (_PyUnicode_DecodeLocale = Module["_PyUnicode_DecodeLocale"] = Module["asm"]["PyUnicode_DecodeLocale"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeFSDefaultAndSize = Module["_PyUnicode_DecodeFSDefaultAndSize"] = function() {
            return (_PyUnicode_DecodeFSDefaultAndSize = Module["_PyUnicode_DecodeFSDefaultAndSize"] = Module["asm"]["PyUnicode_DecodeFSDefaultAndSize"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FSConverter = Module["_PyUnicode_FSConverter"] = function() {
            return (_PyUnicode_FSConverter = Module["_PyUnicode_FSConverter"] = Module["asm"]["PyUnicode_FSConverter"]).apply(null, arguments)
        }
        ;
        var _PyOS_FSPath = Module["_PyOS_FSPath"] = function() {
            return (_PyOS_FSPath = Module["_PyOS_FSPath"] = Module["asm"]["PyOS_FSPath"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FSDecoder = Module["_PyUnicode_FSDecoder"] = function() {
            return (_PyUnicode_FSDecoder = Module["_PyUnicode_FSDecoder"] = Module["asm"]["PyUnicode_FSDecoder"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUnicode = Module["_PyUnicode_AsUnicode"] = function() {
            return (_PyUnicode_AsUnicode = Module["_PyUnicode_AsUnicode"] = Module["asm"]["PyUnicode_AsUnicode"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_GetSize = Module["_PyUnicode_GetSize"] = function() {
            return (_PyUnicode_GetSize = Module["_PyUnicode_GetSize"] = Module["asm"]["PyUnicode_GetSize"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_GetLength = Module["_PyUnicode_GetLength"] = function() {
            return (_PyUnicode_GetLength = Module["_PyUnicode_GetLength"] = Module["asm"]["PyUnicode_GetLength"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_WriteChar = Module["_PyUnicode_WriteChar"] = function() {
            return (_PyUnicode_WriteChar = Module["_PyUnicode_WriteChar"] = Module["asm"]["PyUnicode_WriteChar"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUTF7 = Module["_PyUnicode_DecodeUTF7"] = function() {
            return (_PyUnicode_DecodeUTF7 = Module["_PyUnicode_DecodeUTF7"] = Module["asm"]["PyUnicode_DecodeUTF7"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUTF7Stateful = Module["_PyUnicode_DecodeUTF7Stateful"] = function() {
            return (_PyUnicode_DecodeUTF7Stateful = Module["_PyUnicode_DecodeUTF7Stateful"] = Module["asm"]["PyUnicode_DecodeUTF7Stateful"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_EncodeUTF7 = Module["__PyUnicode_EncodeUTF7"] = function() {
            return (__PyUnicode_EncodeUTF7 = Module["__PyUnicode_EncodeUTF7"] = Module["asm"]["_PyUnicode_EncodeUTF7"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeUTF7 = Module["_PyUnicode_EncodeUTF7"] = function() {
            return (_PyUnicode_EncodeUTF7 = Module["_PyUnicode_EncodeUTF7"] = Module["asm"]["PyUnicode_EncodeUTF7"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeUTF8 = Module["_PyUnicode_EncodeUTF8"] = function() {
            return (_PyUnicode_EncodeUTF8 = Module["_PyUnicode_EncodeUTF8"] = Module["asm"]["PyUnicode_EncodeUTF8"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeUTF32 = Module["_PyUnicode_EncodeUTF32"] = function() {
            return (_PyUnicode_EncodeUTF32 = Module["_PyUnicode_EncodeUTF32"] = Module["asm"]["PyUnicode_EncodeUTF32"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUTF32String = Module["_PyUnicode_AsUTF32String"] = function() {
            return (_PyUnicode_AsUTF32String = Module["_PyUnicode_AsUTF32String"] = Module["asm"]["PyUnicode_AsUTF32String"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeUTF16 = Module["_PyUnicode_EncodeUTF16"] = function() {
            return (_PyUnicode_EncodeUTF16 = Module["_PyUnicode_EncodeUTF16"] = Module["asm"]["PyUnicode_EncodeUTF16"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUTF16String = Module["_PyUnicode_AsUTF16String"] = function() {
            return (_PyUnicode_AsUTF16String = Module["_PyUnicode_AsUTF16String"] = Module["asm"]["PyUnicode_AsUTF16String"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_DecodeUnicodeEscapeStateful = Module["__PyUnicode_DecodeUnicodeEscapeStateful"] = function() {
            return (__PyUnicode_DecodeUnicodeEscapeStateful = Module["__PyUnicode_DecodeUnicodeEscapeStateful"] = Module["asm"]["_PyUnicode_DecodeUnicodeEscapeStateful"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeUnicodeEscape = Module["_PyUnicode_DecodeUnicodeEscape"] = function() {
            return (_PyUnicode_DecodeUnicodeEscape = Module["_PyUnicode_DecodeUnicodeEscape"] = Module["asm"]["PyUnicode_DecodeUnicodeEscape"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsUnicodeEscapeString = Module["_PyUnicode_AsUnicodeEscapeString"] = function() {
            return (_PyUnicode_AsUnicodeEscapeString = Module["_PyUnicode_AsUnicodeEscapeString"] = Module["asm"]["PyUnicode_AsUnicodeEscapeString"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeUnicodeEscape = Module["_PyUnicode_EncodeUnicodeEscape"] = function() {
            return (_PyUnicode_EncodeUnicodeEscape = Module["_PyUnicode_EncodeUnicodeEscape"] = Module["asm"]["PyUnicode_EncodeUnicodeEscape"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_DecodeRawUnicodeEscapeStateful = Module["__PyUnicode_DecodeRawUnicodeEscapeStateful"] = function() {
            return (__PyUnicode_DecodeRawUnicodeEscapeStateful = Module["__PyUnicode_DecodeRawUnicodeEscapeStateful"] = Module["asm"]["_PyUnicode_DecodeRawUnicodeEscapeStateful"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeRawUnicodeEscape = Module["_PyUnicode_DecodeRawUnicodeEscape"] = function() {
            return (_PyUnicode_DecodeRawUnicodeEscape = Module["_PyUnicode_DecodeRawUnicodeEscape"] = Module["asm"]["PyUnicode_DecodeRawUnicodeEscape"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsRawUnicodeEscapeString = Module["_PyUnicode_AsRawUnicodeEscapeString"] = function() {
            return (_PyUnicode_AsRawUnicodeEscapeString = Module["_PyUnicode_AsRawUnicodeEscapeString"] = Module["asm"]["PyUnicode_AsRawUnicodeEscapeString"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeRawUnicodeEscape = Module["_PyUnicode_EncodeRawUnicodeEscape"] = function() {
            return (_PyUnicode_EncodeRawUnicodeEscape = Module["_PyUnicode_EncodeRawUnicodeEscape"] = Module["asm"]["PyUnicode_EncodeRawUnicodeEscape"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeLatin1 = Module["_PyUnicode_EncodeLatin1"] = function() {
            return (_PyUnicode_EncodeLatin1 = Module["_PyUnicode_EncodeLatin1"] = Module["asm"]["PyUnicode_EncodeLatin1"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsLatin1String = Module["_PyUnicode_AsLatin1String"] = function() {
            return (_PyUnicode_AsLatin1String = Module["_PyUnicode_AsLatin1String"] = Module["asm"]["PyUnicode_AsLatin1String"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_PrepareKindInternal = Module["__PyUnicodeWriter_PrepareKindInternal"] = function() {
            return (__PyUnicodeWriter_PrepareKindInternal = Module["__PyUnicodeWriter_PrepareKindInternal"] = Module["asm"]["_PyUnicodeWriter_PrepareKindInternal"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeASCII = Module["_PyUnicode_EncodeASCII"] = function() {
            return (_PyUnicode_EncodeASCII = Module["_PyUnicode_EncodeASCII"] = Module["asm"]["PyUnicode_EncodeASCII"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_DecodeCharmap = Module["_PyUnicode_DecodeCharmap"] = function() {
            return (_PyUnicode_DecodeCharmap = Module["_PyUnicode_DecodeCharmap"] = Module["asm"]["PyUnicode_DecodeCharmap"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_BuildEncodingMap = Module["_PyUnicode_BuildEncodingMap"] = function() {
            return (_PyUnicode_BuildEncodingMap = Module["_PyUnicode_BuildEncodingMap"] = Module["asm"]["PyUnicode_BuildEncodingMap"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_EncodeCharmap = Module["__PyUnicode_EncodeCharmap"] = function() {
            return (__PyUnicode_EncodeCharmap = Module["__PyUnicode_EncodeCharmap"] = Module["asm"]["_PyUnicode_EncodeCharmap"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeCharmap = Module["_PyUnicode_EncodeCharmap"] = function() {
            return (_PyUnicode_EncodeCharmap = Module["_PyUnicode_EncodeCharmap"] = Module["asm"]["PyUnicode_EncodeCharmap"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_AsCharmapString = Module["_PyUnicode_AsCharmapString"] = function() {
            return (_PyUnicode_AsCharmapString = Module["_PyUnicode_AsCharmapString"] = Module["asm"]["PyUnicode_AsCharmapString"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_TranslateCharmap = Module["_PyUnicode_TranslateCharmap"] = function() {
            return (_PyUnicode_TranslateCharmap = Module["_PyUnicode_TranslateCharmap"] = Module["asm"]["PyUnicode_TranslateCharmap"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Translate = Module["_PyUnicode_Translate"] = function() {
            return (_PyUnicode_Translate = Module["_PyUnicode_Translate"] = Module["asm"]["PyUnicode_Translate"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsWhitespace = Module["__PyUnicode_IsWhitespace"] = function() {
            return (__PyUnicode_IsWhitespace = Module["__PyUnicode_IsWhitespace"] = Module["asm"]["_PyUnicode_IsWhitespace"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToDecimalDigit = Module["__PyUnicode_ToDecimalDigit"] = function() {
            return (__PyUnicode_ToDecimalDigit = Module["__PyUnicode_ToDecimalDigit"] = Module["asm"]["_PyUnicode_ToDecimalDigit"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_TransformDecimalToASCII = Module["_PyUnicode_TransformDecimalToASCII"] = function() {
            return (_PyUnicode_TransformDecimalToASCII = Module["_PyUnicode_TransformDecimalToASCII"] = Module["asm"]["PyUnicode_TransformDecimalToASCII"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_EncodeDecimal = Module["_PyUnicode_EncodeDecimal"] = function() {
            return (_PyUnicode_EncodeDecimal = Module["_PyUnicode_EncodeDecimal"] = Module["asm"]["PyUnicode_EncodeDecimal"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_InsertThousandsGrouping = Module["__PyUnicode_InsertThousandsGrouping"] = function() {
            return (__PyUnicode_InsertThousandsGrouping = Module["__PyUnicode_InsertThousandsGrouping"] = Module["asm"]["_PyUnicode_InsertThousandsGrouping"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Count = Module["_PyUnicode_Count"] = function() {
            return (_PyUnicode_Count = Module["_PyUnicode_Count"] = Module["asm"]["PyUnicode_Count"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Find = Module["_PyUnicode_Find"] = function() {
            return (_PyUnicode_Find = Module["_PyUnicode_Find"] = Module["asm"]["PyUnicode_Find"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_FindChar = Module["_PyUnicode_FindChar"] = function() {
            return (_PyUnicode_FindChar = Module["_PyUnicode_FindChar"] = Module["asm"]["PyUnicode_FindChar"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Tailmatch = Module["_PyUnicode_Tailmatch"] = function() {
            return (_PyUnicode_Tailmatch = Module["_PyUnicode_Tailmatch"] = Module["asm"]["PyUnicode_Tailmatch"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_JoinArray = Module["__PyUnicode_JoinArray"] = function() {
            return (__PyUnicode_JoinArray = Module["__PyUnicode_JoinArray"] = Module["asm"]["_PyUnicode_JoinArray"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_FastFill = Module["__PyUnicode_FastFill"] = function() {
            return (__PyUnicode_FastFill = Module["__PyUnicode_FastFill"] = Module["asm"]["_PyUnicode_FastFill"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Splitlines = Module["_PyUnicode_Splitlines"] = function() {
            return (_PyUnicode_Splitlines = Module["_PyUnicode_Splitlines"] = Module["asm"]["PyUnicode_Splitlines"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsLinebreak = Module["__PyUnicode_IsLinebreak"] = function() {
            return (__PyUnicode_IsLinebreak = Module["__PyUnicode_IsLinebreak"] = Module["asm"]["_PyUnicode_IsLinebreak"]).apply(null, arguments)
        }
        ;
        var _wmemcmp = Module["_wmemcmp"] = function() {
            return (_wmemcmp = Module["_wmemcmp"] = Module["asm"]["wmemcmp"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_RichCompare = Module["_PyUnicode_RichCompare"] = function() {
            return (_PyUnicode_RichCompare = Module["_PyUnicode_RichCompare"] = Module["asm"]["PyUnicode_RichCompare"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Contains = Module["_PyUnicode_Contains"] = function() {
            return (_PyUnicode_Contains = Module["_PyUnicode_Contains"] = Module["asm"]["PyUnicode_Contains"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Concat = Module["_PyUnicode_Concat"] = function() {
            return (_PyUnicode_Concat = Module["_PyUnicode_Concat"] = Module["asm"]["PyUnicode_Concat"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Append = Module["_PyUnicode_Append"] = function() {
            return (_PyUnicode_Append = Module["_PyUnicode_Append"] = Module["asm"]["PyUnicode_Append"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsXidStart = Module["__PyUnicode_IsXidStart"] = function() {
            return (__PyUnicode_IsXidStart = Module["__PyUnicode_IsXidStart"] = Module["asm"]["_PyUnicode_IsXidStart"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsXidContinue = Module["__PyUnicode_IsXidContinue"] = function() {
            return (__PyUnicode_IsXidContinue = Module["__PyUnicode_IsXidContinue"] = Module["asm"]["_PyUnicode_IsXidContinue"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_XStrip = Module["__PyUnicode_XStrip"] = function() {
            return (__PyUnicode_XStrip = Module["__PyUnicode_XStrip"] = Module["asm"]["_PyUnicode_XStrip"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Replace = Module["_PyUnicode_Replace"] = function() {
            return (_PyUnicode_Replace = Module["_PyUnicode_Replace"] = Module["asm"]["PyUnicode_Replace"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Split = Module["_PyUnicode_Split"] = function() {
            return (_PyUnicode_Split = Module["_PyUnicode_Split"] = Module["asm"]["PyUnicode_Split"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Partition = Module["_PyUnicode_Partition"] = function() {
            return (_PyUnicode_Partition = Module["_PyUnicode_Partition"] = Module["asm"]["PyUnicode_Partition"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_RPartition = Module["_PyUnicode_RPartition"] = function() {
            return (_PyUnicode_RPartition = Module["_PyUnicode_RPartition"] = Module["asm"]["PyUnicode_RPartition"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_RSplit = Module["_PyUnicode_RSplit"] = function() {
            return (_PyUnicode_RSplit = Module["_PyUnicode_RSplit"] = Module["asm"]["PyUnicode_RSplit"]).apply(null, arguments)
        }
        ;
        var __PyUnicodeWriter_WriteSubstring = Module["__PyUnicodeWriter_WriteSubstring"] = function() {
            return (__PyUnicodeWriter_WriteSubstring = Module["__PyUnicodeWriter_WriteSubstring"] = Module["asm"]["_PyUnicodeWriter_WriteSubstring"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_Format = Module["_PyUnicode_Format"] = function() {
            return (_PyUnicode_Format = Module["_PyUnicode_Format"] = Module["asm"]["PyUnicode_Format"]).apply(null, arguments)
        }
        ;
        var __PyErr_WriteUnraisableMsg = Module["__PyErr_WriteUnraisableMsg"] = function() {
            return (__PyErr_WriteUnraisableMsg = Module["__PyErr_WriteUnraisableMsg"] = Module["asm"]["_PyErr_WriteUnraisableMsg"]).apply(null, arguments)
        }
        ;
        var _PyUnicode_InternImmortal = Module["_PyUnicode_InternImmortal"] = function() {
            return (_PyUnicode_InternImmortal = Module["_PyUnicode_InternImmortal"] = Module["asm"]["PyUnicode_InternImmortal"]).apply(null, arguments)
        }
        ;
        var _PyInit__string = Module["_PyInit__string"] = function() {
            return (_PyInit__string = Module["_PyInit__string"] = Module["asm"]["PyInit__string"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsLowercase = Module["__PyUnicode_IsLowercase"] = function() {
            return (__PyUnicode_IsLowercase = Module["__PyUnicode_IsLowercase"] = Module["asm"]["_PyUnicode_IsLowercase"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsUppercase = Module["__PyUnicode_IsUppercase"] = function() {
            return (__PyUnicode_IsUppercase = Module["__PyUnicode_IsUppercase"] = Module["asm"]["_PyUnicode_IsUppercase"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsTitlecase = Module["__PyUnicode_IsTitlecase"] = function() {
            return (__PyUnicode_IsTitlecase = Module["__PyUnicode_IsTitlecase"] = Module["asm"]["_PyUnicode_IsTitlecase"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsDecimalDigit = Module["__PyUnicode_IsDecimalDigit"] = function() {
            return (__PyUnicode_IsDecimalDigit = Module["__PyUnicode_IsDecimalDigit"] = Module["asm"]["_PyUnicode_IsDecimalDigit"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsDigit = Module["__PyUnicode_IsDigit"] = function() {
            return (__PyUnicode_IsDigit = Module["__PyUnicode_IsDigit"] = Module["asm"]["_PyUnicode_IsDigit"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsNumeric = Module["__PyUnicode_IsNumeric"] = function() {
            return (__PyUnicode_IsNumeric = Module["__PyUnicode_IsNumeric"] = Module["asm"]["_PyUnicode_IsNumeric"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsAlpha = Module["__PyUnicode_IsAlpha"] = function() {
            return (__PyUnicode_IsAlpha = Module["__PyUnicode_IsAlpha"] = Module["asm"]["_PyUnicode_IsAlpha"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_FormatAdvancedWriter = Module["__PyUnicode_FormatAdvancedWriter"] = function() {
            return (__PyUnicode_FormatAdvancedWriter = Module["__PyUnicode_FormatAdvancedWriter"] = Module["asm"]["_PyUnicode_FormatAdvancedWriter"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToTitleFull = Module["__PyUnicode_ToTitleFull"] = function() {
            return (__PyUnicode_ToTitleFull = Module["__PyUnicode_ToTitleFull"] = Module["asm"]["_PyUnicode_ToTitleFull"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsCaseIgnorable = Module["__PyUnicode_IsCaseIgnorable"] = function() {
            return (__PyUnicode_IsCaseIgnorable = Module["__PyUnicode_IsCaseIgnorable"] = Module["asm"]["_PyUnicode_IsCaseIgnorable"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_IsCased = Module["__PyUnicode_IsCased"] = function() {
            return (__PyUnicode_IsCased = Module["__PyUnicode_IsCased"] = Module["asm"]["_PyUnicode_IsCased"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToLowerFull = Module["__PyUnicode_ToLowerFull"] = function() {
            return (__PyUnicode_ToLowerFull = Module["__PyUnicode_ToLowerFull"] = Module["asm"]["_PyUnicode_ToLowerFull"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToFoldedFull = Module["__PyUnicode_ToFoldedFull"] = function() {
            return (__PyUnicode_ToFoldedFull = Module["__PyUnicode_ToFoldedFull"] = Module["asm"]["_PyUnicode_ToFoldedFull"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToUpperFull = Module["__PyUnicode_ToUpperFull"] = function() {
            return (__PyUnicode_ToUpperFull = Module["__PyUnicode_ToUpperFull"] = Module["asm"]["_PyUnicode_ToUpperFull"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToNumeric = Module["__PyUnicode_ToNumeric"] = function() {
            return (__PyUnicode_ToNumeric = Module["__PyUnicode_ToNumeric"] = Module["asm"]["_PyUnicode_ToNumeric"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToTitlecase = Module["__PyUnicode_ToTitlecase"] = function() {
            return (__PyUnicode_ToTitlecase = Module["__PyUnicode_ToTitlecase"] = Module["asm"]["_PyUnicode_ToTitlecase"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToDigit = Module["__PyUnicode_ToDigit"] = function() {
            return (__PyUnicode_ToDigit = Module["__PyUnicode_ToDigit"] = Module["asm"]["_PyUnicode_ToDigit"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToUppercase = Module["__PyUnicode_ToUppercase"] = function() {
            return (__PyUnicode_ToUppercase = Module["__PyUnicode_ToUppercase"] = Module["asm"]["_PyUnicode_ToUppercase"]).apply(null, arguments)
        }
        ;
        var __PyUnicode_ToLowercase = Module["__PyUnicode_ToLowercase"] = function() {
            return (__PyUnicode_ToLowercase = Module["__PyUnicode_ToLowercase"] = Module["asm"]["_PyUnicode_ToLowercase"]).apply(null, arguments)
        }
        ;
        var __PyWeakref_GetWeakrefCount = Module["__PyWeakref_GetWeakrefCount"] = function() {
            return (__PyWeakref_GetWeakrefCount = Module["__PyWeakref_GetWeakrefCount"] = Module["asm"]["_PyWeakref_GetWeakrefCount"]).apply(null, arguments)
        }
        ;
        var _PyWeakref_NewProxy = Module["_PyWeakref_NewProxy"] = function() {
            return (_PyWeakref_NewProxy = Module["_PyWeakref_NewProxy"] = Module["asm"]["PyWeakref_NewProxy"]).apply(null, arguments)
        }
        ;
        var _PyWeakref_GetObject = Module["_PyWeakref_GetObject"] = function() {
            return (_PyWeakref_GetObject = Module["_PyWeakref_GetObject"] = Module["asm"]["PyWeakref_GetObject"]).apply(null, arguments)
        }
        ;
        var _PyErr_ResourceWarning = Module["_PyErr_ResourceWarning"] = function() {
            return (_PyErr_ResourceWarning = Module["_PyErr_ResourceWarning"] = Module["asm"]["PyErr_ResourceWarning"]).apply(null, arguments)
        }
        ;
        var _PyErr_WarnExplicit = Module["_PyErr_WarnExplicit"] = function() {
            return (_PyErr_WarnExplicit = Module["_PyErr_WarnExplicit"] = Module["asm"]["PyErr_WarnExplicit"]).apply(null, arguments)
        }
        ;
        var _PyErr_WarnExplicitFormat = Module["_PyErr_WarnExplicitFormat"] = function() {
            return (_PyErr_WarnExplicitFormat = Module["_PyErr_WarnExplicitFormat"] = Module["asm"]["PyErr_WarnExplicitFormat"]).apply(null, arguments)
        }
        ;
        var __Py_IsFinalizing = Module["__Py_IsFinalizing"] = function() {
            return (__Py_IsFinalizing = Module["__Py_IsFinalizing"] = Module["asm"]["_Py_IsFinalizing"]).apply(null, arguments)
        }
        ;
        var __PyWarnings_Init = Module["__PyWarnings_Init"] = function() {
            return (__PyWarnings_Init = Module["__PyWarnings_Init"] = Module["asm"]["_PyWarnings_Init"]).apply(null, arguments)
        }
        ;
        var __Py_DisplaySourceLine = Module["__Py_DisplaySourceLine"] = function() {
            return (__Py_DisplaySourceLine = Module["__Py_DisplaySourceLine"] = Module["asm"]["_Py_DisplaySourceLine"]).apply(null, arguments)
        }
        ;
        var _PyModule_AddObjectRef = Module["_PyModule_AddObjectRef"] = function() {
            return (_PyModule_AddObjectRef = Module["_PyModule_AddObjectRef"] = Module["asm"]["PyModule_AddObjectRef"]).apply(null, arguments)
        }
        ;
        var _PyInit__ast = Module["_PyInit__ast"] = function() {
            return (_PyInit__ast = Module["_PyInit__ast"] = Module["asm"]["PyInit__ast"]).apply(null, arguments)
        }
        ;
        var _PyModule_AddIntConstant = Module["_PyModule_AddIntConstant"] = function() {
            return (_PyModule_AddIntConstant = Module["_PyModule_AddIntConstant"] = Module["asm"]["PyModule_AddIntConstant"]).apply(null, arguments)
        }
        ;
        var _Py_GetRecursionLimit = Module["_Py_GetRecursionLimit"] = function() {
            return (_Py_GetRecursionLimit = Module["_Py_GetRecursionLimit"] = Module["asm"]["Py_GetRecursionLimit"]).apply(null, arguments)
        }
        ;
        var _PyImport_ImportModuleLevelObject = Module["_PyImport_ImportModuleLevelObject"] = function() {
            return (_PyImport_ImportModuleLevelObject = Module["_PyImport_ImportModuleLevelObject"] = Module["asm"]["PyImport_ImportModuleLevelObject"]).apply(null, arguments)
        }
        ;
        var _PySys_GetObject = Module["_PySys_GetObject"] = function() {
            return (_PySys_GetObject = Module["_PySys_GetObject"] = Module["asm"]["PySys_GetObject"]).apply(null, arguments)
        }
        ;
        var _PyEval_MergeCompilerFlags = Module["_PyEval_MergeCompilerFlags"] = function() {
            return (_PyEval_MergeCompilerFlags = Module["_PyEval_MergeCompilerFlags"] = Module["asm"]["PyEval_MergeCompilerFlags"]).apply(null, arguments)
        }
        ;
        var __PyArena_New = Module["__PyArena_New"] = function() {
            return (__PyArena_New = Module["__PyArena_New"] = Module["asm"]["_PyArena_New"]).apply(null, arguments)
        }
        ;
        var __PyArena_Free = Module["__PyArena_Free"] = function() {
            return (__PyArena_Free = Module["__PyArena_Free"] = Module["asm"]["_PyArena_Free"]).apply(null, arguments)
        }
        ;
        var __PyAST_Compile = Module["__PyAST_Compile"] = function() {
            return (__PyAST_Compile = Module["__PyAST_Compile"] = Module["asm"]["_PyAST_Compile"]).apply(null, arguments)
        }
        ;
        var __Py_SourceAsString = Module["__Py_SourceAsString"] = function() {
            return (__Py_SourceAsString = Module["__Py_SourceAsString"] = Module["asm"]["_Py_SourceAsString"]).apply(null, arguments)
        }
        ;
        var _Py_CompileStringObject = Module["_Py_CompileStringObject"] = function() {
            return (_Py_CompileStringObject = Module["_Py_CompileStringObject"] = Module["asm"]["Py_CompileStringObject"]).apply(null, arguments)
        }
        ;
        var _PyEval_GetBuiltins = Module["_PyEval_GetBuiltins"] = function() {
            return (_PyEval_GetBuiltins = Module["_PyEval_GetBuiltins"] = Module["asm"]["PyEval_GetBuiltins"]).apply(null, arguments)
        }
        ;
        var _PyEval_EvalCode = Module["_PyEval_EvalCode"] = function() {
            return (_PyEval_EvalCode = Module["_PyEval_EvalCode"] = Module["asm"]["PyEval_EvalCode"]).apply(null, arguments)
        }
        ;
        var _PyRun_StringFlags = Module["_PyRun_StringFlags"] = function() {
            return (_PyRun_StringFlags = Module["_PyRun_StringFlags"] = Module["asm"]["PyRun_StringFlags"]).apply(null, arguments)
        }
        ;
        var __PyArg_ParseStackAndKeywords = Module["__PyArg_ParseStackAndKeywords"] = function() {
            return (__PyArg_ParseStackAndKeywords = Module["__PyArg_ParseStackAndKeywords"] = Module["asm"]["_PyArg_ParseStackAndKeywords"]).apply(null, arguments)
        }
        ;
        var __PyEval_SetSwitchInterval = Module["__PyEval_SetSwitchInterval"] = function() {
            return (__PyEval_SetSwitchInterval = Module["__PyEval_SetSwitchInterval"] = Module["asm"]["_PyEval_SetSwitchInterval"]).apply(null, arguments)
        }
        ;
        var __PyEval_GetSwitchInterval = Module["__PyEval_GetSwitchInterval"] = function() {
            return (__PyEval_GetSwitchInterval = Module["__PyEval_GetSwitchInterval"] = Module["asm"]["_PyEval_GetSwitchInterval"]).apply(null, arguments)
        }
        ;
        var __Py_FatalError_TstateNULL = Module["__Py_FatalError_TstateNULL"] = function() {
            return (__Py_FatalError_TstateNULL = Module["__Py_FatalError_TstateNULL"] = Module["asm"]["_Py_FatalError_TstateNULL"]).apply(null, arguments)
        }
        ;
        var _PyEval_ThreadsInitialized = Module["_PyEval_ThreadsInitialized"] = function() {
            return (_PyEval_ThreadsInitialized = Module["_PyEval_ThreadsInitialized"] = Module["asm"]["PyEval_ThreadsInitialized"]).apply(null, arguments)
        }
        ;
        var _PyThread_init_thread = Module["_PyThread_init_thread"] = function() {
            return (_PyThread_init_thread = Module["_PyThread_init_thread"] = Module["asm"]["PyThread_init_thread"]).apply(null, arguments)
        }
        ;
        var _pthread_mutex_init = Module["_pthread_mutex_init"] = function() {
            return (_pthread_mutex_init = Module["_pthread_mutex_init"] = Module["asm"]["pthread_mutex_init"]).apply(null, arguments)
        }
        ;
        var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = function() {
            return (_pthread_mutex_lock = Module["_pthread_mutex_lock"] = Module["asm"]["pthread_mutex_lock"]).apply(null, arguments)
        }
        ;
        var _pthread_cond_timedwait = Module["_pthread_cond_timedwait"] = function() {
            return (_pthread_cond_timedwait = Module["_pthread_cond_timedwait"] = Module["asm"]["pthread_cond_timedwait"]).apply(null, arguments)
        }
        ;
        var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = function() {
            return (_pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = Module["asm"]["pthread_mutex_unlock"]).apply(null, arguments)
        }
        ;
        var _pthread_cond_signal = Module["_pthread_cond_signal"] = function() {
            return (_pthread_cond_signal = Module["_pthread_cond_signal"] = Module["asm"]["pthread_cond_signal"]).apply(null, arguments)
        }
        ;
        var _PyThread_exit_thread = Module["_PyThread_exit_thread"] = function() {
            return (_PyThread_exit_thread = Module["_PyThread_exit_thread"] = Module["asm"]["PyThread_exit_thread"]).apply(null, arguments)
        }
        ;
        var _PyThread_get_thread_ident = Module["_PyThread_get_thread_ident"] = function() {
            return (_PyThread_get_thread_ident = Module["_PyThread_get_thread_ident"] = Module["asm"]["PyThread_get_thread_ident"]).apply(null, arguments)
        }
        ;
        var _pthread_cond_destroy = Module["_pthread_cond_destroy"] = function() {
            return (_pthread_cond_destroy = Module["_pthread_cond_destroy"] = Module["asm"]["pthread_cond_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_mutex_destroy = Module["_pthread_mutex_destroy"] = function() {
            return (_pthread_mutex_destroy = Module["_pthread_mutex_destroy"] = Module["asm"]["pthread_mutex_destroy"]).apply(null, arguments)
        }
        ;
        var _PyEval_InitThreads = Module["_PyEval_InitThreads"] = function() {
            return (_PyEval_InitThreads = Module["_PyEval_InitThreads"] = Module["asm"]["PyEval_InitThreads"]).apply(null, arguments)
        }
        ;
        var _PyEval_AcquireLock = Module["_PyEval_AcquireLock"] = function() {
            return (_PyEval_AcquireLock = Module["_PyEval_AcquireLock"] = Module["asm"]["PyEval_AcquireLock"]).apply(null, arguments)
        }
        ;
        var _PyEval_ReleaseLock = Module["_PyEval_ReleaseLock"] = function() {
            return (_PyEval_ReleaseLock = Module["_PyEval_ReleaseLock"] = Module["asm"]["PyEval_ReleaseLock"]).apply(null, arguments)
        }
        ;
        var _pthread_cond_wait = Module["_pthread_cond_wait"] = function() {
            return (_pthread_cond_wait = Module["_pthread_cond_wait"] = Module["asm"]["pthread_cond_wait"]).apply(null, arguments)
        }
        ;
        var _PyEval_AcquireThread = Module["_PyEval_AcquireThread"] = function() {
            return (_PyEval_AcquireThread = Module["_PyEval_AcquireThread"] = Module["asm"]["PyEval_AcquireThread"]).apply(null, arguments)
        }
        ;
        var __PyThreadState_Swap = Module["__PyThreadState_Swap"] = function() {
            return (__PyThreadState_Swap = Module["__PyThreadState_Swap"] = Module["asm"]["_PyThreadState_Swap"]).apply(null, arguments)
        }
        ;
        var _PyEval_ReleaseThread = Module["_PyEval_ReleaseThread"] = function() {
            return (_PyEval_ReleaseThread = Module["_PyEval_ReleaseThread"] = Module["asm"]["PyEval_ReleaseThread"]).apply(null, arguments)
        }
        ;
        var __PyThread_at_fork_reinit = Module["__PyThread_at_fork_reinit"] = function() {
            return (__PyThread_at_fork_reinit = Module["__PyThread_at_fork_reinit"] = Module["asm"]["_PyThread_at_fork_reinit"]).apply(null, arguments)
        }
        ;
        var __PyThreadState_DeleteExcept = Module["__PyThreadState_DeleteExcept"] = function() {
            return (__PyThreadState_DeleteExcept = Module["__PyThreadState_DeleteExcept"] = Module["asm"]["_PyThreadState_DeleteExcept"]).apply(null, arguments)
        }
        ;
        var __PyEval_SignalAsyncExc = Module["__PyEval_SignalAsyncExc"] = function() {
            return (__PyEval_SignalAsyncExc = Module["__PyEval_SignalAsyncExc"] = Module["asm"]["_PyEval_SignalAsyncExc"]).apply(null, arguments)
        }
        ;
        var __PyEval_SignalReceived = Module["__PyEval_SignalReceived"] = function() {
            return (__PyEval_SignalReceived = Module["__PyEval_SignalReceived"] = Module["asm"]["_PyEval_SignalReceived"]).apply(null, arguments)
        }
        ;
        var __PyEval_AddPendingCall = Module["__PyEval_AddPendingCall"] = function() {
            return (__PyEval_AddPendingCall = Module["__PyEval_AddPendingCall"] = Module["asm"]["_PyEval_AddPendingCall"]).apply(null, arguments)
        }
        ;
        var _Py_AddPendingCall = Module["_Py_AddPendingCall"] = function() {
            return (_Py_AddPendingCall = Module["_Py_AddPendingCall"] = Module["asm"]["Py_AddPendingCall"]).apply(null, arguments)
        }
        ;
        var __PyErr_Print = Module["__PyErr_Print"] = function() {
            return (__PyErr_Print = Module["__PyErr_Print"] = Module["asm"]["_PyErr_Print"]).apply(null, arguments)
        }
        ;
        var _Py_MakePendingCalls = Module["_Py_MakePendingCalls"] = function() {
            return (_Py_MakePendingCalls = Module["_Py_MakePendingCalls"] = Module["asm"]["Py_MakePendingCalls"]).apply(null, arguments)
        }
        ;
        var __PyErr_CheckSignalsTstate = Module["__PyErr_CheckSignalsTstate"] = function() {
            return (__PyErr_CheckSignalsTstate = Module["__PyErr_CheckSignalsTstate"] = Module["asm"]["_PyErr_CheckSignalsTstate"]).apply(null, arguments)
        }
        ;
        var _PyThread_free_lock = Module["_PyThread_free_lock"] = function() {
            return (_PyThread_free_lock = Module["_PyThread_free_lock"] = Module["asm"]["PyThread_free_lock"]).apply(null, arguments)
        }
        ;
        var _Py_SetRecursionLimit = Module["_Py_SetRecursionLimit"] = function() {
            return (_Py_SetRecursionLimit = Module["_Py_SetRecursionLimit"] = Module["asm"]["Py_SetRecursionLimit"]).apply(null, arguments)
        }
        ;
        var _PyEval_EvalFrame = Module["_PyEval_EvalFrame"] = function() {
            return (_PyEval_EvalFrame = Module["_PyEval_EvalFrame"] = Module["asm"]["PyEval_EvalFrame"]).apply(null, arguments)
        }
        ;
        var _PyEval_EvalFrameEx = Module["_PyEval_EvalFrameEx"] = function() {
            return (_PyEval_EvalFrameEx = Module["_PyEval_EvalFrameEx"] = Module["asm"]["PyEval_EvalFrameEx"]).apply(null, arguments)
        }
        ;
        var __PyEval_EvalFrameDefault = Module["__PyEval_EvalFrameDefault"] = function() {
            return (__PyEval_EvalFrameDefault = Module["__PyEval_EvalFrameDefault"] = Module["asm"]["_PyEval_EvalFrameDefault"]).apply(null, arguments)
        }
        ;
        var __PyErr_SetNone = Module["__PyErr_SetNone"] = function() {
            return (__PyErr_SetNone = Module["__PyErr_SetNone"] = Module["asm"]["_PyErr_SetNone"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetImportError = Module["_PyErr_SetImportError"] = function() {
            return (_PyErr_SetImportError = Module["_PyErr_SetImportError"] = Module["asm"]["PyErr_SetImportError"]).apply(null, arguments)
        }
        ;
        var __PyErr_SetObject = Module["__PyErr_SetObject"] = function() {
            return (__PyErr_SetObject = Module["__PyErr_SetObject"] = Module["asm"]["_PyErr_SetObject"]).apply(null, arguments)
        }
        ;
        var _PyTraceBack_Here = Module["_PyTraceBack_Here"] = function() {
            return (_PyTraceBack_Here = Module["_PyTraceBack_Here"] = Module["asm"]["PyTraceBack_Here"]).apply(null, arguments)
        }
        ;
        var __PyErr_NormalizeException = Module["__PyErr_NormalizeException"] = function() {
            return (__PyErr_NormalizeException = Module["__PyErr_NormalizeException"] = Module["asm"]["_PyErr_NormalizeException"]).apply(null, arguments)
        }
        ;
        var __PyErr_GetTopmostException = Module["__PyErr_GetTopmostException"] = function() {
            return (__PyErr_GetTopmostException = Module["__PyErr_GetTopmostException"] = Module["asm"]["_PyErr_GetTopmostException"]).apply(null, arguments)
        }
        ;
        var _PyEval_EvalCodeEx = Module["_PyEval_EvalCodeEx"] = function() {
            return (_PyEval_EvalCodeEx = Module["_PyEval_EvalCodeEx"] = Module["asm"]["PyEval_EvalCodeEx"]).apply(null, arguments)
        }
        ;
        var __PyEval_CallTracing = Module["__PyEval_CallTracing"] = function() {
            return (__PyEval_CallTracing = Module["__PyEval_CallTracing"] = Module["asm"]["_PyEval_CallTracing"]).apply(null, arguments)
        }
        ;
        var __PyEval_SetProfile = Module["__PyEval_SetProfile"] = function() {
            return (__PyEval_SetProfile = Module["__PyEval_SetProfile"] = Module["asm"]["_PyEval_SetProfile"]).apply(null, arguments)
        }
        ;
        var _PyEval_SetProfile = Module["_PyEval_SetProfile"] = function() {
            return (_PyEval_SetProfile = Module["_PyEval_SetProfile"] = Module["asm"]["PyEval_SetProfile"]).apply(null, arguments)
        }
        ;
        var __PyEval_SetTrace = Module["__PyEval_SetTrace"] = function() {
            return (__PyEval_SetTrace = Module["__PyEval_SetTrace"] = Module["asm"]["_PyEval_SetTrace"]).apply(null, arguments)
        }
        ;
        var _PyEval_SetTrace = Module["_PyEval_SetTrace"] = function() {
            return (_PyEval_SetTrace = Module["_PyEval_SetTrace"] = Module["asm"]["PyEval_SetTrace"]).apply(null, arguments)
        }
        ;
        var __PyEval_SetCoroutineOriginTrackingDepth = Module["__PyEval_SetCoroutineOriginTrackingDepth"] = function() {
            return (__PyEval_SetCoroutineOriginTrackingDepth = Module["__PyEval_SetCoroutineOriginTrackingDepth"] = Module["asm"]["_PyEval_SetCoroutineOriginTrackingDepth"]).apply(null, arguments)
        }
        ;
        var __PyEval_GetCoroutineOriginTrackingDepth = Module["__PyEval_GetCoroutineOriginTrackingDepth"] = function() {
            return (__PyEval_GetCoroutineOriginTrackingDepth = Module["__PyEval_GetCoroutineOriginTrackingDepth"] = Module["asm"]["_PyEval_GetCoroutineOriginTrackingDepth"]).apply(null, arguments)
        }
        ;
        var __PyEval_SetAsyncGenFirstiter = Module["__PyEval_SetAsyncGenFirstiter"] = function() {
            return (__PyEval_SetAsyncGenFirstiter = Module["__PyEval_SetAsyncGenFirstiter"] = Module["asm"]["_PyEval_SetAsyncGenFirstiter"]).apply(null, arguments)
        }
        ;
        var __PyEval_GetAsyncGenFirstiter = Module["__PyEval_GetAsyncGenFirstiter"] = function() {
            return (__PyEval_GetAsyncGenFirstiter = Module["__PyEval_GetAsyncGenFirstiter"] = Module["asm"]["_PyEval_GetAsyncGenFirstiter"]).apply(null, arguments)
        }
        ;
        var __PyEval_SetAsyncGenFinalizer = Module["__PyEval_SetAsyncGenFinalizer"] = function() {
            return (__PyEval_SetAsyncGenFinalizer = Module["__PyEval_SetAsyncGenFinalizer"] = Module["asm"]["_PyEval_SetAsyncGenFinalizer"]).apply(null, arguments)
        }
        ;
        var __PyEval_GetAsyncGenFinalizer = Module["__PyEval_GetAsyncGenFinalizer"] = function() {
            return (__PyEval_GetAsyncGenFinalizer = Module["__PyEval_GetAsyncGenFinalizer"] = Module["asm"]["_PyEval_GetAsyncGenFinalizer"]).apply(null, arguments)
        }
        ;
        var _PyEval_GetFuncName = Module["_PyEval_GetFuncName"] = function() {
            return (_PyEval_GetFuncName = Module["_PyEval_GetFuncName"] = Module["asm"]["PyEval_GetFuncName"]).apply(null, arguments)
        }
        ;
        var _PyEval_GetFuncDesc = Module["_PyEval_GetFuncDesc"] = function() {
            return (_PyEval_GetFuncDesc = Module["_PyEval_GetFuncDesc"] = Module["asm"]["PyEval_GetFuncDesc"]).apply(null, arguments)
        }
        ;
        var __PyEval_RequestCodeExtraIndex = Module["__PyEval_RequestCodeExtraIndex"] = function() {
            return (__PyEval_RequestCodeExtraIndex = Module["__PyEval_RequestCodeExtraIndex"] = Module["asm"]["_PyEval_RequestCodeExtraIndex"]).apply(null, arguments)
        }
        ;
        var _PyCodec_Register = Module["_PyCodec_Register"] = function() {
            return (_PyCodec_Register = Module["_PyCodec_Register"] = Module["asm"]["PyCodec_Register"]).apply(null, arguments)
        }
        ;
        var _PyCodec_Unregister = Module["_PyCodec_Unregister"] = function() {
            return (_PyCodec_Unregister = Module["_PyCodec_Unregister"] = Module["asm"]["PyCodec_Unregister"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_Get = Module["_PyInterpreterState_Get"] = function() {
            return (_PyInterpreterState_Get = Module["_PyInterpreterState_Get"] = Module["asm"]["PyInterpreterState_Get"]).apply(null, arguments)
        }
        ;
        var _PyCodec_KnownEncoding = Module["_PyCodec_KnownEncoding"] = function() {
            return (_PyCodec_KnownEncoding = Module["_PyCodec_KnownEncoding"] = Module["asm"]["PyCodec_KnownEncoding"]).apply(null, arguments)
        }
        ;
        var __PyCodecInfo_GetIncrementalDecoder = Module["__PyCodecInfo_GetIncrementalDecoder"] = function() {
            return (__PyCodecInfo_GetIncrementalDecoder = Module["__PyCodecInfo_GetIncrementalDecoder"] = Module["asm"]["_PyCodecInfo_GetIncrementalDecoder"]).apply(null, arguments)
        }
        ;
        var __PyCodecInfo_GetIncrementalEncoder = Module["__PyCodecInfo_GetIncrementalEncoder"] = function() {
            return (__PyCodecInfo_GetIncrementalEncoder = Module["__PyCodecInfo_GetIncrementalEncoder"] = Module["asm"]["_PyCodecInfo_GetIncrementalEncoder"]).apply(null, arguments)
        }
        ;
        var _PyCodec_Encoder = Module["_PyCodec_Encoder"] = function() {
            return (_PyCodec_Encoder = Module["_PyCodec_Encoder"] = Module["asm"]["PyCodec_Encoder"]).apply(null, arguments)
        }
        ;
        var _PyCodec_Decoder = Module["_PyCodec_Decoder"] = function() {
            return (_PyCodec_Decoder = Module["_PyCodec_Decoder"] = Module["asm"]["PyCodec_Decoder"]).apply(null, arguments)
        }
        ;
        var _PyCodec_IncrementalEncoder = Module["_PyCodec_IncrementalEncoder"] = function() {
            return (_PyCodec_IncrementalEncoder = Module["_PyCodec_IncrementalEncoder"] = Module["asm"]["PyCodec_IncrementalEncoder"]).apply(null, arguments)
        }
        ;
        var _PyCodec_IncrementalDecoder = Module["_PyCodec_IncrementalDecoder"] = function() {
            return (_PyCodec_IncrementalDecoder = Module["_PyCodec_IncrementalDecoder"] = Module["asm"]["PyCodec_IncrementalDecoder"]).apply(null, arguments)
        }
        ;
        var _PyCodec_StreamReader = Module["_PyCodec_StreamReader"] = function() {
            return (_PyCodec_StreamReader = Module["_PyCodec_StreamReader"] = Module["asm"]["PyCodec_StreamReader"]).apply(null, arguments)
        }
        ;
        var _PyCodec_StreamWriter = Module["_PyCodec_StreamWriter"] = function() {
            return (_PyCodec_StreamWriter = Module["_PyCodec_StreamWriter"] = Module["asm"]["PyCodec_StreamWriter"]).apply(null, arguments)
        }
        ;
        var __PyCodec_LookupTextEncoding = Module["__PyCodec_LookupTextEncoding"] = function() {
            return (__PyCodec_LookupTextEncoding = Module["__PyCodec_LookupTextEncoding"] = Module["asm"]["_PyCodec_LookupTextEncoding"]).apply(null, arguments)
        }
        ;
        var _PyCodec_RegisterError = Module["_PyCodec_RegisterError"] = function() {
            return (_PyCodec_RegisterError = Module["_PyCodec_RegisterError"] = Module["asm"]["PyCodec_RegisterError"]).apply(null, arguments)
        }
        ;
        var _PyCodec_IgnoreErrors = Module["_PyCodec_IgnoreErrors"] = function() {
            return (_PyCodec_IgnoreErrors = Module["_PyCodec_IgnoreErrors"] = Module["asm"]["PyCodec_IgnoreErrors"]).apply(null, arguments)
        }
        ;
        var _PyCodec_ReplaceErrors = Module["_PyCodec_ReplaceErrors"] = function() {
            return (_PyCodec_ReplaceErrors = Module["_PyCodec_ReplaceErrors"] = Module["asm"]["PyCodec_ReplaceErrors"]).apply(null, arguments)
        }
        ;
        var _PyCodec_XMLCharRefReplaceErrors = Module["_PyCodec_XMLCharRefReplaceErrors"] = function() {
            return (_PyCodec_XMLCharRefReplaceErrors = Module["_PyCodec_XMLCharRefReplaceErrors"] = Module["asm"]["PyCodec_XMLCharRefReplaceErrors"]).apply(null, arguments)
        }
        ;
        var _PyCodec_BackslashReplaceErrors = Module["_PyCodec_BackslashReplaceErrors"] = function() {
            return (_PyCodec_BackslashReplaceErrors = Module["_PyCodec_BackslashReplaceErrors"] = Module["asm"]["PyCodec_BackslashReplaceErrors"]).apply(null, arguments)
        }
        ;
        var _PyCodec_NameReplaceErrors = Module["_PyCodec_NameReplaceErrors"] = function() {
            return (_PyCodec_NameReplaceErrors = Module["_PyCodec_NameReplaceErrors"] = Module["asm"]["PyCodec_NameReplaceErrors"]).apply(null, arguments)
        }
        ;
        var _PyCompile_OpcodeStackEffectWithJump = Module["_PyCompile_OpcodeStackEffectWithJump"] = function() {
            return (_PyCompile_OpcodeStackEffectWithJump = Module["_PyCompile_OpcodeStackEffectWithJump"] = Module["asm"]["PyCompile_OpcodeStackEffectWithJump"]).apply(null, arguments)
        }
        ;
        var _PyCompile_OpcodeStackEffect = Module["_PyCompile_OpcodeStackEffect"] = function() {
            return (_PyCompile_OpcodeStackEffect = Module["_PyCompile_OpcodeStackEffect"] = Module["asm"]["PyCompile_OpcodeStackEffect"]).apply(null, arguments)
        }
        ;
        var _PyCode_Optimize = Module["_PyCode_Optimize"] = function() {
            return (_PyCode_Optimize = Module["_PyCode_Optimize"] = Module["asm"]["PyCode_Optimize"]).apply(null, arguments)
        }
        ;
        var _PySymtable_Lookup = Module["_PySymtable_Lookup"] = function() {
            return (_PySymtable_Lookup = Module["_PySymtable_Lookup"] = Module["asm"]["PySymtable_Lookup"]).apply(null, arguments)
        }
        ;
        var _PyErr_ProgramTextObject = Module["_PyErr_ProgramTextObject"] = function() {
            return (_PyErr_ProgramTextObject = Module["_PyErr_ProgramTextObject"] = Module["asm"]["PyErr_ProgramTextObject"]).apply(null, arguments)
        }
        ;
        var __PyContext_NewHamtForTests = Module["__PyContext_NewHamtForTests"] = function() {
            return (__PyContext_NewHamtForTests = Module["__PyContext_NewHamtForTests"] = Module["asm"]["_PyContext_NewHamtForTests"]).apply(null, arguments)
        }
        ;
        var _PyContext_New = Module["_PyContext_New"] = function() {
            return (_PyContext_New = Module["_PyContext_New"] = Module["asm"]["PyContext_New"]).apply(null, arguments)
        }
        ;
        var _PyContext_Copy = Module["_PyContext_Copy"] = function() {
            return (_PyContext_Copy = Module["_PyContext_Copy"] = Module["asm"]["PyContext_Copy"]).apply(null, arguments)
        }
        ;
        var _PyContext_CopyCurrent = Module["_PyContext_CopyCurrent"] = function() {
            return (_PyContext_CopyCurrent = Module["_PyContext_CopyCurrent"] = Module["asm"]["PyContext_CopyCurrent"]).apply(null, arguments)
        }
        ;
        var _PyContext_Enter = Module["_PyContext_Enter"] = function() {
            return (_PyContext_Enter = Module["_PyContext_Enter"] = Module["asm"]["PyContext_Enter"]).apply(null, arguments)
        }
        ;
        var _PyContext_Exit = Module["_PyContext_Exit"] = function() {
            return (_PyContext_Exit = Module["_PyContext_Exit"] = Module["asm"]["PyContext_Exit"]).apply(null, arguments)
        }
        ;
        var _PyContextVar_New = Module["_PyContextVar_New"] = function() {
            return (_PyContextVar_New = Module["_PyContextVar_New"] = Module["asm"]["PyContextVar_New"]).apply(null, arguments)
        }
        ;
        var _PyContextVar_Get = Module["_PyContextVar_Get"] = function() {
            return (_PyContextVar_Get = Module["_PyContextVar_Get"] = Module["asm"]["PyContextVar_Get"]).apply(null, arguments)
        }
        ;
        var _PyContextVar_Set = Module["_PyContextVar_Set"] = function() {
            return (_PyContextVar_Set = Module["_PyContextVar_Set"] = Module["asm"]["PyContextVar_Set"]).apply(null, arguments)
        }
        ;
        var _PyContextVar_Reset = Module["_PyContextVar_Reset"] = function() {
            return (_PyContextVar_Reset = Module["_PyContextVar_Reset"] = Module["asm"]["PyContextVar_Reset"]).apply(null, arguments)
        }
        ;
        var __PyErr_GetExcInfo = Module["__PyErr_GetExcInfo"] = function() {
            return (__PyErr_GetExcInfo = Module["__PyErr_GetExcInfo"] = Module["asm"]["_PyErr_GetExcInfo"]).apply(null, arguments)
        }
        ;
        var _PyErr_GetExcInfo = Module["_PyErr_GetExcInfo"] = function() {
            return (_PyErr_GetExcInfo = Module["_PyErr_GetExcInfo"] = Module["asm"]["PyErr_GetExcInfo"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetExcInfo = Module["_PyErr_SetExcInfo"] = function() {
            return (_PyErr_SetExcInfo = Module["_PyErr_SetExcInfo"] = Module["asm"]["PyErr_SetExcInfo"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetFromErrnoWithFilenameObject = Module["_PyErr_SetFromErrnoWithFilenameObject"] = function() {
            return (_PyErr_SetFromErrnoWithFilenameObject = Module["_PyErr_SetFromErrnoWithFilenameObject"] = Module["asm"]["PyErr_SetFromErrnoWithFilenameObject"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetFromErrnoWithFilenameObjects = Module["_PyErr_SetFromErrnoWithFilenameObjects"] = function() {
            return (_PyErr_SetFromErrnoWithFilenameObjects = Module["_PyErr_SetFromErrnoWithFilenameObjects"] = Module["asm"]["PyErr_SetFromErrnoWithFilenameObjects"]).apply(null, arguments)
        }
        ;
        var _strerror = Module["_strerror"] = function() {
            return (_strerror = Module["_strerror"] = Module["asm"]["strerror"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetImportErrorSubclass = Module["_PyErr_SetImportErrorSubclass"] = function() {
            return (_PyErr_SetImportErrorSubclass = Module["_PyErr_SetImportErrorSubclass"] = Module["asm"]["PyErr_SetImportErrorSubclass"]).apply(null, arguments)
        }
        ;
        var _PyErr_BadInternalCall = Module["_PyErr_BadInternalCall"] = function() {
            return (_PyErr_BadInternalCall = Module["_PyErr_BadInternalCall"] = Module["asm"]["PyErr_BadInternalCall"]).apply(null, arguments)
        }
        ;
        var _PyErr_FormatV = Module["_PyErr_FormatV"] = function() {
            return (_PyErr_FormatV = Module["_PyErr_FormatV"] = Module["asm"]["PyErr_FormatV"]).apply(null, arguments)
        }
        ;
        var _PyTraceBack_Print = Module["_PyTraceBack_Print"] = function() {
            return (_PyTraceBack_Print = Module["_PyTraceBack_Print"] = Module["asm"]["PyTraceBack_Print"]).apply(null, arguments)
        }
        ;
        var _PyErr_SyntaxLocation = Module["_PyErr_SyntaxLocation"] = function() {
            return (_PyErr_SyntaxLocation = Module["_PyErr_SyntaxLocation"] = Module["asm"]["PyErr_SyntaxLocation"]).apply(null, arguments)
        }
        ;
        var _PyErr_SyntaxLocationEx = Module["_PyErr_SyntaxLocationEx"] = function() {
            return (_PyErr_SyntaxLocationEx = Module["_PyErr_SyntaxLocationEx"] = Module["asm"]["PyErr_SyntaxLocationEx"]).apply(null, arguments)
        }
        ;
        var _PyErr_SyntaxLocationObject = Module["_PyErr_SyntaxLocationObject"] = function() {
            return (_PyErr_SyntaxLocationObject = Module["_PyErr_SyntaxLocationObject"] = Module["asm"]["PyErr_SyntaxLocationObject"]).apply(null, arguments)
        }
        ;
        var _PyErr_RangedSyntaxLocationObject = Module["_PyErr_RangedSyntaxLocationObject"] = function() {
            return (_PyErr_RangedSyntaxLocationObject = Module["_PyErr_RangedSyntaxLocationObject"] = Module["asm"]["PyErr_RangedSyntaxLocationObject"]).apply(null, arguments)
        }
        ;
        var _PyErr_ProgramText = Module["_PyErr_ProgramText"] = function() {
            return (_PyErr_ProgramText = Module["_PyErr_ProgramText"] = Module["asm"]["PyErr_ProgramText"]).apply(null, arguments)
        }
        ;
        var __Py_fopen_obj = Module["__Py_fopen_obj"] = function() {
            return (__Py_fopen_obj = Module["__Py_fopen_obj"] = Module["asm"]["_Py_fopen_obj"]).apply(null, arguments)
        }
        ;
        var _Py_FrozenMain = Module["_Py_FrozenMain"] = function() {
            return (_Py_FrozenMain = Module["_Py_FrozenMain"] = Module["asm"]["Py_FrozenMain"]).apply(null, arguments)
        }
        ;
        var __PyRuntime_Initialize = Module["__PyRuntime_Initialize"] = function() {
            return (__PyRuntime_Initialize = Module["__PyRuntime_Initialize"] = Module["asm"]["_PyRuntime_Initialize"]).apply(null, arguments)
        }
        ;
        var _getenv = Module["_getenv"] = function() {
            return (_getenv = Module["_getenv"] = Module["asm"]["getenv"]).apply(null, arguments)
        }
        ;
        var _setbuf = Module["_setbuf"] = function() {
            return (_setbuf = Module["_setbuf"] = Module["asm"]["setbuf"]).apply(null, arguments)
        }
        ;
        var _setlocale = Module["_setlocale"] = function() {
            return (_setlocale = Module["_setlocale"] = Module["asm"]["setlocale"]).apply(null, arguments)
        }
        ;
        var _Py_DecodeLocale = Module["_Py_DecodeLocale"] = function() {
            return (_Py_DecodeLocale = Module["_Py_DecodeLocale"] = Module["asm"]["Py_DecodeLocale"]).apply(null, arguments)
        }
        ;
        var _Py_SetProgramName = Module["_Py_SetProgramName"] = function() {
            return (_Py_SetProgramName = Module["_Py_SetProgramName"] = Module["asm"]["Py_SetProgramName"]).apply(null, arguments)
        }
        ;
        var _Py_GetVersion = Module["_Py_GetVersion"] = function() {
            return (_Py_GetVersion = Module["_Py_GetVersion"] = Module["asm"]["Py_GetVersion"]).apply(null, arguments)
        }
        ;
        var _Py_GetCopyright = Module["_Py_GetCopyright"] = function() {
            return (_Py_GetCopyright = Module["_Py_GetCopyright"] = Module["asm"]["Py_GetCopyright"]).apply(null, arguments)
        }
        ;
        var _PySys_SetArgv = Module["_PySys_SetArgv"] = function() {
            return (_PySys_SetArgv = Module["_PySys_SetArgv"] = Module["asm"]["PySys_SetArgv"]).apply(null, arguments)
        }
        ;
        var _PyImport_ImportFrozenModule = Module["_PyImport_ImportFrozenModule"] = function() {
            return (_PyImport_ImportFrozenModule = Module["_PyImport_ImportFrozenModule"] = Module["asm"]["PyImport_ImportFrozenModule"]).apply(null, arguments)
        }
        ;
        var _PyRun_AnyFileExFlags = Module["_PyRun_AnyFileExFlags"] = function() {
            return (_PyRun_AnyFileExFlags = Module["_PyRun_AnyFileExFlags"] = Module["asm"]["PyRun_AnyFileExFlags"]).apply(null, arguments)
        }
        ;
        var _Py_FinalizeEx = Module["_Py_FinalizeEx"] = function() {
            return (_Py_FinalizeEx = Module["_Py_FinalizeEx"] = Module["asm"]["Py_FinalizeEx"]).apply(null, arguments)
        }
        ;
        var _PyArg_Parse = Module["_PyArg_Parse"] = function() {
            return (_PyArg_Parse = Module["_PyArg_Parse"] = Module["asm"]["PyArg_Parse"]).apply(null, arguments)
        }
        ;
        var __PyArg_Parse_SizeT = Module["__PyArg_Parse_SizeT"] = function() {
            return (__PyArg_Parse_SizeT = Module["__PyArg_Parse_SizeT"] = Module["asm"]["_PyArg_Parse_SizeT"]).apply(null, arguments)
        }
        ;
        var __PyArg_ParseStack = Module["__PyArg_ParseStack"] = function() {
            return (__PyArg_ParseStack = Module["__PyArg_ParseStack"] = Module["asm"]["_PyArg_ParseStack"]).apply(null, arguments)
        }
        ;
        var __PyArg_ParseStack_SizeT = Module["__PyArg_ParseStack_SizeT"] = function() {
            return (__PyArg_ParseStack_SizeT = Module["__PyArg_ParseStack_SizeT"] = Module["asm"]["_PyArg_ParseStack_SizeT"]).apply(null, arguments)
        }
        ;
        var _PyArg_VaParse = Module["_PyArg_VaParse"] = function() {
            return (_PyArg_VaParse = Module["_PyArg_VaParse"] = Module["asm"]["PyArg_VaParse"]).apply(null, arguments)
        }
        ;
        var __PyArg_VaParse_SizeT = Module["__PyArg_VaParse_SizeT"] = function() {
            return (__PyArg_VaParse_SizeT = Module["__PyArg_VaParse_SizeT"] = Module["asm"]["_PyArg_VaParse_SizeT"]).apply(null, arguments)
        }
        ;
        var _PyArg_VaParseTupleAndKeywords = Module["_PyArg_VaParseTupleAndKeywords"] = function() {
            return (_PyArg_VaParseTupleAndKeywords = Module["_PyArg_VaParseTupleAndKeywords"] = Module["asm"]["PyArg_VaParseTupleAndKeywords"]).apply(null, arguments)
        }
        ;
        var __PyArg_VaParseTupleAndKeywords_SizeT = Module["__PyArg_VaParseTupleAndKeywords_SizeT"] = function() {
            return (__PyArg_VaParseTupleAndKeywords_SizeT = Module["__PyArg_VaParseTupleAndKeywords_SizeT"] = Module["asm"]["_PyArg_VaParseTupleAndKeywords_SizeT"]).apply(null, arguments)
        }
        ;
        var __PyArg_ParseTupleAndKeywordsFast = Module["__PyArg_ParseTupleAndKeywordsFast"] = function() {
            return (__PyArg_ParseTupleAndKeywordsFast = Module["__PyArg_ParseTupleAndKeywordsFast"] = Module["asm"]["_PyArg_ParseTupleAndKeywordsFast"]).apply(null, arguments)
        }
        ;
        var __PyArg_ParseTupleAndKeywordsFast_SizeT = Module["__PyArg_ParseTupleAndKeywordsFast_SizeT"] = function() {
            return (__PyArg_ParseTupleAndKeywordsFast_SizeT = Module["__PyArg_ParseTupleAndKeywordsFast_SizeT"] = Module["asm"]["_PyArg_ParseTupleAndKeywordsFast_SizeT"]).apply(null, arguments)
        }
        ;
        var __PyArg_VaParseTupleAndKeywordsFast = Module["__PyArg_VaParseTupleAndKeywordsFast"] = function() {
            return (__PyArg_VaParseTupleAndKeywordsFast = Module["__PyArg_VaParseTupleAndKeywordsFast"] = Module["asm"]["_PyArg_VaParseTupleAndKeywordsFast"]).apply(null, arguments)
        }
        ;
        var __PyArg_VaParseTupleAndKeywordsFast_SizeT = Module["__PyArg_VaParseTupleAndKeywordsFast_SizeT"] = function() {
            return (__PyArg_VaParseTupleAndKeywordsFast_SizeT = Module["__PyArg_VaParseTupleAndKeywordsFast_SizeT"] = Module["asm"]["_PyArg_VaParseTupleAndKeywordsFast_SizeT"]).apply(null, arguments)
        }
        ;
        var __PyArg_NoPositional = Module["__PyArg_NoPositional"] = function() {
            return (__PyArg_NoPositional = Module["__PyArg_NoPositional"] = Module["asm"]["_PyArg_NoPositional"]).apply(null, arguments)
        }
        ;
        var _Py_GetCompiler = Module["_Py_GetCompiler"] = function() {
            return (_Py_GetCompiler = Module["_Py_GetCompiler"] = Module["asm"]["Py_GetCompiler"]).apply(null, arguments)
        }
        ;
        var _Py_GetPlatform = Module["_Py_GetPlatform"] = function() {
            return (_Py_GetPlatform = Module["_Py_GetPlatform"] = Module["asm"]["Py_GetPlatform"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_hash_ptr = Module["__Py_hashtable_hash_ptr"] = function() {
            return (__Py_hashtable_hash_ptr = Module["__Py_hashtable_hash_ptr"] = Module["asm"]["_Py_hashtable_hash_ptr"]).apply(null, arguments)
        }
        ;
        var __Py_HashPointerRaw = Module["__Py_HashPointerRaw"] = function() {
            return (__Py_HashPointerRaw = Module["__Py_HashPointerRaw"] = Module["asm"]["_Py_HashPointerRaw"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_compare_direct = Module["__Py_hashtable_compare_direct"] = function() {
            return (__Py_hashtable_compare_direct = Module["__Py_hashtable_compare_direct"] = Module["asm"]["_Py_hashtable_compare_direct"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_size = Module["__Py_hashtable_size"] = function() {
            return (__Py_hashtable_size = Module["__Py_hashtable_size"] = Module["asm"]["_Py_hashtable_size"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_steal = Module["__Py_hashtable_steal"] = function() {
            return (__Py_hashtable_steal = Module["__Py_hashtable_steal"] = Module["asm"]["_Py_hashtable_steal"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_set = Module["__Py_hashtable_set"] = function() {
            return (__Py_hashtable_set = Module["__Py_hashtable_set"] = Module["asm"]["_Py_hashtable_set"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_get = Module["__Py_hashtable_get"] = function() {
            return (__Py_hashtable_get = Module["__Py_hashtable_get"] = Module["asm"]["_Py_hashtable_get"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_foreach = Module["__Py_hashtable_foreach"] = function() {
            return (__Py_hashtable_foreach = Module["__Py_hashtable_foreach"] = Module["asm"]["_Py_hashtable_foreach"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_new_full = Module["__Py_hashtable_new_full"] = function() {
            return (__Py_hashtable_new_full = Module["__Py_hashtable_new_full"] = Module["asm"]["_Py_hashtable_new_full"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_new = Module["__Py_hashtable_new"] = function() {
            return (__Py_hashtable_new = Module["__Py_hashtable_new"] = Module["asm"]["_Py_hashtable_new"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_clear = Module["__Py_hashtable_clear"] = function() {
            return (__Py_hashtable_clear = Module["__Py_hashtable_clear"] = Module["asm"]["_Py_hashtable_clear"]).apply(null, arguments)
        }
        ;
        var __Py_hashtable_destroy = Module["__Py_hashtable_destroy"] = function() {
            return (__Py_hashtable_destroy = Module["__Py_hashtable_destroy"] = Module["asm"]["_Py_hashtable_destroy"]).apply(null, arguments)
        }
        ;
        var __PyImport_AcquireLock = Module["__PyImport_AcquireLock"] = function() {
            return (__PyImport_AcquireLock = Module["__PyImport_AcquireLock"] = Module["asm"]["_PyImport_AcquireLock"]).apply(null, arguments)
        }
        ;
        var __PyImport_ReleaseLock = Module["__PyImport_ReleaseLock"] = function() {
            return (__PyImport_ReleaseLock = Module["__PyImport_ReleaseLock"] = Module["asm"]["_PyImport_ReleaseLock"]).apply(null, arguments)
        }
        ;
        var __PyImport_GetModuleId = Module["__PyImport_GetModuleId"] = function() {
            return (__PyImport_GetModuleId = Module["__PyImport_GetModuleId"] = Module["asm"]["_PyImport_GetModuleId"]).apply(null, arguments)
        }
        ;
        var __PyImport_SetModule = Module["__PyImport_SetModule"] = function() {
            return (__PyImport_SetModule = Module["__PyImport_SetModule"] = Module["asm"]["_PyImport_SetModule"]).apply(null, arguments)
        }
        ;
        var __PyImport_SetModuleString = Module["__PyImport_SetModuleString"] = function() {
            return (__PyImport_SetModuleString = Module["__PyImport_SetModuleString"] = Module["asm"]["_PyImport_SetModuleString"]).apply(null, arguments)
        }
        ;
        var _PyImport_GetMagicNumber = Module["_PyImport_GetMagicNumber"] = function() {
            return (_PyImport_GetMagicNumber = Module["_PyImport_GetMagicNumber"] = Module["asm"]["PyImport_GetMagicNumber"]).apply(null, arguments)
        }
        ;
        var _PyImport_GetMagicTag = Module["_PyImport_GetMagicTag"] = function() {
            return (_PyImport_GetMagicTag = Module["_PyImport_GetMagicTag"] = Module["asm"]["PyImport_GetMagicTag"]).apply(null, arguments)
        }
        ;
        var __PyImport_FixupExtensionObject = Module["__PyImport_FixupExtensionObject"] = function() {
            return (__PyImport_FixupExtensionObject = Module["__PyImport_FixupExtensionObject"] = Module["asm"]["_PyImport_FixupExtensionObject"]).apply(null, arguments)
        }
        ;
        var __PyState_AddModule = Module["__PyState_AddModule"] = function() {
            return (__PyState_AddModule = Module["__PyState_AddModule"] = Module["asm"]["_PyState_AddModule"]).apply(null, arguments)
        }
        ;
        var __PyImport_FixupBuiltin = Module["__PyImport_FixupBuiltin"] = function() {
            return (__PyImport_FixupBuiltin = Module["__PyImport_FixupBuiltin"] = Module["asm"]["_PyImport_FixupBuiltin"]).apply(null, arguments)
        }
        ;
        var __PyImport_FindExtensionObject = Module["__PyImport_FindExtensionObject"] = function() {
            return (__PyImport_FindExtensionObject = Module["__PyImport_FindExtensionObject"] = Module["asm"]["_PyImport_FindExtensionObject"]).apply(null, arguments)
        }
        ;
        var _PyImport_AddModuleObject = Module["_PyImport_AddModuleObject"] = function() {
            return (_PyImport_AddModuleObject = Module["_PyImport_AddModuleObject"] = Module["asm"]["PyImport_AddModuleObject"]).apply(null, arguments)
        }
        ;
        var _PyImport_AddModule = Module["_PyImport_AddModule"] = function() {
            return (_PyImport_AddModule = Module["_PyImport_AddModule"] = Module["asm"]["PyImport_AddModule"]).apply(null, arguments)
        }
        ;
        var _PyImport_ExecCodeModule = Module["_PyImport_ExecCodeModule"] = function() {
            return (_PyImport_ExecCodeModule = Module["_PyImport_ExecCodeModule"] = Module["asm"]["PyImport_ExecCodeModule"]).apply(null, arguments)
        }
        ;
        var _PyImport_ExecCodeModuleObject = Module["_PyImport_ExecCodeModuleObject"] = function() {
            return (_PyImport_ExecCodeModuleObject = Module["_PyImport_ExecCodeModuleObject"] = Module["asm"]["PyImport_ExecCodeModuleObject"]).apply(null, arguments)
        }
        ;
        var _PyImport_ExecCodeModuleWithPathnames = Module["_PyImport_ExecCodeModuleWithPathnames"] = function() {
            return (_PyImport_ExecCodeModuleWithPathnames = Module["_PyImport_ExecCodeModuleWithPathnames"] = Module["asm"]["PyImport_ExecCodeModuleWithPathnames"]).apply(null, arguments)
        }
        ;
        var _PyImport_ExecCodeModuleEx = Module["_PyImport_ExecCodeModuleEx"] = function() {
            return (_PyImport_ExecCodeModuleEx = Module["_PyImport_ExecCodeModuleEx"] = Module["asm"]["PyImport_ExecCodeModuleEx"]).apply(null, arguments)
        }
        ;
        var _PyImport_GetImporter = Module["_PyImport_GetImporter"] = function() {
            return (_PyImport_GetImporter = Module["_PyImport_GetImporter"] = Module["asm"]["PyImport_GetImporter"]).apply(null, arguments)
        }
        ;
        var _PyImport_ImportFrozenModuleObject = Module["_PyImport_ImportFrozenModuleObject"] = function() {
            return (_PyImport_ImportFrozenModuleObject = Module["_PyImport_ImportFrozenModuleObject"] = Module["asm"]["PyImport_ImportFrozenModuleObject"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_ReadObjectFromString = Module["_PyMarshal_ReadObjectFromString"] = function() {
            return (_PyMarshal_ReadObjectFromString = Module["_PyMarshal_ReadObjectFromString"] = Module["asm"]["PyMarshal_ReadObjectFromString"]).apply(null, arguments)
        }
        ;
        var __PyTime_GetPerfCounter = Module["__PyTime_GetPerfCounter"] = function() {
            return (__PyTime_GetPerfCounter = Module["__PyTime_GetPerfCounter"] = Module["asm"]["_PyTime_GetPerfCounter"]).apply(null, arguments)
        }
        ;
        var __PyTime_AsMicroseconds = Module["__PyTime_AsMicroseconds"] = function() {
            return (__PyTime_AsMicroseconds = Module["__PyTime_AsMicroseconds"] = Module["asm"]["_PyTime_AsMicroseconds"]).apply(null, arguments)
        }
        ;
        var _PyImport_ImportModuleLevel = Module["_PyImport_ImportModuleLevel"] = function() {
            return (_PyImport_ImportModuleLevel = Module["_PyImport_ImportModuleLevel"] = Module["asm"]["PyImport_ImportModuleLevel"]).apply(null, arguments)
        }
        ;
        var _PyImport_ReloadModule = Module["_PyImport_ReloadModule"] = function() {
            return (_PyImport_ReloadModule = Module["_PyImport_ReloadModule"] = Module["asm"]["PyImport_ReloadModule"]).apply(null, arguments)
        }
        ;
        var _PyInit__imp = Module["_PyInit__imp"] = function() {
            return (_PyInit__imp = Module["_PyInit__imp"] = Module["asm"]["PyInit__imp"]).apply(null, arguments)
        }
        ;
        var _PyImport_ExtendInittab = Module["_PyImport_ExtendInittab"] = function() {
            return (_PyImport_ExtendInittab = Module["_PyImport_ExtendInittab"] = Module["asm"]["PyImport_ExtendInittab"]).apply(null, arguments)
        }
        ;
        var _PyImport_AppendInittab = Module["_PyImport_AppendInittab"] = function() {
            return (_PyImport_AppendInittab = Module["_PyImport_AppendInittab"] = Module["asm"]["PyImport_AppendInittab"]).apply(null, arguments)
        }
        ;
        var _PyStatus_Ok = Module["_PyStatus_Ok"] = function() {
            return (_PyStatus_Ok = Module["_PyStatus_Ok"] = Module["asm"]["PyStatus_Ok"]).apply(null, arguments)
        }
        ;
        var _PyStatus_Error = Module["_PyStatus_Error"] = function() {
            return (_PyStatus_Error = Module["_PyStatus_Error"] = Module["asm"]["PyStatus_Error"]).apply(null, arguments)
        }
        ;
        var _PyStatus_NoMemory = Module["_PyStatus_NoMemory"] = function() {
            return (_PyStatus_NoMemory = Module["_PyStatus_NoMemory"] = Module["asm"]["PyStatus_NoMemory"]).apply(null, arguments)
        }
        ;
        var _PyStatus_Exit = Module["_PyStatus_Exit"] = function() {
            return (_PyStatus_Exit = Module["_PyStatus_Exit"] = Module["asm"]["PyStatus_Exit"]).apply(null, arguments)
        }
        ;
        var _PyStatus_IsError = Module["_PyStatus_IsError"] = function() {
            return (_PyStatus_IsError = Module["_PyStatus_IsError"] = Module["asm"]["PyStatus_IsError"]).apply(null, arguments)
        }
        ;
        var _PyStatus_IsExit = Module["_PyStatus_IsExit"] = function() {
            return (_PyStatus_IsExit = Module["_PyStatus_IsExit"] = Module["asm"]["PyStatus_IsExit"]).apply(null, arguments)
        }
        ;
        var __PyWideStringList_Clear = Module["__PyWideStringList_Clear"] = function() {
            return (__PyWideStringList_Clear = Module["__PyWideStringList_Clear"] = Module["asm"]["_PyWideStringList_Clear"]).apply(null, arguments)
        }
        ;
        var __PyWideStringList_Copy = Module["__PyWideStringList_Copy"] = function() {
            return (__PyWideStringList_Copy = Module["__PyWideStringList_Copy"] = Module["asm"]["_PyWideStringList_Copy"]).apply(null, arguments)
        }
        ;
        var _PyWideStringList_Insert = Module["_PyWideStringList_Insert"] = function() {
            return (_PyWideStringList_Insert = Module["_PyWideStringList_Insert"] = Module["asm"]["PyWideStringList_Insert"]).apply(null, arguments)
        }
        ;
        var _PyWideStringList_Append = Module["_PyWideStringList_Append"] = function() {
            return (_PyWideStringList_Append = Module["_PyWideStringList_Append"] = Module["asm"]["PyWideStringList_Append"]).apply(null, arguments)
        }
        ;
        var __PyWideStringList_Extend = Module["__PyWideStringList_Extend"] = function() {
            return (__PyWideStringList_Extend = Module["__PyWideStringList_Extend"] = Module["asm"]["_PyWideStringList_Extend"]).apply(null, arguments)
        }
        ;
        var __PyWideStringList_AsList = Module["__PyWideStringList_AsList"] = function() {
            return (__PyWideStringList_AsList = Module["__PyWideStringList_AsList"] = Module["asm"]["_PyWideStringList_AsList"]).apply(null, arguments)
        }
        ;
        var _Py_SetStandardStreamEncoding = Module["_Py_SetStandardStreamEncoding"] = function() {
            return (_Py_SetStandardStreamEncoding = Module["_Py_SetStandardStreamEncoding"] = Module["asm"]["Py_SetStandardStreamEncoding"]).apply(null, arguments)
        }
        ;
        var __Py_ClearStandardStreamEncoding = Module["__Py_ClearStandardStreamEncoding"] = function() {
            return (__Py_ClearStandardStreamEncoding = Module["__Py_ClearStandardStreamEncoding"] = Module["asm"]["_Py_ClearStandardStreamEncoding"]).apply(null, arguments)
        }
        ;
        var __Py_ClearArgcArgv = Module["__Py_ClearArgcArgv"] = function() {
            return (__Py_ClearArgcArgv = Module["__Py_ClearArgcArgv"] = Module["asm"]["_Py_ClearArgcArgv"]).apply(null, arguments)
        }
        ;
        var _Py_GetArgcArgv = Module["_Py_GetArgcArgv"] = function() {
            return (_Py_GetArgcArgv = Module["_Py_GetArgcArgv"] = Module["asm"]["Py_GetArgcArgv"]).apply(null, arguments)
        }
        ;
        var __PyConfig_InitCompatConfig = Module["__PyConfig_InitCompatConfig"] = function() {
            return (__PyConfig_InitCompatConfig = Module["__PyConfig_InitCompatConfig"] = Module["asm"]["_PyConfig_InitCompatConfig"]).apply(null, arguments)
        }
        ;
        var _PyConfig_InitIsolatedConfig = Module["_PyConfig_InitIsolatedConfig"] = function() {
            return (_PyConfig_InitIsolatedConfig = Module["_PyConfig_InitIsolatedConfig"] = Module["asm"]["PyConfig_InitIsolatedConfig"]).apply(null, arguments)
        }
        ;
        var _PyConfig_SetString = Module["_PyConfig_SetString"] = function() {
            return (_PyConfig_SetString = Module["_PyConfig_SetString"] = Module["asm"]["PyConfig_SetString"]).apply(null, arguments)
        }
        ;
        var __Py_PreInitializeFromConfig = Module["__Py_PreInitializeFromConfig"] = function() {
            return (__Py_PreInitializeFromConfig = Module["__Py_PreInitializeFromConfig"] = Module["asm"]["_Py_PreInitializeFromConfig"]).apply(null, arguments)
        }
        ;
        var __PyConfig_AsDict = Module["__PyConfig_AsDict"] = function() {
            return (__PyConfig_AsDict = Module["__PyConfig_AsDict"] = Module["asm"]["_PyConfig_AsDict"]).apply(null, arguments)
        }
        ;
        var __PyConfig_FromDict = Module["__PyConfig_FromDict"] = function() {
            return (__PyConfig_FromDict = Module["__PyConfig_FromDict"] = Module["asm"]["_PyConfig_FromDict"]).apply(null, arguments)
        }
        ;
        var _setvbuf = Module["_setvbuf"] = function() {
            return (_setvbuf = Module["_setvbuf"] = Module["asm"]["setvbuf"]).apply(null, arguments)
        }
        ;
        var __PyArgv_AsWstrList = Module["__PyArgv_AsWstrList"] = function() {
            return (__PyArgv_AsWstrList = Module["__PyArgv_AsWstrList"] = Module["asm"]["_PyArgv_AsWstrList"]).apply(null, arguments)
        }
        ;
        var _PyConfig_SetArgv = Module["_PyConfig_SetArgv"] = function() {
            return (_PyConfig_SetArgv = Module["_PyConfig_SetArgv"] = Module["asm"]["PyConfig_SetArgv"]).apply(null, arguments)
        }
        ;
        var _PyConfig_SetWideStringList = Module["_PyConfig_SetWideStringList"] = function() {
            return (_PyConfig_SetWideStringList = Module["_PyConfig_SetWideStringList"] = Module["asm"]["PyConfig_SetWideStringList"]).apply(null, arguments)
        }
        ;
        var _iprintf = Module["_iprintf"] = function() {
            return (_iprintf = Module["_iprintf"] = Module["asm"]["iprintf"]).apply(null, arguments)
        }
        ;
        var __Py_isabs = Module["__Py_isabs"] = function() {
            return (__Py_isabs = Module["__Py_isabs"] = Module["asm"]["_Py_isabs"]).apply(null, arguments)
        }
        ;
        var __Py_abspath = Module["__Py_abspath"] = function() {
            return (__Py_abspath = Module["__Py_abspath"] = Module["asm"]["_Py_abspath"]).apply(null, arguments)
        }
        ;
        var _wcstok = Module["_wcstok"] = function() {
            return (_wcstok = Module["_wcstok"] = Module["asm"]["wcstok"]).apply(null, arguments)
        }
        ;
        var __Py_get_env_flag = Module["__Py_get_env_flag"] = function() {
            return (__Py_get_env_flag = Module["__Py_get_env_flag"] = Module["asm"]["_Py_get_env_flag"]).apply(null, arguments)
        }
        ;
        var __Py_GetEnv = Module["__Py_GetEnv"] = function() {
            return (__Py_GetEnv = Module["__Py_GetEnv"] = Module["asm"]["_Py_GetEnv"]).apply(null, arguments)
        }
        ;
        var _strtoul = Module["_strtoul"] = function() {
            return (_strtoul = Module["_strtoul"] = Module["asm"]["strtoul"]).apply(null, arguments)
        }
        ;
        var __Py_get_xoption = Module["__Py_get_xoption"] = function() {
            return (__Py_get_xoption = Module["__Py_get_xoption"] = Module["asm"]["_Py_get_xoption"]).apply(null, arguments)
        }
        ;
        var __Py_str_to_int = Module["__Py_str_to_int"] = function() {
            return (__Py_str_to_int = Module["__Py_str_to_int"] = Module["asm"]["_Py_str_to_int"]).apply(null, arguments)
        }
        ;
        var _wcschr = Module["_wcschr"] = function() {
            return (_wcschr = Module["_wcschr"] = Module["asm"]["wcschr"]).apply(null, arguments)
        }
        ;
        var _wcstol = Module["_wcstol"] = function() {
            return (_wcstol = Module["_wcstol"] = Module["asm"]["wcstol"]).apply(null, arguments)
        }
        ;
        var __Py_GetForceASCII = Module["__Py_GetForceASCII"] = function() {
            return (__Py_GetForceASCII = Module["__Py_GetForceASCII"] = Module["asm"]["_Py_GetForceASCII"]).apply(null, arguments)
        }
        ;
        var __Py_GetLocaleEncoding = Module["__Py_GetLocaleEncoding"] = function() {
            return (__Py_GetLocaleEncoding = Module["__Py_GetLocaleEncoding"] = Module["asm"]["_Py_GetLocaleEncoding"]).apply(null, arguments)
        }
        ;
        var __Py_IsLocaleCoercionTarget = Module["__Py_IsLocaleCoercionTarget"] = function() {
            return (__Py_IsLocaleCoercionTarget = Module["__Py_IsLocaleCoercionTarget"] = Module["asm"]["_Py_IsLocaleCoercionTarget"]).apply(null, arguments)
        }
        ;
        var _PyConfig_Read = Module["_PyConfig_Read"] = function() {
            return (_PyConfig_Read = Module["_PyConfig_Read"] = Module["asm"]["PyConfig_Read"]).apply(null, arguments)
        }
        ;
        var __Py_GetConfigsAsDict = Module["__Py_GetConfigsAsDict"] = function() {
            return (__Py_GetConfigsAsDict = Module["__Py_GetConfigsAsDict"] = Module["asm"]["_Py_GetConfigsAsDict"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_WriteLongToFile = Module["_PyMarshal_WriteLongToFile"] = function() {
            return (_PyMarshal_WriteLongToFile = Module["_PyMarshal_WriteLongToFile"] = Module["asm"]["PyMarshal_WriteLongToFile"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_WriteObjectToFile = Module["_PyMarshal_WriteObjectToFile"] = function() {
            return (_PyMarshal_WriteObjectToFile = Module["_PyMarshal_WriteObjectToFile"] = Module["asm"]["PyMarshal_WriteObjectToFile"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_ReadShortFromFile = Module["_PyMarshal_ReadShortFromFile"] = function() {
            return (_PyMarshal_ReadShortFromFile = Module["_PyMarshal_ReadShortFromFile"] = Module["asm"]["PyMarshal_ReadShortFromFile"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_ReadLongFromFile = Module["_PyMarshal_ReadLongFromFile"] = function() {
            return (_PyMarshal_ReadLongFromFile = Module["_PyMarshal_ReadLongFromFile"] = Module["asm"]["PyMarshal_ReadLongFromFile"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_ReadLastObjectFromFile = Module["_PyMarshal_ReadLastObjectFromFile"] = function() {
            return (_PyMarshal_ReadLastObjectFromFile = Module["_PyMarshal_ReadLastObjectFromFile"] = Module["asm"]["PyMarshal_ReadLastObjectFromFile"]).apply(null, arguments)
        }
        ;
        var __Py_fstat_noraise = Module["__Py_fstat_noraise"] = function() {
            return (__Py_fstat_noraise = Module["__Py_fstat_noraise"] = Module["asm"]["_Py_fstat_noraise"]).apply(null, arguments)
        }
        ;
        var _fread = Module["_fread"] = function() {
            return (_fread = Module["_fread"] = Module["asm"]["fread"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_ReadObjectFromFile = Module["_PyMarshal_ReadObjectFromFile"] = function() {
            return (_PyMarshal_ReadObjectFromFile = Module["_PyMarshal_ReadObjectFromFile"] = Module["asm"]["PyMarshal_ReadObjectFromFile"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_WriteObjectToString = Module["_PyMarshal_WriteObjectToString"] = function() {
            return (_PyMarshal_WriteObjectToString = Module["_PyMarshal_WriteObjectToString"] = Module["asm"]["PyMarshal_WriteObjectToString"]).apply(null, arguments)
        }
        ;
        var _PyMarshal_Init = Module["_PyMarshal_Init"] = function() {
            return (_PyMarshal_Init = Module["_PyMarshal_Init"] = Module["asm"]["PyMarshal_Init"]).apply(null, arguments)
        }
        ;
        var __Py_convert_optional_to_ssize_t = Module["__Py_convert_optional_to_ssize_t"] = function() {
            return (__Py_convert_optional_to_ssize_t = Module["__Py_convert_optional_to_ssize_t"] = Module["asm"]["_Py_convert_optional_to_ssize_t"]).apply(null, arguments)
        }
        ;
        var _Py_VaBuildValue = Module["_Py_VaBuildValue"] = function() {
            return (_Py_VaBuildValue = Module["_Py_VaBuildValue"] = Module["asm"]["Py_VaBuildValue"]).apply(null, arguments)
        }
        ;
        var __Py_VaBuildValue_SizeT = Module["__Py_VaBuildValue_SizeT"] = function() {
            return (__Py_VaBuildValue_SizeT = Module["__Py_VaBuildValue_SizeT"] = Module["asm"]["_Py_VaBuildValue_SizeT"]).apply(null, arguments)
        }
        ;
        var _PyModule_AddStringConstant = Module["_PyModule_AddStringConstant"] = function() {
            return (_PyModule_AddStringConstant = Module["_PyModule_AddStringConstant"] = Module["asm"]["PyModule_AddStringConstant"]).apply(null, arguments)
        }
        ;
        var _vsnprintf = Module["_vsnprintf"] = function() {
            return (_vsnprintf = Module["_vsnprintf"] = Module["asm"]["vsnprintf"]).apply(null, arguments)
        }
        ;
        var _PyOS_vsnprintf = Module["_PyOS_vsnprintf"] = function() {
            return (_PyOS_vsnprintf = Module["_PyOS_vsnprintf"] = Module["asm"]["PyOS_vsnprintf"]).apply(null, arguments)
        }
        ;
        var _Py_SetPath = Module["_Py_SetPath"] = function() {
            return (_Py_SetPath = Module["_Py_SetPath"] = Module["asm"]["Py_SetPath"]).apply(null, arguments)
        }
        ;
        var _Py_SetPythonHome = Module["_Py_SetPythonHome"] = function() {
            return (_Py_SetPythonHome = Module["_Py_SetPythonHome"] = Module["asm"]["Py_SetPythonHome"]).apply(null, arguments)
        }
        ;
        var __Py_SetProgramFullPath = Module["__Py_SetProgramFullPath"] = function() {
            return (__Py_SetProgramFullPath = Module["__Py_SetProgramFullPath"] = Module["asm"]["_Py_SetProgramFullPath"]).apply(null, arguments)
        }
        ;
        var _Py_GetPath = Module["_Py_GetPath"] = function() {
            return (_Py_GetPath = Module["_Py_GetPath"] = Module["asm"]["Py_GetPath"]).apply(null, arguments)
        }
        ;
        var _Py_GetPrefix = Module["_Py_GetPrefix"] = function() {
            return (_Py_GetPrefix = Module["_Py_GetPrefix"] = Module["asm"]["Py_GetPrefix"]).apply(null, arguments)
        }
        ;
        var _Py_GetExecPrefix = Module["_Py_GetExecPrefix"] = function() {
            return (_Py_GetExecPrefix = Module["_Py_GetExecPrefix"] = Module["asm"]["Py_GetExecPrefix"]).apply(null, arguments)
        }
        ;
        var _Py_GetProgramFullPath = Module["_Py_GetProgramFullPath"] = function() {
            return (_Py_GetProgramFullPath = Module["_Py_GetProgramFullPath"] = Module["asm"]["Py_GetProgramFullPath"]).apply(null, arguments)
        }
        ;
        var _Py_GetPythonHome = Module["_Py_GetPythonHome"] = function() {
            return (_Py_GetPythonHome = Module["_Py_GetPythonHome"] = Module["asm"]["Py_GetPythonHome"]).apply(null, arguments)
        }
        ;
        var _Py_GetProgramName = Module["_Py_GetProgramName"] = function() {
            return (_Py_GetProgramName = Module["_Py_GetProgramName"] = Module["asm"]["Py_GetProgramName"]).apply(null, arguments)
        }
        ;
        var __Py_wgetcwd = Module["__Py_wgetcwd"] = function() {
            return (__Py_wgetcwd = Module["__Py_wgetcwd"] = Module["asm"]["_Py_wgetcwd"]).apply(null, arguments)
        }
        ;
        var __Py_wreadlink = Module["__Py_wreadlink"] = function() {
            return (__Py_wreadlink = Module["__Py_wreadlink"] = Module["asm"]["_Py_wreadlink"]).apply(null, arguments)
        }
        ;
        var _wcsrchr = Module["_wcsrchr"] = function() {
            return (_wcsrchr = Module["_wcsrchr"] = Module["asm"]["wcsrchr"]).apply(null, arguments)
        }
        ;
        var _wcsncpy = Module["_wcsncpy"] = function() {
            return (_wcsncpy = Module["_wcsncpy"] = Module["asm"]["wcsncpy"]).apply(null, arguments)
        }
        ;
        var __Py_wrealpath = Module["__Py_wrealpath"] = function() {
            return (__Py_wrealpath = Module["__Py_wrealpath"] = Module["asm"]["_Py_wrealpath"]).apply(null, arguments)
        }
        ;
        var _wcsncmp = Module["_wcsncmp"] = function() {
            return (_wcsncmp = Module["_wcsncmp"] = Module["asm"]["wcsncmp"]).apply(null, arguments)
        }
        ;
        var __PyPreConfig_InitCompatConfig = Module["__PyPreConfig_InitCompatConfig"] = function() {
            return (__PyPreConfig_InitCompatConfig = Module["__PyPreConfig_InitCompatConfig"] = Module["asm"]["_PyPreConfig_InitCompatConfig"]).apply(null, arguments)
        }
        ;
        var _PyPreConfig_InitIsolatedConfig = Module["_PyPreConfig_InitIsolatedConfig"] = function() {
            return (_PyPreConfig_InitIsolatedConfig = Module["_PyPreConfig_InitIsolatedConfig"] = Module["asm"]["PyPreConfig_InitIsolatedConfig"]).apply(null, arguments)
        }
        ;
        var __Py_SetLocaleFromEnv = Module["__Py_SetLocaleFromEnv"] = function() {
            return (__Py_SetLocaleFromEnv = Module["__Py_SetLocaleFromEnv"] = Module["asm"]["_Py_SetLocaleFromEnv"]).apply(null, arguments)
        }
        ;
        var __Py_LegacyLocaleDetected = Module["__Py_LegacyLocaleDetected"] = function() {
            return (__Py_LegacyLocaleDetected = Module["__Py_LegacyLocaleDetected"] = Module["asm"]["_Py_LegacyLocaleDetected"]).apply(null, arguments)
        }
        ;
        var __Py_CoerceLegacyLocale = Module["__Py_CoerceLegacyLocale"] = function() {
            return (__Py_CoerceLegacyLocale = Module["__Py_CoerceLegacyLocale"] = Module["asm"]["_Py_CoerceLegacyLocale"]).apply(null, arguments)
        }
        ;
        var _PyHash_GetFuncDef = Module["_PyHash_GetFuncDef"] = function() {
            return (_PyHash_GetFuncDef = Module["_PyHash_GetFuncDef"] = Module["asm"]["PyHash_GetFuncDef"]).apply(null, arguments)
        }
        ;
        var __PyRuntimeState_Init = Module["__PyRuntimeState_Init"] = function() {
            return (__PyRuntimeState_Init = Module["__PyRuntimeState_Init"] = Module["asm"]["_PyRuntimeState_Init"]).apply(null, arguments)
        }
        ;
        var __PyRuntime_Finalize = Module["__PyRuntime_Finalize"] = function() {
            return (__PyRuntime_Finalize = Module["__PyRuntime_Finalize"] = Module["asm"]["_PyRuntime_Finalize"]).apply(null, arguments)
        }
        ;
        var __PyRuntimeState_Fini = Module["__PyRuntimeState_Fini"] = function() {
            return (__PyRuntimeState_Fini = Module["__PyRuntimeState_Fini"] = Module["asm"]["_PyRuntimeState_Fini"]).apply(null, arguments)
        }
        ;
        var __Py_IsCoreInitialized = Module["__Py_IsCoreInitialized"] = function() {
            return (__Py_IsCoreInitialized = Module["__Py_IsCoreInitialized"] = Module["asm"]["_Py_IsCoreInitialized"]).apply(null, arguments)
        }
        ;
        var _nl_langinfo = Module["_nl_langinfo"] = function() {
            return (_nl_langinfo = Module["_nl_langinfo"] = Module["asm"]["nl_langinfo"]).apply(null, arguments)
        }
        ;
        var __Py_ResetForceASCII = Module["__Py_ResetForceASCII"] = function() {
            return (__Py_ResetForceASCII = Module["__Py_ResetForceASCII"] = Module["asm"]["_Py_ResetForceASCII"]).apply(null, arguments)
        }
        ;
        var _setenv = Module["_setenv"] = function() {
            return (_setenv = Module["_setenv"] = Module["asm"]["setenv"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_SetConfig = Module["__PyInterpreterState_SetConfig"] = function() {
            return (__PyInterpreterState_SetConfig = Module["__PyInterpreterState_SetConfig"] = Module["asm"]["_PyInterpreterState_SetConfig"]).apply(null, arguments)
        }
        ;
        var __Py_PreInitializeFromPyArgv = Module["__Py_PreInitializeFromPyArgv"] = function() {
            return (__Py_PreInitializeFromPyArgv = Module["__Py_PreInitializeFromPyArgv"] = Module["asm"]["_Py_PreInitializeFromPyArgv"]).apply(null, arguments)
        }
        ;
        var _Py_PreInitializeFromArgs = Module["_Py_PreInitializeFromArgs"] = function() {
            return (_Py_PreInitializeFromArgs = Module["_Py_PreInitializeFromArgs"] = Module["asm"]["Py_PreInitializeFromArgs"]).apply(null, arguments)
        }
        ;
        var _Py_PreInitialize = Module["_Py_PreInitialize"] = function() {
            return (_Py_PreInitialize = Module["_Py_PreInitialize"] = Module["asm"]["Py_PreInitialize"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_Enable = Module["__PyInterpreterState_Enable"] = function() {
            return (__PyInterpreterState_Enable = Module["__PyInterpreterState_Enable"] = Module["asm"]["_PyInterpreterState_Enable"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_New = Module["_PyInterpreterState_New"] = function() {
            return (_PyInterpreterState_New = Module["_PyInterpreterState_New"] = Module["asm"]["PyInterpreterState_New"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_New = Module["_PyThreadState_New"] = function() {
            return (_PyThreadState_New = Module["_PyThreadState_New"] = Module["asm"]["PyThreadState_New"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_Swap = Module["_PyThreadState_Swap"] = function() {
            return (_PyThreadState_Swap = Module["_PyThreadState_Swap"] = Module["asm"]["PyThreadState_Swap"]).apply(null, arguments)
        }
        ;
        var _Py_InitializeEx = Module["_Py_InitializeEx"] = function() {
            return (_Py_InitializeEx = Module["_Py_InitializeEx"] = Module["asm"]["Py_InitializeEx"]).apply(null, arguments)
        }
        ;
        var _Py_FatalError = Module["_Py_FatalError"] = function() {
            return (_Py_FatalError = Module["_Py_FatalError"] = Module["asm"]["Py_FatalError"]).apply(null, arguments)
        }
        ;
        var _Py_Initialize = Module["_Py_Initialize"] = function() {
            return (_Py_Initialize = Module["_Py_Initialize"] = Module["asm"]["Py_Initialize"]).apply(null, arguments)
        }
        ;
        var __Py_InitializeMain = Module["__Py_InitializeMain"] = function() {
            return (__Py_InitializeMain = Module["__Py_InitializeMain"] = Module["asm"]["_Py_InitializeMain"]).apply(null, arguments)
        }
        ;
        var _PyGC_Collect = Module["_PyGC_Collect"] = function() {
            return (_PyGC_Collect = Module["_PyGC_Collect"] = Module["asm"]["PyGC_Collect"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_Delete = Module["_PyInterpreterState_Delete"] = function() {
            return (_PyInterpreterState_Delete = Module["_PyInterpreterState_Delete"] = Module["asm"]["PyInterpreterState_Delete"]).apply(null, arguments)
        }
        ;
        var _Py_Finalize = Module["_Py_Finalize"] = function() {
            return (_Py_Finalize = Module["_Py_Finalize"] = Module["asm"]["Py_Finalize"]).apply(null, arguments)
        }
        ;
        var __Py_NewInterpreter = Module["__Py_NewInterpreter"] = function() {
            return (__Py_NewInterpreter = Module["__Py_NewInterpreter"] = Module["asm"]["_Py_NewInterpreter"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_Main = Module["_PyInterpreterState_Main"] = function() {
            return (_PyInterpreterState_Main = Module["_PyInterpreterState_Main"] = Module["asm"]["PyInterpreterState_Main"]).apply(null, arguments)
        }
        ;
        var _PyErr_PrintEx = Module["_PyErr_PrintEx"] = function() {
            return (_PyErr_PrintEx = Module["_PyErr_PrintEx"] = Module["asm"]["PyErr_PrintEx"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_Clear = Module["_PyThreadState_Clear"] = function() {
            return (_PyThreadState_Clear = Module["_PyThreadState_Clear"] = Module["asm"]["PyThreadState_Clear"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_Delete = Module["_PyThreadState_Delete"] = function() {
            return (_PyThreadState_Delete = Module["_PyThreadState_Delete"] = Module["asm"]["PyThreadState_Delete"]).apply(null, arguments)
        }
        ;
        var _Py_NewInterpreter = Module["_Py_NewInterpreter"] = function() {
            return (_Py_NewInterpreter = Module["_Py_NewInterpreter"] = Module["asm"]["Py_NewInterpreter"]).apply(null, arguments)
        }
        ;
        var _Py_EndInterpreter = Module["_Py_EndInterpreter"] = function() {
            return (_Py_EndInterpreter = Module["_Py_EndInterpreter"] = Module["asm"]["Py_EndInterpreter"]).apply(null, arguments)
        }
        ;
        var __Py_DumpExtensionModules = Module["__Py_DumpExtensionModules"] = function() {
            return (__Py_DumpExtensionModules = Module["__Py_DumpExtensionModules"] = Module["asm"]["_Py_DumpExtensionModules"]).apply(null, arguments)
        }
        ;
        var __Py_write_noraise = Module["__Py_write_noraise"] = function() {
            return (__Py_write_noraise = Module["__Py_write_noraise"] = Module["asm"]["_Py_write_noraise"]).apply(null, arguments)
        }
        ;
        var _vfprintf = Module["_vfprintf"] = function() {
            return (_vfprintf = Module["_vfprintf"] = Module["asm"]["vfprintf"]).apply(null, arguments)
        }
        ;
        var _Py_AtExit = Module["_Py_AtExit"] = function() {
            return (_Py_AtExit = Module["_Py_AtExit"] = Module["asm"]["Py_AtExit"]).apply(null, arguments)
        }
        ;
        var _Py_Exit = Module["_Py_Exit"] = function() {
            return (_Py_Exit = Module["_Py_Exit"] = Module["asm"]["Py_Exit"]).apply(null, arguments)
        }
        ;
        var _Py_FdIsInteractive = Module["_Py_FdIsInteractive"] = function() {
            return (_Py_FdIsInteractive = Module["_Py_FdIsInteractive"] = Module["asm"]["Py_FdIsInteractive"]).apply(null, arguments)
        }
        ;
        var __Py_FdIsInteractive = Module["__Py_FdIsInteractive"] = function() {
            return (__Py_FdIsInteractive = Module["__Py_FdIsInteractive"] = Module["asm"]["_Py_FdIsInteractive"]).apply(null, arguments)
        }
        ;
        var _PyOS_getsig = Module["_PyOS_getsig"] = function() {
            return (_PyOS_getsig = Module["_PyOS_getsig"] = Module["asm"]["PyOS_getsig"]).apply(null, arguments)
        }
        ;
        var _signal = Module["_signal"] = function() {
            return (_signal = Module["_signal"] = Module["asm"]["signal"]).apply(null, arguments)
        }
        ;
        var _PyOS_setsig = Module["_PyOS_setsig"] = function() {
            return (_PyOS_setsig = Module["_PyOS_setsig"] = Module["asm"]["PyOS_setsig"]).apply(null, arguments)
        }
        ;
        var _siginterrupt = Module["_siginterrupt"] = function() {
            return (_siginterrupt = Module["_siginterrupt"] = Module["asm"]["siginterrupt"]).apply(null, arguments)
        }
        ;
        var _PySys_SetObject = Module["_PySys_SetObject"] = function() {
            return (_PySys_SetObject = Module["_PySys_SetObject"] = Module["asm"]["PySys_SetObject"]).apply(null, arguments)
        }
        ;
        var _fstat = Module["_fstat"] = function() {
            return (_fstat = Module["_fstat"] = Module["asm"]["fstat"]).apply(null, arguments)
        }
        ;
        var _PyOS_mystrnicmp = Module["_PyOS_mystrnicmp"] = function() {
            return (_PyOS_mystrnicmp = Module["_PyOS_mystrnicmp"] = Module["asm"]["PyOS_mystrnicmp"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_Clear = Module["_PyInterpreterState_Clear"] = function() {
            return (_PyInterpreterState_Clear = Module["_PyInterpreterState_Clear"] = Module["asm"]["PyInterpreterState_Clear"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_ThreadHead = Module["_PyInterpreterState_ThreadHead"] = function() {
            return (_PyInterpreterState_ThreadHead = Module["_PyInterpreterState_ThreadHead"] = Module["asm"]["PyInterpreterState_ThreadHead"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_RequiresIDRef = Module["__PyInterpreterState_RequiresIDRef"] = function() {
            return (__PyInterpreterState_RequiresIDRef = Module["__PyInterpreterState_RequiresIDRef"] = Module["asm"]["_PyInterpreterState_RequiresIDRef"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_RequireIDRef = Module["__PyInterpreterState_RequireIDRef"] = function() {
            return (__PyInterpreterState_RequireIDRef = Module["__PyInterpreterState_RequireIDRef"] = Module["asm"]["_PyInterpreterState_RequireIDRef"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_GetMainModule = Module["__PyInterpreterState_GetMainModule"] = function() {
            return (__PyInterpreterState_GetMainModule = Module["__PyInterpreterState_GetMainModule"] = Module["asm"]["_PyInterpreterState_GetMainModule"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_GetDict = Module["_PyInterpreterState_GetDict"] = function() {
            return (_PyInterpreterState_GetDict = Module["_PyInterpreterState_GetDict"] = Module["asm"]["PyInterpreterState_GetDict"]).apply(null, arguments)
        }
        ;
        var _PyThread_tss_get = Module["_PyThread_tss_get"] = function() {
            return (_PyThread_tss_get = Module["_PyThread_tss_get"] = Module["asm"]["PyThread_tss_get"]).apply(null, arguments)
        }
        ;
        var _PyThread_tss_set = Module["_PyThread_tss_set"] = function() {
            return (_PyThread_tss_set = Module["_PyThread_tss_set"] = Module["asm"]["PyThread_tss_set"]).apply(null, arguments)
        }
        ;
        var __PyThreadState_Prealloc = Module["__PyThreadState_Prealloc"] = function() {
            return (__PyThreadState_Prealloc = Module["__PyThreadState_Prealloc"] = Module["asm"]["_PyThreadState_Prealloc"]).apply(null, arguments)
        }
        ;
        var __PyThreadState_Init = Module["__PyThreadState_Init"] = function() {
            return (__PyThreadState_Init = Module["__PyThreadState_Init"] = Module["asm"]["_PyThreadState_Init"]).apply(null, arguments)
        }
        ;
        var _PyState_FindModule = Module["_PyState_FindModule"] = function() {
            return (_PyState_FindModule = Module["_PyState_FindModule"] = Module["asm"]["PyState_FindModule"]).apply(null, arguments)
        }
        ;
        var _PyState_AddModule = Module["_PyState_AddModule"] = function() {
            return (_PyState_AddModule = Module["_PyState_AddModule"] = Module["asm"]["PyState_AddModule"]).apply(null, arguments)
        }
        ;
        var _PyState_RemoveModule = Module["_PyState_RemoveModule"] = function() {
            return (_PyState_RemoveModule = Module["_PyState_RemoveModule"] = Module["asm"]["PyState_RemoveModule"]).apply(null, arguments)
        }
        ;
        var __PyThreadState_DeleteCurrent = Module["__PyThreadState_DeleteCurrent"] = function() {
            return (__PyThreadState_DeleteCurrent = Module["__PyThreadState_DeleteCurrent"] = Module["asm"]["_PyThreadState_DeleteCurrent"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_DeleteCurrent = Module["_PyThreadState_DeleteCurrent"] = function() {
            return (_PyThreadState_DeleteCurrent = Module["_PyThreadState_DeleteCurrent"] = Module["asm"]["PyThreadState_DeleteCurrent"]).apply(null, arguments)
        }
        ;
        var __PyThreadState_UncheckedGet = Module["__PyThreadState_UncheckedGet"] = function() {
            return (__PyThreadState_UncheckedGet = Module["__PyThreadState_UncheckedGet"] = Module["asm"]["_PyThreadState_UncheckedGet"]).apply(null, arguments)
        }
        ;
        var __PyThreadState_GetDict = Module["__PyThreadState_GetDict"] = function() {
            return (__PyThreadState_GetDict = Module["__PyThreadState_GetDict"] = Module["asm"]["_PyThreadState_GetDict"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_GetInterpreter = Module["_PyThreadState_GetInterpreter"] = function() {
            return (_PyThreadState_GetInterpreter = Module["_PyThreadState_GetInterpreter"] = Module["asm"]["PyThreadState_GetInterpreter"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_GetID = Module["_PyThreadState_GetID"] = function() {
            return (_PyThreadState_GetID = Module["_PyThreadState_GetID"] = Module["asm"]["PyThreadState_GetID"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_SetAsyncExc = Module["_PyThreadState_SetAsyncExc"] = function() {
            return (_PyThreadState_SetAsyncExc = Module["_PyThreadState_SetAsyncExc"] = Module["asm"]["PyThreadState_SetAsyncExc"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_Head = Module["_PyInterpreterState_Head"] = function() {
            return (_PyInterpreterState_Head = Module["_PyInterpreterState_Head"] = Module["asm"]["PyInterpreterState_Head"]).apply(null, arguments)
        }
        ;
        var _PyInterpreterState_Next = Module["_PyInterpreterState_Next"] = function() {
            return (_PyInterpreterState_Next = Module["_PyInterpreterState_Next"] = Module["asm"]["PyInterpreterState_Next"]).apply(null, arguments)
        }
        ;
        var _PyThreadState_Next = Module["_PyThreadState_Next"] = function() {
            return (_PyThreadState_Next = Module["_PyThreadState_Next"] = Module["asm"]["PyThreadState_Next"]).apply(null, arguments)
        }
        ;
        var __PyThread_CurrentFrames = Module["__PyThread_CurrentFrames"] = function() {
            return (__PyThread_CurrentFrames = Module["__PyThread_CurrentFrames"] = Module["asm"]["_PyThread_CurrentFrames"]).apply(null, arguments)
        }
        ;
        var __PyThread_CurrentExceptions = Module["__PyThread_CurrentExceptions"] = function() {
            return (__PyThread_CurrentExceptions = Module["__PyThread_CurrentExceptions"] = Module["asm"]["_PyThread_CurrentExceptions"]).apply(null, arguments)
        }
        ;
        var _PyThread_tss_create = Module["_PyThread_tss_create"] = function() {
            return (_PyThread_tss_create = Module["_PyThread_tss_create"] = Module["asm"]["PyThread_tss_create"]).apply(null, arguments)
        }
        ;
        var __PyGILState_GetInterpreterStateUnsafe = Module["__PyGILState_GetInterpreterStateUnsafe"] = function() {
            return (__PyGILState_GetInterpreterStateUnsafe = Module["__PyGILState_GetInterpreterStateUnsafe"] = Module["asm"]["_PyGILState_GetInterpreterStateUnsafe"]).apply(null, arguments)
        }
        ;
        var _PyThread_tss_delete = Module["_PyThread_tss_delete"] = function() {
            return (_PyThread_tss_delete = Module["_PyThread_tss_delete"] = Module["asm"]["PyThread_tss_delete"]).apply(null, arguments)
        }
        ;
        var _PyThread_tss_is_created = Module["_PyThread_tss_is_created"] = function() {
            return (_PyThread_tss_is_created = Module["_PyThread_tss_is_created"] = Module["asm"]["PyThread_tss_is_created"]).apply(null, arguments)
        }
        ;
        var __PyObject_CheckCrossInterpreterData = Module["__PyObject_CheckCrossInterpreterData"] = function() {
            return (__PyObject_CheckCrossInterpreterData = Module["__PyObject_CheckCrossInterpreterData"] = Module["asm"]["_PyObject_CheckCrossInterpreterData"]).apply(null, arguments)
        }
        ;
        var __PyCrossInterpreterData_Lookup = Module["__PyCrossInterpreterData_Lookup"] = function() {
            return (__PyCrossInterpreterData_Lookup = Module["__PyCrossInterpreterData_Lookup"] = Module["asm"]["_PyCrossInterpreterData_Lookup"]).apply(null, arguments)
        }
        ;
        var __PyObject_GetCrossInterpreterData = Module["__PyObject_GetCrossInterpreterData"] = function() {
            return (__PyObject_GetCrossInterpreterData = Module["__PyObject_GetCrossInterpreterData"] = Module["asm"]["_PyObject_GetCrossInterpreterData"]).apply(null, arguments)
        }
        ;
        var __PyCrossInterpreterData_Release = Module["__PyCrossInterpreterData_Release"] = function() {
            return (__PyCrossInterpreterData_Release = Module["__PyCrossInterpreterData_Release"] = Module["asm"]["_PyCrossInterpreterData_Release"]).apply(null, arguments)
        }
        ;
        var __PyCrossInterpreterData_NewObject = Module["__PyCrossInterpreterData_NewObject"] = function() {
            return (__PyCrossInterpreterData_NewObject = Module["__PyCrossInterpreterData_NewObject"] = Module["asm"]["_PyCrossInterpreterData_NewObject"]).apply(null, arguments)
        }
        ;
        var __PyCrossInterpreterData_RegisterClass = Module["__PyCrossInterpreterData_RegisterClass"] = function() {
            return (__PyCrossInterpreterData_RegisterClass = Module["__PyCrossInterpreterData_RegisterClass"] = Module["asm"]["_PyCrossInterpreterData_RegisterClass"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_GetEvalFrameFunc = Module["__PyInterpreterState_GetEvalFrameFunc"] = function() {
            return (__PyInterpreterState_GetEvalFrameFunc = Module["__PyInterpreterState_GetEvalFrameFunc"] = Module["asm"]["_PyInterpreterState_GetEvalFrameFunc"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_SetEvalFrameFunc = Module["__PyInterpreterState_SetEvalFrameFunc"] = function() {
            return (__PyInterpreterState_SetEvalFrameFunc = Module["__PyInterpreterState_SetEvalFrameFunc"] = Module["asm"]["_PyInterpreterState_SetEvalFrameFunc"]).apply(null, arguments)
        }
        ;
        var __PyInterpreterState_GetConfigCopy = Module["__PyInterpreterState_GetConfigCopy"] = function() {
            return (__PyInterpreterState_GetConfigCopy = Module["__PyInterpreterState_GetConfigCopy"] = Module["asm"]["_PyInterpreterState_GetConfigCopy"]).apply(null, arguments)
        }
        ;
        var __PyRun_AnyFileObject = Module["__PyRun_AnyFileObject"] = function() {
            return (__PyRun_AnyFileObject = Module["__PyRun_AnyFileObject"] = Module["asm"]["_PyRun_AnyFileObject"]).apply(null, arguments)
        }
        ;
        var __PyRun_InteractiveLoopObject = Module["__PyRun_InteractiveLoopObject"] = function() {
            return (__PyRun_InteractiveLoopObject = Module["__PyRun_InteractiveLoopObject"] = Module["asm"]["_PyRun_InteractiveLoopObject"]).apply(null, arguments)
        }
        ;
        var __PyRun_SimpleFileObject = Module["__PyRun_SimpleFileObject"] = function() {
            return (__PyRun_SimpleFileObject = Module["__PyRun_SimpleFileObject"] = Module["asm"]["_PyRun_SimpleFileObject"]).apply(null, arguments)
        }
        ;
        var _rewind = Module["_rewind"] = function() {
            return (_rewind = Module["_rewind"] = Module["asm"]["rewind"]).apply(null, arguments)
        }
        ;
        var _PyRun_InteractiveLoopFlags = Module["_PyRun_InteractiveLoopFlags"] = function() {
            return (_PyRun_InteractiveLoopFlags = Module["_PyRun_InteractiveLoopFlags"] = Module["asm"]["PyRun_InteractiveLoopFlags"]).apply(null, arguments)
        }
        ;
        var _PyRun_InteractiveOneObject = Module["_PyRun_InteractiveOneObject"] = function() {
            return (_PyRun_InteractiveOneObject = Module["_PyRun_InteractiveOneObject"] = Module["asm"]["PyRun_InteractiveOneObject"]).apply(null, arguments)
        }
        ;
        var _PyRun_InteractiveOneFlags = Module["_PyRun_InteractiveOneFlags"] = function() {
            return (_PyRun_InteractiveOneFlags = Module["_PyRun_InteractiveOneFlags"] = Module["asm"]["PyRun_InteractiveOneFlags"]).apply(null, arguments)
        }
        ;
        var _PyRun_SimpleFileExFlags = Module["_PyRun_SimpleFileExFlags"] = function() {
            return (_PyRun_SimpleFileExFlags = Module["_PyRun_SimpleFileExFlags"] = Module["asm"]["PyRun_SimpleFileExFlags"]).apply(null, arguments)
        }
        ;
        var _PyRun_SimpleStringFlags = Module["_PyRun_SimpleStringFlags"] = function() {
            return (_PyRun_SimpleStringFlags = Module["_PyRun_SimpleStringFlags"] = Module["asm"]["PyRun_SimpleStringFlags"]).apply(null, arguments)
        }
        ;
        var __Py_HandleSystemExit = Module["__Py_HandleSystemExit"] = function() {
            return (__Py_HandleSystemExit = Module["__Py_HandleSystemExit"] = Module["asm"]["_Py_HandleSystemExit"]).apply(null, arguments)
        }
        ;
        var __PyErr_Display = Module["__PyErr_Display"] = function() {
            return (__PyErr_Display = Module["__PyErr_Display"] = Module["asm"]["_PyErr_Display"]).apply(null, arguments)
        }
        ;
        var _PyRun_FileExFlags = Module["_PyRun_FileExFlags"] = function() {
            return (_PyRun_FileExFlags = Module["_PyRun_FileExFlags"] = Module["asm"]["PyRun_FileExFlags"]).apply(null, arguments)
        }
        ;
        var _Py_CompileStringExFlags = Module["_Py_CompileStringExFlags"] = function() {
            return (_Py_CompileStringExFlags = Module["_Py_CompileStringExFlags"] = Module["asm"]["Py_CompileStringExFlags"]).apply(null, arguments)
        }
        ;
        var _PyRun_AnyFile = Module["_PyRun_AnyFile"] = function() {
            return (_PyRun_AnyFile = Module["_PyRun_AnyFile"] = Module["asm"]["PyRun_AnyFile"]).apply(null, arguments)
        }
        ;
        var _PyRun_AnyFileEx = Module["_PyRun_AnyFileEx"] = function() {
            return (_PyRun_AnyFileEx = Module["_PyRun_AnyFileEx"] = Module["asm"]["PyRun_AnyFileEx"]).apply(null, arguments)
        }
        ;
        var _PyRun_AnyFileFlags = Module["_PyRun_AnyFileFlags"] = function() {
            return (_PyRun_AnyFileFlags = Module["_PyRun_AnyFileFlags"] = Module["asm"]["PyRun_AnyFileFlags"]).apply(null, arguments)
        }
        ;
        var _PyRun_File = Module["_PyRun_File"] = function() {
            return (_PyRun_File = Module["_PyRun_File"] = Module["asm"]["PyRun_File"]).apply(null, arguments)
        }
        ;
        var _PyRun_FileEx = Module["_PyRun_FileEx"] = function() {
            return (_PyRun_FileEx = Module["_PyRun_FileEx"] = Module["asm"]["PyRun_FileEx"]).apply(null, arguments)
        }
        ;
        var _PyRun_FileFlags = Module["_PyRun_FileFlags"] = function() {
            return (_PyRun_FileFlags = Module["_PyRun_FileFlags"] = Module["asm"]["PyRun_FileFlags"]).apply(null, arguments)
        }
        ;
        var _PyRun_SimpleFile = Module["_PyRun_SimpleFile"] = function() {
            return (_PyRun_SimpleFile = Module["_PyRun_SimpleFile"] = Module["asm"]["PyRun_SimpleFile"]).apply(null, arguments)
        }
        ;
        var _PyRun_SimpleFileEx = Module["_PyRun_SimpleFileEx"] = function() {
            return (_PyRun_SimpleFileEx = Module["_PyRun_SimpleFileEx"] = Module["asm"]["PyRun_SimpleFileEx"]).apply(null, arguments)
        }
        ;
        var _PyRun_String = Module["_PyRun_String"] = function() {
            return (_PyRun_String = Module["_PyRun_String"] = Module["asm"]["PyRun_String"]).apply(null, arguments)
        }
        ;
        var _PyRun_SimpleString = Module["_PyRun_SimpleString"] = function() {
            return (_PyRun_SimpleString = Module["_PyRun_SimpleString"] = Module["asm"]["PyRun_SimpleString"]).apply(null, arguments)
        }
        ;
        var _Py_CompileString = Module["_Py_CompileString"] = function() {
            return (_Py_CompileString = Module["_Py_CompileString"] = Module["asm"]["Py_CompileString"]).apply(null, arguments)
        }
        ;
        var _Py_CompileStringFlags = Module["_Py_CompileStringFlags"] = function() {
            return (_Py_CompileStringFlags = Module["_Py_CompileStringFlags"] = Module["asm"]["Py_CompileStringFlags"]).apply(null, arguments)
        }
        ;
        var _PyRun_InteractiveOne = Module["_PyRun_InteractiveOne"] = function() {
            return (_PyRun_InteractiveOne = Module["_PyRun_InteractiveOne"] = Module["asm"]["PyRun_InteractiveOne"]).apply(null, arguments)
        }
        ;
        var _PyRun_InteractiveLoop = Module["_PyRun_InteractiveLoop"] = function() {
            return (_PyRun_InteractiveLoop = Module["_PyRun_InteractiveLoop"] = Module["asm"]["PyRun_InteractiveLoop"]).apply(null, arguments)
        }
        ;
        var __PyTime_MulDiv = Module["__PyTime_MulDiv"] = function() {
            return (__PyTime_MulDiv = Module["__PyTime_MulDiv"] = Module["asm"]["_PyTime_MulDiv"]).apply(null, arguments)
        }
        ;
        var __PyLong_AsTime_t = Module["__PyLong_AsTime_t"] = function() {
            return (__PyLong_AsTime_t = Module["__PyLong_AsTime_t"] = Module["asm"]["_PyLong_AsTime_t"]).apply(null, arguments)
        }
        ;
        var __PyLong_FromTime_t = Module["__PyLong_FromTime_t"] = function() {
            return (__PyLong_FromTime_t = Module["__PyLong_FromTime_t"] = Module["asm"]["_PyLong_FromTime_t"]).apply(null, arguments)
        }
        ;
        var __PyTime_ObjectToTime_t = Module["__PyTime_ObjectToTime_t"] = function() {
            return (__PyTime_ObjectToTime_t = Module["__PyTime_ObjectToTime_t"] = Module["asm"]["_PyTime_ObjectToTime_t"]).apply(null, arguments)
        }
        ;
        var __PyTime_ObjectToTimespec = Module["__PyTime_ObjectToTimespec"] = function() {
            return (__PyTime_ObjectToTimespec = Module["__PyTime_ObjectToTimespec"] = Module["asm"]["_PyTime_ObjectToTimespec"]).apply(null, arguments)
        }
        ;
        var __PyTime_ObjectToTimeval = Module["__PyTime_ObjectToTimeval"] = function() {
            return (__PyTime_ObjectToTimeval = Module["__PyTime_ObjectToTimeval"] = Module["asm"]["_PyTime_ObjectToTimeval"]).apply(null, arguments)
        }
        ;
        var __PyTime_FromSeconds = Module["__PyTime_FromSeconds"] = function() {
            return (__PyTime_FromSeconds = Module["__PyTime_FromSeconds"] = Module["asm"]["_PyTime_FromSeconds"]).apply(null, arguments)
        }
        ;
        var __PyTime_FromNanoseconds = Module["__PyTime_FromNanoseconds"] = function() {
            return (__PyTime_FromNanoseconds = Module["__PyTime_FromNanoseconds"] = Module["asm"]["_PyTime_FromNanoseconds"]).apply(null, arguments)
        }
        ;
        var __PyTime_FromNanosecondsObject = Module["__PyTime_FromNanosecondsObject"] = function() {
            return (__PyTime_FromNanosecondsObject = Module["__PyTime_FromNanosecondsObject"] = Module["asm"]["_PyTime_FromNanosecondsObject"]).apply(null, arguments)
        }
        ;
        var __PyTime_FromTimespec = Module["__PyTime_FromTimespec"] = function() {
            return (__PyTime_FromTimespec = Module["__PyTime_FromTimespec"] = Module["asm"]["_PyTime_FromTimespec"]).apply(null, arguments)
        }
        ;
        var __PyTime_FromTimeval = Module["__PyTime_FromTimeval"] = function() {
            return (__PyTime_FromTimeval = Module["__PyTime_FromTimeval"] = Module["asm"]["_PyTime_FromTimeval"]).apply(null, arguments)
        }
        ;
        var __PyTime_FromSecondsObject = Module["__PyTime_FromSecondsObject"] = function() {
            return (__PyTime_FromSecondsObject = Module["__PyTime_FromSecondsObject"] = Module["asm"]["_PyTime_FromSecondsObject"]).apply(null, arguments)
        }
        ;
        var __PyTime_FromMillisecondsObject = Module["__PyTime_FromMillisecondsObject"] = function() {
            return (__PyTime_FromMillisecondsObject = Module["__PyTime_FromMillisecondsObject"] = Module["asm"]["_PyTime_FromMillisecondsObject"]).apply(null, arguments)
        }
        ;
        var __PyTime_AsSecondsDouble = Module["__PyTime_AsSecondsDouble"] = function() {
            return (__PyTime_AsSecondsDouble = Module["__PyTime_AsSecondsDouble"] = Module["asm"]["_PyTime_AsSecondsDouble"]).apply(null, arguments)
        }
        ;
        var __PyTime_AsNanosecondsObject = Module["__PyTime_AsNanosecondsObject"] = function() {
            return (__PyTime_AsNanosecondsObject = Module["__PyTime_AsNanosecondsObject"] = Module["asm"]["_PyTime_AsNanosecondsObject"]).apply(null, arguments)
        }
        ;
        var __PyTime_AsMilliseconds = Module["__PyTime_AsMilliseconds"] = function() {
            return (__PyTime_AsMilliseconds = Module["__PyTime_AsMilliseconds"] = Module["asm"]["_PyTime_AsMilliseconds"]).apply(null, arguments)
        }
        ;
        var __PyTime_AsTimeval = Module["__PyTime_AsTimeval"] = function() {
            return (__PyTime_AsTimeval = Module["__PyTime_AsTimeval"] = Module["asm"]["_PyTime_AsTimeval"]).apply(null, arguments)
        }
        ;
        var __PyTime_AsTimeval_noraise = Module["__PyTime_AsTimeval_noraise"] = function() {
            return (__PyTime_AsTimeval_noraise = Module["__PyTime_AsTimeval_noraise"] = Module["asm"]["_PyTime_AsTimeval_noraise"]).apply(null, arguments)
        }
        ;
        var __PyTime_AsTimevalTime_t = Module["__PyTime_AsTimevalTime_t"] = function() {
            return (__PyTime_AsTimevalTime_t = Module["__PyTime_AsTimevalTime_t"] = Module["asm"]["_PyTime_AsTimevalTime_t"]).apply(null, arguments)
        }
        ;
        var __PyTime_AsTimespec = Module["__PyTime_AsTimespec"] = function() {
            return (__PyTime_AsTimespec = Module["__PyTime_AsTimespec"] = Module["asm"]["_PyTime_AsTimespec"]).apply(null, arguments)
        }
        ;
        var __PyTime_GetSystemClock = Module["__PyTime_GetSystemClock"] = function() {
            return (__PyTime_GetSystemClock = Module["__PyTime_GetSystemClock"] = Module["asm"]["_PyTime_GetSystemClock"]).apply(null, arguments)
        }
        ;
        var _clock_gettime = Module["_clock_gettime"] = function() {
            return (_clock_gettime = Module["_clock_gettime"] = Module["asm"]["clock_gettime"]).apply(null, arguments)
        }
        ;
        var __PyTime_GetSystemClockWithInfo = Module["__PyTime_GetSystemClockWithInfo"] = function() {
            return (__PyTime_GetSystemClockWithInfo = Module["__PyTime_GetSystemClockWithInfo"] = Module["asm"]["_PyTime_GetSystemClockWithInfo"]).apply(null, arguments)
        }
        ;
        var _clock_getres = Module["_clock_getres"] = function() {
            return (_clock_getres = Module["_clock_getres"] = Module["asm"]["clock_getres"]).apply(null, arguments)
        }
        ;
        var __PyTime_GetMonotonicClock = Module["__PyTime_GetMonotonicClock"] = function() {
            return (__PyTime_GetMonotonicClock = Module["__PyTime_GetMonotonicClock"] = Module["asm"]["_PyTime_GetMonotonicClock"]).apply(null, arguments)
        }
        ;
        var __PyTime_GetMonotonicClockWithInfo = Module["__PyTime_GetMonotonicClockWithInfo"] = function() {
            return (__PyTime_GetMonotonicClockWithInfo = Module["__PyTime_GetMonotonicClockWithInfo"] = Module["asm"]["_PyTime_GetMonotonicClockWithInfo"]).apply(null, arguments)
        }
        ;
        var __PyTime_GetPerfCounterWithInfo = Module["__PyTime_GetPerfCounterWithInfo"] = function() {
            return (__PyTime_GetPerfCounterWithInfo = Module["__PyTime_GetPerfCounterWithInfo"] = Module["asm"]["_PyTime_GetPerfCounterWithInfo"]).apply(null, arguments)
        }
        ;
        var __PyTime_localtime = Module["__PyTime_localtime"] = function() {
            return (__PyTime_localtime = Module["__PyTime_localtime"] = Module["asm"]["_PyTime_localtime"]).apply(null, arguments)
        }
        ;
        var _localtime_r = Module["_localtime_r"] = function() {
            return (_localtime_r = Module["_localtime_r"] = Module["asm"]["localtime_r"]).apply(null, arguments)
        }
        ;
        var __PyTime_gmtime = Module["__PyTime_gmtime"] = function() {
            return (__PyTime_gmtime = Module["__PyTime_gmtime"] = Module["asm"]["_PyTime_gmtime"]).apply(null, arguments)
        }
        ;
        var _gmtime_r = Module["_gmtime_r"] = function() {
            return (_gmtime_r = Module["_gmtime_r"] = Module["asm"]["gmtime_r"]).apply(null, arguments)
        }
        ;
        var __PyOS_URandom = Module["__PyOS_URandom"] = function() {
            return (__PyOS_URandom = Module["__PyOS_URandom"] = Module["asm"]["_PyOS_URandom"]).apply(null, arguments)
        }
        ;
        var __Py_open = Module["__Py_open"] = function() {
            return (__Py_open = Module["__Py_open"] = Module["asm"]["_Py_open"]).apply(null, arguments)
        }
        ;
        var _close = Module["_close"] = function() {
            return (_close = Module["_close"] = Module["asm"]["close"]).apply(null, arguments)
        }
        ;
        var __Py_fstat = Module["__Py_fstat"] = function() {
            return (__Py_fstat = Module["__Py_fstat"] = Module["asm"]["_Py_fstat"]).apply(null, arguments)
        }
        ;
        var __Py_read = Module["__Py_read"] = function() {
            return (__Py_read = Module["__Py_read"] = Module["asm"]["_Py_read"]).apply(null, arguments)
        }
        ;
        var __Py_open_noraise = Module["__Py_open_noraise"] = function() {
            return (__Py_open_noraise = Module["__Py_open_noraise"] = Module["asm"]["_Py_open_noraise"]).apply(null, arguments)
        }
        ;
        var _read = Module["_read"] = function() {
            return (_read = Module["_read"] = Module["asm"]["read"]).apply(null, arguments)
        }
        ;
        var __PyOS_URandomNonblock = Module["__PyOS_URandomNonblock"] = function() {
            return (__PyOS_URandomNonblock = Module["__PyOS_URandomNonblock"] = Module["asm"]["_PyOS_URandomNonblock"]).apply(null, arguments)
        }
        ;
        var _PySys_AddAuditHook = Module["_PySys_AddAuditHook"] = function() {
            return (_PySys_AddAuditHook = Module["_PySys_AddAuditHook"] = Module["asm"]["PySys_AddAuditHook"]).apply(null, arguments)
        }
        ;
        var __PySys_GetSizeOf = Module["__PySys_GetSizeOf"] = function() {
            return (__PySys_GetSizeOf = Module["__PySys_GetSizeOf"] = Module["asm"]["_PySys_GetSizeOf"]).apply(null, arguments)
        }
        ;
        var _PySys_ResetWarnOptions = Module["_PySys_ResetWarnOptions"] = function() {
            return (_PySys_ResetWarnOptions = Module["_PySys_ResetWarnOptions"] = Module["asm"]["PySys_ResetWarnOptions"]).apply(null, arguments)
        }
        ;
        var _PySys_AddWarnOptionUnicode = Module["_PySys_AddWarnOptionUnicode"] = function() {
            return (_PySys_AddWarnOptionUnicode = Module["_PySys_AddWarnOptionUnicode"] = Module["asm"]["PySys_AddWarnOptionUnicode"]).apply(null, arguments)
        }
        ;
        var _PySys_AddWarnOption = Module["_PySys_AddWarnOption"] = function() {
            return (_PySys_AddWarnOption = Module["_PySys_AddWarnOption"] = Module["asm"]["PySys_AddWarnOption"]).apply(null, arguments)
        }
        ;
        var _PySys_HasWarnOptions = Module["_PySys_HasWarnOptions"] = function() {
            return (_PySys_HasWarnOptions = Module["_PySys_HasWarnOptions"] = Module["asm"]["PySys_HasWarnOptions"]).apply(null, arguments)
        }
        ;
        var _PySys_AddXOption = Module["_PySys_AddXOption"] = function() {
            return (_PySys_AddXOption = Module["_PySys_AddXOption"] = Module["asm"]["PySys_AddXOption"]).apply(null, arguments)
        }
        ;
        var _PySys_GetXOptions = Module["_PySys_GetXOptions"] = function() {
            return (_PySys_GetXOptions = Module["_PySys_GetXOptions"] = Module["asm"]["PySys_GetXOptions"]).apply(null, arguments)
        }
        ;
        var _PyThread_GetInfo = Module["_PyThread_GetInfo"] = function() {
            return (_PyThread_GetInfo = Module["_PyThread_GetInfo"] = Module["asm"]["PyThread_GetInfo"]).apply(null, arguments)
        }
        ;
        var _PySys_SetPath = Module["_PySys_SetPath"] = function() {
            return (_PySys_SetPath = Module["_PySys_SetPath"] = Module["asm"]["PySys_SetPath"]).apply(null, arguments)
        }
        ;
        var _PySys_SetArgvEx = Module["_PySys_SetArgvEx"] = function() {
            return (_PySys_SetArgvEx = Module["_PySys_SetArgvEx"] = Module["asm"]["PySys_SetArgvEx"]).apply(null, arguments)
        }
        ;
        var _PySys_WriteStdout = Module["_PySys_WriteStdout"] = function() {
            return (_PySys_WriteStdout = Module["_PySys_WriteStdout"] = Module["asm"]["PySys_WriteStdout"]).apply(null, arguments)
        }
        ;
        var _PySys_FormatStdout = Module["_PySys_FormatStdout"] = function() {
            return (_PySys_FormatStdout = Module["_PySys_FormatStdout"] = Module["asm"]["PySys_FormatStdout"]).apply(null, arguments)
        }
        ;
        var _pthread_condattr_init = Module["_pthread_condattr_init"] = function() {
            return (_pthread_condattr_init = Module["_pthread_condattr_init"] = Module["asm"]["pthread_condattr_init"]).apply(null, arguments)
        }
        ;
        var _pthread_condattr_setclock = Module["_pthread_condattr_setclock"] = function() {
            return (_pthread_condattr_setclock = Module["_pthread_condattr_setclock"] = Module["asm"]["pthread_condattr_setclock"]).apply(null, arguments)
        }
        ;
        var _pthread_cond_init = Module["_pthread_cond_init"] = function() {
            return (_pthread_cond_init = Module["_pthread_cond_init"] = Module["asm"]["pthread_cond_init"]).apply(null, arguments)
        }
        ;
        var _gettimeofday = Module["_gettimeofday"] = function() {
            return (_gettimeofday = Module["_gettimeofday"] = Module["asm"]["gettimeofday"]).apply(null, arguments)
        }
        ;
        var _PyThread_start_new_thread = Module["_PyThread_start_new_thread"] = function() {
            return (_PyThread_start_new_thread = Module["_PyThread_start_new_thread"] = Module["asm"]["PyThread_start_new_thread"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_init = Module["_pthread_attr_init"] = function() {
            return (_pthread_attr_init = Module["_pthread_attr_init"] = Module["asm"]["pthread_attr_init"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_setstacksize = Module["_pthread_attr_setstacksize"] = function() {
            return (_pthread_attr_setstacksize = Module["_pthread_attr_setstacksize"] = Module["asm"]["pthread_attr_setstacksize"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_destroy = Module["_pthread_attr_destroy"] = function() {
            return (_pthread_attr_destroy = Module["_pthread_attr_destroy"] = Module["asm"]["pthread_attr_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_create = Module["_pthread_create"] = function() {
            return (_pthread_create = Module["_pthread_create"] = Module["asm"]["pthread_create"]).apply(null, arguments)
        }
        ;
        var _pthread_detach = Module["_pthread_detach"] = function() {
            return (_pthread_detach = Module["_pthread_detach"] = Module["asm"]["pthread_detach"]).apply(null, arguments)
        }
        ;
        var _pthread_self = Module["_pthread_self"] = function() {
            return (_pthread_self = Module["_pthread_self"] = Module["asm"]["pthread_self"]).apply(null, arguments)
        }
        ;
        var _pthread_exit = Module["_pthread_exit"] = function() {
            return (_pthread_exit = Module["_pthread_exit"] = Module["asm"]["pthread_exit"]).apply(null, arguments)
        }
        ;
        var _PyThread_acquire_lock_timed = Module["_PyThread_acquire_lock_timed"] = function() {
            return (_PyThread_acquire_lock_timed = Module["_PyThread_acquire_lock_timed"] = Module["asm"]["PyThread_acquire_lock_timed"]).apply(null, arguments)
        }
        ;
        var _pthread_mutex_trylock = Module["_pthread_mutex_trylock"] = function() {
            return (_pthread_mutex_trylock = Module["_pthread_mutex_trylock"] = Module["asm"]["pthread_mutex_trylock"]).apply(null, arguments)
        }
        ;
        var _PyThread_create_key = Module["_PyThread_create_key"] = function() {
            return (_PyThread_create_key = Module["_PyThread_create_key"] = Module["asm"]["PyThread_create_key"]).apply(null, arguments)
        }
        ;
        var _pthread_key_create = Module["_pthread_key_create"] = function() {
            return (_pthread_key_create = Module["_pthread_key_create"] = Module["asm"]["pthread_key_create"]).apply(null, arguments)
        }
        ;
        var _pthread_key_delete = Module["_pthread_key_delete"] = function() {
            return (_pthread_key_delete = Module["_pthread_key_delete"] = Module["asm"]["pthread_key_delete"]).apply(null, arguments)
        }
        ;
        var _PyThread_delete_key = Module["_PyThread_delete_key"] = function() {
            return (_PyThread_delete_key = Module["_PyThread_delete_key"] = Module["asm"]["PyThread_delete_key"]).apply(null, arguments)
        }
        ;
        var _PyThread_delete_key_value = Module["_PyThread_delete_key_value"] = function() {
            return (_PyThread_delete_key_value = Module["_PyThread_delete_key_value"] = Module["asm"]["PyThread_delete_key_value"]).apply(null, arguments)
        }
        ;
        var _pthread_setspecific = Module["_pthread_setspecific"] = function() {
            return (_pthread_setspecific = Module["_pthread_setspecific"] = Module["asm"]["pthread_setspecific"]).apply(null, arguments)
        }
        ;
        var _PyThread_set_key_value = Module["_PyThread_set_key_value"] = function() {
            return (_PyThread_set_key_value = Module["_PyThread_set_key_value"] = Module["asm"]["PyThread_set_key_value"]).apply(null, arguments)
        }
        ;
        var _PyThread_get_key_value = Module["_PyThread_get_key_value"] = function() {
            return (_PyThread_get_key_value = Module["_PyThread_get_key_value"] = Module["asm"]["PyThread_get_key_value"]).apply(null, arguments)
        }
        ;
        var _pthread_getspecific = Module["_pthread_getspecific"] = function() {
            return (_pthread_getspecific = Module["_pthread_getspecific"] = Module["asm"]["pthread_getspecific"]).apply(null, arguments)
        }
        ;
        var _PyThread_ReInitTLS = Module["_PyThread_ReInitTLS"] = function() {
            return (_PyThread_ReInitTLS = Module["_PyThread_ReInitTLS"] = Module["asm"]["PyThread_ReInitTLS"]).apply(null, arguments)
        }
        ;
        var _PyThread_get_stacksize = Module["_PyThread_get_stacksize"] = function() {
            return (_PyThread_get_stacksize = Module["_PyThread_get_stacksize"] = Module["asm"]["PyThread_get_stacksize"]).apply(null, arguments)
        }
        ;
        var _PyThread_set_stacksize = Module["_PyThread_set_stacksize"] = function() {
            return (_PyThread_set_stacksize = Module["_PyThread_set_stacksize"] = Module["asm"]["PyThread_set_stacksize"]).apply(null, arguments)
        }
        ;
        var _PyThread_tss_alloc = Module["_PyThread_tss_alloc"] = function() {
            return (_PyThread_tss_alloc = Module["_PyThread_tss_alloc"] = Module["asm"]["PyThread_tss_alloc"]).apply(null, arguments)
        }
        ;
        var _PyThread_tss_free = Module["_PyThread_tss_free"] = function() {
            return (_PyThread_tss_free = Module["_PyThread_tss_free"] = Module["asm"]["PyThread_tss_free"]).apply(null, arguments)
        }
        ;
        var _confstr = Module["_confstr"] = function() {
            return (_confstr = Module["_confstr"] = Module["asm"]["confstr"]).apply(null, arguments)
        }
        ;
        var __PyTraceback_Add = Module["__PyTraceback_Add"] = function() {
            return (__PyTraceback_Add = Module["__PyTraceback_Add"] = Module["asm"]["_PyTraceback_Add"]).apply(null, arguments)
        }
        ;
        var _PyOS_mystricmp = Module["_PyOS_mystricmp"] = function() {
            return (_PyOS_mystricmp = Module["_PyOS_mystricmp"] = Module["asm"]["PyOS_mystricmp"]).apply(null, arguments)
        }
        ;
        var __Py_strhex = Module["__Py_strhex"] = function() {
            return (__Py_strhex = Module["__Py_strhex"] = Module["asm"]["_Py_strhex"]).apply(null, arguments)
        }
        ;
        var __Py_strhex_bytes = Module["__Py_strhex_bytes"] = function() {
            return (__Py_strhex_bytes = Module["__Py_strhex_bytes"] = Module["asm"]["_Py_strhex_bytes"]).apply(null, arguments)
        }
        ;
        var __Py_strhex_bytes_with_sep = Module["__Py_strhex_bytes_with_sep"] = function() {
            return (__Py_strhex_bytes_with_sep = Module["__Py_strhex_bytes_with_sep"] = Module["asm"]["_Py_strhex_bytes_with_sep"]).apply(null, arguments)
        }
        ;
        var _localeconv = Module["_localeconv"] = function() {
            return (_localeconv = Module["_localeconv"] = Module["asm"]["localeconv"]).apply(null, arguments)
        }
        ;
        var __Py_GetLocaleconvNumeric = Module["__Py_GetLocaleconvNumeric"] = function() {
            return (__Py_GetLocaleconvNumeric = Module["__Py_GetLocaleconvNumeric"] = Module["asm"]["_Py_GetLocaleconvNumeric"]).apply(null, arguments)
        }
        ;
        var __Py_device_encoding = Module["__Py_device_encoding"] = function() {
            return (__Py_device_encoding = Module["__Py_device_encoding"] = Module["asm"]["_Py_device_encoding"]).apply(null, arguments)
        }
        ;
        var __Py_GetLocaleEncodingObject = Module["__Py_GetLocaleEncodingObject"] = function() {
            return (__Py_GetLocaleEncodingObject = Module["__Py_GetLocaleEncodingObject"] = Module["asm"]["_Py_GetLocaleEncodingObject"]).apply(null, arguments)
        }
        ;
        var _mbstowcs = Module["_mbstowcs"] = function() {
            return (_mbstowcs = Module["_mbstowcs"] = Module["asm"]["mbstowcs"]).apply(null, arguments)
        }
        ;
        var _mbrtowc = Module["_mbrtowc"] = function() {
            return (_mbrtowc = Module["_mbrtowc"] = Module["asm"]["mbrtowc"]).apply(null, arguments)
        }
        ;
        var _Py_EncodeLocale = Module["_Py_EncodeLocale"] = function() {
            return (_Py_EncodeLocale = Module["_Py_EncodeLocale"] = Module["asm"]["Py_EncodeLocale"]).apply(null, arguments)
        }
        ;
        var __Py_EncodeLocaleRaw = Module["__Py_EncodeLocaleRaw"] = function() {
            return (__Py_EncodeLocaleRaw = Module["__Py_EncodeLocaleRaw"] = Module["asm"]["_Py_EncodeLocaleRaw"]).apply(null, arguments)
        }
        ;
        var __Py_stat = Module["__Py_stat"] = function() {
            return (__Py_stat = Module["__Py_stat"] = Module["asm"]["_Py_stat"]).apply(null, arguments)
        }
        ;
        var _stat = Module["_stat"] = function() {
            return (_stat = Module["_stat"] = Module["asm"]["stat"]).apply(null, arguments)
        }
        ;
        var __Py_get_inheritable = Module["__Py_get_inheritable"] = function() {
            return (__Py_get_inheritable = Module["__Py_get_inheritable"] = Module["asm"]["_Py_get_inheritable"]).apply(null, arguments)
        }
        ;
        var _fcntl = Module["_fcntl"] = function() {
            return (_fcntl = Module["_fcntl"] = Module["asm"]["fcntl"]).apply(null, arguments)
        }
        ;
        var __Py_set_inheritable = Module["__Py_set_inheritable"] = function() {
            return (__Py_set_inheritable = Module["__Py_set_inheritable"] = Module["asm"]["_Py_set_inheritable"]).apply(null, arguments)
        }
        ;
        var __Py_set_inheritable_async_safe = Module["__Py_set_inheritable_async_safe"] = function() {
            return (__Py_set_inheritable_async_safe = Module["__Py_set_inheritable_async_safe"] = Module["asm"]["_Py_set_inheritable_async_safe"]).apply(null, arguments)
        }
        ;
        var _open = Module["_open"] = function() {
            return (_open = Module["_open"] = Module["asm"]["open"]).apply(null, arguments)
        }
        ;
        var __Py_wfopen = Module["__Py_wfopen"] = function() {
            return (__Py_wfopen = Module["__Py_wfopen"] = Module["asm"]["_Py_wfopen"]).apply(null, arguments)
        }
        ;
        var _wcstombs = Module["_wcstombs"] = function() {
            return (_wcstombs = Module["_wcstombs"] = Module["asm"]["wcstombs"]).apply(null, arguments)
        }
        ;
        var _fopen = Module["_fopen"] = function() {
            return (_fopen = Module["_fopen"] = Module["asm"]["fopen"]).apply(null, arguments)
        }
        ;
        var _write = Module["_write"] = function() {
            return (_write = Module["_write"] = Module["asm"]["write"]).apply(null, arguments)
        }
        ;
        var _readlink = Module["_readlink"] = function() {
            return (_readlink = Module["_readlink"] = Module["asm"]["readlink"]).apply(null, arguments)
        }
        ;
        var _realpath = Module["_realpath"] = function() {
            return (_realpath = Module["_realpath"] = Module["asm"]["realpath"]).apply(null, arguments)
        }
        ;
        var _getcwd = Module["_getcwd"] = function() {
            return (_getcwd = Module["_getcwd"] = Module["asm"]["getcwd"]).apply(null, arguments)
        }
        ;
        var __Py_get_blocking = Module["__Py_get_blocking"] = function() {
            return (__Py_get_blocking = Module["__Py_get_blocking"] = Module["asm"]["_Py_get_blocking"]).apply(null, arguments)
        }
        ;
        var __Py_set_blocking = Module["__Py_set_blocking"] = function() {
            return (__Py_set_blocking = Module["__Py_set_blocking"] = Module["asm"]["_Py_set_blocking"]).apply(null, arguments)
        }
        ;
        var __Py_closerange = Module["__Py_closerange"] = function() {
            return (__Py_closerange = Module["__Py_closerange"] = Module["asm"]["_Py_closerange"]).apply(null, arguments)
        }
        ;
        var __Py_UTF8_Edit_Cost = Module["__Py_UTF8_Edit_Cost"] = function() {
            return (__Py_UTF8_Edit_Cost = Module["__Py_UTF8_Edit_Cost"] = Module["asm"]["_Py_UTF8_Edit_Cost"]).apply(null, arguments)
        }
        ;
        var _dlsym = Module["_dlsym"] = function() {
            return (_dlsym = Module["_dlsym"] = Module["asm"]["dlsym"]).apply(null, arguments)
        }
        ;
        var _dlopen = Module["_dlopen"] = function() {
            return (_dlopen = Module["_dlopen"] = Module["asm"]["dlopen"]).apply(null, arguments)
        }
        ;
        var _dlerror = Module["_dlerror"] = function() {
            return (_dlerror = Module["_dlerror"] = Module["asm"]["dlerror"]).apply(null, arguments)
        }
        ;
        var _PyInit_array = Module["_PyInit_array"] = function() {
            return (_PyInit_array = Module["_PyInit_array"] = Module["asm"]["PyInit_array"]).apply(null, arguments)
        }
        ;
        var _PyInit_audioop = Module["_PyInit_audioop"] = function() {
            return (_PyInit_audioop = Module["_PyInit_audioop"] = Module["asm"]["PyInit_audioop"]).apply(null, arguments)
        }
        ;
        var _PyInit_math = Module["_PyInit_math"] = function() {
            return (_PyInit_math = Module["_PyInit_math"] = Module["asm"]["PyInit_math"]).apply(null, arguments)
        }
        ;
        var _PyInit_cmath = Module["_PyInit_cmath"] = function() {
            return (_PyInit_cmath = Module["_PyInit_cmath"] = Module["asm"]["PyInit_cmath"]).apply(null, arguments)
        }
        ;
        var _PyInit__contextvars = Module["_PyInit__contextvars"] = function() {
            return (_PyInit__contextvars = Module["_PyInit__contextvars"] = Module["asm"]["PyInit__contextvars"]).apply(null, arguments)
        }
        ;
        var _PyInit__struct = Module["_PyInit__struct"] = function() {
            return (_PyInit__struct = Module["_PyInit__struct"] = Module["asm"]["PyInit__struct"]).apply(null, arguments)
        }
        ;
        var _PyInit__random = Module["_PyInit__random"] = function() {
            return (_PyInit__random = Module["_PyInit__random"] = Module["asm"]["PyInit__random"]).apply(null, arguments)
        }
        ;
        var _PyInit__bisect = Module["_PyInit__bisect"] = function() {
            return (_PyInit__bisect = Module["_PyInit__bisect"] = Module["asm"]["PyInit__bisect"]).apply(null, arguments)
        }
        ;
        var _PyInit__datetime = Module["_PyInit__datetime"] = function() {
            return (_PyInit__datetime = Module["_PyInit__datetime"] = Module["asm"]["PyInit__datetime"]).apply(null, arguments)
        }
        ;
        var _PyInit__heapq = Module["_PyInit__heapq"] = function() {
            return (_PyInit__heapq = Module["_PyInit__heapq"] = Module["asm"]["PyInit__heapq"]).apply(null, arguments)
        }
        ;
        var _PyInit__json = Module["_PyInit__json"] = function() {
            return (_PyInit__json = Module["_PyInit__json"] = Module["asm"]["PyInit__json"]).apply(null, arguments)
        }
        ;
        var _PyInit__csv = Module["_PyInit__csv"] = function() {
            return (_PyInit__csv = Module["_PyInit__csv"] = Module["asm"]["PyInit__csv"]).apply(null, arguments)
        }
        ;
        var _PyInit__ctypes = Module["_PyInit__ctypes"] = function() {
            return (_PyInit__ctypes = Module["_PyInit__ctypes"] = Module["asm"]["PyInit__ctypes"]).apply(null, arguments)
        }
        ;
        var _PyInit_unicodedata = Module["_PyInit_unicodedata"] = function() {
            return (_PyInit_unicodedata = Module["_PyInit_unicodedata"] = Module["asm"]["PyInit_unicodedata"]).apply(null, arguments)
        }
        ;
        var _PyInit__pickle = Module["_PyInit__pickle"] = function() {
            return (_PyInit__pickle = Module["_PyInit__pickle"] = Module["asm"]["PyInit__pickle"]).apply(null, arguments)
        }
        ;
        var _PyInit__socket = Module["_PyInit__socket"] = function() {
            return (_PyInit__socket = Module["_PyInit__socket"] = Module["asm"]["PyInit__socket"]).apply(null, arguments)
        }
        ;
        var _PyInit_select = Module["_PyInit_select"] = function() {
            return (_PyInit_select = Module["_PyInit_select"] = Module["asm"]["PyInit_select"]).apply(null, arguments)
        }
        ;
        var _PyInit__posixsubprocess = Module["_PyInit__posixsubprocess"] = function() {
            return (_PyInit__posixsubprocess = Module["_PyInit__posixsubprocess"] = Module["asm"]["PyInit__posixsubprocess"]).apply(null, arguments)
        }
        ;
        var _PyInit_binascii = Module["_PyInit_binascii"] = function() {
            return (_PyInit_binascii = Module["_PyInit_binascii"] = Module["asm"]["PyInit_binascii"]).apply(null, arguments)
        }
        ;
        var _PyInit_zlib = Module["_PyInit_zlib"] = function() {
            return (_PyInit_zlib = Module["_PyInit_zlib"] = Module["asm"]["PyInit_zlib"]).apply(null, arguments)
        }
        ;
        var _PyInit_pyexpat = Module["_PyInit_pyexpat"] = function() {
            return (_PyInit_pyexpat = Module["_PyInit_pyexpat"] = Module["asm"]["PyInit_pyexpat"]).apply(null, arguments)
        }
        ;
        var _PyInit__sha1 = Module["_PyInit__sha1"] = function() {
            return (_PyInit__sha1 = Module["_PyInit__sha1"] = Module["asm"]["PyInit__sha1"]).apply(null, arguments)
        }
        ;
        var _PyInit__sha256 = Module["_PyInit__sha256"] = function() {
            return (_PyInit__sha256 = Module["_PyInit__sha256"] = Module["asm"]["PyInit__sha256"]).apply(null, arguments)
        }
        ;
        var _PyInit__sha512 = Module["_PyInit__sha512"] = function() {
            return (_PyInit__sha512 = Module["_PyInit__sha512"] = Module["asm"]["PyInit__sha512"]).apply(null, arguments)
        }
        ;
        var _PyInit__sha3 = Module["_PyInit__sha3"] = function() {
            return (_PyInit__sha3 = Module["_PyInit__sha3"] = Module["asm"]["PyInit__sha3"]).apply(null, arguments)
        }
        ;
        var _PyInit__md5 = Module["_PyInit__md5"] = function() {
            return (_PyInit__md5 = Module["_PyInit__md5"] = Module["asm"]["PyInit__md5"]).apply(null, arguments)
        }
        ;
        var _PyInit__blake2 = Module["_PyInit__blake2"] = function() {
            return (_PyInit__blake2 = Module["_PyInit__blake2"] = Module["asm"]["PyInit__blake2"]).apply(null, arguments)
        }
        ;
        var _PyInit__crypt = Module["_PyInit__crypt"] = function() {
            return (_PyInit__crypt = Module["_PyInit__crypt"] = Module["asm"]["PyInit__crypt"]).apply(null, arguments)
        }
        ;
        var _PyInit__bz2 = Module["_PyInit__bz2"] = function() {
            return (_PyInit__bz2 = Module["_PyInit__bz2"] = Module["asm"]["PyInit__bz2"]).apply(null, arguments)
        }
        ;
        var _PyInit__queue = Module["_PyInit__queue"] = function() {
            return (_PyInit__queue = Module["_PyInit__queue"] = Module["asm"]["PyInit__queue"]).apply(null, arguments)
        }
        ;
        var _PyInit__multibytecodec = Module["_PyInit__multibytecodec"] = function() {
            return (_PyInit__multibytecodec = Module["_PyInit__multibytecodec"] = Module["asm"]["PyInit__multibytecodec"]).apply(null, arguments)
        }
        ;
        var _PyInit__codecs_cn = Module["_PyInit__codecs_cn"] = function() {
            return (_PyInit__codecs_cn = Module["_PyInit__codecs_cn"] = Module["asm"]["PyInit__codecs_cn"]).apply(null, arguments)
        }
        ;
        var _PyInit__codecs_hk = Module["_PyInit__codecs_hk"] = function() {
            return (_PyInit__codecs_hk = Module["_PyInit__codecs_hk"] = Module["asm"]["PyInit__codecs_hk"]).apply(null, arguments)
        }
        ;
        var _PyInit__codecs_iso2022 = Module["_PyInit__codecs_iso2022"] = function() {
            return (_PyInit__codecs_iso2022 = Module["_PyInit__codecs_iso2022"] = Module["asm"]["PyInit__codecs_iso2022"]).apply(null, arguments)
        }
        ;
        var _PyInit__codecs_jp = Module["_PyInit__codecs_jp"] = function() {
            return (_PyInit__codecs_jp = Module["_PyInit__codecs_jp"] = Module["asm"]["PyInit__codecs_jp"]).apply(null, arguments)
        }
        ;
        var _PyInit__codecs_kr = Module["_PyInit__codecs_kr"] = function() {
            return (_PyInit__codecs_kr = Module["_PyInit__codecs_kr"] = Module["asm"]["PyInit__codecs_kr"]).apply(null, arguments)
        }
        ;
        var _PyInit__codecs_tw = Module["_PyInit__codecs_tw"] = function() {
            return (_PyInit__codecs_tw = Module["_PyInit__codecs_tw"] = Module["asm"]["PyInit__codecs_tw"]).apply(null, arguments)
        }
        ;
        var _PyInit__lsprof = Module["_PyInit__lsprof"] = function() {
            return (_PyInit__lsprof = Module["_PyInit__lsprof"] = Module["asm"]["PyInit__lsprof"]).apply(null, arguments)
        }
        ;
        var _PyInit__decimal = Module["_PyInit__decimal"] = function() {
            return (_PyInit__decimal = Module["_PyInit__decimal"] = Module["asm"]["PyInit__decimal"]).apply(null, arguments)
        }
        ;
        var _PyInit_mmap = Module["_PyInit_mmap"] = function() {
            return (_PyInit_mmap = Module["_PyInit_mmap"] = Module["asm"]["PyInit_mmap"]).apply(null, arguments)
        }
        ;
        var _PyInit__xxsubinterpreters = Module["_PyInit__xxsubinterpreters"] = function() {
            return (_PyInit__xxsubinterpreters = Module["_PyInit__xxsubinterpreters"] = Module["asm"]["PyInit__xxsubinterpreters"]).apply(null, arguments)
        }
        ;
        var _PyInit_posix = Module["_PyInit_posix"] = function() {
            return (_PyInit_posix = Module["_PyInit_posix"] = Module["asm"]["PyInit_posix"]).apply(null, arguments)
        }
        ;
        var _PyInit_errno = Module["_PyInit_errno"] = function() {
            return (_PyInit_errno = Module["_PyInit_errno"] = Module["asm"]["PyInit_errno"]).apply(null, arguments)
        }
        ;
        var _PyInit__sre = Module["_PyInit__sre"] = function() {
            return (_PyInit__sre = Module["_PyInit__sre"] = Module["asm"]["PyInit__sre"]).apply(null, arguments)
        }
        ;
        var _PyInit__codecs = Module["_PyInit__codecs"] = function() {
            return (_PyInit__codecs = Module["_PyInit__codecs"] = Module["asm"]["PyInit__codecs"]).apply(null, arguments)
        }
        ;
        var _PyInit__weakref = Module["_PyInit__weakref"] = function() {
            return (_PyInit__weakref = Module["_PyInit__weakref"] = Module["asm"]["PyInit__weakref"]).apply(null, arguments)
        }
        ;
        var _PyInit__functools = Module["_PyInit__functools"] = function() {
            return (_PyInit__functools = Module["_PyInit__functools"] = Module["asm"]["PyInit__functools"]).apply(null, arguments)
        }
        ;
        var _PyInit__operator = Module["_PyInit__operator"] = function() {
            return (_PyInit__operator = Module["_PyInit__operator"] = Module["asm"]["PyInit__operator"]).apply(null, arguments)
        }
        ;
        var _PyInit__collections = Module["_PyInit__collections"] = function() {
            return (_PyInit__collections = Module["_PyInit__collections"] = Module["asm"]["PyInit__collections"]).apply(null, arguments)
        }
        ;
        var _PyInit__abc = Module["_PyInit__abc"] = function() {
            return (_PyInit__abc = Module["_PyInit__abc"] = Module["asm"]["PyInit__abc"]).apply(null, arguments)
        }
        ;
        var _PyInit_itertools = Module["_PyInit_itertools"] = function() {
            return (_PyInit_itertools = Module["_PyInit_itertools"] = Module["asm"]["PyInit_itertools"]).apply(null, arguments)
        }
        ;
        var _PyInit_atexit = Module["_PyInit_atexit"] = function() {
            return (_PyInit_atexit = Module["_PyInit_atexit"] = Module["asm"]["PyInit_atexit"]).apply(null, arguments)
        }
        ;
        var _PyInit__signal = Module["_PyInit__signal"] = function() {
            return (_PyInit__signal = Module["_PyInit__signal"] = Module["asm"]["PyInit__signal"]).apply(null, arguments)
        }
        ;
        var _PyInit__stat = Module["_PyInit__stat"] = function() {
            return (_PyInit__stat = Module["_PyInit__stat"] = Module["asm"]["PyInit__stat"]).apply(null, arguments)
        }
        ;
        var _PyInit_time = Module["_PyInit_time"] = function() {
            return (_PyInit_time = Module["_PyInit_time"] = Module["asm"]["PyInit_time"]).apply(null, arguments)
        }
        ;
        var _PyInit__thread = Module["_PyInit__thread"] = function() {
            return (_PyInit__thread = Module["_PyInit__thread"] = Module["asm"]["PyInit__thread"]).apply(null, arguments)
        }
        ;
        var _PyInit__locale = Module["_PyInit__locale"] = function() {
            return (_PyInit__locale = Module["_PyInit__locale"] = Module["asm"]["PyInit__locale"]).apply(null, arguments)
        }
        ;
        var _PyInit__io = Module["_PyInit__io"] = function() {
            return (_PyInit__io = Module["_PyInit__io"] = Module["asm"]["PyInit__io"]).apply(null, arguments)
        }
        ;
        var _PyInit_faulthandler = Module["_PyInit_faulthandler"] = function() {
            return (_PyInit_faulthandler = Module["_PyInit_faulthandler"] = Module["asm"]["PyInit_faulthandler"]).apply(null, arguments)
        }
        ;
        var _PyInit__tracemalloc = Module["_PyInit__tracemalloc"] = function() {
            return (_PyInit__tracemalloc = Module["_PyInit__tracemalloc"] = Module["asm"]["PyInit__tracemalloc"]).apply(null, arguments)
        }
        ;
        var _PyInit__symtable = Module["_PyInit__symtable"] = function() {
            return (_PyInit__symtable = Module["_PyInit__symtable"] = Module["asm"]["PyInit__symtable"]).apply(null, arguments)
        }
        ;
        var _PyInit_xxsubtype = Module["_PyInit_xxsubtype"] = function() {
            return (_PyInit_xxsubtype = Module["_PyInit_xxsubtype"] = Module["asm"]["PyInit_xxsubtype"]).apply(null, arguments)
        }
        ;
        var _PyInit_gc = Module["_PyInit_gc"] = function() {
            return (_PyInit_gc = Module["_PyInit_gc"] = Module["asm"]["PyInit_gc"]).apply(null, arguments)
        }
        ;
        var _wcscpy = Module["_wcscpy"] = function() {
            return (_wcscpy = Module["_wcscpy"] = Module["asm"]["wcscpy"]).apply(null, arguments)
        }
        ;
        var _wcscat = Module["_wcscat"] = function() {
            return (_wcscat = Module["_wcscat"] = Module["asm"]["wcscat"]).apply(null, arguments)
        }
        ;
        var _wcsncat = Module["_wcsncat"] = function() {
            return (_wcsncat = Module["_wcsncat"] = Module["asm"]["wcsncat"]).apply(null, arguments)
        }
        ;
        var _Py_RunMain = Module["_Py_RunMain"] = function() {
            return (_Py_RunMain = Module["_Py_RunMain"] = Module["asm"]["Py_RunMain"]).apply(null, arguments)
        }
        ;
        var _perror = Module["_perror"] = function() {
            return (_perror = Module["_perror"] = Module["asm"]["perror"]).apply(null, arguments)
        }
        ;
        var _getpid = Module["_getpid"] = function() {
            return (_getpid = Module["_getpid"] = Module["asm"]["getpid"]).apply(null, arguments)
        }
        ;
        var _kill = Module["_kill"] = function() {
            return (_kill = Module["_kill"] = Module["asm"]["kill"]).apply(null, arguments)
        }
        ;
        var _Py_Main = Module["_Py_Main"] = function() {
            return (_Py_Main = Module["_Py_Main"] = Module["asm"]["Py_Main"]).apply(null, arguments)
        }
        ;
        var _Py_BytesMain = Module["_Py_BytesMain"] = function() {
            return (_Py_BytesMain = Module["_Py_BytesMain"] = Module["asm"]["Py_BytesMain"]).apply(null, arguments)
        }
        ;
        var _PyGC_Enable = Module["_PyGC_Enable"] = function() {
            return (_PyGC_Enable = Module["_PyGC_Enable"] = Module["asm"]["PyGC_Enable"]).apply(null, arguments)
        }
        ;
        var _PyGC_Disable = Module["_PyGC_Disable"] = function() {
            return (_PyGC_Disable = Module["_PyGC_Disable"] = Module["asm"]["PyGC_Disable"]).apply(null, arguments)
        }
        ;
        var _PyGC_IsEnabled = Module["_PyGC_IsEnabled"] = function() {
            return (_PyGC_IsEnabled = Module["_PyGC_IsEnabled"] = Module["asm"]["PyGC_IsEnabled"]).apply(null, arguments)
        }
        ;
        var __PyObject_GC_Calloc = Module["__PyObject_GC_Calloc"] = function() {
            return (__PyObject_GC_Calloc = Module["__PyObject_GC_Calloc"] = Module["asm"]["_PyObject_GC_Calloc"]).apply(null, arguments)
        }
        ;
        var _PyObject_GC_IsTracked = Module["_PyObject_GC_IsTracked"] = function() {
            return (_PyObject_GC_IsTracked = Module["_PyObject_GC_IsTracked"] = Module["asm"]["PyObject_GC_IsTracked"]).apply(null, arguments)
        }
        ;
        var _PyObject_GC_IsFinalized = Module["_PyObject_GC_IsFinalized"] = function() {
            return (_PyObject_GC_IsFinalized = Module["_PyObject_GC_IsFinalized"] = Module["asm"]["PyObject_GC_IsFinalized"]).apply(null, arguments)
        }
        ;
        var _acos = Module["_acos"] = function() {
            return (_acos = Module["_acos"] = Module["asm"]["acos"]).apply(null, arguments)
        }
        ;
        var _acosh = Module["_acosh"] = function() {
            return (_acosh = Module["_acosh"] = Module["asm"]["acosh"]).apply(null, arguments)
        }
        ;
        var _asin = Module["_asin"] = function() {
            return (_asin = Module["_asin"] = Module["asm"]["asin"]).apply(null, arguments)
        }
        ;
        var _asinh = Module["_asinh"] = function() {
            return (_asinh = Module["_asinh"] = Module["asm"]["asinh"]).apply(null, arguments)
        }
        ;
        var _atan = Module["_atan"] = function() {
            return (_atan = Module["_atan"] = Module["asm"]["atan"]).apply(null, arguments)
        }
        ;
        var _atanh = Module["_atanh"] = function() {
            return (_atanh = Module["_atanh"] = Module["asm"]["atanh"]).apply(null, arguments)
        }
        ;
        var _copysign = Module["_copysign"] = function() {
            return (_copysign = Module["_copysign"] = Module["asm"]["copysign"]).apply(null, arguments)
        }
        ;
        var _cosh = Module["_cosh"] = function() {
            return (_cosh = Module["_cosh"] = Module["asm"]["cosh"]).apply(null, arguments)
        }
        ;
        var _erf = Module["_erf"] = function() {
            return (_erf = Module["_erf"] = Module["asm"]["erf"]).apply(null, arguments)
        }
        ;
        var _erfc = Module["_erfc"] = function() {
            return (_erfc = Module["_erfc"] = Module["asm"]["erfc"]).apply(null, arguments)
        }
        ;
        var _expm1 = Module["_expm1"] = function() {
            return (_expm1 = Module["_expm1"] = Module["asm"]["expm1"]).apply(null, arguments)
        }
        ;
        var _fabs = Module["_fabs"] = function() {
            return (_fabs = Module["_fabs"] = Module["asm"]["fabs"]).apply(null, arguments)
        }
        ;
        var _sinh = Module["_sinh"] = function() {
            return (_sinh = Module["_sinh"] = Module["asm"]["sinh"]).apply(null, arguments)
        }
        ;
        var _sqrt = Module["_sqrt"] = function() {
            return (_sqrt = Module["_sqrt"] = Module["asm"]["sqrt"]).apply(null, arguments)
        }
        ;
        var _tan = Module["_tan"] = function() {
            return (_tan = Module["_tan"] = Module["asm"]["tan"]).apply(null, arguments)
        }
        ;
        var _tanh = Module["_tanh"] = function() {
            return (_tanh = Module["_tanh"] = Module["asm"]["tanh"]).apply(null, arguments)
        }
        ;
        var _nextafter = Module["_nextafter"] = function() {
            return (_nextafter = Module["_nextafter"] = Module["asm"]["nextafter"]).apply(null, arguments)
        }
        ;
        var _log10 = Module["_log10"] = function() {
            return (_log10 = Module["_log10"] = Module["asm"]["log10"]).apply(null, arguments)
        }
        ;
        var _log2 = Module["_log2"] = function() {
            return (_log2 = Module["_log2"] = Module["asm"]["log2"]).apply(null, arguments)
        }
        ;
        var _log1p = Module["_log1p"] = function() {
            return (_log1p = Module["_log1p"] = Module["asm"]["log1p"]).apply(null, arguments)
        }
        ;
        var _strcat = Module["_strcat"] = function() {
            return (_strcat = Module["_strcat"] = Module["asm"]["strcat"]).apply(null, arguments)
        }
        ;
        var _ffi_closure_free = Module["_ffi_closure_free"] = function() {
            return (_ffi_closure_free = Module["_ffi_closure_free"] = Module["asm"]["ffi_closure_free"]).apply(null, arguments)
        }
        ;
        var _ffi_closure_alloc = Module["_ffi_closure_alloc"] = function() {
            return (_ffi_closure_alloc = Module["_ffi_closure_alloc"] = Module["asm"]["ffi_closure_alloc"]).apply(null, arguments)
        }
        ;
        var _ffi_prep_cif = Module["_ffi_prep_cif"] = function() {
            return (_ffi_prep_cif = Module["_ffi_prep_cif"] = Module["asm"]["ffi_prep_cif"]).apply(null, arguments)
        }
        ;
        var _ffi_prep_closure_loc = Module["_ffi_prep_closure_loc"] = function() {
            return (_ffi_prep_closure_loc = Module["_ffi_prep_closure_loc"] = Module["asm"]["ffi_prep_closure_loc"]).apply(null, arguments)
        }
        ;
        var _ffi_prep_cif_var = Module["_ffi_prep_cif_var"] = function() {
            return (_ffi_prep_cif_var = Module["_ffi_prep_cif_var"] = Module["asm"]["ffi_prep_cif_var"]).apply(null, arguments)
        }
        ;
        var _dlclose = Module["_dlclose"] = function() {
            return (_dlclose = Module["_dlclose"] = Module["asm"]["dlclose"]).apply(null, arguments)
        }
        ;
        var ___extenddftf2 = Module["___extenddftf2"] = function() {
            return (___extenddftf2 = Module["___extenddftf2"] = Module["asm"]["__extenddftf2"]).apply(null, arguments)
        }
        ;
        var ___trunctfdf2 = Module["___trunctfdf2"] = function() {
            return (___trunctfdf2 = Module["___trunctfdf2"] = Module["asm"]["__trunctfdf2"]).apply(null, arguments)
        }
        ;
        var _getsockname = Module["_getsockname"] = function() {
            return (_getsockname = Module["_getsockname"] = Module["asm"]["getsockname"]).apply(null, arguments)
        }
        ;
        var _socket = Module["_socket"] = function() {
            return (_socket = Module["_socket"] = Module["asm"]["socket"]).apply(null, arguments)
        }
        ;
        var _getsockopt = Module["_getsockopt"] = function() {
            return (_getsockopt = Module["_getsockopt"] = Module["asm"]["getsockopt"]).apply(null, arguments)
        }
        ;
        var _bind = Module["_bind"] = function() {
            return (_bind = Module["_bind"] = Module["asm"]["bind"]).apply(null, arguments)
        }
        ;
        var _getpeername = Module["_getpeername"] = function() {
            return (_getpeername = Module["_getpeername"] = Module["asm"]["getpeername"]).apply(null, arguments)
        }
        ;
        var _listen = Module["_listen"] = function() {
            return (_listen = Module["_listen"] = Module["asm"]["listen"]).apply(null, arguments)
        }
        ;
        var _setsockopt = Module["_setsockopt"] = function() {
            return (_setsockopt = Module["_setsockopt"] = Module["asm"]["setsockopt"]).apply(null, arguments)
        }
        ;
        var _shutdown = Module["_shutdown"] = function() {
            return (_shutdown = Module["_shutdown"] = Module["asm"]["shutdown"]).apply(null, arguments)
        }
        ;
        var _accept4 = Module["_accept4"] = function() {
            return (_accept4 = Module["_accept4"] = Module["asm"]["accept4"]).apply(null, arguments)
        }
        ;
        var _accept = Module["_accept"] = function() {
            return (_accept = Module["_accept"] = Module["asm"]["accept"]).apply(null, arguments)
        }
        ;
        var _inet_ntop = Module["_inet_ntop"] = function() {
            return (_inet_ntop = Module["_inet_ntop"] = Module["asm"]["inet_ntop"]).apply(null, arguments)
        }
        ;
        var _ntohs = Module["_ntohs"] = function() {
            return (_ntohs = Module["_ntohs"] = Module["asm"]["ntohs"]).apply(null, arguments)
        }
        ;
        var _ioctl = Module["_ioctl"] = function() {
            return (_ioctl = Module["_ioctl"] = Module["asm"]["ioctl"]).apply(null, arguments)
        }
        ;
        var _poll = Module["_poll"] = function() {
            return (_poll = Module["_poll"] = Module["asm"]["poll"]).apply(null, arguments)
        }
        ;
        var _htons = Module["_htons"] = function() {
            return (_htons = Module["_htons"] = Module["asm"]["htons"]).apply(null, arguments)
        }
        ;
        var _gai_strerror = Module["_gai_strerror"] = function() {
            return (_gai_strerror = Module["_gai_strerror"] = Module["asm"]["gai_strerror"]).apply(null, arguments)
        }
        ;
        var _freeaddrinfo = Module["_freeaddrinfo"] = function() {
            return (_freeaddrinfo = Module["_freeaddrinfo"] = Module["asm"]["freeaddrinfo"]).apply(null, arguments)
        }
        ;
        var _inet_pton = Module["_inet_pton"] = function() {
            return (_inet_pton = Module["_inet_pton"] = Module["asm"]["inet_pton"]).apply(null, arguments)
        }
        ;
        var _connect = Module["_connect"] = function() {
            return (_connect = Module["_connect"] = Module["asm"]["connect"]).apply(null, arguments)
        }
        ;
        var _recv = Module["_recv"] = function() {
            return (_recv = Module["_recv"] = Module["asm"]["recv"]).apply(null, arguments)
        }
        ;
        var _recvfrom = Module["_recvfrom"] = function() {
            return (_recvfrom = Module["_recvfrom"] = Module["asm"]["recvfrom"]).apply(null, arguments)
        }
        ;
        var _send = Module["_send"] = function() {
            return (_send = Module["_send"] = Module["asm"]["send"]).apply(null, arguments)
        }
        ;
        var _sendto = Module["_sendto"] = function() {
            return (_sendto = Module["_sendto"] = Module["asm"]["sendto"]).apply(null, arguments)
        }
        ;
        var _recvmsg = Module["_recvmsg"] = function() {
            return (_recvmsg = Module["_recvmsg"] = Module["asm"]["recvmsg"]).apply(null, arguments)
        }
        ;
        var _sendmsg = Module["_sendmsg"] = function() {
            return (_sendmsg = Module["_sendmsg"] = Module["asm"]["sendmsg"]).apply(null, arguments)
        }
        ;
        var _gethostname = Module["_gethostname"] = function() {
            return (_gethostname = Module["_gethostname"] = Module["asm"]["gethostname"]).apply(null, arguments)
        }
        ;
        var _getservbyname = Module["_getservbyname"] = function() {
            return (_getservbyname = Module["_getservbyname"] = Module["asm"]["getservbyname"]).apply(null, arguments)
        }
        ;
        var _getservbyport = Module["_getservbyport"] = function() {
            return (_getservbyport = Module["_getservbyport"] = Module["asm"]["getservbyport"]).apply(null, arguments)
        }
        ;
        var _ntohl = Module["_ntohl"] = function() {
            return (_ntohl = Module["_ntohl"] = Module["asm"]["ntohl"]).apply(null, arguments)
        }
        ;
        var _htonl = Module["_htonl"] = function() {
            return (_htonl = Module["_htonl"] = Module["asm"]["htonl"]).apply(null, arguments)
        }
        ;
        var _inet_aton = Module["_inet_aton"] = function() {
            return (_inet_aton = Module["_inet_aton"] = Module["asm"]["inet_aton"]).apply(null, arguments)
        }
        ;
        var _inet_ntoa = Module["_inet_ntoa"] = function() {
            return (_inet_ntoa = Module["_inet_ntoa"] = Module["asm"]["inet_ntoa"]).apply(null, arguments)
        }
        ;
        var ___h_errno_location = Module["___h_errno_location"] = function() {
            return (___h_errno_location = Module["___h_errno_location"] = Module["asm"]["__h_errno_location"]).apply(null, arguments)
        }
        ;
        var _hstrerror = Module["_hstrerror"] = function() {
            return (_hstrerror = Module["_hstrerror"] = Module["asm"]["hstrerror"]).apply(null, arguments)
        }
        ;
        var _select = Module["_select"] = function() {
            return (_select = Module["_select"] = Module["asm"]["select"]).apply(null, arguments)
        }
        ;
        var __Py_Gid_Converter = Module["__Py_Gid_Converter"] = function() {
            return (__Py_Gid_Converter = Module["__Py_Gid_Converter"] = Module["asm"]["_Py_Gid_Converter"]).apply(null, arguments)
        }
        ;
        var __Py_Uid_Converter = Module["__Py_Uid_Converter"] = function() {
            return (__Py_Uid_Converter = Module["__Py_Uid_Converter"] = Module["asm"]["_Py_Uid_Converter"]).apply(null, arguments)
        }
        ;
        var _PyOS_BeforeFork = Module["_PyOS_BeforeFork"] = function() {
            return (_PyOS_BeforeFork = Module["_PyOS_BeforeFork"] = Module["asm"]["PyOS_BeforeFork"]).apply(null, arguments)
        }
        ;
        var _PyOS_AfterFork_Parent = Module["_PyOS_AfterFork_Parent"] = function() {
            return (_PyOS_AfterFork_Parent = Module["_PyOS_AfterFork_Parent"] = Module["asm"]["PyOS_AfterFork_Parent"]).apply(null, arguments)
        }
        ;
        var _fork = Module["_fork"] = function() {
            return (_fork = Module["_fork"] = Module["asm"]["fork"]).apply(null, arguments)
        }
        ;
        var _PyOS_AfterFork_Child = Module["_PyOS_AfterFork_Child"] = function() {
            return (_PyOS_AfterFork_Child = Module["_PyOS_AfterFork_Child"] = Module["asm"]["PyOS_AfterFork_Child"]).apply(null, arguments)
        }
        ;
        var __exit = Module["__exit"] = function() {
            return (__exit = Module["__exit"] = Module["asm"]["_exit"]).apply(null, arguments)
        }
        ;
        var _dup = Module["_dup"] = function() {
            return (_dup = Module["_dup"] = Module["asm"]["dup"]).apply(null, arguments)
        }
        ;
        var _dup2 = Module["_dup2"] = function() {
            return (_dup2 = Module["_dup2"] = Module["asm"]["dup2"]).apply(null, arguments)
        }
        ;
        var _chdir = Module["_chdir"] = function() {
            return (_chdir = Module["_chdir"] = Module["asm"]["chdir"]).apply(null, arguments)
        }
        ;
        var _umask = Module["_umask"] = function() {
            return (_umask = Module["_umask"] = Module["asm"]["umask"]).apply(null, arguments)
        }
        ;
        var __Py_RestoreSignals = Module["__Py_RestoreSignals"] = function() {
            return (__Py_RestoreSignals = Module["__Py_RestoreSignals"] = Module["asm"]["_Py_RestoreSignals"]).apply(null, arguments)
        }
        ;
        var _setsid = Module["_setsid"] = function() {
            return (_setsid = Module["_setsid"] = Module["asm"]["setsid"]).apply(null, arguments)
        }
        ;
        var _setgroups = Module["_setgroups"] = function() {
            return (_setgroups = Module["_setgroups"] = Module["asm"]["setgroups"]).apply(null, arguments)
        }
        ;
        var _setregid = Module["_setregid"] = function() {
            return (_setregid = Module["_setregid"] = Module["asm"]["setregid"]).apply(null, arguments)
        }
        ;
        var _setreuid = Module["_setreuid"] = function() {
            return (_setreuid = Module["_setreuid"] = Module["asm"]["setreuid"]).apply(null, arguments)
        }
        ;
        var _execve = Module["_execve"] = function() {
            return (_execve = Module["_execve"] = Module["asm"]["execve"]).apply(null, arguments)
        }
        ;
        var _execv = Module["_execv"] = function() {
            return (_execv = Module["_execv"] = Module["asm"]["execv"]).apply(null, arguments)
        }
        ;
        var _opendir = Module["_opendir"] = function() {
            return (_opendir = Module["_opendir"] = Module["asm"]["opendir"]).apply(null, arguments)
        }
        ;
        var _sysconf = Module["_sysconf"] = function() {
            return (_sysconf = Module["_sysconf"] = Module["asm"]["sysconf"]).apply(null, arguments)
        }
        ;
        var _dirfd = Module["_dirfd"] = function() {
            return (_dirfd = Module["_dirfd"] = Module["asm"]["dirfd"]).apply(null, arguments)
        }
        ;
        var _readdir = Module["_readdir"] = function() {
            return (_readdir = Module["_readdir"] = Module["asm"]["readdir"]).apply(null, arguments)
        }
        ;
        var _closedir = Module["_closedir"] = function() {
            return (_closedir = Module["_closedir"] = Module["asm"]["closedir"]).apply(null, arguments)
        }
        ;
        var _adler32 = Module["_adler32"] = function() {
            return (_adler32 = Module["_adler32"] = Module["asm"]["adler32"]).apply(null, arguments)
        }
        ;
        var _deflateInit_ = Module["_deflateInit_"] = function() {
            return (_deflateInit_ = Module["_deflateInit_"] = Module["asm"]["deflateInit_"]).apply(null, arguments)
        }
        ;
        var _deflateEnd = Module["_deflateEnd"] = function() {
            return (_deflateEnd = Module["_deflateEnd"] = Module["asm"]["deflateEnd"]).apply(null, arguments)
        }
        ;
        var _deflate = Module["_deflate"] = function() {
            return (_deflate = Module["_deflate"] = Module["asm"]["deflate"]).apply(null, arguments)
        }
        ;
        var _deflateInit2_ = Module["_deflateInit2_"] = function() {
            return (_deflateInit2_ = Module["_deflateInit2_"] = Module["asm"]["deflateInit2_"]).apply(null, arguments)
        }
        ;
        var _deflateSetDictionary = Module["_deflateSetDictionary"] = function() {
            return (_deflateSetDictionary = Module["_deflateSetDictionary"] = Module["asm"]["deflateSetDictionary"]).apply(null, arguments)
        }
        ;
        var _crc32 = Module["_crc32"] = function() {
            return (_crc32 = Module["_crc32"] = Module["asm"]["crc32"]).apply(null, arguments)
        }
        ;
        var _inflateInit2_ = Module["_inflateInit2_"] = function() {
            return (_inflateInit2_ = Module["_inflateInit2_"] = Module["asm"]["inflateInit2_"]).apply(null, arguments)
        }
        ;
        var _inflateEnd = Module["_inflateEnd"] = function() {
            return (_inflateEnd = Module["_inflateEnd"] = Module["asm"]["inflateEnd"]).apply(null, arguments)
        }
        ;
        var _inflate = Module["_inflate"] = function() {
            return (_inflate = Module["_inflate"] = Module["asm"]["inflate"]).apply(null, arguments)
        }
        ;
        var _inflateSetDictionary = Module["_inflateSetDictionary"] = function() {
            return (_inflateSetDictionary = Module["_inflateSetDictionary"] = Module["asm"]["inflateSetDictionary"]).apply(null, arguments)
        }
        ;
        var _zlibVersion = Module["_zlibVersion"] = function() {
            return (_zlibVersion = Module["_zlibVersion"] = Module["asm"]["zlibVersion"]).apply(null, arguments)
        }
        ;
        var _deflateCopy = Module["_deflateCopy"] = function() {
            return (_deflateCopy = Module["_deflateCopy"] = Module["asm"]["deflateCopy"]).apply(null, arguments)
        }
        ;
        var _inflateCopy = Module["_inflateCopy"] = function() {
            return (_inflateCopy = Module["_inflateCopy"] = Module["asm"]["inflateCopy"]).apply(null, arguments)
        }
        ;
        var ___small_fprintf = Module["___small_fprintf"] = function() {
            return (___small_fprintf = Module["___small_fprintf"] = Module["asm"]["__small_fprintf"]).apply(null, arguments)
        }
        ;
        var _explicit_bzero = Module["_explicit_bzero"] = function() {
            return (_explicit_bzero = Module["_explicit_bzero"] = Module["asm"]["explicit_bzero"]).apply(null, arguments)
        }
        ;
        var _crypt_r = Module["_crypt_r"] = function() {
            return (_crypt_r = Module["_crypt_r"] = Module["asm"]["crypt_r"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzCompressEnd = Module["_BZ2_bzCompressEnd"] = function() {
            return (_BZ2_bzCompressEnd = Module["_BZ2_bzCompressEnd"] = Module["asm"]["BZ2_bzCompressEnd"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzCompressInit = Module["_BZ2_bzCompressInit"] = function() {
            return (_BZ2_bzCompressInit = Module["_BZ2_bzCompressInit"] = Module["asm"]["BZ2_bzCompressInit"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzCompress = Module["_BZ2_bzCompress"] = function() {
            return (_BZ2_bzCompress = Module["_BZ2_bzCompress"] = Module["asm"]["BZ2_bzCompress"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzDecompressEnd = Module["_BZ2_bzDecompressEnd"] = function() {
            return (_BZ2_bzDecompressEnd = Module["_BZ2_bzDecompressEnd"] = Module["asm"]["BZ2_bzDecompressEnd"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzDecompressInit = Module["_BZ2_bzDecompressInit"] = function() {
            return (_BZ2_bzDecompressInit = Module["_BZ2_bzDecompressInit"] = Module["asm"]["BZ2_bzDecompressInit"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzDecompress = Module["_BZ2_bzDecompress"] = function() {
            return (_BZ2_bzDecompress = Module["_BZ2_bzDecompress"] = Module["asm"]["BZ2_bzDecompress"]).apply(null, arguments)
        }
        ;
        var _snprintf = Module["_snprintf"] = function() {
            return (_snprintf = Module["_snprintf"] = Module["asm"]["snprintf"]).apply(null, arguments)
        }
        ;
        var _raise = Module["_raise"] = function() {
            return (_raise = Module["_raise"] = Module["asm"]["raise"]).apply(null, arguments)
        }
        ;
        var _isupper = Module["_isupper"] = function() {
            return (_isupper = Module["_isupper"] = Module["asm"]["isupper"]).apply(null, arguments)
        }
        ;
        var _puts = Module["_puts"] = function() {
            return (_puts = Module["_puts"] = Module["asm"]["puts"]).apply(null, arguments)
        }
        ;
        var _mmap = Module["_mmap"] = function() {
            return (_mmap = Module["_mmap"] = Module["asm"]["mmap"]).apply(null, arguments)
        }
        ;
        var _munmap = Module["_munmap"] = function() {
            return (_munmap = Module["_munmap"] = Module["asm"]["munmap"]).apply(null, arguments)
        }
        ;
        var _msync = Module["_msync"] = function() {
            return (_msync = Module["_msync"] = Module["asm"]["msync"]).apply(null, arguments)
        }
        ;
        var _madvise = Module["_madvise"] = function() {
            return (_madvise = Module["_madvise"] = Module["asm"]["madvise"]).apply(null, arguments)
        }
        ;
        var _ftruncate = Module["_ftruncate"] = function() {
            return (_ftruncate = Module["_ftruncate"] = Module["asm"]["ftruncate"]).apply(null, arguments)
        }
        ;
        var _mremap = Module["_mremap"] = function() {
            return (_mremap = Module["_mremap"] = Module["asm"]["mremap"]).apply(null, arguments)
        }
        ;
        var _PyOS_AfterFork = Module["_PyOS_AfterFork"] = function() {
            return (_PyOS_AfterFork = Module["_PyOS_AfterFork"] = Module["asm"]["PyOS_AfterFork"]).apply(null, arguments)
        }
        ;
        var __PyLong_FromUid = Module["__PyLong_FromUid"] = function() {
            return (__PyLong_FromUid = Module["__PyLong_FromUid"] = Module["asm"]["_PyLong_FromUid"]).apply(null, arguments)
        }
        ;
        var __PyLong_FromGid = Module["__PyLong_FromGid"] = function() {
            return (__PyLong_FromGid = Module["__PyLong_FromGid"] = Module["asm"]["_PyLong_FromGid"]).apply(null, arguments)
        }
        ;
        var __Py_Sigset_Converter = Module["__Py_Sigset_Converter"] = function() {
            return (__Py_Sigset_Converter = Module["__Py_Sigset_Converter"] = Module["asm"]["_Py_Sigset_Converter"]).apply(null, arguments)
        }
        ;
        var _sigemptyset = Module["_sigemptyset"] = function() {
            return (_sigemptyset = Module["_sigemptyset"] = Module["asm"]["sigemptyset"]).apply(null, arguments)
        }
        ;
        var _sigaddset = Module["_sigaddset"] = function() {
            return (_sigaddset = Module["_sigaddset"] = Module["asm"]["sigaddset"]).apply(null, arguments)
        }
        ;
        var _faccessat = Module["_faccessat"] = function() {
            return (_faccessat = Module["_faccessat"] = Module["asm"]["faccessat"]).apply(null, arguments)
        }
        ;
        var _access = Module["_access"] = function() {
            return (_access = Module["_access"] = Module["asm"]["access"]).apply(null, arguments)
        }
        ;
        var _ttyname_r = Module["_ttyname_r"] = function() {
            return (_ttyname_r = Module["_ttyname_r"] = Module["asm"]["ttyname_r"]).apply(null, arguments)
        }
        ;
        var _fchdir = Module["_fchdir"] = function() {
            return (_fchdir = Module["_fchdir"] = Module["asm"]["fchdir"]).apply(null, arguments)
        }
        ;
        var _fchmod = Module["_fchmod"] = function() {
            return (_fchmod = Module["_fchmod"] = Module["asm"]["fchmod"]).apply(null, arguments)
        }
        ;
        var _lchmod = Module["_lchmod"] = function() {
            return (_lchmod = Module["_lchmod"] = Module["asm"]["lchmod"]).apply(null, arguments)
        }
        ;
        var _chmod = Module["_chmod"] = function() {
            return (_chmod = Module["_chmod"] = Module["asm"]["chmod"]).apply(null, arguments)
        }
        ;
        var _fchown = Module["_fchown"] = function() {
            return (_fchown = Module["_fchown"] = Module["asm"]["fchown"]).apply(null, arguments)
        }
        ;
        var _lchown = Module["_lchown"] = function() {
            return (_lchown = Module["_lchown"] = Module["asm"]["lchown"]).apply(null, arguments)
        }
        ;
        var _chown = Module["_chown"] = function() {
            return (_chown = Module["_chown"] = Module["asm"]["chown"]).apply(null, arguments)
        }
        ;
        var _chroot = Module["_chroot"] = function() {
            return (_chroot = Module["_chroot"] = Module["asm"]["chroot"]).apply(null, arguments)
        }
        ;
        var _ctermid = Module["_ctermid"] = function() {
            return (_ctermid = Module["_ctermid"] = Module["asm"]["ctermid"]).apply(null, arguments)
        }
        ;
        var _link = Module["_link"] = function() {
            return (_link = Module["_link"] = Module["asm"]["link"]).apply(null, arguments)
        }
        ;
        var _fdopendir = Module["_fdopendir"] = function() {
            return (_fdopendir = Module["_fdopendir"] = Module["asm"]["fdopendir"]).apply(null, arguments)
        }
        ;
        var _rewinddir = Module["_rewinddir"] = function() {
            return (_rewinddir = Module["_rewinddir"] = Module["asm"]["rewinddir"]).apply(null, arguments)
        }
        ;
        var _mkdir = Module["_mkdir"] = function() {
            return (_mkdir = Module["_mkdir"] = Module["asm"]["mkdir"]).apply(null, arguments)
        }
        ;
        var _getpriority = Module["_getpriority"] = function() {
            return (_getpriority = Module["_getpriority"] = Module["asm"]["getpriority"]).apply(null, arguments)
        }
        ;
        var _setpriority = Module["_setpriority"] = function() {
            return (_setpriority = Module["_setpriority"] = Module["asm"]["setpriority"]).apply(null, arguments)
        }
        ;
        var _posix_spawn_file_actions_init = Module["_posix_spawn_file_actions_init"] = function() {
            return (_posix_spawn_file_actions_init = Module["_posix_spawn_file_actions_init"] = Module["asm"]["posix_spawn_file_actions_init"]).apply(null, arguments)
        }
        ;
        var _posix_spawn_file_actions_addopen = Module["_posix_spawn_file_actions_addopen"] = function() {
            return (_posix_spawn_file_actions_addopen = Module["_posix_spawn_file_actions_addopen"] = Module["asm"]["posix_spawn_file_actions_addopen"]).apply(null, arguments)
        }
        ;
        var _posix_spawn_file_actions_addclose = Module["_posix_spawn_file_actions_addclose"] = function() {
            return (_posix_spawn_file_actions_addclose = Module["_posix_spawn_file_actions_addclose"] = Module["asm"]["posix_spawn_file_actions_addclose"]).apply(null, arguments)
        }
        ;
        var _posix_spawn_file_actions_adddup2 = Module["_posix_spawn_file_actions_adddup2"] = function() {
            return (_posix_spawn_file_actions_adddup2 = Module["_posix_spawn_file_actions_adddup2"] = Module["asm"]["posix_spawn_file_actions_adddup2"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_init = Module["_posix_spawnattr_init"] = function() {
            return (_posix_spawnattr_init = Module["_posix_spawnattr_init"] = Module["asm"]["posix_spawnattr_init"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_setpgroup = Module["_posix_spawnattr_setpgroup"] = function() {
            return (_posix_spawnattr_setpgroup = Module["_posix_spawnattr_setpgroup"] = Module["asm"]["posix_spawnattr_setpgroup"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_setsigmask = Module["_posix_spawnattr_setsigmask"] = function() {
            return (_posix_spawnattr_setsigmask = Module["_posix_spawnattr_setsigmask"] = Module["asm"]["posix_spawnattr_setsigmask"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_setsigdefault = Module["_posix_spawnattr_setsigdefault"] = function() {
            return (_posix_spawnattr_setsigdefault = Module["_posix_spawnattr_setsigdefault"] = Module["asm"]["posix_spawnattr_setsigdefault"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_setschedpolicy = Module["_posix_spawnattr_setschedpolicy"] = function() {
            return (_posix_spawnattr_setschedpolicy = Module["_posix_spawnattr_setschedpolicy"] = Module["asm"]["posix_spawnattr_setschedpolicy"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_setschedparam = Module["_posix_spawnattr_setschedparam"] = function() {
            return (_posix_spawnattr_setschedparam = Module["_posix_spawnattr_setschedparam"] = Module["asm"]["posix_spawnattr_setschedparam"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_setflags = Module["_posix_spawnattr_setflags"] = function() {
            return (_posix_spawnattr_setflags = Module["_posix_spawnattr_setflags"] = Module["asm"]["posix_spawnattr_setflags"]).apply(null, arguments)
        }
        ;
        var _posix_spawn = Module["_posix_spawn"] = function() {
            return (_posix_spawn = Module["_posix_spawn"] = Module["asm"]["posix_spawn"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_destroy = Module["_posix_spawnattr_destroy"] = function() {
            return (_posix_spawnattr_destroy = Module["_posix_spawnattr_destroy"] = Module["asm"]["posix_spawnattr_destroy"]).apply(null, arguments)
        }
        ;
        var _posix_spawn_file_actions_destroy = Module["_posix_spawn_file_actions_destroy"] = function() {
            return (_posix_spawn_file_actions_destroy = Module["_posix_spawn_file_actions_destroy"] = Module["asm"]["posix_spawn_file_actions_destroy"]).apply(null, arguments)
        }
        ;
        var _unlinkat = Module["_unlinkat"] = function() {
            return (_unlinkat = Module["_unlinkat"] = Module["asm"]["unlinkat"]).apply(null, arguments)
        }
        ;
        var _rmdir = Module["_rmdir"] = function() {
            return (_rmdir = Module["_rmdir"] = Module["asm"]["rmdir"]).apply(null, arguments)
        }
        ;
        var _symlink = Module["_symlink"] = function() {
            return (_symlink = Module["_symlink"] = Module["asm"]["symlink"]).apply(null, arguments)
        }
        ;
        var _uname = Module["_uname"] = function() {
            return (_uname = Module["_uname"] = Module["asm"]["uname"]).apply(null, arguments)
        }
        ;
        var _futimens = Module["_futimens"] = function() {
            return (_futimens = Module["_futimens"] = Module["asm"]["futimens"]).apply(null, arguments)
        }
        ;
        var _times = Module["_times"] = function() {
            return (_times = Module["_times"] = Module["asm"]["times"]).apply(null, arguments)
        }
        ;
        var _fexecve = Module["_fexecve"] = function() {
            return (_fexecve = Module["_fexecve"] = Module["asm"]["fexecve"]).apply(null, arguments)
        }
        ;
        var _sched_yield = Module["_sched_yield"] = function() {
            return (_sched_yield = Module["_sched_yield"] = Module["asm"]["sched_yield"]).apply(null, arguments)
        }
        ;
        var _openpty = Module["_openpty"] = function() {
            return (_openpty = Module["_openpty"] = Module["asm"]["openpty"]).apply(null, arguments)
        }
        ;
        var _forkpty = Module["_forkpty"] = function() {
            return (_forkpty = Module["_forkpty"] = Module["asm"]["forkpty"]).apply(null, arguments)
        }
        ;
        var _getegid = Module["_getegid"] = function() {
            return (_getegid = Module["_getegid"] = Module["asm"]["getegid"]).apply(null, arguments)
        }
        ;
        var _geteuid = Module["_geteuid"] = function() {
            return (_geteuid = Module["_geteuid"] = Module["asm"]["geteuid"]).apply(null, arguments)
        }
        ;
        var _getgid = Module["_getgid"] = function() {
            return (_getgid = Module["_getgid"] = Module["asm"]["getgid"]).apply(null, arguments)
        }
        ;
        var _getgroups = Module["_getgroups"] = function() {
            return (_getgroups = Module["_getgroups"] = Module["asm"]["getgroups"]).apply(null, arguments)
        }
        ;
        var _getpgrp = Module["_getpgrp"] = function() {
            return (_getpgrp = Module["_getpgrp"] = Module["asm"]["getpgrp"]).apply(null, arguments)
        }
        ;
        var _getppid = Module["_getppid"] = function() {
            return (_getppid = Module["_getppid"] = Module["asm"]["getppid"]).apply(null, arguments)
        }
        ;
        var _getuid = Module["_getuid"] = function() {
            return (_getuid = Module["_getuid"] = Module["asm"]["getuid"]).apply(null, arguments)
        }
        ;
        var _getlogin = Module["_getlogin"] = function() {
            return (_getlogin = Module["_getlogin"] = Module["asm"]["getlogin"]).apply(null, arguments)
        }
        ;
        var _killpg = Module["_killpg"] = function() {
            return (_killpg = Module["_killpg"] = Module["asm"]["killpg"]).apply(null, arguments)
        }
        ;
        var _setuid = Module["_setuid"] = function() {
            return (_setuid = Module["_setuid"] = Module["asm"]["setuid"]).apply(null, arguments)
        }
        ;
        var _seteuid = Module["_seteuid"] = function() {
            return (_seteuid = Module["_seteuid"] = Module["asm"]["seteuid"]).apply(null, arguments)
        }
        ;
        var _setgid = Module["_setgid"] = function() {
            return (_setgid = Module["_setgid"] = Module["asm"]["setgid"]).apply(null, arguments)
        }
        ;
        var _setegid = Module["_setegid"] = function() {
            return (_setegid = Module["_setegid"] = Module["asm"]["setegid"]).apply(null, arguments)
        }
        ;
        var _getpgid = Module["_getpgid"] = function() {
            return (_getpgid = Module["_getpgid"] = Module["asm"]["getpgid"]).apply(null, arguments)
        }
        ;
        var _setpgrp = Module["_setpgrp"] = function() {
            return (_setpgrp = Module["_setpgrp"] = Module["asm"]["setpgrp"]).apply(null, arguments)
        }
        ;
        var _wait = Module["_wait"] = function() {
            return (_wait = Module["_wait"] = Module["asm"]["wait"]).apply(null, arguments)
        }
        ;
        var _waitid = Module["_waitid"] = function() {
            return (_waitid = Module["_waitid"] = Module["asm"]["waitid"]).apply(null, arguments)
        }
        ;
        var _waitpid = Module["_waitpid"] = function() {
            return (_waitpid = Module["_waitpid"] = Module["asm"]["waitpid"]).apply(null, arguments)
        }
        ;
        var _getsid = Module["_getsid"] = function() {
            return (_getsid = Module["_getsid"] = Module["asm"]["getsid"]).apply(null, arguments)
        }
        ;
        var _setpgid = Module["_setpgid"] = function() {
            return (_setpgid = Module["_setpgid"] = Module["asm"]["setpgid"]).apply(null, arguments)
        }
        ;
        var _tcgetpgrp = Module["_tcgetpgrp"] = function() {
            return (_tcgetpgrp = Module["_tcgetpgrp"] = Module["asm"]["tcgetpgrp"]).apply(null, arguments)
        }
        ;
        var _tcsetpgrp = Module["_tcsetpgrp"] = function() {
            return (_tcsetpgrp = Module["_tcsetpgrp"] = Module["asm"]["tcsetpgrp"]).apply(null, arguments)
        }
        ;
        var _lockf = Module["_lockf"] = function() {
            return (_lockf = Module["_lockf"] = Module["asm"]["lockf"]).apply(null, arguments)
        }
        ;
        var _readv = Module["_readv"] = function() {
            return (_readv = Module["_readv"] = Module["asm"]["readv"]).apply(null, arguments)
        }
        ;
        var _pread = Module["_pread"] = function() {
            return (_pread = Module["_pread"] = Module["asm"]["pread"]).apply(null, arguments)
        }
        ;
        var _writev = Module["_writev"] = function() {
            return (_writev = Module["_writev"] = Module["asm"]["writev"]).apply(null, arguments)
        }
        ;
        var _pwrite = Module["_pwrite"] = function() {
            return (_pwrite = Module["_pwrite"] = Module["asm"]["pwrite"]).apply(null, arguments)
        }
        ;
        var _pipe = Module["_pipe"] = function() {
            return (_pipe = Module["_pipe"] = Module["asm"]["pipe"]).apply(null, arguments)
        }
        ;
        var _mkfifoat = Module["_mkfifoat"] = function() {
            return (_mkfifoat = Module["_mkfifoat"] = Module["asm"]["mkfifoat"]).apply(null, arguments)
        }
        ;
        var _mkfifo = Module["_mkfifo"] = function() {
            return (_mkfifo = Module["_mkfifo"] = Module["asm"]["mkfifo"]).apply(null, arguments)
        }
        ;
        var _mknodat = Module["_mknodat"] = function() {
            return (_mknodat = Module["_mknodat"] = Module["asm"]["mknodat"]).apply(null, arguments)
        }
        ;
        var _mknod = Module["_mknod"] = function() {
            return (_mknod = Module["_mknod"] = Module["asm"]["mknod"]).apply(null, arguments)
        }
        ;
        var _truncate = Module["_truncate"] = function() {
            return (_truncate = Module["_truncate"] = Module["asm"]["truncate"]).apply(null, arguments)
        }
        ;
        var _posix_fallocate = Module["_posix_fallocate"] = function() {
            return (_posix_fallocate = Module["_posix_fallocate"] = Module["asm"]["posix_fallocate"]).apply(null, arguments)
        }
        ;
        var _posix_fadvise = Module["_posix_fadvise"] = function() {
            return (_posix_fadvise = Module["_posix_fadvise"] = Module["asm"]["posix_fadvise"]).apply(null, arguments)
        }
        ;
        var _unsetenv = Module["_unsetenv"] = function() {
            return (_unsetenv = Module["_unsetenv"] = Module["asm"]["unsetenv"]).apply(null, arguments)
        }
        ;
        var _fsync = Module["_fsync"] = function() {
            return (_fsync = Module["_fsync"] = Module["asm"]["fsync"]).apply(null, arguments)
        }
        ;
        var _sync = Module["_sync"] = function() {
            return (_sync = Module["_sync"] = Module["asm"]["sync"]).apply(null, arguments)
        }
        ;
        var _fdatasync = Module["_fdatasync"] = function() {
            return (_fdatasync = Module["_fdatasync"] = Module["asm"]["fdatasync"]).apply(null, arguments)
        }
        ;
        var _fstatvfs = Module["_fstatvfs"] = function() {
            return (_fstatvfs = Module["_fstatvfs"] = Module["asm"]["fstatvfs"]).apply(null, arguments)
        }
        ;
        var _statvfs = Module["_statvfs"] = function() {
            return (_statvfs = Module["_statvfs"] = Module["asm"]["statvfs"]).apply(null, arguments)
        }
        ;
        var _fpathconf = Module["_fpathconf"] = function() {
            return (_fpathconf = Module["_fpathconf"] = Module["asm"]["fpathconf"]).apply(null, arguments)
        }
        ;
        var _pathconf = Module["_pathconf"] = function() {
            return (_pathconf = Module["_pathconf"] = Module["asm"]["pathconf"]).apply(null, arguments)
        }
        ;
        var _setresuid = Module["_setresuid"] = function() {
            return (_setresuid = Module["_setresuid"] = Module["asm"]["setresuid"]).apply(null, arguments)
        }
        ;
        var _setresgid = Module["_setresgid"] = function() {
            return (_setresgid = Module["_setresgid"] = Module["asm"]["setresgid"]).apply(null, arguments)
        }
        ;
        var _getresuid = Module["_getresuid"] = function() {
            return (_getresuid = Module["_getresuid"] = Module["asm"]["getresuid"]).apply(null, arguments)
        }
        ;
        var _getresgid = Module["_getresgid"] = function() {
            return (_getresgid = Module["_getresgid"] = Module["asm"]["getresgid"]).apply(null, arguments)
        }
        ;
        var _lstat = Module["_lstat"] = function() {
            return (_lstat = Module["_lstat"] = Module["asm"]["lstat"]).apply(null, arguments)
        }
        ;
        var _fstatat = Module["_fstatat"] = function() {
            return (_fstatat = Module["_fstatat"] = Module["asm"]["fstatat"]).apply(null, arguments)
        }
        ;
        var _rename = Module["_rename"] = function() {
            return (_rename = Module["_rename"] = Module["asm"]["rename"]).apply(null, arguments)
        }
        ;
        var _unlink = Module["_unlink"] = function() {
            return (_unlink = Module["_unlink"] = Module["asm"]["unlink"]).apply(null, arguments)
        }
        ;
        var _futimesat = Module["_futimesat"] = function() {
            return (_futimesat = Module["_futimesat"] = Module["asm"]["futimesat"]).apply(null, arguments)
        }
        ;
        var _utimes = Module["_utimes"] = function() {
            return (_utimes = Module["_utimes"] = Module["asm"]["utimes"]).apply(null, arguments)
        }
        ;
        var _qsort = Module["_qsort"] = function() {
            return (_qsort = Module["_qsort"] = Module["asm"]["qsort"]).apply(null, arguments)
        }
        ;
        var _isalnum = Module["_isalnum"] = function() {
            return (_isalnum = Module["_isalnum"] = Module["asm"]["isalnum"]).apply(null, arguments)
        }
        ;
        var _toupper = Module["_toupper"] = function() {
            return (_toupper = Module["_toupper"] = Module["asm"]["toupper"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetInterruptEx = Module["_PyErr_SetInterruptEx"] = function() {
            return (_PyErr_SetInterruptEx = Module["_PyErr_SetInterruptEx"] = Module["asm"]["PyErr_SetInterruptEx"]).apply(null, arguments)
        }
        ;
        var __PyErr_CheckSignals = Module["__PyErr_CheckSignals"] = function() {
            return (__PyErr_CheckSignals = Module["__PyErr_CheckSignals"] = Module["asm"]["_PyErr_CheckSignals"]).apply(null, arguments)
        }
        ;
        var _PyErr_SetInterrupt = Module["_PyErr_SetInterrupt"] = function() {
            return (_PyErr_SetInterrupt = Module["_PyErr_SetInterrupt"] = Module["asm"]["PyErr_SetInterrupt"]).apply(null, arguments)
        }
        ;
        var _PyOS_InterruptOccurred = Module["_PyOS_InterruptOccurred"] = function() {
            return (_PyOS_InterruptOccurred = Module["_PyOS_InterruptOccurred"] = Module["asm"]["PyOS_InterruptOccurred"]).apply(null, arguments)
        }
        ;
        var __PyOS_IsMainThread = Module["__PyOS_IsMainThread"] = function() {
            return (__PyOS_IsMainThread = Module["__PyOS_IsMainThread"] = Module["asm"]["_PyOS_IsMainThread"]).apply(null, arguments)
        }
        ;
        var _setitimer = Module["_setitimer"] = function() {
            return (_setitimer = Module["_setitimer"] = Module["asm"]["setitimer"]).apply(null, arguments)
        }
        ;
        var _getitimer = Module["_getitimer"] = function() {
            return (_getitimer = Module["_getitimer"] = Module["asm"]["getitimer"]).apply(null, arguments)
        }
        ;
        var _strsignal = Module["_strsignal"] = function() {
            return (_strsignal = Module["_strsignal"] = Module["asm"]["strsignal"]).apply(null, arguments)
        }
        ;
        var _strstr = Module["_strstr"] = function() {
            return (_strstr = Module["_strstr"] = Module["asm"]["strstr"]).apply(null, arguments)
        }
        ;
        var _pause = Module["_pause"] = function() {
            return (_pause = Module["_pause"] = Module["asm"]["pause"]).apply(null, arguments)
        }
        ;
        var _pthread_sigmask = Module["_pthread_sigmask"] = function() {
            return (_pthread_sigmask = Module["_pthread_sigmask"] = Module["asm"]["pthread_sigmask"]).apply(null, arguments)
        }
        ;
        var _sigpending = Module["_sigpending"] = function() {
            return (_sigpending = Module["_sigpending"] = Module["asm"]["sigpending"]).apply(null, arguments)
        }
        ;
        var _sigwait = Module["_sigwait"] = function() {
            return (_sigwait = Module["_sigwait"] = Module["asm"]["sigwait"]).apply(null, arguments)
        }
        ;
        var _sigwaitinfo = Module["_sigwaitinfo"] = function() {
            return (_sigwaitinfo = Module["_sigwaitinfo"] = Module["asm"]["sigwaitinfo"]).apply(null, arguments)
        }
        ;
        var _sigtimedwait = Module["_sigtimedwait"] = function() {
            return (_sigtimedwait = Module["_sigtimedwait"] = Module["asm"]["sigtimedwait"]).apply(null, arguments)
        }
        ;
        var _sigfillset = Module["_sigfillset"] = function() {
            return (_sigfillset = Module["_sigfillset"] = Module["asm"]["sigfillset"]).apply(null, arguments)
        }
        ;
        var _sigismember = Module["_sigismember"] = function() {
            return (_sigismember = Module["_sigismember"] = Module["asm"]["sigismember"]).apply(null, arguments)
        }
        ;
        var ___libc_current_sigrtmin = Module["___libc_current_sigrtmin"] = function() {
            return (___libc_current_sigrtmin = Module["___libc_current_sigrtmin"] = Module["asm"]["__libc_current_sigrtmin"]).apply(null, arguments)
        }
        ;
        var ___libc_current_sigrtmax = Module["___libc_current_sigrtmax"] = function() {
            return (___libc_current_sigrtmax = Module["___libc_current_sigrtmax"] = Module["asm"]["__libc_current_sigrtmax"]).apply(null, arguments)
        }
        ;
        var _clock_settime = Module["_clock_settime"] = function() {
            return (_clock_settime = Module["_clock_settime"] = Module["asm"]["clock_settime"]).apply(null, arguments)
        }
        ;
        var _time = Module["_time"] = function() {
            return (_time = Module["_time"] = Module["asm"]["time"]).apply(null, arguments)
        }
        ;
        var _mktime = Module["_mktime"] = function() {
            return (_mktime = Module["_mktime"] = Module["asm"]["mktime"]).apply(null, arguments)
        }
        ;
        var _getrusage = Module["_getrusage"] = function() {
            return (_getrusage = Module["_getrusage"] = Module["asm"]["getrusage"]).apply(null, arguments)
        }
        ;
        var _clock = Module["_clock"] = function() {
            return (_clock = Module["_clock"] = Module["asm"]["clock"]).apply(null, arguments)
        }
        ;
        var _wcscoll = Module["_wcscoll"] = function() {
            return (_wcscoll = Module["_wcscoll"] = Module["asm"]["wcscoll"]).apply(null, arguments)
        }
        ;
        var _wcsxfrm = Module["_wcsxfrm"] = function() {
            return (_wcsxfrm = Module["_wcsxfrm"] = Module["asm"]["wcsxfrm"]).apply(null, arguments)
        }
        ;
        var _gettext = Module["_gettext"] = function() {
            return (_gettext = Module["_gettext"] = Module["asm"]["gettext"]).apply(null, arguments)
        }
        ;
        var _dgettext = Module["_dgettext"] = function() {
            return (_dgettext = Module["_dgettext"] = Module["asm"]["dgettext"]).apply(null, arguments)
        }
        ;
        var _dcgettext = Module["_dcgettext"] = function() {
            return (_dcgettext = Module["_dcgettext"] = Module["asm"]["dcgettext"]).apply(null, arguments)
        }
        ;
        var _textdomain = Module["_textdomain"] = function() {
            return (_textdomain = Module["_textdomain"] = Module["asm"]["textdomain"]).apply(null, arguments)
        }
        ;
        var _bindtextdomain = Module["_bindtextdomain"] = function() {
            return (_bindtextdomain = Module["_bindtextdomain"] = Module["asm"]["bindtextdomain"]).apply(null, arguments)
        }
        ;
        var _bind_textdomain_codeset = Module["_bind_textdomain_codeset"] = function() {
            return (_bind_textdomain_codeset = Module["_bind_textdomain_codeset"] = Module["asm"]["bind_textdomain_codeset"]).apply(null, arguments)
        }
        ;
        var _getrlimit = Module["_getrlimit"] = function() {
            return (_getrlimit = Module["_getrlimit"] = Module["asm"]["getrlimit"]).apply(null, arguments)
        }
        ;
        var _setrlimit = Module["_setrlimit"] = function() {
            return (_setrlimit = Module["_setrlimit"] = Module["asm"]["setrlimit"]).apply(null, arguments)
        }
        ;
        var _PyTraceMalloc_Track = Module["_PyTraceMalloc_Track"] = function() {
            return (_PyTraceMalloc_Track = Module["_PyTraceMalloc_Track"] = Module["asm"]["PyTraceMalloc_Track"]).apply(null, arguments)
        }
        ;
        var _PyTraceMalloc_Untrack = Module["_PyTraceMalloc_Untrack"] = function() {
            return (_PyTraceMalloc_Untrack = Module["_PyTraceMalloc_Untrack"] = Module["asm"]["PyTraceMalloc_Untrack"]).apply(null, arguments)
        }
        ;
        var __PyTraceMalloc_GetTraceback = Module["__PyTraceMalloc_GetTraceback"] = function() {
            return (__PyTraceMalloc_GetTraceback = Module["__PyTraceMalloc_GetTraceback"] = Module["asm"]["_PyTraceMalloc_GetTraceback"]).apply(null, arguments)
        }
        ;
        var _ffi_prep_closure = Module["_ffi_prep_closure"] = function() {
            return (_ffi_prep_closure = Module["_ffi_prep_closure"] = Module["asm"]["ffi_prep_closure"]).apply(null, arguments)
        }
        ;
        var _ffi_get_struct_offsets = Module["_ffi_get_struct_offsets"] = function() {
            return (_ffi_get_struct_offsets = Module["_ffi_get_struct_offsets"] = Module["asm"]["ffi_get_struct_offsets"]).apply(null, arguments)
        }
        ;
        var _ffi_java_raw_size = Module["_ffi_java_raw_size"] = function() {
            return (_ffi_java_raw_size = Module["_ffi_java_raw_size"] = Module["asm"]["ffi_java_raw_size"]).apply(null, arguments)
        }
        ;
        var _ffi_java_raw_to_ptrarray = Module["_ffi_java_raw_to_ptrarray"] = function() {
            return (_ffi_java_raw_to_ptrarray = Module["_ffi_java_raw_to_ptrarray"] = Module["asm"]["ffi_java_raw_to_ptrarray"]).apply(null, arguments)
        }
        ;
        var _ffi_java_ptrarray_to_raw = Module["_ffi_java_ptrarray_to_raw"] = function() {
            return (_ffi_java_ptrarray_to_raw = Module["_ffi_java_ptrarray_to_raw"] = Module["asm"]["ffi_java_ptrarray_to_raw"]).apply(null, arguments)
        }
        ;
        var _ffi_java_raw_call = Module["_ffi_java_raw_call"] = function() {
            return (_ffi_java_raw_call = Module["_ffi_java_raw_call"] = Module["asm"]["ffi_java_raw_call"]).apply(null, arguments)
        }
        ;
        var _ffi_prep_java_raw_closure_loc = Module["_ffi_prep_java_raw_closure_loc"] = function() {
            return (_ffi_prep_java_raw_closure_loc = Module["_ffi_prep_java_raw_closure_loc"] = Module["asm"]["ffi_prep_java_raw_closure_loc"]).apply(null, arguments)
        }
        ;
        var _ffi_prep_java_raw_closure = Module["_ffi_prep_java_raw_closure"] = function() {
            return (_ffi_prep_java_raw_closure = Module["_ffi_prep_java_raw_closure"] = Module["asm"]["ffi_prep_java_raw_closure"]).apply(null, arguments)
        }
        ;
        var _ffi_tramp_is_supported = Module["_ffi_tramp_is_supported"] = function() {
            return (_ffi_tramp_is_supported = Module["_ffi_tramp_is_supported"] = Module["asm"]["ffi_tramp_is_supported"]).apply(null, arguments)
        }
        ;
        var _ffi_tramp_alloc = Module["_ffi_tramp_alloc"] = function() {
            return (_ffi_tramp_alloc = Module["_ffi_tramp_alloc"] = Module["asm"]["ffi_tramp_alloc"]).apply(null, arguments)
        }
        ;
        var _ffi_tramp_set_parms = Module["_ffi_tramp_set_parms"] = function() {
            return (_ffi_tramp_set_parms = Module["_ffi_tramp_set_parms"] = Module["asm"]["ffi_tramp_set_parms"]).apply(null, arguments)
        }
        ;
        var _ffi_tramp_get_addr = Module["_ffi_tramp_get_addr"] = function() {
            return (_ffi_tramp_get_addr = Module["_ffi_tramp_get_addr"] = Module["asm"]["ffi_tramp_get_addr"]).apply(null, arguments)
        }
        ;
        var _ffi_tramp_free = Module["_ffi_tramp_free"] = function() {
            return (_ffi_tramp_free = Module["_ffi_tramp_free"] = Module["asm"]["ffi_tramp_free"]).apply(null, arguments)
        }
        ;
        var _adler32_z = Module["_adler32_z"] = function() {
            return (_adler32_z = Module["_adler32_z"] = Module["asm"]["adler32_z"]).apply(null, arguments)
        }
        ;
        var _adler32_combine = Module["_adler32_combine"] = function() {
            return (_adler32_combine = Module["_adler32_combine"] = Module["asm"]["adler32_combine"]).apply(null, arguments)
        }
        ;
        var _adler32_combine64 = Module["_adler32_combine64"] = function() {
            return (_adler32_combine64 = Module["_adler32_combine64"] = Module["asm"]["adler32_combine64"]).apply(null, arguments)
        }
        ;
        var _compress2 = Module["_compress2"] = function() {
            return (_compress2 = Module["_compress2"] = Module["asm"]["compress2"]).apply(null, arguments)
        }
        ;
        var _compress = Module["_compress"] = function() {
            return (_compress = Module["_compress"] = Module["asm"]["compress"]).apply(null, arguments)
        }
        ;
        var _compressBound = Module["_compressBound"] = function() {
            return (_compressBound = Module["_compressBound"] = Module["asm"]["compressBound"]).apply(null, arguments)
        }
        ;
        var _get_crc_table = Module["_get_crc_table"] = function() {
            return (_get_crc_table = Module["_get_crc_table"] = Module["asm"]["get_crc_table"]).apply(null, arguments)
        }
        ;
        var _crc32_z = Module["_crc32_z"] = function() {
            return (_crc32_z = Module["_crc32_z"] = Module["asm"]["crc32_z"]).apply(null, arguments)
        }
        ;
        var _crc32_combine64 = Module["_crc32_combine64"] = function() {
            return (_crc32_combine64 = Module["_crc32_combine64"] = Module["asm"]["crc32_combine64"]).apply(null, arguments)
        }
        ;
        var _crc32_combine = Module["_crc32_combine"] = function() {
            return (_crc32_combine = Module["_crc32_combine"] = Module["asm"]["crc32_combine"]).apply(null, arguments)
        }
        ;
        var _crc32_combine_gen64 = Module["_crc32_combine_gen64"] = function() {
            return (_crc32_combine_gen64 = Module["_crc32_combine_gen64"] = Module["asm"]["crc32_combine_gen64"]).apply(null, arguments)
        }
        ;
        var _crc32_combine_gen = Module["_crc32_combine_gen"] = function() {
            return (_crc32_combine_gen = Module["_crc32_combine_gen"] = Module["asm"]["crc32_combine_gen"]).apply(null, arguments)
        }
        ;
        var _crc32_combine_op = Module["_crc32_combine_op"] = function() {
            return (_crc32_combine_op = Module["_crc32_combine_op"] = Module["asm"]["crc32_combine_op"]).apply(null, arguments)
        }
        ;
        var _zcalloc = Module["_zcalloc"] = function() {
            return (_zcalloc = Module["_zcalloc"] = Module["asm"]["zcalloc"]).apply(null, arguments)
        }
        ;
        var _zcfree = Module["_zcfree"] = function() {
            return (_zcfree = Module["_zcfree"] = Module["asm"]["zcfree"]).apply(null, arguments)
        }
        ;
        var _deflateReset = Module["_deflateReset"] = function() {
            return (_deflateReset = Module["_deflateReset"] = Module["asm"]["deflateReset"]).apply(null, arguments)
        }
        ;
        var _deflateResetKeep = Module["_deflateResetKeep"] = function() {
            return (_deflateResetKeep = Module["_deflateResetKeep"] = Module["asm"]["deflateResetKeep"]).apply(null, arguments)
        }
        ;
        var _deflateGetDictionary = Module["_deflateGetDictionary"] = function() {
            return (_deflateGetDictionary = Module["_deflateGetDictionary"] = Module["asm"]["deflateGetDictionary"]).apply(null, arguments)
        }
        ;
        var __tr_init = Module["__tr_init"] = function() {
            return (__tr_init = Module["__tr_init"] = Module["asm"]["_tr_init"]).apply(null, arguments)
        }
        ;
        var _deflateSetHeader = Module["_deflateSetHeader"] = function() {
            return (_deflateSetHeader = Module["_deflateSetHeader"] = Module["asm"]["deflateSetHeader"]).apply(null, arguments)
        }
        ;
        var _deflatePending = Module["_deflatePending"] = function() {
            return (_deflatePending = Module["_deflatePending"] = Module["asm"]["deflatePending"]).apply(null, arguments)
        }
        ;
        var _deflatePrime = Module["_deflatePrime"] = function() {
            return (_deflatePrime = Module["_deflatePrime"] = Module["asm"]["deflatePrime"]).apply(null, arguments)
        }
        ;
        var __tr_flush_bits = Module["__tr_flush_bits"] = function() {
            return (__tr_flush_bits = Module["__tr_flush_bits"] = Module["asm"]["_tr_flush_bits"]).apply(null, arguments)
        }
        ;
        var _deflateParams = Module["_deflateParams"] = function() {
            return (_deflateParams = Module["_deflateParams"] = Module["asm"]["deflateParams"]).apply(null, arguments)
        }
        ;
        var __tr_align = Module["__tr_align"] = function() {
            return (__tr_align = Module["__tr_align"] = Module["asm"]["_tr_align"]).apply(null, arguments)
        }
        ;
        var __tr_stored_block = Module["__tr_stored_block"] = function() {
            return (__tr_stored_block = Module["__tr_stored_block"] = Module["asm"]["_tr_stored_block"]).apply(null, arguments)
        }
        ;
        var _deflateTune = Module["_deflateTune"] = function() {
            return (_deflateTune = Module["_deflateTune"] = Module["asm"]["deflateTune"]).apply(null, arguments)
        }
        ;
        var _deflateBound = Module["_deflateBound"] = function() {
            return (_deflateBound = Module["_deflateBound"] = Module["asm"]["deflateBound"]).apply(null, arguments)
        }
        ;
        var __tr_flush_block = Module["__tr_flush_block"] = function() {
            return (__tr_flush_block = Module["__tr_flush_block"] = Module["asm"]["_tr_flush_block"]).apply(null, arguments)
        }
        ;
        var _gzclose = Module["_gzclose"] = function() {
            return (_gzclose = Module["_gzclose"] = Module["asm"]["gzclose"]).apply(null, arguments)
        }
        ;
        var _gzclose_r = Module["_gzclose_r"] = function() {
            return (_gzclose_r = Module["_gzclose_r"] = Module["asm"]["gzclose_r"]).apply(null, arguments)
        }
        ;
        var _gzclose_w = Module["_gzclose_w"] = function() {
            return (_gzclose_w = Module["_gzclose_w"] = Module["asm"]["gzclose_w"]).apply(null, arguments)
        }
        ;
        var _gzopen = Module["_gzopen"] = function() {
            return (_gzopen = Module["_gzopen"] = Module["asm"]["gzopen"]).apply(null, arguments)
        }
        ;
        var _gzopen64 = Module["_gzopen64"] = function() {
            return (_gzopen64 = Module["_gzopen64"] = Module["asm"]["gzopen64"]).apply(null, arguments)
        }
        ;
        var _gzdopen = Module["_gzdopen"] = function() {
            return (_gzdopen = Module["_gzdopen"] = Module["asm"]["gzdopen"]).apply(null, arguments)
        }
        ;
        var _gzbuffer = Module["_gzbuffer"] = function() {
            return (_gzbuffer = Module["_gzbuffer"] = Module["asm"]["gzbuffer"]).apply(null, arguments)
        }
        ;
        var _gzrewind = Module["_gzrewind"] = function() {
            return (_gzrewind = Module["_gzrewind"] = Module["asm"]["gzrewind"]).apply(null, arguments)
        }
        ;
        var _gzseek64 = Module["_gzseek64"] = function() {
            return (_gzseek64 = Module["_gzseek64"] = Module["asm"]["gzseek64"]).apply(null, arguments)
        }
        ;
        var _gz_error = Module["_gz_error"] = function() {
            return (_gz_error = Module["_gz_error"] = Module["asm"]["gz_error"]).apply(null, arguments)
        }
        ;
        var _gzseek = Module["_gzseek"] = function() {
            return (_gzseek = Module["_gzseek"] = Module["asm"]["gzseek"]).apply(null, arguments)
        }
        ;
        var _gztell64 = Module["_gztell64"] = function() {
            return (_gztell64 = Module["_gztell64"] = Module["asm"]["gztell64"]).apply(null, arguments)
        }
        ;
        var _gztell = Module["_gztell"] = function() {
            return (_gztell = Module["_gztell"] = Module["asm"]["gztell"]).apply(null, arguments)
        }
        ;
        var _gzoffset64 = Module["_gzoffset64"] = function() {
            return (_gzoffset64 = Module["_gzoffset64"] = Module["asm"]["gzoffset64"]).apply(null, arguments)
        }
        ;
        var _gzoffset = Module["_gzoffset"] = function() {
            return (_gzoffset = Module["_gzoffset"] = Module["asm"]["gzoffset"]).apply(null, arguments)
        }
        ;
        var _gzeof = Module["_gzeof"] = function() {
            return (_gzeof = Module["_gzeof"] = Module["asm"]["gzeof"]).apply(null, arguments)
        }
        ;
        var _gzerror = Module["_gzerror"] = function() {
            return (_gzerror = Module["_gzerror"] = Module["asm"]["gzerror"]).apply(null, arguments)
        }
        ;
        var _gzclearerr = Module["_gzclearerr"] = function() {
            return (_gzclearerr = Module["_gzclearerr"] = Module["asm"]["gzclearerr"]).apply(null, arguments)
        }
        ;
        var _gzread = Module["_gzread"] = function() {
            return (_gzread = Module["_gzread"] = Module["asm"]["gzread"]).apply(null, arguments)
        }
        ;
        var _gzfread = Module["_gzfread"] = function() {
            return (_gzfread = Module["_gzfread"] = Module["asm"]["gzfread"]).apply(null, arguments)
        }
        ;
        var _gzgetc = Module["_gzgetc"] = function() {
            return (_gzgetc = Module["_gzgetc"] = Module["asm"]["gzgetc"]).apply(null, arguments)
        }
        ;
        var _gzgetc_ = Module["_gzgetc_"] = function() {
            return (_gzgetc_ = Module["_gzgetc_"] = Module["asm"]["gzgetc_"]).apply(null, arguments)
        }
        ;
        var _gzungetc = Module["_gzungetc"] = function() {
            return (_gzungetc = Module["_gzungetc"] = Module["asm"]["gzungetc"]).apply(null, arguments)
        }
        ;
        var _gzgets = Module["_gzgets"] = function() {
            return (_gzgets = Module["_gzgets"] = Module["asm"]["gzgets"]).apply(null, arguments)
        }
        ;
        var _gzdirect = Module["_gzdirect"] = function() {
            return (_gzdirect = Module["_gzdirect"] = Module["asm"]["gzdirect"]).apply(null, arguments)
        }
        ;
        var _inflateReset = Module["_inflateReset"] = function() {
            return (_inflateReset = Module["_inflateReset"] = Module["asm"]["inflateReset"]).apply(null, arguments)
        }
        ;
        var _gzwrite = Module["_gzwrite"] = function() {
            return (_gzwrite = Module["_gzwrite"] = Module["asm"]["gzwrite"]).apply(null, arguments)
        }
        ;
        var _gzfwrite = Module["_gzfwrite"] = function() {
            return (_gzfwrite = Module["_gzfwrite"] = Module["asm"]["gzfwrite"]).apply(null, arguments)
        }
        ;
        var _gzputc = Module["_gzputc"] = function() {
            return (_gzputc = Module["_gzputc"] = Module["asm"]["gzputc"]).apply(null, arguments)
        }
        ;
        var _gzputs = Module["_gzputs"] = function() {
            return (_gzputs = Module["_gzputs"] = Module["asm"]["gzputs"]).apply(null, arguments)
        }
        ;
        var _gzvprintf = Module["_gzvprintf"] = function() {
            return (_gzvprintf = Module["_gzvprintf"] = Module["asm"]["gzvprintf"]).apply(null, arguments)
        }
        ;
        var _gzprintf = Module["_gzprintf"] = function() {
            return (_gzprintf = Module["_gzprintf"] = Module["asm"]["gzprintf"]).apply(null, arguments)
        }
        ;
        var _gzflush = Module["_gzflush"] = function() {
            return (_gzflush = Module["_gzflush"] = Module["asm"]["gzflush"]).apply(null, arguments)
        }
        ;
        var _gzsetparams = Module["_gzsetparams"] = function() {
            return (_gzsetparams = Module["_gzsetparams"] = Module["asm"]["gzsetparams"]).apply(null, arguments)
        }
        ;
        var _inflateBackInit_ = Module["_inflateBackInit_"] = function() {
            return (_inflateBackInit_ = Module["_inflateBackInit_"] = Module["asm"]["inflateBackInit_"]).apply(null, arguments)
        }
        ;
        var _inflateBack = Module["_inflateBack"] = function() {
            return (_inflateBack = Module["_inflateBack"] = Module["asm"]["inflateBack"]).apply(null, arguments)
        }
        ;
        var _inflate_table = Module["_inflate_table"] = function() {
            return (_inflate_table = Module["_inflate_table"] = Module["asm"]["inflate_table"]).apply(null, arguments)
        }
        ;
        var _inflate_fast = Module["_inflate_fast"] = function() {
            return (_inflate_fast = Module["_inflate_fast"] = Module["asm"]["inflate_fast"]).apply(null, arguments)
        }
        ;
        var _inflateBackEnd = Module["_inflateBackEnd"] = function() {
            return (_inflateBackEnd = Module["_inflateBackEnd"] = Module["asm"]["inflateBackEnd"]).apply(null, arguments)
        }
        ;
        var _inflateResetKeep = Module["_inflateResetKeep"] = function() {
            return (_inflateResetKeep = Module["_inflateResetKeep"] = Module["asm"]["inflateResetKeep"]).apply(null, arguments)
        }
        ;
        var _inflateReset2 = Module["_inflateReset2"] = function() {
            return (_inflateReset2 = Module["_inflateReset2"] = Module["asm"]["inflateReset2"]).apply(null, arguments)
        }
        ;
        var _inflateInit_ = Module["_inflateInit_"] = function() {
            return (_inflateInit_ = Module["_inflateInit_"] = Module["asm"]["inflateInit_"]).apply(null, arguments)
        }
        ;
        var _inflatePrime = Module["_inflatePrime"] = function() {
            return (_inflatePrime = Module["_inflatePrime"] = Module["asm"]["inflatePrime"]).apply(null, arguments)
        }
        ;
        var _inflateGetDictionary = Module["_inflateGetDictionary"] = function() {
            return (_inflateGetDictionary = Module["_inflateGetDictionary"] = Module["asm"]["inflateGetDictionary"]).apply(null, arguments)
        }
        ;
        var _inflateGetHeader = Module["_inflateGetHeader"] = function() {
            return (_inflateGetHeader = Module["_inflateGetHeader"] = Module["asm"]["inflateGetHeader"]).apply(null, arguments)
        }
        ;
        var _inflateSync = Module["_inflateSync"] = function() {
            return (_inflateSync = Module["_inflateSync"] = Module["asm"]["inflateSync"]).apply(null, arguments)
        }
        ;
        var _inflateSyncPoint = Module["_inflateSyncPoint"] = function() {
            return (_inflateSyncPoint = Module["_inflateSyncPoint"] = Module["asm"]["inflateSyncPoint"]).apply(null, arguments)
        }
        ;
        var _inflateUndermine = Module["_inflateUndermine"] = function() {
            return (_inflateUndermine = Module["_inflateUndermine"] = Module["asm"]["inflateUndermine"]).apply(null, arguments)
        }
        ;
        var _inflateValidate = Module["_inflateValidate"] = function() {
            return (_inflateValidate = Module["_inflateValidate"] = Module["asm"]["inflateValidate"]).apply(null, arguments)
        }
        ;
        var _inflateMark = Module["_inflateMark"] = function() {
            return (_inflateMark = Module["_inflateMark"] = Module["asm"]["inflateMark"]).apply(null, arguments)
        }
        ;
        var _inflateCodesUsed = Module["_inflateCodesUsed"] = function() {
            return (_inflateCodesUsed = Module["_inflateCodesUsed"] = Module["asm"]["inflateCodesUsed"]).apply(null, arguments)
        }
        ;
        var __tr_tally = Module["__tr_tally"] = function() {
            return (__tr_tally = Module["__tr_tally"] = Module["asm"]["_tr_tally"]).apply(null, arguments)
        }
        ;
        var _uncompress2 = Module["_uncompress2"] = function() {
            return (_uncompress2 = Module["_uncompress2"] = Module["asm"]["uncompress2"]).apply(null, arguments)
        }
        ;
        var _uncompress = Module["_uncompress"] = function() {
            return (_uncompress = Module["_uncompress"] = Module["asm"]["uncompress"]).apply(null, arguments)
        }
        ;
        var _zlibCompileFlags = Module["_zlibCompileFlags"] = function() {
            return (_zlibCompileFlags = Module["_zlibCompileFlags"] = Module["asm"]["zlibCompileFlags"]).apply(null, arguments)
        }
        ;
        var _zError = Module["_zError"] = function() {
            return (_zError = Module["_zError"] = Module["asm"]["zError"]).apply(null, arguments)
        }
        ;
        var _BZ2_blockSort = Module["_BZ2_blockSort"] = function() {
            return (_BZ2_blockSort = Module["_BZ2_blockSort"] = Module["asm"]["BZ2_blockSort"]).apply(null, arguments)
        }
        ;
        var _BZ2_bz__AssertH__fail = Module["_BZ2_bz__AssertH__fail"] = function() {
            return (_BZ2_bz__AssertH__fail = Module["_BZ2_bz__AssertH__fail"] = Module["asm"]["BZ2_bz__AssertH__fail"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzlibVersion = Module["_BZ2_bzlibVersion"] = function() {
            return (_BZ2_bzlibVersion = Module["_BZ2_bzlibVersion"] = Module["asm"]["BZ2_bzlibVersion"]).apply(null, arguments)
        }
        ;
        var _BZ2_compressBlock = Module["_BZ2_compressBlock"] = function() {
            return (_BZ2_compressBlock = Module["_BZ2_compressBlock"] = Module["asm"]["BZ2_compressBlock"]).apply(null, arguments)
        }
        ;
        var _BZ2_indexIntoF = Module["_BZ2_indexIntoF"] = function() {
            return (_BZ2_indexIntoF = Module["_BZ2_indexIntoF"] = Module["asm"]["BZ2_indexIntoF"]).apply(null, arguments)
        }
        ;
        var _BZ2_decompress = Module["_BZ2_decompress"] = function() {
            return (_BZ2_decompress = Module["_BZ2_decompress"] = Module["asm"]["BZ2_decompress"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzWriteOpen = Module["_BZ2_bzWriteOpen"] = function() {
            return (_BZ2_bzWriteOpen = Module["_BZ2_bzWriteOpen"] = Module["asm"]["BZ2_bzWriteOpen"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzWrite = Module["_BZ2_bzWrite"] = function() {
            return (_BZ2_bzWrite = Module["_BZ2_bzWrite"] = Module["asm"]["BZ2_bzWrite"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzWriteClose = Module["_BZ2_bzWriteClose"] = function() {
            return (_BZ2_bzWriteClose = Module["_BZ2_bzWriteClose"] = Module["asm"]["BZ2_bzWriteClose"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzWriteClose64 = Module["_BZ2_bzWriteClose64"] = function() {
            return (_BZ2_bzWriteClose64 = Module["_BZ2_bzWriteClose64"] = Module["asm"]["BZ2_bzWriteClose64"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzReadOpen = Module["_BZ2_bzReadOpen"] = function() {
            return (_BZ2_bzReadOpen = Module["_BZ2_bzReadOpen"] = Module["asm"]["BZ2_bzReadOpen"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzReadClose = Module["_BZ2_bzReadClose"] = function() {
            return (_BZ2_bzReadClose = Module["_BZ2_bzReadClose"] = Module["asm"]["BZ2_bzReadClose"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzRead = Module["_BZ2_bzRead"] = function() {
            return (_BZ2_bzRead = Module["_BZ2_bzRead"] = Module["asm"]["BZ2_bzRead"]).apply(null, arguments)
        }
        ;
        var _fgetc = Module["_fgetc"] = function() {
            return (_fgetc = Module["_fgetc"] = Module["asm"]["fgetc"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzReadGetUnused = Module["_BZ2_bzReadGetUnused"] = function() {
            return (_BZ2_bzReadGetUnused = Module["_BZ2_bzReadGetUnused"] = Module["asm"]["BZ2_bzReadGetUnused"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzBuffToBuffCompress = Module["_BZ2_bzBuffToBuffCompress"] = function() {
            return (_BZ2_bzBuffToBuffCompress = Module["_BZ2_bzBuffToBuffCompress"] = Module["asm"]["BZ2_bzBuffToBuffCompress"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzBuffToBuffDecompress = Module["_BZ2_bzBuffToBuffDecompress"] = function() {
            return (_BZ2_bzBuffToBuffDecompress = Module["_BZ2_bzBuffToBuffDecompress"] = Module["asm"]["BZ2_bzBuffToBuffDecompress"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzopen = Module["_BZ2_bzopen"] = function() {
            return (_BZ2_bzopen = Module["_BZ2_bzopen"] = Module["asm"]["BZ2_bzopen"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzdopen = Module["_BZ2_bzdopen"] = function() {
            return (_BZ2_bzdopen = Module["_BZ2_bzdopen"] = Module["asm"]["BZ2_bzdopen"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzread = Module["_BZ2_bzread"] = function() {
            return (_BZ2_bzread = Module["_BZ2_bzread"] = Module["asm"]["BZ2_bzread"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzwrite = Module["_BZ2_bzwrite"] = function() {
            return (_BZ2_bzwrite = Module["_BZ2_bzwrite"] = Module["asm"]["BZ2_bzwrite"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzflush = Module["_BZ2_bzflush"] = function() {
            return (_BZ2_bzflush = Module["_BZ2_bzflush"] = Module["asm"]["BZ2_bzflush"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzclose = Module["_BZ2_bzclose"] = function() {
            return (_BZ2_bzclose = Module["_BZ2_bzclose"] = Module["asm"]["BZ2_bzclose"]).apply(null, arguments)
        }
        ;
        var _BZ2_bzerror = Module["_BZ2_bzerror"] = function() {
            return (_BZ2_bzerror = Module["_BZ2_bzerror"] = Module["asm"]["BZ2_bzerror"]).apply(null, arguments)
        }
        ;
        var _BZ2_bsInitWrite = Module["_BZ2_bsInitWrite"] = function() {
            return (_BZ2_bsInitWrite = Module["_BZ2_bsInitWrite"] = Module["asm"]["BZ2_bsInitWrite"]).apply(null, arguments)
        }
        ;
        var _BZ2_hbMakeCodeLengths = Module["_BZ2_hbMakeCodeLengths"] = function() {
            return (_BZ2_hbMakeCodeLengths = Module["_BZ2_hbMakeCodeLengths"] = Module["asm"]["BZ2_hbMakeCodeLengths"]).apply(null, arguments)
        }
        ;
        var _BZ2_hbAssignCodes = Module["_BZ2_hbAssignCodes"] = function() {
            return (_BZ2_hbAssignCodes = Module["_BZ2_hbAssignCodes"] = Module["asm"]["BZ2_hbAssignCodes"]).apply(null, arguments)
        }
        ;
        var _BZ2_hbCreateDecodeTables = Module["_BZ2_hbCreateDecodeTables"] = function() {
            return (_BZ2_hbCreateDecodeTables = Module["_BZ2_hbCreateDecodeTables"] = Module["asm"]["BZ2_hbCreateDecodeTables"]).apply(null, arguments)
        }
        ;
        var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function() {
            return (_emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = Module["asm"]["emscripten_GetProcAddress"]).apply(null, arguments)
        }
        ;
        var _emscripten_webgl1_get_proc_address = Module["_emscripten_webgl1_get_proc_address"] = function() {
            return (_emscripten_webgl1_get_proc_address = Module["_emscripten_webgl1_get_proc_address"] = Module["asm"]["emscripten_webgl1_get_proc_address"]).apply(null, arguments)
        }
        ;
        var __webgl1_match_ext_proc_address_without_suffix = Module["__webgl1_match_ext_proc_address_without_suffix"] = function() {
            return (__webgl1_match_ext_proc_address_without_suffix = Module["__webgl1_match_ext_proc_address_without_suffix"] = Module["asm"]["_webgl1_match_ext_proc_address_without_suffix"]).apply(null, arguments)
        }
        ;
        var _emscripten_webgl_get_proc_address = Module["_emscripten_webgl_get_proc_address"] = function() {
            return (_emscripten_webgl_get_proc_address = Module["_emscripten_webgl_get_proc_address"] = Module["asm"]["emscripten_webgl_get_proc_address"]).apply(null, arguments)
        }
        ;
        var _SDL_GL_GetProcAddress = Module["_SDL_GL_GetProcAddress"] = function() {
            return (_SDL_GL_GetProcAddress = Module["_SDL_GL_GetProcAddress"] = Module["asm"]["SDL_GL_GetProcAddress"]).apply(null, arguments)
        }
        ;
        var _eglGetProcAddress = Module["_eglGetProcAddress"] = function() {
            return (_eglGetProcAddress = Module["_eglGetProcAddress"] = Module["asm"]["eglGetProcAddress"]).apply(null, arguments)
        }
        ;
        var _glfwGetProcAddress = Module["_glfwGetProcAddress"] = function() {
            return (_glfwGetProcAddress = Module["_glfwGetProcAddress"] = Module["asm"]["glfwGetProcAddress"]).apply(null, arguments)
        }
        ;
        var _alcGetProcAddress = Module["_alcGetProcAddress"] = function() {
            return (_alcGetProcAddress = Module["_alcGetProcAddress"] = Module["asm"]["alcGetProcAddress"]).apply(null, arguments)
        }
        ;
        var _emscripten_console_errorf = Module["_emscripten_console_errorf"] = function() {
            return (_emscripten_console_errorf = Module["_emscripten_console_errorf"] = Module["asm"]["emscripten_console_errorf"]).apply(null, arguments)
        }
        ;
        var _alGetProcAddress = Module["_alGetProcAddress"] = function() {
            return (_alGetProcAddress = Module["_alGetProcAddress"] = Module["asm"]["alGetProcAddress"]).apply(null, arguments)
        }
        ;
        var _emscripten_compute_dom_pk_code = Module["_emscripten_compute_dom_pk_code"] = function() {
            return (_emscripten_compute_dom_pk_code = Module["_emscripten_compute_dom_pk_code"] = Module["asm"]["emscripten_compute_dom_pk_code"]).apply(null, arguments)
        }
        ;
        var _emscripten_dom_pk_code_to_string = Module["_emscripten_dom_pk_code_to_string"] = function() {
            return (_emscripten_dom_pk_code_to_string = Module["_emscripten_dom_pk_code_to_string"] = Module["asm"]["emscripten_dom_pk_code_to_string"]).apply(null, arguments)
        }
        ;
        var _emscripten_dom_vk_to_string = Module["_emscripten_dom_vk_to_string"] = function() {
            return (_emscripten_dom_vk_to_string = Module["_emscripten_dom_vk_to_string"] = Module["asm"]["emscripten_dom_vk_to_string"]).apply(null, arguments)
        }
        ;
        var _getdate = Module["_getdate"] = function() {
            return (_getdate = Module["_getdate"] = Module["asm"]["getdate"]).apply(null, arguments)
        }
        ;
        var _stime = Module["_stime"] = function() {
            return (_stime = Module["_stime"] = Module["asm"]["stime"]).apply(null, arguments)
        }
        ;
        var _clock_getcpuclockid = Module["_clock_getcpuclockid"] = function() {
            return (_clock_getcpuclockid = Module["_clock_getcpuclockid"] = Module["asm"]["clock_getcpuclockid"]).apply(null, arguments)
        }
        ;
        var _getpwnam = Module["_getpwnam"] = function() {
            return (_getpwnam = Module["_getpwnam"] = Module["asm"]["getpwnam"]).apply(null, arguments)
        }
        ;
        var _getpwuid = Module["_getpwuid"] = function() {
            return (_getpwuid = Module["_getpwuid"] = Module["asm"]["getpwuid"]).apply(null, arguments)
        }
        ;
        var _getpwnam_r = Module["_getpwnam_r"] = function() {
            return (_getpwnam_r = Module["_getpwnam_r"] = Module["asm"]["getpwnam_r"]).apply(null, arguments)
        }
        ;
        var _getpwuid_r = Module["_getpwuid_r"] = function() {
            return (_getpwuid_r = Module["_getpwuid_r"] = Module["asm"]["getpwuid_r"]).apply(null, arguments)
        }
        ;
        var _setpwent = Module["_setpwent"] = function() {
            return (_setpwent = Module["_setpwent"] = Module["asm"]["setpwent"]).apply(null, arguments)
        }
        ;
        var _endpwent = Module["_endpwent"] = function() {
            return (_endpwent = Module["_endpwent"] = Module["asm"]["endpwent"]).apply(null, arguments)
        }
        ;
        var _getpwent = Module["_getpwent"] = function() {
            return (_getpwent = Module["_getpwent"] = Module["asm"]["getpwent"]).apply(null, arguments)
        }
        ;
        var _getgrnam = Module["_getgrnam"] = function() {
            return (_getgrnam = Module["_getgrnam"] = Module["asm"]["getgrnam"]).apply(null, arguments)
        }
        ;
        var _getgrgid = Module["_getgrgid"] = function() {
            return (_getgrgid = Module["_getgrgid"] = Module["asm"]["getgrgid"]).apply(null, arguments)
        }
        ;
        var _getgrnam_r = Module["_getgrnam_r"] = function() {
            return (_getgrnam_r = Module["_getgrnam_r"] = Module["asm"]["getgrnam_r"]).apply(null, arguments)
        }
        ;
        var _getgrgid_r = Module["_getgrgid_r"] = function() {
            return (_getgrgid_r = Module["_getgrgid_r"] = Module["asm"]["getgrgid_r"]).apply(null, arguments)
        }
        ;
        var _getgrent = Module["_getgrent"] = function() {
            return (_getgrent = Module["_getgrent"] = Module["asm"]["getgrent"]).apply(null, arguments)
        }
        ;
        var _endgrent = Module["_endgrent"] = function() {
            return (_endgrent = Module["_endgrent"] = Module["asm"]["endgrent"]).apply(null, arguments)
        }
        ;
        var _setgrent = Module["_setgrent"] = function() {
            return (_setgrent = Module["_setgrent"] = Module["asm"]["setgrent"]).apply(null, arguments)
        }
        ;
        var _flock = Module["_flock"] = function() {
            return (_flock = Module["_flock"] = Module["asm"]["flock"]).apply(null, arguments)
        }
        ;
        var _vfork = Module["_vfork"] = function() {
            return (_vfork = Module["_vfork"] = Module["asm"]["vfork"]).apply(null, arguments)
        }
        ;
        var _popen = Module["_popen"] = function() {
            return (_popen = Module["_popen"] = Module["asm"]["popen"]).apply(null, arguments)
        }
        ;
        var _pclose = Module["_pclose"] = function() {
            return (_pclose = Module["_pclose"] = Module["asm"]["pclose"]).apply(null, arguments)
        }
        ;
        var _sigaltstack = Module["_sigaltstack"] = function() {
            return (_sigaltstack = Module["_sigaltstack"] = Module["asm"]["sigaltstack"]).apply(null, arguments)
        }
        ;
        var ___syscall_uname = Module["___syscall_uname"] = function() {
            return (___syscall_uname = Module["___syscall_uname"] = Module["asm"]["__syscall_uname"]).apply(null, arguments)
        }
        ;
        var ___syscall_setpgid = Module["___syscall_setpgid"] = function() {
            return (___syscall_setpgid = Module["___syscall_setpgid"] = Module["asm"]["__syscall_setpgid"]).apply(null, arguments)
        }
        ;
        var ___syscall_sync = Module["___syscall_sync"] = function() {
            return (___syscall_sync = Module["___syscall_sync"] = Module["asm"]["__syscall_sync"]).apply(null, arguments)
        }
        ;
        var ___syscall_getsid = Module["___syscall_getsid"] = function() {
            return (___syscall_getsid = Module["___syscall_getsid"] = Module["asm"]["__syscall_getsid"]).apply(null, arguments)
        }
        ;
        var ___syscall_getpgid = Module["___syscall_getpgid"] = function() {
            return (___syscall_getpgid = Module["___syscall_getpgid"] = Module["asm"]["__syscall_getpgid"]).apply(null, arguments)
        }
        ;
        var ___syscall_getpid = Module["___syscall_getpid"] = function() {
            return (___syscall_getpid = Module["___syscall_getpid"] = Module["asm"]["__syscall_getpid"]).apply(null, arguments)
        }
        ;
        var ___syscall_getppid = Module["___syscall_getppid"] = function() {
            return (___syscall_getppid = Module["___syscall_getppid"] = Module["asm"]["__syscall_getppid"]).apply(null, arguments)
        }
        ;
        var ___syscall_link = Module["___syscall_link"] = function() {
            return (___syscall_link = Module["___syscall_link"] = Module["asm"]["__syscall_link"]).apply(null, arguments)
        }
        ;
        var ___syscall_getgroups32 = Module["___syscall_getgroups32"] = function() {
            return (___syscall_getgroups32 = Module["___syscall_getgroups32"] = Module["asm"]["__syscall_getgroups32"]).apply(null, arguments)
        }
        ;
        var ___syscall_setsid = Module["___syscall_setsid"] = function() {
            return (___syscall_setsid = Module["___syscall_setsid"] = Module["asm"]["__syscall_setsid"]).apply(null, arguments)
        }
        ;
        var ___syscall_umask = Module["___syscall_umask"] = function() {
            return (___syscall_umask = Module["___syscall_umask"] = Module["asm"]["__syscall_umask"]).apply(null, arguments)
        }
        ;
        var ___syscall_setrlimit = Module["___syscall_setrlimit"] = function() {
            return (___syscall_setrlimit = Module["___syscall_setrlimit"] = Module["asm"]["__syscall_setrlimit"]).apply(null, arguments)
        }
        ;
        var ___syscall_getrusage = Module["___syscall_getrusage"] = function() {
            return (___syscall_getrusage = Module["___syscall_getrusage"] = Module["asm"]["__syscall_getrusage"]).apply(null, arguments)
        }
        ;
        var ___syscall_getpriority = Module["___syscall_getpriority"] = function() {
            return (___syscall_getpriority = Module["___syscall_getpriority"] = Module["asm"]["__syscall_getpriority"]).apply(null, arguments)
        }
        ;
        var ___syscall_setpriority = Module["___syscall_setpriority"] = function() {
            return (___syscall_setpriority = Module["___syscall_setpriority"] = Module["asm"]["__syscall_setpriority"]).apply(null, arguments)
        }
        ;
        var ___syscall_setdomainname = Module["___syscall_setdomainname"] = function() {
            return (___syscall_setdomainname = Module["___syscall_setdomainname"] = Module["asm"]["__syscall_setdomainname"]).apply(null, arguments)
        }
        ;
        var ___syscall_getuid32 = Module["___syscall_getuid32"] = function() {
            return (___syscall_getuid32 = Module["___syscall_getuid32"] = Module["asm"]["__syscall_getuid32"]).apply(null, arguments)
        }
        ;
        var ___syscall_getgid32 = Module["___syscall_getgid32"] = function() {
            return (___syscall_getgid32 = Module["___syscall_getgid32"] = Module["asm"]["__syscall_getgid32"]).apply(null, arguments)
        }
        ;
        var ___syscall_geteuid32 = Module["___syscall_geteuid32"] = function() {
            return (___syscall_geteuid32 = Module["___syscall_geteuid32"] = Module["asm"]["__syscall_geteuid32"]).apply(null, arguments)
        }
        ;
        var ___syscall_getegid32 = Module["___syscall_getegid32"] = function() {
            return (___syscall_getegid32 = Module["___syscall_getegid32"] = Module["asm"]["__syscall_getegid32"]).apply(null, arguments)
        }
        ;
        var ___syscall_getresuid32 = Module["___syscall_getresuid32"] = function() {
            return (___syscall_getresuid32 = Module["___syscall_getresuid32"] = Module["asm"]["__syscall_getresuid32"]).apply(null, arguments)
        }
        ;
        var ___syscall_getresgid32 = Module["___syscall_getresgid32"] = function() {
            return (___syscall_getresgid32 = Module["___syscall_getresgid32"] = Module["asm"]["__syscall_getresgid32"]).apply(null, arguments)
        }
        ;
        var ___syscall_pause = Module["___syscall_pause"] = function() {
            return (___syscall_pause = Module["___syscall_pause"] = Module["asm"]["__syscall_pause"]).apply(null, arguments)
        }
        ;
        var ___syscall_madvise = Module["___syscall_madvise"] = function() {
            return (___syscall_madvise = Module["___syscall_madvise"] = Module["asm"]["__syscall_madvise"]).apply(null, arguments)
        }
        ;
        var ___syscall_mlock = Module["___syscall_mlock"] = function() {
            return (___syscall_mlock = Module["___syscall_mlock"] = Module["asm"]["__syscall_mlock"]).apply(null, arguments)
        }
        ;
        var ___syscall_munlock = Module["___syscall_munlock"] = function() {
            return (___syscall_munlock = Module["___syscall_munlock"] = Module["asm"]["__syscall_munlock"]).apply(null, arguments)
        }
        ;
        var ___syscall_mprotect = Module["___syscall_mprotect"] = function() {
            return (___syscall_mprotect = Module["___syscall_mprotect"] = Module["asm"]["__syscall_mprotect"]).apply(null, arguments)
        }
        ;
        var ___syscall_mremap = Module["___syscall_mremap"] = function() {
            return (___syscall_mremap = Module["___syscall_mremap"] = Module["asm"]["__syscall_mremap"]).apply(null, arguments)
        }
        ;
        var ___syscall_mlockall = Module["___syscall_mlockall"] = function() {
            return (___syscall_mlockall = Module["___syscall_mlockall"] = Module["asm"]["__syscall_mlockall"]).apply(null, arguments)
        }
        ;
        var ___syscall_munlockall = Module["___syscall_munlockall"] = function() {
            return (___syscall_munlockall = Module["___syscall_munlockall"] = Module["asm"]["__syscall_munlockall"]).apply(null, arguments)
        }
        ;
        var ___syscall_prlimit64 = Module["___syscall_prlimit64"] = function() {
            return (___syscall_prlimit64 = Module["___syscall_prlimit64"] = Module["asm"]["__syscall_prlimit64"]).apply(null, arguments)
        }
        ;
        var ___syscall_ugetrlimit = Module["___syscall_ugetrlimit"] = function() {
            return (___syscall_ugetrlimit = Module["___syscall_ugetrlimit"] = Module["asm"]["__syscall_ugetrlimit"]).apply(null, arguments)
        }
        ;
        var ___syscall_setsockopt = Module["___syscall_setsockopt"] = function() {
            return (___syscall_setsockopt = Module["___syscall_setsockopt"] = Module["asm"]["__syscall_setsockopt"]).apply(null, arguments)
        }
        ;
        var ___syscall_acct = Module["___syscall_acct"] = function() {
            return (___syscall_acct = Module["___syscall_acct"] = Module["asm"]["__syscall_acct"]).apply(null, arguments)
        }
        ;
        var ___syscall_mincore = Module["___syscall_mincore"] = function() {
            return (___syscall_mincore = Module["___syscall_mincore"] = Module["asm"]["__syscall_mincore"]).apply(null, arguments)
        }
        ;
        var ___syscall_pipe2 = Module["___syscall_pipe2"] = function() {
            return (___syscall_pipe2 = Module["___syscall_pipe2"] = Module["asm"]["__syscall_pipe2"]).apply(null, arguments)
        }
        ;
        var ___syscall_pselect6 = Module["___syscall_pselect6"] = function() {
            return (___syscall_pselect6 = Module["___syscall_pselect6"] = Module["asm"]["__syscall_pselect6"]).apply(null, arguments)
        }
        ;
        var ___syscall_recvmmsg = Module["___syscall_recvmmsg"] = function() {
            return (___syscall_recvmmsg = Module["___syscall_recvmmsg"] = Module["asm"]["__syscall_recvmmsg"]).apply(null, arguments)
        }
        ;
        var ___syscall_sendmmsg = Module["___syscall_sendmmsg"] = function() {
            return (___syscall_sendmmsg = Module["___syscall_sendmmsg"] = Module["asm"]["__syscall_sendmmsg"]).apply(null, arguments)
        }
        ;
        var ___syscall_setitimer = Module["___syscall_setitimer"] = function() {
            return (___syscall_setitimer = Module["___syscall_setitimer"] = Module["asm"]["__syscall_setitimer"]).apply(null, arguments)
        }
        ;
        var ___syscall_getitimer = Module["___syscall_getitimer"] = function() {
            return (___syscall_getitimer = Module["___syscall_getitimer"] = Module["asm"]["__syscall_getitimer"]).apply(null, arguments)
        }
        ;
        var ___syscall_shutdown = Module["___syscall_shutdown"] = function() {
            return (___syscall_shutdown = Module["___syscall_shutdown"] = Module["asm"]["__syscall_shutdown"]).apply(null, arguments)
        }
        ;
        var ___syscall_socketpair = Module["___syscall_socketpair"] = function() {
            return (___syscall_socketpair = Module["___syscall_socketpair"] = Module["asm"]["__syscall_socketpair"]).apply(null, arguments)
        }
        ;
        var ___syscall_wait4 = Module["___syscall_wait4"] = function() {
            return (___syscall_wait4 = Module["___syscall_wait4"] = Module["asm"]["__syscall_wait4"]).apply(null, arguments)
        }
        ;
        var _atexit = Module["_atexit"] = function() {
            return (_atexit = Module["_atexit"] = Module["asm"]["atexit"]).apply(null, arguments)
        }
        ;
        var ___cxa_atexit = Module["___cxa_atexit"] = function() {
            return (___cxa_atexit = Module["___cxa_atexit"] = Module["asm"]["__cxa_atexit"]).apply(null, arguments)
        }
        ;
        var ___cxa_finalize = Module["___cxa_finalize"] = function() {
            return (___cxa_finalize = Module["___cxa_finalize"] = Module["asm"]["__cxa_finalize"]).apply(null, arguments)
        }
        ;
        var __Exit = Module["__Exit"] = function() {
            return (__Exit = Module["__Exit"] = Module["asm"]["_Exit"]).apply(null, arguments)
        }
        ;
        var _cosf = Module["_cosf"] = function() {
            return (_cosf = Module["_cosf"] = Module["asm"]["cosf"]).apply(null, arguments)
        }
        ;
        var _sinf = Module["_sinf"] = function() {
            return (_sinf = Module["_sinf"] = Module["asm"]["sinf"]).apply(null, arguments)
        }
        ;
        var _expf = Module["_expf"] = function() {
            return (_expf = Module["_expf"] = Module["asm"]["expf"]).apply(null, arguments)
        }
        ;
        var ___multf3 = Module["___multf3"] = function() {
            return (___multf3 = Module["___multf3"] = Module["asm"]["__multf3"]).apply(null, arguments)
        }
        ;
        var ___addtf3 = Module["___addtf3"] = function() {
            return (___addtf3 = Module["___addtf3"] = Module["asm"]["__addtf3"]).apply(null, arguments)
        }
        ;
        var ___subtf3 = Module["___subtf3"] = function() {
            return (___subtf3 = Module["___subtf3"] = Module["asm"]["__subtf3"]).apply(null, arguments)
        }
        ;
        var ___ctype_b_loc = Module["___ctype_b_loc"] = function() {
            return (___ctype_b_loc = Module["___ctype_b_loc"] = Module["asm"]["__ctype_b_loc"]).apply(null, arguments)
        }
        ;
        var ___ctype_get_mb_cur_max = Module["___ctype_get_mb_cur_max"] = function() {
            return (___ctype_get_mb_cur_max = Module["___ctype_get_mb_cur_max"] = Module["asm"]["__ctype_get_mb_cur_max"]).apply(null, arguments)
        }
        ;
        var ___get_tp = Module["___get_tp"] = function() {
            return (___get_tp = Module["___get_tp"] = Module["asm"]["__get_tp"]).apply(null, arguments)
        }
        ;
        var ___ctype_tolower_loc = Module["___ctype_tolower_loc"] = function() {
            return (___ctype_tolower_loc = Module["___ctype_tolower_loc"] = Module["asm"]["__ctype_tolower_loc"]).apply(null, arguments)
        }
        ;
        var ___ctype_toupper_loc = Module["___ctype_toupper_loc"] = function() {
            return (___ctype_toupper_loc = Module["___ctype_toupper_loc"] = Module["asm"]["__ctype_toupper_loc"]).apply(null, arguments)
        }
        ;
        var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = function() {
            return (___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = Module["asm"]["__emscripten_environ_constructor"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_malloc = Module["_emscripten_builtin_malloc"] = function() {
            return (_emscripten_builtin_malloc = Module["_emscripten_builtin_malloc"] = Module["asm"]["emscripten_builtin_malloc"]).apply(null, arguments)
        }
        ;
        var ___flt_rounds = Module["___flt_rounds"] = function() {
            return (___flt_rounds = Module["___flt_rounds"] = Module["asm"]["__flt_rounds"]).apply(null, arguments)
        }
        ;
        var _fegetround = Module["_fegetround"] = function() {
            return (_fegetround = Module["_fegetround"] = Module["asm"]["fegetround"]).apply(null, arguments)
        }
        ;
        var ___fmodeflags = Module["___fmodeflags"] = function() {
            return (___fmodeflags = Module["___fmodeflags"] = Module["asm"]["__fmodeflags"]).apply(null, arguments)
        }
        ;
        var ___fpclassify = Module["___fpclassify"] = function() {
            return (___fpclassify = Module["___fpclassify"] = Module["asm"]["__fpclassify"]).apply(null, arguments)
        }
        ;
        var ___fpclassifyf = Module["___fpclassifyf"] = function() {
            return (___fpclassifyf = Module["___fpclassifyf"] = Module["asm"]["__fpclassifyf"]).apply(null, arguments)
        }
        ;
        var ___fpclassifyl = Module["___fpclassifyl"] = function() {
            return (___fpclassifyl = Module["___fpclassifyl"] = Module["asm"]["__fpclassifyl"]).apply(null, arguments)
        }
        ;
        var ___divtf3 = Module["___divtf3"] = function() {
            return (___divtf3 = Module["___divtf3"] = Module["asm"]["__divtf3"]).apply(null, arguments)
        }
        ;
        var ___mo_lookup = Module["___mo_lookup"] = function() {
            return (___mo_lookup = Module["___mo_lookup"] = Module["asm"]["__mo_lookup"]).apply(null, arguments)
        }
        ;
        var ___overflow = Module["___overflow"] = function() {
            return (___overflow = Module["___overflow"] = Module["asm"]["__overflow"]).apply(null, arguments)
        }
        ;
        var ___randname = Module["___randname"] = function() {
            return (___randname = Module["___randname"] = Module["asm"]["__randname"]).apply(null, arguments)
        }
        ;
        var _scalbn = Module["_scalbn"] = function() {
            return (_scalbn = Module["_scalbn"] = Module["asm"]["scalbn"]).apply(null, arguments)
        }
        ;
        var _floor = Module["_floor"] = function() {
            return (_floor = Module["_floor"] = Module["asm"]["floor"]).apply(null, arguments)
        }
        ;
        var ___lttf2 = Module["___lttf2"] = function() {
            return (___lttf2 = Module["___lttf2"] = Module["asm"]["__lttf2"]).apply(null, arguments)
        }
        ;
        var ___fixtfdi = Module["___fixtfdi"] = function() {
            return (___fixtfdi = Module["___fixtfdi"] = Module["asm"]["__fixtfdi"]).apply(null, arguments)
        }
        ;
        var ___gttf2 = Module["___gttf2"] = function() {
            return (___gttf2 = Module["___gttf2"] = Module["asm"]["__gttf2"]).apply(null, arguments)
        }
        ;
        var ___fixtfsi = Module["___fixtfsi"] = function() {
            return (___fixtfsi = Module["___fixtfsi"] = Module["asm"]["__fixtfsi"]).apply(null, arguments)
        }
        ;
        var ___floatsitf = Module["___floatsitf"] = function() {
            return (___floatsitf = Module["___floatsitf"] = Module["asm"]["__floatsitf"]).apply(null, arguments)
        }
        ;
        var ___signbit = Module["___signbit"] = function() {
            return (___signbit = Module["___signbit"] = Module["asm"]["__signbit"]).apply(null, arguments)
        }
        ;
        var ___signbitf = Module["___signbitf"] = function() {
            return (___signbitf = Module["___signbitf"] = Module["asm"]["__signbitf"]).apply(null, arguments)
        }
        ;
        var ___signbitl = Module["___signbitl"] = function() {
            return (___signbitl = Module["___signbitl"] = Module["asm"]["__signbitl"]).apply(null, arguments)
        }
        ;
        var ___wasi_syscall_ret = Module["___wasi_syscall_ret"] = function() {
            return (___wasi_syscall_ret = Module["___wasi_syscall_ret"] = Module["asm"]["__wasi_syscall_ret"]).apply(null, arguments)
        }
        ;
        var ___synccall = Module["___synccall"] = function() {
            return (___synccall = Module["___synccall"] = Module["asm"]["__synccall"]).apply(null, arguments)
        }
        ;
        var _fabsl = Module["_fabsl"] = function() {
            return (_fabsl = Module["_fabsl"] = Module["asm"]["fabsl"]).apply(null, arguments)
        }
        ;
        var ___getf2 = Module["___getf2"] = function() {
            return (___getf2 = Module["___getf2"] = Module["asm"]["__getf2"]).apply(null, arguments)
        }
        ;
        var ___uflow = Module["___uflow"] = function() {
            return (___uflow = Module["___uflow"] = Module["asm"]["__uflow"]).apply(null, arguments)
        }
        ;
        var ___fxstat = Module["___fxstat"] = function() {
            return (___fxstat = Module["___fxstat"] = Module["asm"]["__fxstat"]).apply(null, arguments)
        }
        ;
        var ___fxstatat = Module["___fxstatat"] = function() {
            return (___fxstatat = Module["___fxstatat"] = Module["asm"]["__fxstatat"]).apply(null, arguments)
        }
        ;
        var ___lxstat = Module["___lxstat"] = function() {
            return (___lxstat = Module["___lxstat"] = Module["asm"]["__lxstat"]).apply(null, arguments)
        }
        ;
        var ___xstat = Module["___xstat"] = function() {
            return (___xstat = Module["___xstat"] = Module["asm"]["__xstat"]).apply(null, arguments)
        }
        ;
        var ___xmknod = Module["___xmknod"] = function() {
            return (___xmknod = Module["___xmknod"] = Module["asm"]["__xmknod"]).apply(null, arguments)
        }
        ;
        var ___xmknodat = Module["___xmknodat"] = function() {
            return (___xmknodat = Module["___xmknodat"] = Module["asm"]["__xmknodat"]).apply(null, arguments)
        }
        ;
        var ___fxstat64 = Module["___fxstat64"] = function() {
            return (___fxstat64 = Module["___fxstat64"] = Module["asm"]["__fxstat64"]).apply(null, arguments)
        }
        ;
        var ___fxstatat64 = Module["___fxstatat64"] = function() {
            return (___fxstatat64 = Module["___fxstatat64"] = Module["asm"]["__fxstatat64"]).apply(null, arguments)
        }
        ;
        var ___lxstat64 = Module["___lxstat64"] = function() {
            return (___lxstat64 = Module["___lxstat64"] = Module["asm"]["__lxstat64"]).apply(null, arguments)
        }
        ;
        var ___xstat64 = Module["___xstat64"] = function() {
            return (___xstat64 = Module["___xstat64"] = Module["asm"]["__xstat64"]).apply(null, arguments)
        }
        ;
        var _a64l = Module["_a64l"] = function() {
            return (_a64l = Module["_a64l"] = Module["asm"]["a64l"]).apply(null, arguments)
        }
        ;
        var _l64a = Module["_l64a"] = function() {
            return (_l64a = Module["_l64a"] = Module["asm"]["l64a"]).apply(null, arguments)
        }
        ;
        var _abs = Module["_abs"] = function() {
            return (_abs = Module["_abs"] = Module["asm"]["abs"]).apply(null, arguments)
        }
        ;
        var _acct = Module["_acct"] = function() {
            return (_acct = Module["_acct"] = Module["asm"]["acct"]).apply(null, arguments)
        }
        ;
        var _acosf = Module["_acosf"] = function() {
            return (_acosf = Module["_acosf"] = Module["asm"]["acosf"]).apply(null, arguments)
        }
        ;
        var _sqrtf = Module["_sqrtf"] = function() {
            return (_sqrtf = Module["_sqrtf"] = Module["asm"]["sqrtf"]).apply(null, arguments)
        }
        ;
        var _acoshf = Module["_acoshf"] = function() {
            return (_acoshf = Module["_acoshf"] = Module["asm"]["acoshf"]).apply(null, arguments)
        }
        ;
        var _log1pf = Module["_log1pf"] = function() {
            return (_log1pf = Module["_log1pf"] = Module["asm"]["log1pf"]).apply(null, arguments)
        }
        ;
        var _logf = Module["_logf"] = function() {
            return (_logf = Module["_logf"] = Module["asm"]["logf"]).apply(null, arguments)
        }
        ;
        var _acoshl = Module["_acoshl"] = function() {
            return (_acoshl = Module["_acoshl"] = Module["asm"]["acoshl"]).apply(null, arguments)
        }
        ;
        var _acosl = Module["_acosl"] = function() {
            return (_acosl = Module["_acosl"] = Module["asm"]["acosl"]).apply(null, arguments)
        }
        ;
        var ___eqtf2 = Module["___eqtf2"] = function() {
            return (___eqtf2 = Module["___eqtf2"] = Module["asm"]["__eqtf2"]).apply(null, arguments)
        }
        ;
        var ___netf2 = Module["___netf2"] = function() {
            return (___netf2 = Module["___netf2"] = Module["asm"]["__netf2"]).apply(null, arguments)
        }
        ;
        var _sqrtl = Module["_sqrtl"] = function() {
            return (_sqrtl = Module["_sqrtl"] = Module["asm"]["sqrtl"]).apply(null, arguments)
        }
        ;
        var _aligned_alloc = Module["_aligned_alloc"] = function() {
            return (_aligned_alloc = Module["_aligned_alloc"] = Module["asm"]["aligned_alloc"]).apply(null, arguments)
        }
        ;
        var _posix_memalign = Module["_posix_memalign"] = function() {
            return (_posix_memalign = Module["_posix_memalign"] = Module["asm"]["posix_memalign"]).apply(null, arguments)
        }
        ;
        var _alphasort = Module["_alphasort"] = function() {
            return (_alphasort = Module["_alphasort"] = Module["asm"]["alphasort"]).apply(null, arguments)
        }
        ;
        var _strcoll = Module["_strcoll"] = function() {
            return (_strcoll = Module["_strcoll"] = Module["asm"]["strcoll"]).apply(null, arguments)
        }
        ;
        var _alphasort64 = Module["_alphasort64"] = function() {
            return (_alphasort64 = Module["_alphasort64"] = Module["asm"]["alphasort64"]).apply(null, arguments)
        }
        ;
        var _asctime = Module["_asctime"] = function() {
            return (_asctime = Module["_asctime"] = Module["asm"]["asctime"]).apply(null, arguments)
        }
        ;
        var ___nl_langinfo_l = Module["___nl_langinfo_l"] = function() {
            return (___nl_langinfo_l = Module["___nl_langinfo_l"] = Module["asm"]["__nl_langinfo_l"]).apply(null, arguments)
        }
        ;
        var _asctime_r = Module["_asctime_r"] = function() {
            return (_asctime_r = Module["_asctime_r"] = Module["asm"]["asctime_r"]).apply(null, arguments)
        }
        ;
        var _asinf = Module["_asinf"] = function() {
            return (_asinf = Module["_asinf"] = Module["asm"]["asinf"]).apply(null, arguments)
        }
        ;
        var _fabsf = Module["_fabsf"] = function() {
            return (_fabsf = Module["_fabsf"] = Module["asm"]["fabsf"]).apply(null, arguments)
        }
        ;
        var _asinhf = Module["_asinhf"] = function() {
            return (_asinhf = Module["_asinhf"] = Module["asm"]["asinhf"]).apply(null, arguments)
        }
        ;
        var _asinhl = Module["_asinhl"] = function() {
            return (_asinhl = Module["_asinhl"] = Module["asm"]["asinhl"]).apply(null, arguments)
        }
        ;
        var _asinl = Module["_asinl"] = function() {
            return (_asinl = Module["_asinl"] = Module["asm"]["asinl"]).apply(null, arguments)
        }
        ;
        var _asprintf = Module["_asprintf"] = function() {
            return (_asprintf = Module["_asprintf"] = Module["asm"]["asprintf"]).apply(null, arguments)
        }
        ;
        var _vasprintf = Module["_vasprintf"] = function() {
            return (_vasprintf = Module["_vasprintf"] = Module["asm"]["vasprintf"]).apply(null, arguments)
        }
        ;
        var _atan2f = Module["_atan2f"] = function() {
            return (_atan2f = Module["_atan2f"] = Module["asm"]["atan2f"]).apply(null, arguments)
        }
        ;
        var _atanf = Module["_atanf"] = function() {
            return (_atanf = Module["_atanf"] = Module["asm"]["atanf"]).apply(null, arguments)
        }
        ;
        var _atan2l = Module["_atan2l"] = function() {
            return (_atan2l = Module["_atan2l"] = Module["asm"]["atan2l"]).apply(null, arguments)
        }
        ;
        var _atanl = Module["_atanl"] = function() {
            return (_atanl = Module["_atanl"] = Module["asm"]["atanl"]).apply(null, arguments)
        }
        ;
        var _atanhf = Module["_atanhf"] = function() {
            return (_atanhf = Module["_atanhf"] = Module["asm"]["atanhf"]).apply(null, arguments)
        }
        ;
        var _atanhl = Module["_atanhl"] = function() {
            return (_atanhl = Module["_atanhl"] = Module["asm"]["atanhl"]).apply(null, arguments)
        }
        ;
        var _log1pl = Module["_log1pl"] = function() {
            return (_log1pl = Module["_log1pl"] = Module["asm"]["log1pl"]).apply(null, arguments)
        }
        ;
        var ___lock = Module["___lock"] = function() {
            return (___lock = Module["___lock"] = Module["asm"]["__lock"]).apply(null, arguments)
        }
        ;
        var ___unlock = Module["___unlock"] = function() {
            return (___unlock = Module["___unlock"] = Module["asm"]["__unlock"]).apply(null, arguments)
        }
        ;
        var ____cxa_finalize = Module["____cxa_finalize"] = function() {
            return (____cxa_finalize = Module["____cxa_finalize"] = Module["asm"]["___cxa_finalize"]).apply(null, arguments)
        }
        ;
        var ____cxa_atexit = Module["____cxa_atexit"] = function() {
            return (____cxa_atexit = Module["____cxa_atexit"] = Module["asm"]["___cxa_atexit"]).apply(null, arguments)
        }
        ;
        var ___libc_calloc = Module["___libc_calloc"] = function() {
            return (___libc_calloc = Module["___libc_calloc"] = Module["asm"]["__libc_calloc"]).apply(null, arguments)
        }
        ;
        var ___atexit = Module["___atexit"] = function() {
            return (___atexit = Module["___atexit"] = Module["asm"]["__atexit"]).apply(null, arguments)
        }
        ;
        var _atof = Module["_atof"] = function() {
            return (_atof = Module["_atof"] = Module["asm"]["atof"]).apply(null, arguments)
        }
        ;
        var _strtod = Module["_strtod"] = function() {
            return (_strtod = Module["_strtod"] = Module["asm"]["strtod"]).apply(null, arguments)
        }
        ;
        var _atoi = Module["_atoi"] = function() {
            return (_atoi = Module["_atoi"] = Module["asm"]["atoi"]).apply(null, arguments)
        }
        ;
        var _isspace = Module["_isspace"] = function() {
            return (_isspace = Module["_isspace"] = Module["asm"]["isspace"]).apply(null, arguments)
        }
        ;
        var _isdigit = Module["_isdigit"] = function() {
            return (_isdigit = Module["_isdigit"] = Module["asm"]["isdigit"]).apply(null, arguments)
        }
        ;
        var _atol = Module["_atol"] = function() {
            return (_atol = Module["_atol"] = Module["asm"]["atol"]).apply(null, arguments)
        }
        ;
        var _atoll = Module["_atoll"] = function() {
            return (_atoll = Module["_atoll"] = Module["asm"]["atoll"]).apply(null, arguments)
        }
        ;
        var _basename = Module["_basename"] = function() {
            return (_basename = Module["_basename"] = Module["asm"]["basename"]).apply(null, arguments)
        }
        ;
        var ___xpg_basename = Module["___xpg_basename"] = function() {
            return (___xpg_basename = Module["___xpg_basename"] = Module["asm"]["__xpg_basename"]).apply(null, arguments)
        }
        ;
        var _bcmp = Module["_bcmp"] = function() {
            return (_bcmp = Module["_bcmp"] = Module["asm"]["bcmp"]).apply(null, arguments)
        }
        ;
        var _bcopy = Module["_bcopy"] = function() {
            return (_bcopy = Module["_bcopy"] = Module["asm"]["bcopy"]).apply(null, arguments)
        }
        ;
        var _strcasecmp = Module["_strcasecmp"] = function() {
            return (_strcasecmp = Module["_strcasecmp"] = Module["asm"]["strcasecmp"]).apply(null, arguments)
        }
        ;
        var _bsearch = Module["_bsearch"] = function() {
            return (_bsearch = Module["_bsearch"] = Module["asm"]["bsearch"]).apply(null, arguments)
        }
        ;
        var _btowc = Module["_btowc"] = function() {
            return (_btowc = Module["_btowc"] = Module["asm"]["btowc"]).apply(null, arguments)
        }
        ;
        var _bzero = Module["_bzero"] = function() {
            return (_bzero = Module["_bzero"] = Module["asm"]["bzero"]).apply(null, arguments)
        }
        ;
        var _c16rtomb = Module["_c16rtomb"] = function() {
            return (_c16rtomb = Module["_c16rtomb"] = Module["asm"]["c16rtomb"]).apply(null, arguments)
        }
        ;
        var _wcrtomb = Module["_wcrtomb"] = function() {
            return (_wcrtomb = Module["_wcrtomb"] = Module["asm"]["wcrtomb"]).apply(null, arguments)
        }
        ;
        var _c32rtomb = Module["_c32rtomb"] = function() {
            return (_c32rtomb = Module["_c32rtomb"] = Module["asm"]["c32rtomb"]).apply(null, arguments)
        }
        ;
        var _cabs = Module["_cabs"] = function() {
            return (_cabs = Module["_cabs"] = Module["asm"]["cabs"]).apply(null, arguments)
        }
        ;
        var _cabsf = Module["_cabsf"] = function() {
            return (_cabsf = Module["_cabsf"] = Module["asm"]["cabsf"]).apply(null, arguments)
        }
        ;
        var _hypotf = Module["_hypotf"] = function() {
            return (_hypotf = Module["_hypotf"] = Module["asm"]["hypotf"]).apply(null, arguments)
        }
        ;
        var _cabsl = Module["_cabsl"] = function() {
            return (_cabsl = Module["_cabsl"] = Module["asm"]["cabsl"]).apply(null, arguments)
        }
        ;
        var _hypotl = Module["_hypotl"] = function() {
            return (_hypotl = Module["_hypotl"] = Module["asm"]["hypotl"]).apply(null, arguments)
        }
        ;
        var _cacos = Module["_cacos"] = function() {
            return (_cacos = Module["_cacos"] = Module["asm"]["cacos"]).apply(null, arguments)
        }
        ;
        var _casin = Module["_casin"] = function() {
            return (_casin = Module["_casin"] = Module["asm"]["casin"]).apply(null, arguments)
        }
        ;
        var _cacosf = Module["_cacosf"] = function() {
            return (_cacosf = Module["_cacosf"] = Module["asm"]["cacosf"]).apply(null, arguments)
        }
        ;
        var _casinf = Module["_casinf"] = function() {
            return (_casinf = Module["_casinf"] = Module["asm"]["casinf"]).apply(null, arguments)
        }
        ;
        var _cacosh = Module["_cacosh"] = function() {
            return (_cacosh = Module["_cacosh"] = Module["asm"]["cacosh"]).apply(null, arguments)
        }
        ;
        var _cacoshf = Module["_cacoshf"] = function() {
            return (_cacoshf = Module["_cacoshf"] = Module["asm"]["cacoshf"]).apply(null, arguments)
        }
        ;
        var _cacoshl = Module["_cacoshl"] = function() {
            return (_cacoshl = Module["_cacoshl"] = Module["asm"]["cacoshl"]).apply(null, arguments)
        }
        ;
        var _cacosl = Module["_cacosl"] = function() {
            return (_cacosl = Module["_cacosl"] = Module["asm"]["cacosl"]).apply(null, arguments)
        }
        ;
        var _casinl = Module["_casinl"] = function() {
            return (_casinl = Module["_casinl"] = Module["asm"]["casinl"]).apply(null, arguments)
        }
        ;
        var _call_once = Module["_call_once"] = function() {
            return (_call_once = Module["_call_once"] = Module["asm"]["call_once"]).apply(null, arguments)
        }
        ;
        var _carg = Module["_carg"] = function() {
            return (_carg = Module["_carg"] = Module["asm"]["carg"]).apply(null, arguments)
        }
        ;
        var _cargf = Module["_cargf"] = function() {
            return (_cargf = Module["_cargf"] = Module["asm"]["cargf"]).apply(null, arguments)
        }
        ;
        var _cargl = Module["_cargl"] = function() {
            return (_cargl = Module["_cargl"] = Module["asm"]["cargl"]).apply(null, arguments)
        }
        ;
        var _csqrt = Module["_csqrt"] = function() {
            return (_csqrt = Module["_csqrt"] = Module["asm"]["csqrt"]).apply(null, arguments)
        }
        ;
        var _clog = Module["_clog"] = function() {
            return (_clog = Module["_clog"] = Module["asm"]["clog"]).apply(null, arguments)
        }
        ;
        var _csqrtf = Module["_csqrtf"] = function() {
            return (_csqrtf = Module["_csqrtf"] = Module["asm"]["csqrtf"]).apply(null, arguments)
        }
        ;
        var _clogf = Module["_clogf"] = function() {
            return (_clogf = Module["_clogf"] = Module["asm"]["clogf"]).apply(null, arguments)
        }
        ;
        var _casinh = Module["_casinh"] = function() {
            return (_casinh = Module["_casinh"] = Module["asm"]["casinh"]).apply(null, arguments)
        }
        ;
        var _casinhf = Module["_casinhf"] = function() {
            return (_casinhf = Module["_casinhf"] = Module["asm"]["casinhf"]).apply(null, arguments)
        }
        ;
        var _casinhl = Module["_casinhl"] = function() {
            return (_casinhl = Module["_casinhl"] = Module["asm"]["casinhl"]).apply(null, arguments)
        }
        ;
        var _csqrtl = Module["_csqrtl"] = function() {
            return (_csqrtl = Module["_csqrtl"] = Module["asm"]["csqrtl"]).apply(null, arguments)
        }
        ;
        var _clogl = Module["_clogl"] = function() {
            return (_clogl = Module["_clogl"] = Module["asm"]["clogl"]).apply(null, arguments)
        }
        ;
        var _catan = Module["_catan"] = function() {
            return (_catan = Module["_catan"] = Module["asm"]["catan"]).apply(null, arguments)
        }
        ;
        var _catanf = Module["_catanf"] = function() {
            return (_catanf = Module["_catanf"] = Module["asm"]["catanf"]).apply(null, arguments)
        }
        ;
        var _catanh = Module["_catanh"] = function() {
            return (_catanh = Module["_catanh"] = Module["asm"]["catanh"]).apply(null, arguments)
        }
        ;
        var _catanhf = Module["_catanhf"] = function() {
            return (_catanhf = Module["_catanhf"] = Module["asm"]["catanhf"]).apply(null, arguments)
        }
        ;
        var _catanhl = Module["_catanhl"] = function() {
            return (_catanhl = Module["_catanhl"] = Module["asm"]["catanhl"]).apply(null, arguments)
        }
        ;
        var _catanl = Module["_catanl"] = function() {
            return (_catanl = Module["_catanl"] = Module["asm"]["catanl"]).apply(null, arguments)
        }
        ;
        var _logl = Module["_logl"] = function() {
            return (_logl = Module["_logl"] = Module["asm"]["logl"]).apply(null, arguments)
        }
        ;
        var ___trunctfsf2 = Module["___trunctfsf2"] = function() {
            return (___trunctfsf2 = Module["___trunctfsf2"] = Module["asm"]["__trunctfsf2"]).apply(null, arguments)
        }
        ;
        var ___extendsftf2 = Module["___extendsftf2"] = function() {
            return (___extendsftf2 = Module["___extendsftf2"] = Module["asm"]["__extendsftf2"]).apply(null, arguments)
        }
        ;
        var _catclose = Module["_catclose"] = function() {
            return (_catclose = Module["_catclose"] = Module["asm"]["catclose"]).apply(null, arguments)
        }
        ;
        var _catgets = Module["_catgets"] = function() {
            return (_catgets = Module["_catgets"] = Module["asm"]["catgets"]).apply(null, arguments)
        }
        ;
        var _catopen = Module["_catopen"] = function() {
            return (_catopen = Module["_catopen"] = Module["asm"]["catopen"]).apply(null, arguments)
        }
        ;
        var _cbrt = Module["_cbrt"] = function() {
            return (_cbrt = Module["_cbrt"] = Module["asm"]["cbrt"]).apply(null, arguments)
        }
        ;
        var _cbrtf = Module["_cbrtf"] = function() {
            return (_cbrtf = Module["_cbrtf"] = Module["asm"]["cbrtf"]).apply(null, arguments)
        }
        ;
        var _cbrtl = Module["_cbrtl"] = function() {
            return (_cbrtl = Module["_cbrtl"] = Module["asm"]["cbrtl"]).apply(null, arguments)
        }
        ;
        var _ccos = Module["_ccos"] = function() {
            return (_ccos = Module["_ccos"] = Module["asm"]["ccos"]).apply(null, arguments)
        }
        ;
        var _ccosh = Module["_ccosh"] = function() {
            return (_ccosh = Module["_ccosh"] = Module["asm"]["ccosh"]).apply(null, arguments)
        }
        ;
        var _ccosf = Module["_ccosf"] = function() {
            return (_ccosf = Module["_ccosf"] = Module["asm"]["ccosf"]).apply(null, arguments)
        }
        ;
        var _ccoshf = Module["_ccoshf"] = function() {
            return (_ccoshf = Module["_ccoshf"] = Module["asm"]["ccoshf"]).apply(null, arguments)
        }
        ;
        var _coshf = Module["_coshf"] = function() {
            return (_coshf = Module["_coshf"] = Module["asm"]["coshf"]).apply(null, arguments)
        }
        ;
        var _sinhf = Module["_sinhf"] = function() {
            return (_sinhf = Module["_sinhf"] = Module["asm"]["sinhf"]).apply(null, arguments)
        }
        ;
        var _copysignf = Module["_copysignf"] = function() {
            return (_copysignf = Module["_copysignf"] = Module["asm"]["copysignf"]).apply(null, arguments)
        }
        ;
        var _ccoshl = Module["_ccoshl"] = function() {
            return (_ccoshl = Module["_ccoshl"] = Module["asm"]["ccoshl"]).apply(null, arguments)
        }
        ;
        var _ccosl = Module["_ccosl"] = function() {
            return (_ccosl = Module["_ccosl"] = Module["asm"]["ccosl"]).apply(null, arguments)
        }
        ;
        var _ceil = Module["_ceil"] = function() {
            return (_ceil = Module["_ceil"] = Module["asm"]["ceil"]).apply(null, arguments)
        }
        ;
        var _ceilf = Module["_ceilf"] = function() {
            return (_ceilf = Module["_ceilf"] = Module["asm"]["ceilf"]).apply(null, arguments)
        }
        ;
        var _ceill = Module["_ceill"] = function() {
            return (_ceill = Module["_ceill"] = Module["asm"]["ceill"]).apply(null, arguments)
        }
        ;
        var _cexp = Module["_cexp"] = function() {
            return (_cexp = Module["_cexp"] = Module["asm"]["cexp"]).apply(null, arguments)
        }
        ;
        var _cexpf = Module["_cexpf"] = function() {
            return (_cexpf = Module["_cexpf"] = Module["asm"]["cexpf"]).apply(null, arguments)
        }
        ;
        var _cexpl = Module["_cexpl"] = function() {
            return (_cexpl = Module["_cexpl"] = Module["asm"]["cexpl"]).apply(null, arguments)
        }
        ;
        var _cfgetospeed = Module["_cfgetospeed"] = function() {
            return (_cfgetospeed = Module["_cfgetospeed"] = Module["asm"]["cfgetospeed"]).apply(null, arguments)
        }
        ;
        var _cfgetispeed = Module["_cfgetispeed"] = function() {
            return (_cfgetispeed = Module["_cfgetispeed"] = Module["asm"]["cfgetispeed"]).apply(null, arguments)
        }
        ;
        var _cfmakeraw = Module["_cfmakeraw"] = function() {
            return (_cfmakeraw = Module["_cfmakeraw"] = Module["asm"]["cfmakeraw"]).apply(null, arguments)
        }
        ;
        var _cfsetospeed = Module["_cfsetospeed"] = function() {
            return (_cfsetospeed = Module["_cfsetospeed"] = Module["asm"]["cfsetospeed"]).apply(null, arguments)
        }
        ;
        var _cfsetispeed = Module["_cfsetispeed"] = function() {
            return (_cfsetispeed = Module["_cfsetispeed"] = Module["asm"]["cfsetispeed"]).apply(null, arguments)
        }
        ;
        var _cfsetspeed = Module["_cfsetspeed"] = function() {
            return (_cfsetspeed = Module["_cfsetspeed"] = Module["asm"]["cfsetspeed"]).apply(null, arguments)
        }
        ;
        var _cimag = Module["_cimag"] = function() {
            return (_cimag = Module["_cimag"] = Module["asm"]["cimag"]).apply(null, arguments)
        }
        ;
        var _cimagf = Module["_cimagf"] = function() {
            return (_cimagf = Module["_cimagf"] = Module["asm"]["cimagf"]).apply(null, arguments)
        }
        ;
        var _cimagl = Module["_cimagl"] = function() {
            return (_cimagl = Module["_cimagl"] = Module["asm"]["cimagl"]).apply(null, arguments)
        }
        ;
        var _clearerr_unlocked = Module["_clearerr_unlocked"] = function() {
            return (_clearerr_unlocked = Module["_clearerr_unlocked"] = Module["asm"]["clearerr_unlocked"]).apply(null, arguments)
        }
        ;
        var _emscripten_thread_sleep = Module["_emscripten_thread_sleep"] = function() {
            return (_emscripten_thread_sleep = Module["_emscripten_thread_sleep"] = Module["asm"]["emscripten_thread_sleep"]).apply(null, arguments)
        }
        ;
        var _clock_nanosleep = Module["_clock_nanosleep"] = function() {
            return (_clock_nanosleep = Module["_clock_nanosleep"] = Module["asm"]["clock_nanosleep"]).apply(null, arguments)
        }
        ;
        var _cnd_broadcast = Module["_cnd_broadcast"] = function() {
            return (_cnd_broadcast = Module["_cnd_broadcast"] = Module["asm"]["cnd_broadcast"]).apply(null, arguments)
        }
        ;
        var _cnd_destroy = Module["_cnd_destroy"] = function() {
            return (_cnd_destroy = Module["_cnd_destroy"] = Module["asm"]["cnd_destroy"]).apply(null, arguments)
        }
        ;
        var _cnd_init = Module["_cnd_init"] = function() {
            return (_cnd_init = Module["_cnd_init"] = Module["asm"]["cnd_init"]).apply(null, arguments)
        }
        ;
        var _cnd_signal = Module["_cnd_signal"] = function() {
            return (_cnd_signal = Module["_cnd_signal"] = Module["asm"]["cnd_signal"]).apply(null, arguments)
        }
        ;
        var _cnd_timedwait = Module["_cnd_timedwait"] = function() {
            return (_cnd_timedwait = Module["_cnd_timedwait"] = Module["asm"]["cnd_timedwait"]).apply(null, arguments)
        }
        ;
        var _cnd_wait = Module["_cnd_wait"] = function() {
            return (_cnd_wait = Module["_cnd_wait"] = Module["asm"]["cnd_wait"]).apply(null, arguments)
        }
        ;
        var _conj = Module["_conj"] = function() {
            return (_conj = Module["_conj"] = Module["asm"]["conj"]).apply(null, arguments)
        }
        ;
        var _conjf = Module["_conjf"] = function() {
            return (_conjf = Module["_conjf"] = Module["asm"]["conjf"]).apply(null, arguments)
        }
        ;
        var _conjl = Module["_conjl"] = function() {
            return (_conjl = Module["_conjl"] = Module["asm"]["conjl"]).apply(null, arguments)
        }
        ;
        var _copysignl = Module["_copysignl"] = function() {
            return (_copysignl = Module["_copysignl"] = Module["asm"]["copysignl"]).apply(null, arguments)
        }
        ;
        var _expm1f = Module["_expm1f"] = function() {
            return (_expm1f = Module["_expm1f"] = Module["asm"]["expm1f"]).apply(null, arguments)
        }
        ;
        var _coshl = Module["_coshl"] = function() {
            return (_coshl = Module["_coshl"] = Module["asm"]["coshl"]).apply(null, arguments)
        }
        ;
        var _cosl = Module["_cosl"] = function() {
            return (_cosl = Module["_cosl"] = Module["asm"]["cosl"]).apply(null, arguments)
        }
        ;
        var _cpow = Module["_cpow"] = function() {
            return (_cpow = Module["_cpow"] = Module["asm"]["cpow"]).apply(null, arguments)
        }
        ;
        var ___muldc3 = Module["___muldc3"] = function() {
            return (___muldc3 = Module["___muldc3"] = Module["asm"]["__muldc3"]).apply(null, arguments)
        }
        ;
        var _cpowf = Module["_cpowf"] = function() {
            return (_cpowf = Module["_cpowf"] = Module["asm"]["cpowf"]).apply(null, arguments)
        }
        ;
        var ___mulsc3 = Module["___mulsc3"] = function() {
            return (___mulsc3 = Module["___mulsc3"] = Module["asm"]["__mulsc3"]).apply(null, arguments)
        }
        ;
        var _cpowl = Module["_cpowl"] = function() {
            return (_cpowl = Module["_cpowl"] = Module["asm"]["cpowl"]).apply(null, arguments)
        }
        ;
        var ___unordtf2 = Module["___unordtf2"] = function() {
            return (___unordtf2 = Module["___unordtf2"] = Module["asm"]["__unordtf2"]).apply(null, arguments)
        }
        ;
        var ___multc3 = Module["___multc3"] = function() {
            return (___multc3 = Module["___multc3"] = Module["asm"]["__multc3"]).apply(null, arguments)
        }
        ;
        var _cproj = Module["_cproj"] = function() {
            return (_cproj = Module["_cproj"] = Module["asm"]["cproj"]).apply(null, arguments)
        }
        ;
        var _cprojf = Module["_cprojf"] = function() {
            return (_cprojf = Module["_cprojf"] = Module["asm"]["cprojf"]).apply(null, arguments)
        }
        ;
        var _cprojl = Module["_cprojl"] = function() {
            return (_cprojl = Module["_cprojl"] = Module["asm"]["cprojl"]).apply(null, arguments)
        }
        ;
        var _creal = Module["_creal"] = function() {
            return (_creal = Module["_creal"] = Module["asm"]["creal"]).apply(null, arguments)
        }
        ;
        var _crealf = Module["_crealf"] = function() {
            return (_crealf = Module["_crealf"] = Module["asm"]["crealf"]).apply(null, arguments)
        }
        ;
        var _creall = Module["_creall"] = function() {
            return (_creall = Module["_creall"] = Module["asm"]["creall"]).apply(null, arguments)
        }
        ;
        var _creat = Module["_creat"] = function() {
            return (_creat = Module["_creat"] = Module["asm"]["creat"]).apply(null, arguments)
        }
        ;
        var _creat64 = Module["_creat64"] = function() {
            return (_creat64 = Module["_creat64"] = Module["asm"]["creat64"]).apply(null, arguments)
        }
        ;
        var _crypt = Module["_crypt"] = function() {
            return (_crypt = Module["_crypt"] = Module["asm"]["crypt"]).apply(null, arguments)
        }
        ;
        var ___crypt_blowfish = Module["___crypt_blowfish"] = function() {
            return (___crypt_blowfish = Module["___crypt_blowfish"] = Module["asm"]["__crypt_blowfish"]).apply(null, arguments)
        }
        ;
        var ___crypt_des = Module["___crypt_des"] = function() {
            return (___crypt_des = Module["___crypt_des"] = Module["asm"]["__crypt_des"]).apply(null, arguments)
        }
        ;
        var ___crypt_md5 = Module["___crypt_md5"] = function() {
            return (___crypt_md5 = Module["___crypt_md5"] = Module["asm"]["__crypt_md5"]).apply(null, arguments)
        }
        ;
        var _strnlen = Module["_strnlen"] = function() {
            return (_strnlen = Module["_strnlen"] = Module["asm"]["strnlen"]).apply(null, arguments)
        }
        ;
        var ___crypt_sha256 = Module["___crypt_sha256"] = function() {
            return (___crypt_sha256 = Module["___crypt_sha256"] = Module["asm"]["__crypt_sha256"]).apply(null, arguments)
        }
        ;
        var ___crypt_sha512 = Module["___crypt_sha512"] = function() {
            return (___crypt_sha512 = Module["___crypt_sha512"] = Module["asm"]["__crypt_sha512"]).apply(null, arguments)
        }
        ;
        var _sprintf = Module["_sprintf"] = function() {
            return (_sprintf = Module["_sprintf"] = Module["asm"]["sprintf"]).apply(null, arguments)
        }
        ;
        var _csin = Module["_csin"] = function() {
            return (_csin = Module["_csin"] = Module["asm"]["csin"]).apply(null, arguments)
        }
        ;
        var _csinh = Module["_csinh"] = function() {
            return (_csinh = Module["_csinh"] = Module["asm"]["csinh"]).apply(null, arguments)
        }
        ;
        var _csinf = Module["_csinf"] = function() {
            return (_csinf = Module["_csinf"] = Module["asm"]["csinf"]).apply(null, arguments)
        }
        ;
        var _csinhf = Module["_csinhf"] = function() {
            return (_csinhf = Module["_csinhf"] = Module["asm"]["csinhf"]).apply(null, arguments)
        }
        ;
        var _csinhl = Module["_csinhl"] = function() {
            return (_csinhl = Module["_csinhl"] = Module["asm"]["csinhl"]).apply(null, arguments)
        }
        ;
        var _csinl = Module["_csinl"] = function() {
            return (_csinl = Module["_csinl"] = Module["asm"]["csinl"]).apply(null, arguments)
        }
        ;
        var _ctan = Module["_ctan"] = function() {
            return (_ctan = Module["_ctan"] = Module["asm"]["ctan"]).apply(null, arguments)
        }
        ;
        var _ctanh = Module["_ctanh"] = function() {
            return (_ctanh = Module["_ctanh"] = Module["asm"]["ctanh"]).apply(null, arguments)
        }
        ;
        var _ctanf = Module["_ctanf"] = function() {
            return (_ctanf = Module["_ctanf"] = Module["asm"]["ctanf"]).apply(null, arguments)
        }
        ;
        var _ctanhf = Module["_ctanhf"] = function() {
            return (_ctanhf = Module["_ctanhf"] = Module["asm"]["ctanhf"]).apply(null, arguments)
        }
        ;
        var _tanf = Module["_tanf"] = function() {
            return (_tanf = Module["_tanf"] = Module["asm"]["tanf"]).apply(null, arguments)
        }
        ;
        var _ctanhl = Module["_ctanhl"] = function() {
            return (_ctanhl = Module["_ctanhl"] = Module["asm"]["ctanhl"]).apply(null, arguments)
        }
        ;
        var _ctanl = Module["_ctanl"] = function() {
            return (_ctanl = Module["_ctanl"] = Module["asm"]["ctanl"]).apply(null, arguments)
        }
        ;
        var _ctime = Module["_ctime"] = function() {
            return (_ctime = Module["_ctime"] = Module["asm"]["ctime"]).apply(null, arguments)
        }
        ;
        var _localtime = Module["_localtime"] = function() {
            return (_localtime = Module["_localtime"] = Module["asm"]["localtime"]).apply(null, arguments)
        }
        ;
        var _ctime_r = Module["_ctime_r"] = function() {
            return (_ctime_r = Module["_ctime_r"] = Module["asm"]["ctime_r"]).apply(null, arguments)
        }
        ;
        var _dcngettext = Module["_dcngettext"] = function() {
            return (_dcngettext = Module["_dcngettext"] = Module["asm"]["dcngettext"]).apply(null, arguments)
        }
        ;
        var ___gettextdomain = Module["___gettextdomain"] = function() {
            return (___gettextdomain = Module["___gettextdomain"] = Module["asm"]["__gettextdomain"]).apply(null, arguments)
        }
        ;
        var _dngettext = Module["_dngettext"] = function() {
            return (_dngettext = Module["_dngettext"] = Module["asm"]["dngettext"]).apply(null, arguments)
        }
        ;
        var _difftime = Module["_difftime"] = function() {
            return (_difftime = Module["_difftime"] = Module["asm"]["difftime"]).apply(null, arguments)
        }
        ;
        var _dirname = Module["_dirname"] = function() {
            return (_dirname = Module["_dirname"] = Module["asm"]["dirname"]).apply(null, arguments)
        }
        ;
        var _div = Module["_div"] = function() {
            return (_div = Module["_div"] = Module["asm"]["div"]).apply(null, arguments)
        }
        ;
        var ___libc_free = Module["___libc_free"] = function() {
            return (___libc_free = Module["___libc_free"] = Module["asm"]["__libc_free"]).apply(null, arguments)
        }
        ;
        var ___libc_malloc = Module["___libc_malloc"] = function() {
            return (___libc_malloc = Module["___libc_malloc"] = Module["asm"]["__libc_malloc"]).apply(null, arguments)
        }
        ;
        var ___dl_seterr = Module["___dl_seterr"] = function() {
            return (___dl_seterr = Module["___dl_seterr"] = Module["asm"]["__dl_seterr"]).apply(null, arguments)
        }
        ;
        var _dn_comp = Module["_dn_comp"] = function() {
            return (_dn_comp = Module["_dn_comp"] = Module["asm"]["dn_comp"]).apply(null, arguments)
        }
        ;
        var _dn_expand = Module["_dn_expand"] = function() {
            return (_dn_expand = Module["_dn_expand"] = Module["asm"]["dn_expand"]).apply(null, arguments)
        }
        ;
        var _dn_skipname = Module["_dn_skipname"] = function() {
            return (_dn_skipname = Module["_dn_skipname"] = Module["asm"]["dn_skipname"]).apply(null, arguments)
        }
        ;
        var _dprintf = Module["_dprintf"] = function() {
            return (_dprintf = Module["_dprintf"] = Module["asm"]["dprintf"]).apply(null, arguments)
        }
        ;
        var _vdprintf = Module["_vdprintf"] = function() {
            return (_vdprintf = Module["_vdprintf"] = Module["asm"]["vdprintf"]).apply(null, arguments)
        }
        ;
        var _erand48 = Module["_erand48"] = function() {
            return (_erand48 = Module["_erand48"] = Module["asm"]["erand48"]).apply(null, arguments)
        }
        ;
        var _drand48 = Module["_drand48"] = function() {
            return (_drand48 = Module["_drand48"] = Module["asm"]["drand48"]).apply(null, arguments)
        }
        ;
        var ___wasi_fd_is_valid = Module["___wasi_fd_is_valid"] = function() {
            return (___wasi_fd_is_valid = Module["___wasi_fd_is_valid"] = Module["asm"]["__wasi_fd_is_valid"]).apply(null, arguments)
        }
        ;
        var _dup3 = Module["_dup3"] = function() {
            return (_dup3 = Module["_dup3"] = Module["asm"]["dup3"]).apply(null, arguments)
        }
        ;
        var ___duplocale = Module["___duplocale"] = function() {
            return (___duplocale = Module["___duplocale"] = Module["asm"]["__duplocale"]).apply(null, arguments)
        }
        ;
        var _duplocale = Module["_duplocale"] = function() {
            return (_duplocale = Module["_duplocale"] = Module["asm"]["duplocale"]).apply(null, arguments)
        }
        ;
        var _pthread_setcancelstate = Module["_pthread_setcancelstate"] = function() {
            return (_pthread_setcancelstate = Module["_pthread_setcancelstate"] = Module["asm"]["pthread_setcancelstate"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_wrlock = Module["_pthread_rwlock_wrlock"] = function() {
            return (_pthread_rwlock_wrlock = Module["_pthread_rwlock_wrlock"] = Module["asm"]["pthread_rwlock_wrlock"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_unlock = Module["_pthread_rwlock_unlock"] = function() {
            return (_pthread_rwlock_unlock = Module["_pthread_rwlock_unlock"] = Module["asm"]["pthread_rwlock_unlock"]).apply(null, arguments)
        }
        ;
        var _emscripten_dlopen = Module["_emscripten_dlopen"] = function() {
            return (_emscripten_dlopen = Module["_emscripten_dlopen"] = Module["asm"]["emscripten_dlopen"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_rdlock = Module["_pthread_rwlock_rdlock"] = function() {
            return (_pthread_rwlock_rdlock = Module["_pthread_rwlock_rdlock"] = Module["asm"]["pthread_rwlock_rdlock"]).apply(null, arguments)
        }
        ;
        var _dladdr = Module["_dladdr"] = function() {
            return (_dladdr = Module["_dladdr"] = Module["asm"]["dladdr"]).apply(null, arguments)
        }
        ;
        var _ecvt = Module["_ecvt"] = function() {
            return (_ecvt = Module["_ecvt"] = Module["asm"]["ecvt"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_exchange_u8 = Module["_emscripten_atomic_exchange_u8"] = function() {
            return (_emscripten_atomic_exchange_u8 = Module["_emscripten_atomic_exchange_u8"] = Module["asm"]["emscripten_atomic_exchange_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_exchange_u16 = Module["_emscripten_atomic_exchange_u16"] = function() {
            return (_emscripten_atomic_exchange_u16 = Module["_emscripten_atomic_exchange_u16"] = Module["asm"]["emscripten_atomic_exchange_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_exchange_u32 = Module["_emscripten_atomic_exchange_u32"] = function() {
            return (_emscripten_atomic_exchange_u32 = Module["_emscripten_atomic_exchange_u32"] = Module["asm"]["emscripten_atomic_exchange_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_exchange_u64 = Module["_emscripten_atomic_exchange_u64"] = function() {
            return (_emscripten_atomic_exchange_u64 = Module["_emscripten_atomic_exchange_u64"] = Module["asm"]["emscripten_atomic_exchange_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_cas_u8 = Module["_emscripten_atomic_cas_u8"] = function() {
            return (_emscripten_atomic_cas_u8 = Module["_emscripten_atomic_cas_u8"] = Module["asm"]["emscripten_atomic_cas_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_cas_u16 = Module["_emscripten_atomic_cas_u16"] = function() {
            return (_emscripten_atomic_cas_u16 = Module["_emscripten_atomic_cas_u16"] = Module["asm"]["emscripten_atomic_cas_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_cas_u32 = Module["_emscripten_atomic_cas_u32"] = function() {
            return (_emscripten_atomic_cas_u32 = Module["_emscripten_atomic_cas_u32"] = Module["asm"]["emscripten_atomic_cas_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_cas_u64 = Module["_emscripten_atomic_cas_u64"] = function() {
            return (_emscripten_atomic_cas_u64 = Module["_emscripten_atomic_cas_u64"] = Module["asm"]["emscripten_atomic_cas_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_load_u8 = Module["_emscripten_atomic_load_u8"] = function() {
            return (_emscripten_atomic_load_u8 = Module["_emscripten_atomic_load_u8"] = Module["asm"]["emscripten_atomic_load_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_load_u16 = Module["_emscripten_atomic_load_u16"] = function() {
            return (_emscripten_atomic_load_u16 = Module["_emscripten_atomic_load_u16"] = Module["asm"]["emscripten_atomic_load_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_load_u32 = Module["_emscripten_atomic_load_u32"] = function() {
            return (_emscripten_atomic_load_u32 = Module["_emscripten_atomic_load_u32"] = Module["asm"]["emscripten_atomic_load_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_load_f32 = Module["_emscripten_atomic_load_f32"] = function() {
            return (_emscripten_atomic_load_f32 = Module["_emscripten_atomic_load_f32"] = Module["asm"]["emscripten_atomic_load_f32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_load_u64 = Module["_emscripten_atomic_load_u64"] = function() {
            return (_emscripten_atomic_load_u64 = Module["_emscripten_atomic_load_u64"] = Module["asm"]["emscripten_atomic_load_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_load_f64 = Module["_emscripten_atomic_load_f64"] = function() {
            return (_emscripten_atomic_load_f64 = Module["_emscripten_atomic_load_f64"] = Module["asm"]["emscripten_atomic_load_f64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_store_u8 = Module["_emscripten_atomic_store_u8"] = function() {
            return (_emscripten_atomic_store_u8 = Module["_emscripten_atomic_store_u8"] = Module["asm"]["emscripten_atomic_store_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_store_u16 = Module["_emscripten_atomic_store_u16"] = function() {
            return (_emscripten_atomic_store_u16 = Module["_emscripten_atomic_store_u16"] = Module["asm"]["emscripten_atomic_store_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_store_u32 = Module["_emscripten_atomic_store_u32"] = function() {
            return (_emscripten_atomic_store_u32 = Module["_emscripten_atomic_store_u32"] = Module["asm"]["emscripten_atomic_store_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_store_f32 = Module["_emscripten_atomic_store_f32"] = function() {
            return (_emscripten_atomic_store_f32 = Module["_emscripten_atomic_store_f32"] = Module["asm"]["emscripten_atomic_store_f32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_store_u64 = Module["_emscripten_atomic_store_u64"] = function() {
            return (_emscripten_atomic_store_u64 = Module["_emscripten_atomic_store_u64"] = Module["asm"]["emscripten_atomic_store_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_store_f64 = Module["_emscripten_atomic_store_f64"] = function() {
            return (_emscripten_atomic_store_f64 = Module["_emscripten_atomic_store_f64"] = Module["asm"]["emscripten_atomic_store_f64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_fence = Module["_emscripten_atomic_fence"] = function() {
            return (_emscripten_atomic_fence = Module["_emscripten_atomic_fence"] = Module["asm"]["emscripten_atomic_fence"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_or_u8 = Module["_emscripten_atomic_or_u8"] = function() {
            return (_emscripten_atomic_or_u8 = Module["_emscripten_atomic_or_u8"] = Module["asm"]["emscripten_atomic_or_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_add_u8 = Module["_emscripten_atomic_add_u8"] = function() {
            return (_emscripten_atomic_add_u8 = Module["_emscripten_atomic_add_u8"] = Module["asm"]["emscripten_atomic_add_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_add_u16 = Module["_emscripten_atomic_add_u16"] = function() {
            return (_emscripten_atomic_add_u16 = Module["_emscripten_atomic_add_u16"] = Module["asm"]["emscripten_atomic_add_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_add_u32 = Module["_emscripten_atomic_add_u32"] = function() {
            return (_emscripten_atomic_add_u32 = Module["_emscripten_atomic_add_u32"] = Module["asm"]["emscripten_atomic_add_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_add_u64 = Module["_emscripten_atomic_add_u64"] = function() {
            return (_emscripten_atomic_add_u64 = Module["_emscripten_atomic_add_u64"] = Module["asm"]["emscripten_atomic_add_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_sub_u8 = Module["_emscripten_atomic_sub_u8"] = function() {
            return (_emscripten_atomic_sub_u8 = Module["_emscripten_atomic_sub_u8"] = Module["asm"]["emscripten_atomic_sub_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_sub_u16 = Module["_emscripten_atomic_sub_u16"] = function() {
            return (_emscripten_atomic_sub_u16 = Module["_emscripten_atomic_sub_u16"] = Module["asm"]["emscripten_atomic_sub_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_sub_u32 = Module["_emscripten_atomic_sub_u32"] = function() {
            return (_emscripten_atomic_sub_u32 = Module["_emscripten_atomic_sub_u32"] = Module["asm"]["emscripten_atomic_sub_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_sub_u64 = Module["_emscripten_atomic_sub_u64"] = function() {
            return (_emscripten_atomic_sub_u64 = Module["_emscripten_atomic_sub_u64"] = Module["asm"]["emscripten_atomic_sub_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_and_u8 = Module["_emscripten_atomic_and_u8"] = function() {
            return (_emscripten_atomic_and_u8 = Module["_emscripten_atomic_and_u8"] = Module["asm"]["emscripten_atomic_and_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_and_u16 = Module["_emscripten_atomic_and_u16"] = function() {
            return (_emscripten_atomic_and_u16 = Module["_emscripten_atomic_and_u16"] = Module["asm"]["emscripten_atomic_and_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_and_u32 = Module["_emscripten_atomic_and_u32"] = function() {
            return (_emscripten_atomic_and_u32 = Module["_emscripten_atomic_and_u32"] = Module["asm"]["emscripten_atomic_and_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_and_u64 = Module["_emscripten_atomic_and_u64"] = function() {
            return (_emscripten_atomic_and_u64 = Module["_emscripten_atomic_and_u64"] = Module["asm"]["emscripten_atomic_and_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_or_u16 = Module["_emscripten_atomic_or_u16"] = function() {
            return (_emscripten_atomic_or_u16 = Module["_emscripten_atomic_or_u16"] = Module["asm"]["emscripten_atomic_or_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_or_u32 = Module["_emscripten_atomic_or_u32"] = function() {
            return (_emscripten_atomic_or_u32 = Module["_emscripten_atomic_or_u32"] = Module["asm"]["emscripten_atomic_or_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_or_u64 = Module["_emscripten_atomic_or_u64"] = function() {
            return (_emscripten_atomic_or_u64 = Module["_emscripten_atomic_or_u64"] = Module["asm"]["emscripten_atomic_or_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_xor_u8 = Module["_emscripten_atomic_xor_u8"] = function() {
            return (_emscripten_atomic_xor_u8 = Module["_emscripten_atomic_xor_u8"] = Module["asm"]["emscripten_atomic_xor_u8"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_xor_u16 = Module["_emscripten_atomic_xor_u16"] = function() {
            return (_emscripten_atomic_xor_u16 = Module["_emscripten_atomic_xor_u16"] = Module["asm"]["emscripten_atomic_xor_u16"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_xor_u32 = Module["_emscripten_atomic_xor_u32"] = function() {
            return (_emscripten_atomic_xor_u32 = Module["_emscripten_atomic_xor_u32"] = Module["asm"]["emscripten_atomic_xor_u32"]).apply(null, arguments)
        }
        ;
        var _emscripten_atomic_xor_u64 = Module["_emscripten_atomic_xor_u64"] = function() {
            return (_emscripten_atomic_xor_u64 = Module["_emscripten_atomic_xor_u64"] = Module["asm"]["emscripten_atomic_xor_u64"]).apply(null, arguments)
        }
        ;
        var _emscripten_console_logf = Module["_emscripten_console_logf"] = function() {
            return (_emscripten_console_logf = Module["_emscripten_console_logf"] = Module["asm"]["emscripten_console_logf"]).apply(null, arguments)
        }
        ;
        var _emscripten_console_warnf = Module["_emscripten_console_warnf"] = function() {
            return (_emscripten_console_warnf = Module["_emscripten_console_warnf"] = Module["asm"]["emscripten_console_warnf"]).apply(null, arguments)
        }
        ;
        var __emscripten_outf = Module["__emscripten_outf"] = function() {
            return (__emscripten_outf = Module["__emscripten_outf"] = Module["asm"]["_emscripten_outf"]).apply(null, arguments)
        }
        ;
        var __emscripten_errf = Module["__emscripten_errf"] = function() {
            return (__emscripten_errf = Module["__emscripten_errf"] = Module["asm"]["_emscripten_errf"]).apply(null, arguments)
        }
        ;
        var _emscripten_get_heap_size = Module["_emscripten_get_heap_size"] = function() {
            return (_emscripten_get_heap_size = Module["_emscripten_get_heap_size"] = Module["asm"]["emscripten_get_heap_size"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_memcpy = Module["_emscripten_builtin_memcpy"] = function() {
            return (_emscripten_builtin_memcpy = Module["_emscripten_builtin_memcpy"] = Module["asm"]["emscripten_builtin_memcpy"]).apply(null, arguments)
        }
        ;
        var ___syscall_munmap = Module["___syscall_munmap"] = function() {
            return (___syscall_munmap = Module["___syscall_munmap"] = Module["asm"]["__syscall_munmap"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_free = Module["_emscripten_builtin_free"] = function() {
            return (_emscripten_builtin_free = Module["_emscripten_builtin_free"] = Module["asm"]["emscripten_builtin_free"]).apply(null, arguments)
        }
        ;
        var ___syscall_msync = Module["___syscall_msync"] = function() {
            return (___syscall_msync = Module["___syscall_msync"] = Module["asm"]["__syscall_msync"]).apply(null, arguments)
        }
        ;
        var ___syscall_mmap2 = Module["___syscall_mmap2"] = function() {
            return (___syscall_mmap2 = Module["___syscall_mmap2"] = Module["asm"]["__syscall_mmap2"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_memalign = Module["_emscripten_builtin_memalign"] = function() {
            return (_emscripten_builtin_memalign = Module["_emscripten_builtin_memalign"] = Module["asm"]["emscripten_builtin_memalign"]).apply(null, arguments)
        }
        ;
        var _emscripten_scan_stack = Module["_emscripten_scan_stack"] = function() {
            return (_emscripten_scan_stack = Module["_emscripten_scan_stack"] = Module["asm"]["emscripten_scan_stack"]).apply(null, arguments)
        }
        ;
        var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
            return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments)
        }
        ;
        var _emscripten_stack_get_current = Module["_emscripten_stack_get_current"] = function() {
            return (_emscripten_stack_get_current = Module["_emscripten_stack_get_current"] = Module["asm"]["emscripten_stack_get_current"]).apply(null, arguments)
        }
        ;
        var _tzset = Module["_tzset"] = function() {
            return (_tzset = Module["_tzset"] = Module["asm"]["tzset"]).apply(null, arguments)
        }
        ;
        var _timegm = Module["_timegm"] = function() {
            return (_timegm = Module["_timegm"] = Module["asm"]["timegm"]).apply(null, arguments)
        }
        ;
        var ___clock = Module["___clock"] = function() {
            return (___clock = Module["___clock"] = Module["asm"]["__clock"]).apply(null, arguments)
        }
        ;
        var ___time = Module["___time"] = function() {
            return (___time = Module["___time"] = Module["asm"]["__time"]).apply(null, arguments)
        }
        ;
        var ___clock_getres = Module["___clock_getres"] = function() {
            return (___clock_getres = Module["___clock_getres"] = Module["asm"]["__clock_getres"]).apply(null, arguments)
        }
        ;
        var ___gettimeofday = Module["___gettimeofday"] = function() {
            return (___gettimeofday = Module["___gettimeofday"] = Module["asm"]["__gettimeofday"]).apply(null, arguments)
        }
        ;
        var _dysize = Module["_dysize"] = function() {
            return (_dysize = Module["_dysize"] = Module["asm"]["dysize"]).apply(null, arguments)
        }
        ;
        var _setkey = Module["_setkey"] = function() {
            return (_setkey = Module["_setkey"] = Module["asm"]["setkey"]).apply(null, arguments)
        }
        ;
        var _encrypt = Module["_encrypt"] = function() {
            return (_encrypt = Module["_encrypt"] = Module["asm"]["encrypt"]).apply(null, arguments)
        }
        ;
        var _sethostent = Module["_sethostent"] = function() {
            return (_sethostent = Module["_sethostent"] = Module["asm"]["sethostent"]).apply(null, arguments)
        }
        ;
        var _gethostent = Module["_gethostent"] = function() {
            return (_gethostent = Module["_gethostent"] = Module["asm"]["gethostent"]).apply(null, arguments)
        }
        ;
        var _getnetent = Module["_getnetent"] = function() {
            return (_getnetent = Module["_getnetent"] = Module["asm"]["getnetent"]).apply(null, arguments)
        }
        ;
        var _endhostent = Module["_endhostent"] = function() {
            return (_endhostent = Module["_endhostent"] = Module["asm"]["endhostent"]).apply(null, arguments)
        }
        ;
        var _setnetent = Module["_setnetent"] = function() {
            return (_setnetent = Module["_setnetent"] = Module["asm"]["setnetent"]).apply(null, arguments)
        }
        ;
        var _endnetent = Module["_endnetent"] = function() {
            return (_endnetent = Module["_endnetent"] = Module["asm"]["endnetent"]).apply(null, arguments)
        }
        ;
        var _erff = Module["_erff"] = function() {
            return (_erff = Module["_erff"] = Module["asm"]["erff"]).apply(null, arguments)
        }
        ;
        var _erfcf = Module["_erfcf"] = function() {
            return (_erfcf = Module["_erfcf"] = Module["asm"]["erfcf"]).apply(null, arguments)
        }
        ;
        var _erfl = Module["_erfl"] = function() {
            return (_erfl = Module["_erfl"] = Module["asm"]["erfl"]).apply(null, arguments)
        }
        ;
        var _erfcl = Module["_erfcl"] = function() {
            return (_erfcl = Module["_erfcl"] = Module["asm"]["erfcl"]).apply(null, arguments)
        }
        ;
        var _vwarn = Module["_vwarn"] = function() {
            return (_vwarn = Module["_vwarn"] = Module["asm"]["vwarn"]).apply(null, arguments)
        }
        ;
        var _fprintf = Module["_fprintf"] = function() {
            return (_fprintf = Module["_fprintf"] = Module["asm"]["fprintf"]).apply(null, arguments)
        }
        ;
        var _vwarnx = Module["_vwarnx"] = function() {
            return (_vwarnx = Module["_vwarnx"] = Module["asm"]["vwarnx"]).apply(null, arguments)
        }
        ;
        var _putc = Module["_putc"] = function() {
            return (_putc = Module["_putc"] = Module["asm"]["putc"]).apply(null, arguments)
        }
        ;
        var _verr = Module["_verr"] = function() {
            return (_verr = Module["_verr"] = Module["asm"]["verr"]).apply(null, arguments)
        }
        ;
        var _verrx = Module["_verrx"] = function() {
            return (_verrx = Module["_verrx"] = Module["asm"]["verrx"]).apply(null, arguments)
        }
        ;
        var _warn = Module["_warn"] = function() {
            return (_warn = Module["_warn"] = Module["asm"]["warn"]).apply(null, arguments)
        }
        ;
        var _warnx = Module["_warnx"] = function() {
            return (_warnx = Module["_warnx"] = Module["asm"]["warnx"]).apply(null, arguments)
        }
        ;
        var _err = Module["_err"] = function() {
            return (_err = Module["_err"] = Module["asm"]["err"]).apply(null, arguments)
        }
        ;
        var _errx = Module["_errx"] = function() {
            return (_errx = Module["_errx"] = Module["asm"]["errx"]).apply(null, arguments)
        }
        ;
        var _ether_aton_r = Module["_ether_aton_r"] = function() {
            return (_ether_aton_r = Module["_ether_aton_r"] = Module["asm"]["ether_aton_r"]).apply(null, arguments)
        }
        ;
        var _ether_aton = Module["_ether_aton"] = function() {
            return (_ether_aton = Module["_ether_aton"] = Module["asm"]["ether_aton"]).apply(null, arguments)
        }
        ;
        var _ether_ntoa_r = Module["_ether_ntoa_r"] = function() {
            return (_ether_ntoa_r = Module["_ether_ntoa_r"] = Module["asm"]["ether_ntoa_r"]).apply(null, arguments)
        }
        ;
        var _ether_ntoa = Module["_ether_ntoa"] = function() {
            return (_ether_ntoa = Module["_ether_ntoa"] = Module["asm"]["ether_ntoa"]).apply(null, arguments)
        }
        ;
        var _ether_line = Module["_ether_line"] = function() {
            return (_ether_line = Module["_ether_line"] = Module["asm"]["ether_line"]).apply(null, arguments)
        }
        ;
        var _ether_ntohost = Module["_ether_ntohost"] = function() {
            return (_ether_ntohost = Module["_ether_ntohost"] = Module["asm"]["ether_ntohost"]).apply(null, arguments)
        }
        ;
        var _ether_hostton = Module["_ether_hostton"] = function() {
            return (_ether_hostton = Module["_ether_hostton"] = Module["asm"]["ether_hostton"]).apply(null, arguments)
        }
        ;
        var _execl = Module["_execl"] = function() {
            return (_execl = Module["_execl"] = Module["asm"]["execl"]).apply(null, arguments)
        }
        ;
        var _execle = Module["_execle"] = function() {
            return (_execle = Module["_execle"] = Module["asm"]["execle"]).apply(null, arguments)
        }
        ;
        var _execlp = Module["_execlp"] = function() {
            return (_execlp = Module["_execlp"] = Module["asm"]["execlp"]).apply(null, arguments)
        }
        ;
        var _execvp = Module["_execvp"] = function() {
            return (_execvp = Module["_execvp"] = Module["asm"]["execvp"]).apply(null, arguments)
        }
        ;
        var _execvpe = Module["_execvpe"] = function() {
            return (_execvpe = Module["_execvpe"] = Module["asm"]["execvpe"]).apply(null, arguments)
        }
        ;
        var _exp10 = Module["_exp10"] = function() {
            return (_exp10 = Module["_exp10"] = Module["asm"]["exp10"]).apply(null, arguments)
        }
        ;
        var _exp2 = Module["_exp2"] = function() {
            return (_exp2 = Module["_exp2"] = Module["asm"]["exp2"]).apply(null, arguments)
        }
        ;
        var _pow10 = Module["_pow10"] = function() {
            return (_pow10 = Module["_pow10"] = Module["asm"]["pow10"]).apply(null, arguments)
        }
        ;
        var _exp10f = Module["_exp10f"] = function() {
            return (_exp10f = Module["_exp10f"] = Module["asm"]["exp10f"]).apply(null, arguments)
        }
        ;
        var _modff = Module["_modff"] = function() {
            return (_modff = Module["_modff"] = Module["asm"]["modff"]).apply(null, arguments)
        }
        ;
        var _exp2f = Module["_exp2f"] = function() {
            return (_exp2f = Module["_exp2f"] = Module["asm"]["exp2f"]).apply(null, arguments)
        }
        ;
        var _pow10f = Module["_pow10f"] = function() {
            return (_pow10f = Module["_pow10f"] = Module["asm"]["pow10f"]).apply(null, arguments)
        }
        ;
        var _exp10l = Module["_exp10l"] = function() {
            return (_exp10l = Module["_exp10l"] = Module["asm"]["exp10l"]).apply(null, arguments)
        }
        ;
        var _modfl = Module["_modfl"] = function() {
            return (_modfl = Module["_modfl"] = Module["asm"]["modfl"]).apply(null, arguments)
        }
        ;
        var _exp2l = Module["_exp2l"] = function() {
            return (_exp2l = Module["_exp2l"] = Module["asm"]["exp2l"]).apply(null, arguments)
        }
        ;
        var _powl = Module["_powl"] = function() {
            return (_powl = Module["_powl"] = Module["asm"]["powl"]).apply(null, arguments)
        }
        ;
        var _pow10l = Module["_pow10l"] = function() {
            return (_pow10l = Module["_pow10l"] = Module["asm"]["pow10l"]).apply(null, arguments)
        }
        ;
        var ___letf2 = Module["___letf2"] = function() {
            return (___letf2 = Module["___letf2"] = Module["asm"]["__letf2"]).apply(null, arguments)
        }
        ;
        var _scalbnl = Module["_scalbnl"] = function() {
            return (_scalbnl = Module["_scalbnl"] = Module["asm"]["scalbnl"]).apply(null, arguments)
        }
        ;
        var _expl = Module["_expl"] = function() {
            return (_expl = Module["_expl"] = Module["asm"]["expl"]).apply(null, arguments)
        }
        ;
        var _expm1l = Module["_expm1l"] = function() {
            return (_expm1l = Module["_expm1l"] = Module["asm"]["expm1l"]).apply(null, arguments)
        }
        ;
        var __flushlbf = Module["__flushlbf"] = function() {
            return (__flushlbf = Module["__flushlbf"] = Module["asm"]["_flushlbf"]).apply(null, arguments)
        }
        ;
        var ___fsetlocking = Module["___fsetlocking"] = function() {
            return (___fsetlocking = Module["___fsetlocking"] = Module["asm"]["__fsetlocking"]).apply(null, arguments)
        }
        ;
        var ___fwriting = Module["___fwriting"] = function() {
            return (___fwriting = Module["___fwriting"] = Module["asm"]["__fwriting"]).apply(null, arguments)
        }
        ;
        var ___freading = Module["___freading"] = function() {
            return (___freading = Module["___freading"] = Module["asm"]["__freading"]).apply(null, arguments)
        }
        ;
        var ___freadable = Module["___freadable"] = function() {
            return (___freadable = Module["___freadable"] = Module["asm"]["__freadable"]).apply(null, arguments)
        }
        ;
        var ___fwritable = Module["___fwritable"] = function() {
            return (___fwritable = Module["___fwritable"] = Module["asm"]["__fwritable"]).apply(null, arguments)
        }
        ;
        var ___flbf = Module["___flbf"] = function() {
            return (___flbf = Module["___flbf"] = Module["asm"]["__flbf"]).apply(null, arguments)
        }
        ;
        var ___fbufsize = Module["___fbufsize"] = function() {
            return (___fbufsize = Module["___fbufsize"] = Module["asm"]["__fbufsize"]).apply(null, arguments)
        }
        ;
        var ___fpending = Module["___fpending"] = function() {
            return (___fpending = Module["___fpending"] = Module["asm"]["__fpending"]).apply(null, arguments)
        }
        ;
        var ___fpurge = Module["___fpurge"] = function() {
            return (___fpurge = Module["___fpurge"] = Module["asm"]["__fpurge"]).apply(null, arguments)
        }
        ;
        var _fpurge = Module["_fpurge"] = function() {
            return (_fpurge = Module["_fpurge"] = Module["asm"]["fpurge"]).apply(null, arguments)
        }
        ;
        var ___freadahead = Module["___freadahead"] = function() {
            return (___freadahead = Module["___freadahead"] = Module["asm"]["__freadahead"]).apply(null, arguments)
        }
        ;
        var ___freadptr = Module["___freadptr"] = function() {
            return (___freadptr = Module["___freadptr"] = Module["asm"]["__freadptr"]).apply(null, arguments)
        }
        ;
        var ___freadptrinc = Module["___freadptrinc"] = function() {
            return (___freadptrinc = Module["___freadptrinc"] = Module["asm"]["__freadptrinc"]).apply(null, arguments)
        }
        ;
        var ___fseterr = Module["___fseterr"] = function() {
            return (___fseterr = Module["___fseterr"] = Module["asm"]["__fseterr"]).apply(null, arguments)
        }
        ;
        var _fchmodat = Module["_fchmodat"] = function() {
            return (_fchmodat = Module["_fchmodat"] = Module["asm"]["fchmodat"]).apply(null, arguments)
        }
        ;
        var _fchownat = Module["_fchownat"] = function() {
            return (_fchownat = Module["_fchownat"] = Module["asm"]["fchownat"]).apply(null, arguments)
        }
        ;
        var _fcvt = Module["_fcvt"] = function() {
            return (_fcvt = Module["_fcvt"] = Module["asm"]["fcvt"]).apply(null, arguments)
        }
        ;
        var _strspn = Module["_strspn"] = function() {
            return (_strspn = Module["_strspn"] = Module["asm"]["strspn"]).apply(null, arguments)
        }
        ;
        var _fdim = Module["_fdim"] = function() {
            return (_fdim = Module["_fdim"] = Module["asm"]["fdim"]).apply(null, arguments)
        }
        ;
        var _fdimf = Module["_fdimf"] = function() {
            return (_fdimf = Module["_fdimf"] = Module["asm"]["fdimf"]).apply(null, arguments)
        }
        ;
        var _fdiml = Module["_fdiml"] = function() {
            return (_fdiml = Module["_fdiml"] = Module["asm"]["fdiml"]).apply(null, arguments)
        }
        ;
        var _fegetexceptflag = Module["_fegetexceptflag"] = function() {
            return (_fegetexceptflag = Module["_fegetexceptflag"] = Module["asm"]["fegetexceptflag"]).apply(null, arguments)
        }
        ;
        var _fetestexcept = Module["_fetestexcept"] = function() {
            return (_fetestexcept = Module["_fetestexcept"] = Module["asm"]["fetestexcept"]).apply(null, arguments)
        }
        ;
        var _feholdexcept = Module["_feholdexcept"] = function() {
            return (_feholdexcept = Module["_feholdexcept"] = Module["asm"]["feholdexcept"]).apply(null, arguments)
        }
        ;
        var _fegetenv = Module["_fegetenv"] = function() {
            return (_fegetenv = Module["_fegetenv"] = Module["asm"]["fegetenv"]).apply(null, arguments)
        }
        ;
        var _feclearexcept = Module["_feclearexcept"] = function() {
            return (_feclearexcept = Module["_feclearexcept"] = Module["asm"]["feclearexcept"]).apply(null, arguments)
        }
        ;
        var _feraiseexcept = Module["_feraiseexcept"] = function() {
            return (_feraiseexcept = Module["_feraiseexcept"] = Module["asm"]["feraiseexcept"]).apply(null, arguments)
        }
        ;
        var ___fesetround = Module["___fesetround"] = function() {
            return (___fesetround = Module["___fesetround"] = Module["asm"]["__fesetround"]).apply(null, arguments)
        }
        ;
        var _fesetenv = Module["_fesetenv"] = function() {
            return (_fesetenv = Module["_fesetenv"] = Module["asm"]["fesetenv"]).apply(null, arguments)
        }
        ;
        var _feof_unlocked = Module["_feof_unlocked"] = function() {
            return (_feof_unlocked = Module["_feof_unlocked"] = Module["asm"]["feof_unlocked"]).apply(null, arguments)
        }
        ;
        var __IO_feof_unlocked = Module["__IO_feof_unlocked"] = function() {
            return (__IO_feof_unlocked = Module["__IO_feof_unlocked"] = Module["asm"]["_IO_feof_unlocked"]).apply(null, arguments)
        }
        ;
        var _ferror_unlocked = Module["_ferror_unlocked"] = function() {
            return (_ferror_unlocked = Module["_ferror_unlocked"] = Module["asm"]["ferror_unlocked"]).apply(null, arguments)
        }
        ;
        var __IO_ferror_unlocked = Module["__IO_ferror_unlocked"] = function() {
            return (__IO_ferror_unlocked = Module["__IO_ferror_unlocked"] = Module["asm"]["_IO_ferror_unlocked"]).apply(null, arguments)
        }
        ;
        var _fesetexceptflag = Module["_fesetexceptflag"] = function() {
            return (_fesetexceptflag = Module["_fesetexceptflag"] = Module["asm"]["fesetexceptflag"]).apply(null, arguments)
        }
        ;
        var _fesetround = Module["_fesetround"] = function() {
            return (_fesetround = Module["_fesetround"] = Module["asm"]["fesetround"]).apply(null, arguments)
        }
        ;
        var _feupdateenv = Module["_feupdateenv"] = function() {
            return (_feupdateenv = Module["_feupdateenv"] = Module["asm"]["feupdateenv"]).apply(null, arguments)
        }
        ;
        var _fflush_unlocked = Module["_fflush_unlocked"] = function() {
            return (_fflush_unlocked = Module["_fflush_unlocked"] = Module["asm"]["fflush_unlocked"]).apply(null, arguments)
        }
        ;
        var _ffs = Module["_ffs"] = function() {
            return (_ffs = Module["_ffs"] = Module["asm"]["ffs"]).apply(null, arguments)
        }
        ;
        var _ffsl = Module["_ffsl"] = function() {
            return (_ffsl = Module["_ffsl"] = Module["asm"]["ffsl"]).apply(null, arguments)
        }
        ;
        var _ffsll = Module["_ffsll"] = function() {
            return (_ffsll = Module["_ffsll"] = Module["asm"]["ffsll"]).apply(null, arguments)
        }
        ;
        var _emscripten_futex_wake = Module["_emscripten_futex_wake"] = function() {
            return (_emscripten_futex_wake = Module["_emscripten_futex_wake"] = Module["asm"]["emscripten_futex_wake"]).apply(null, arguments)
        }
        ;
        var _fgetln = Module["_fgetln"] = function() {
            return (_fgetln = Module["_fgetln"] = Module["asm"]["fgetln"]).apply(null, arguments)
        }
        ;
        var _getline = Module["_getline"] = function() {
            return (_getline = Module["_getline"] = Module["asm"]["getline"]).apply(null, arguments)
        }
        ;
        var _fgetpos = Module["_fgetpos"] = function() {
            return (_fgetpos = Module["_fgetpos"] = Module["asm"]["fgetpos"]).apply(null, arguments)
        }
        ;
        var _fgetpos64 = Module["_fgetpos64"] = function() {
            return (_fgetpos64 = Module["_fgetpos64"] = Module["asm"]["fgetpos64"]).apply(null, arguments)
        }
        ;
        var _fgets_unlocked = Module["_fgets_unlocked"] = function() {
            return (_fgets_unlocked = Module["_fgets_unlocked"] = Module["asm"]["fgets_unlocked"]).apply(null, arguments)
        }
        ;
        var ___fgetwc_unlocked = Module["___fgetwc_unlocked"] = function() {
            return (___fgetwc_unlocked = Module["___fgetwc_unlocked"] = Module["asm"]["__fgetwc_unlocked"]).apply(null, arguments)
        }
        ;
        var _fwide = Module["_fwide"] = function() {
            return (_fwide = Module["_fwide"] = Module["asm"]["fwide"]).apply(null, arguments)
        }
        ;
        var _mbtowc = Module["_mbtowc"] = function() {
            return (_mbtowc = Module["_mbtowc"] = Module["asm"]["mbtowc"]).apply(null, arguments)
        }
        ;
        var _fgetwc = Module["_fgetwc"] = function() {
            return (_fgetwc = Module["_fgetwc"] = Module["asm"]["fgetwc"]).apply(null, arguments)
        }
        ;
        var _fgetwc_unlocked = Module["_fgetwc_unlocked"] = function() {
            return (_fgetwc_unlocked = Module["_fgetwc_unlocked"] = Module["asm"]["fgetwc_unlocked"]).apply(null, arguments)
        }
        ;
        var _getwc_unlocked = Module["_getwc_unlocked"] = function() {
            return (_getwc_unlocked = Module["_getwc_unlocked"] = Module["asm"]["getwc_unlocked"]).apply(null, arguments)
        }
        ;
        var _fgetws = Module["_fgetws"] = function() {
            return (_fgetws = Module["_fgetws"] = Module["asm"]["fgetws"]).apply(null, arguments)
        }
        ;
        var _fgetws_unlocked = Module["_fgetws_unlocked"] = function() {
            return (_fgetws_unlocked = Module["_fgetws_unlocked"] = Module["asm"]["fgetws_unlocked"]).apply(null, arguments)
        }
        ;
        var _fileno_unlocked = Module["_fileno_unlocked"] = function() {
            return (_fileno_unlocked = Module["_fileno_unlocked"] = Module["asm"]["fileno_unlocked"]).apply(null, arguments)
        }
        ;
        var _finite = Module["_finite"] = function() {
            return (_finite = Module["_finite"] = Module["asm"]["finite"]).apply(null, arguments)
        }
        ;
        var _finitef = Module["_finitef"] = function() {
            return (_finitef = Module["_finitef"] = Module["asm"]["finitef"]).apply(null, arguments)
        }
        ;
        var ___floatunsitf = Module["___floatunsitf"] = function() {
            return (___floatunsitf = Module["___floatunsitf"] = Module["asm"]["__floatunsitf"]).apply(null, arguments)
        }
        ;
        var _fmodl = Module["_fmodl"] = function() {
            return (_fmodl = Module["_fmodl"] = Module["asm"]["fmodl"]).apply(null, arguments)
        }
        ;
        var _ftrylockfile = Module["_ftrylockfile"] = function() {
            return (_ftrylockfile = Module["_ftrylockfile"] = Module["asm"]["ftrylockfile"]).apply(null, arguments)
        }
        ;
        var _floorf = Module["_floorf"] = function() {
            return (_floorf = Module["_floorf"] = Module["asm"]["floorf"]).apply(null, arguments)
        }
        ;
        var _floorl = Module["_floorl"] = function() {
            return (_floorl = Module["_floorl"] = Module["asm"]["floorl"]).apply(null, arguments)
        }
        ;
        var _fma = Module["_fma"] = function() {
            return (_fma = Module["_fma"] = Module["asm"]["fma"]).apply(null, arguments)
        }
        ;
        var _fmaf = Module["_fmaf"] = function() {
            return (_fmaf = Module["_fmaf"] = Module["asm"]["fmaf"]).apply(null, arguments)
        }
        ;
        var _fmal = Module["_fmal"] = function() {
            return (_fmal = Module["_fmal"] = Module["asm"]["fmal"]).apply(null, arguments)
        }
        ;
        var _frexpl = Module["_frexpl"] = function() {
            return (_frexpl = Module["_frexpl"] = Module["asm"]["frexpl"]).apply(null, arguments)
        }
        ;
        var _nextafterl = Module["_nextafterl"] = function() {
            return (_nextafterl = Module["_nextafterl"] = Module["asm"]["nextafterl"]).apply(null, arguments)
        }
        ;
        var _ilogbl = Module["_ilogbl"] = function() {
            return (_ilogbl = Module["_ilogbl"] = Module["asm"]["ilogbl"]).apply(null, arguments)
        }
        ;
        var _fmax = Module["_fmax"] = function() {
            return (_fmax = Module["_fmax"] = Module["asm"]["fmax"]).apply(null, arguments)
        }
        ;
        var _fmaxf = Module["_fmaxf"] = function() {
            return (_fmaxf = Module["_fmaxf"] = Module["asm"]["fmaxf"]).apply(null, arguments)
        }
        ;
        var _fmaxl = Module["_fmaxl"] = function() {
            return (_fmaxl = Module["_fmaxl"] = Module["asm"]["fmaxl"]).apply(null, arguments)
        }
        ;
        var _fmemopen = Module["_fmemopen"] = function() {
            return (_fmemopen = Module["_fmemopen"] = Module["asm"]["fmemopen"]).apply(null, arguments)
        }
        ;
        var _fmin = Module["_fmin"] = function() {
            return (_fmin = Module["_fmin"] = Module["asm"]["fmin"]).apply(null, arguments)
        }
        ;
        var _fminf = Module["_fminf"] = function() {
            return (_fminf = Module["_fminf"] = Module["asm"]["fminf"]).apply(null, arguments)
        }
        ;
        var _fminl = Module["_fminl"] = function() {
            return (_fminl = Module["_fminl"] = Module["asm"]["fminl"]).apply(null, arguments)
        }
        ;
        var _fmodf = Module["_fmodf"] = function() {
            return (_fmodf = Module["_fmodf"] = Module["asm"]["fmodf"]).apply(null, arguments)
        }
        ;
        var _fmtmsg = Module["_fmtmsg"] = function() {
            return (_fmtmsg = Module["_fmtmsg"] = Module["asm"]["fmtmsg"]).apply(null, arguments)
        }
        ;
        var _fnmatch = Module["_fnmatch"] = function() {
            return (_fnmatch = Module["_fnmatch"] = Module["asm"]["fnmatch"]).apply(null, arguments)
        }
        ;
        var _towupper = Module["_towupper"] = function() {
            return (_towupper = Module["_towupper"] = Module["asm"]["towupper"]).apply(null, arguments)
        }
        ;
        var _towlower = Module["_towlower"] = function() {
            return (_towlower = Module["_towlower"] = Module["asm"]["towlower"]).apply(null, arguments)
        }
        ;
        var _wctype = Module["_wctype"] = function() {
            return (_wctype = Module["_wctype"] = Module["asm"]["wctype"]).apply(null, arguments)
        }
        ;
        var _iswctype = Module["_iswctype"] = function() {
            return (_iswctype = Module["_iswctype"] = Module["asm"]["iswctype"]).apply(null, arguments)
        }
        ;
        var _fopen64 = Module["_fopen64"] = function() {
            return (_fopen64 = Module["_fopen64"] = Module["asm"]["fopen64"]).apply(null, arguments)
        }
        ;
        var _fopencookie = Module["_fopencookie"] = function() {
            return (_fopencookie = Module["_fopencookie"] = Module["asm"]["fopencookie"]).apply(null, arguments)
        }
        ;
        var _pipe2 = Module["_pipe2"] = function() {
            return (_pipe2 = Module["_pipe2"] = Module["asm"]["pipe2"]).apply(null, arguments)
        }
        ;
        var _login_tty = Module["_login_tty"] = function() {
            return (_login_tty = Module["_login_tty"] = Module["asm"]["login_tty"]).apply(null, arguments)
        }
        ;
        var _vfiprintf = Module["_vfiprintf"] = function() {
            return (_vfiprintf = Module["_vfiprintf"] = Module["asm"]["vfiprintf"]).apply(null, arguments)
        }
        ;
        var ___small_vfprintf = Module["___small_vfprintf"] = function() {
            return (___small_vfprintf = Module["___small_vfprintf"] = Module["asm"]["__small_vfprintf"]).apply(null, arguments)
        }
        ;
        var _fputs_unlocked = Module["_fputs_unlocked"] = function() {
            return (_fputs_unlocked = Module["_fputs_unlocked"] = Module["asm"]["fputs_unlocked"]).apply(null, arguments)
        }
        ;
        var ___fputwc_unlocked = Module["___fputwc_unlocked"] = function() {
            return (___fputwc_unlocked = Module["___fputwc_unlocked"] = Module["asm"]["__fputwc_unlocked"]).apply(null, arguments)
        }
        ;
        var _wctomb = Module["_wctomb"] = function() {
            return (_wctomb = Module["_wctomb"] = Module["asm"]["wctomb"]).apply(null, arguments)
        }
        ;
        var _fputwc = Module["_fputwc"] = function() {
            return (_fputwc = Module["_fputwc"] = Module["asm"]["fputwc"]).apply(null, arguments)
        }
        ;
        var _fputwc_unlocked = Module["_fputwc_unlocked"] = function() {
            return (_fputwc_unlocked = Module["_fputwc_unlocked"] = Module["asm"]["fputwc_unlocked"]).apply(null, arguments)
        }
        ;
        var _putwc_unlocked = Module["_putwc_unlocked"] = function() {
            return (_putwc_unlocked = Module["_putwc_unlocked"] = Module["asm"]["putwc_unlocked"]).apply(null, arguments)
        }
        ;
        var _fputws = Module["_fputws"] = function() {
            return (_fputws = Module["_fputws"] = Module["asm"]["fputws"]).apply(null, arguments)
        }
        ;
        var _wcsrtombs = Module["_wcsrtombs"] = function() {
            return (_wcsrtombs = Module["_wcsrtombs"] = Module["asm"]["wcsrtombs"]).apply(null, arguments)
        }
        ;
        var _fputws_unlocked = Module["_fputws_unlocked"] = function() {
            return (_fputws_unlocked = Module["_fputws_unlocked"] = Module["asm"]["fputws_unlocked"]).apply(null, arguments)
        }
        ;
        var _fread_unlocked = Module["_fread_unlocked"] = function() {
            return (_fread_unlocked = Module["_fread_unlocked"] = Module["asm"]["fread_unlocked"]).apply(null, arguments)
        }
        ;
        var _freelocale = Module["_freelocale"] = function() {
            return (_freelocale = Module["_freelocale"] = Module["asm"]["freelocale"]).apply(null, arguments)
        }
        ;
        var ___freelocale = Module["___freelocale"] = function() {
            return (___freelocale = Module["___freelocale"] = Module["asm"]["__freelocale"]).apply(null, arguments)
        }
        ;
        var _freopen = Module["_freopen"] = function() {
            return (_freopen = Module["_freopen"] = Module["asm"]["freopen"]).apply(null, arguments)
        }
        ;
        var _freopen64 = Module["_freopen64"] = function() {
            return (_freopen64 = Module["_freopen64"] = Module["asm"]["freopen64"]).apply(null, arguments)
        }
        ;
        var _frexpf = Module["_frexpf"] = function() {
            return (_frexpf = Module["_frexpf"] = Module["asm"]["frexpf"]).apply(null, arguments)
        }
        ;
        var _fscanf = Module["_fscanf"] = function() {
            return (_fscanf = Module["_fscanf"] = Module["asm"]["fscanf"]).apply(null, arguments)
        }
        ;
        var _vfscanf = Module["_vfscanf"] = function() {
            return (_vfscanf = Module["_vfscanf"] = Module["asm"]["vfscanf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_fscanf = Module["___isoc99_fscanf"] = function() {
            return (___isoc99_fscanf = Module["___isoc99_fscanf"] = Module["asm"]["__isoc99_fscanf"]).apply(null, arguments)
        }
        ;
        var _fseek = Module["_fseek"] = function() {
            return (_fseek = Module["_fseek"] = Module["asm"]["fseek"]).apply(null, arguments)
        }
        ;
        var _fseeko = Module["_fseeko"] = function() {
            return (_fseeko = Module["_fseeko"] = Module["asm"]["fseeko"]).apply(null, arguments)
        }
        ;
        var _fseeko64 = Module["_fseeko64"] = function() {
            return (_fseeko64 = Module["_fseeko64"] = Module["asm"]["fseeko64"]).apply(null, arguments)
        }
        ;
        var _fsetpos = Module["_fsetpos"] = function() {
            return (_fsetpos = Module["_fsetpos"] = Module["asm"]["fsetpos"]).apply(null, arguments)
        }
        ;
        var _fsetpos64 = Module["_fsetpos64"] = function() {
            return (_fsetpos64 = Module["_fsetpos64"] = Module["asm"]["fsetpos64"]).apply(null, arguments)
        }
        ;
        var _fstat64 = Module["_fstat64"] = function() {
            return (_fstat64 = Module["_fstat64"] = Module["asm"]["fstat64"]).apply(null, arguments)
        }
        ;
        var _fstatat64 = Module["_fstatat64"] = function() {
            return (_fstatat64 = Module["_fstatat64"] = Module["asm"]["fstatat64"]).apply(null, arguments)
        }
        ;
        var _ftello = Module["_ftello"] = function() {
            return (_ftello = Module["_ftello"] = Module["asm"]["ftello"]).apply(null, arguments)
        }
        ;
        var _ftello64 = Module["_ftello64"] = function() {
            return (_ftello64 = Module["_ftello64"] = Module["asm"]["ftello64"]).apply(null, arguments)
        }
        ;
        var _ftime = Module["_ftime"] = function() {
            return (_ftime = Module["_ftime"] = Module["asm"]["ftime"]).apply(null, arguments)
        }
        ;
        var _ftruncate64 = Module["_ftruncate64"] = function() {
            return (_ftruncate64 = Module["_ftruncate64"] = Module["asm"]["ftruncate64"]).apply(null, arguments)
        }
        ;
        var _utimensat = Module["_utimensat"] = function() {
            return (_utimensat = Module["_utimensat"] = Module["asm"]["utimensat"]).apply(null, arguments)
        }
        ;
        var _fwprintf = Module["_fwprintf"] = function() {
            return (_fwprintf = Module["_fwprintf"] = Module["asm"]["fwprintf"]).apply(null, arguments)
        }
        ;
        var _vfwprintf = Module["_vfwprintf"] = function() {
            return (_vfwprintf = Module["_vfwprintf"] = Module["asm"]["vfwprintf"]).apply(null, arguments)
        }
        ;
        var _fwrite_unlocked = Module["_fwrite_unlocked"] = function() {
            return (_fwrite_unlocked = Module["_fwrite_unlocked"] = Module["asm"]["fwrite_unlocked"]).apply(null, arguments)
        }
        ;
        var _fwscanf = Module["_fwscanf"] = function() {
            return (_fwscanf = Module["_fwscanf"] = Module["asm"]["fwscanf"]).apply(null, arguments)
        }
        ;
        var _vfwscanf = Module["_vfwscanf"] = function() {
            return (_vfwscanf = Module["_vfwscanf"] = Module["asm"]["vfwscanf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_fwscanf = Module["___isoc99_fwscanf"] = function() {
            return (___isoc99_fwscanf = Module["___isoc99_fwscanf"] = Module["asm"]["__isoc99_fwscanf"]).apply(null, arguments)
        }
        ;
        var _gcvt = Module["_gcvt"] = function() {
            return (_gcvt = Module["_gcvt"] = Module["asm"]["gcvt"]).apply(null, arguments)
        }
        ;
        var _get_current_dir_name = Module["_get_current_dir_name"] = function() {
            return (_get_current_dir_name = Module["_get_current_dir_name"] = Module["asm"]["get_current_dir_name"]).apply(null, arguments)
        }
        ;
        var _strdup = Module["_strdup"] = function() {
            return (_strdup = Module["_strdup"] = Module["asm"]["strdup"]).apply(null, arguments)
        }
        ;
        var __IO_getc = Module["__IO_getc"] = function() {
            return (__IO_getc = Module["__IO_getc"] = Module["asm"]["_IO_getc"]).apply(null, arguments)
        }
        ;
        var _fgetc_unlocked = Module["_fgetc_unlocked"] = function() {
            return (_fgetc_unlocked = Module["_fgetc_unlocked"] = Module["asm"]["fgetc_unlocked"]).apply(null, arguments)
        }
        ;
        var __IO_getc_unlocked = Module["__IO_getc_unlocked"] = function() {
            return (__IO_getc_unlocked = Module["__IO_getc_unlocked"] = Module["asm"]["_IO_getc_unlocked"]).apply(null, arguments)
        }
        ;
        var _getchar = Module["_getchar"] = function() {
            return (_getchar = Module["_getchar"] = Module["asm"]["getchar"]).apply(null, arguments)
        }
        ;
        var _getchar_unlocked = Module["_getchar_unlocked"] = function() {
            return (_getchar_unlocked = Module["_getchar_unlocked"] = Module["asm"]["getchar_unlocked"]).apply(null, arguments)
        }
        ;
        var _getdelim = Module["_getdelim"] = function() {
            return (_getdelim = Module["_getdelim"] = Module["asm"]["getdelim"]).apply(null, arguments)
        }
        ;
        var ___getdelim = Module["___getdelim"] = function() {
            return (___getdelim = Module["___getdelim"] = Module["asm"]["__getdelim"]).apply(null, arguments)
        }
        ;
        var _getdents = Module["_getdents"] = function() {
            return (_getdents = Module["_getdents"] = Module["asm"]["getdents"]).apply(null, arguments)
        }
        ;
        var _getdents64 = Module["_getdents64"] = function() {
            return (_getdents64 = Module["_getdents64"] = Module["asm"]["getdents64"]).apply(null, arguments)
        }
        ;
        var _getdomainname = Module["_getdomainname"] = function() {
            return (_getdomainname = Module["_getdomainname"] = Module["asm"]["getdomainname"]).apply(null, arguments)
        }
        ;
        var _gethostid = Module["_gethostid"] = function() {
            return (_gethostid = Module["_gethostid"] = Module["asm"]["gethostid"]).apply(null, arguments)
        }
        ;
        var _freeifaddrs = Module["_freeifaddrs"] = function() {
            return (_freeifaddrs = Module["_freeifaddrs"] = Module["asm"]["freeifaddrs"]).apply(null, arguments)
        }
        ;
        var _getifaddrs = Module["_getifaddrs"] = function() {
            return (_getifaddrs = Module["_getifaddrs"] = Module["asm"]["getifaddrs"]).apply(null, arguments)
        }
        ;
        var _getlogin_r = Module["_getlogin_r"] = function() {
            return (_getlogin_r = Module["_getlogin_r"] = Module["asm"]["getlogin_r"]).apply(null, arguments)
        }
        ;
        var _getopt = Module["_getopt"] = function() {
            return (_getopt = Module["_getopt"] = Module["asm"]["getopt"]).apply(null, arguments)
        }
        ;
        var ___posix_getopt = Module["___posix_getopt"] = function() {
            return (___posix_getopt = Module["___posix_getopt"] = Module["asm"]["__posix_getopt"]).apply(null, arguments)
        }
        ;
        var _getopt_long = Module["_getopt_long"] = function() {
            return (_getopt_long = Module["_getopt_long"] = Module["asm"]["getopt_long"]).apply(null, arguments)
        }
        ;
        var _getopt_long_only = Module["_getopt_long_only"] = function() {
            return (_getopt_long_only = Module["_getopt_long_only"] = Module["asm"]["getopt_long_only"]).apply(null, arguments)
        }
        ;
        var _mblen = Module["_mblen"] = function() {
            return (_mblen = Module["_mblen"] = Module["asm"]["mblen"]).apply(null, arguments)
        }
        ;
        var _getpagesize = Module["_getpagesize"] = function() {
            return (_getpagesize = Module["_getpagesize"] = Module["asm"]["getpagesize"]).apply(null, arguments)
        }
        ;
        var _getrlimit64 = Module["_getrlimit64"] = function() {
            return (_getrlimit64 = Module["_getrlimit64"] = Module["asm"]["getrlimit64"]).apply(null, arguments)
        }
        ;
        var _gets = Module["_gets"] = function() {
            return (_gets = Module["_gets"] = Module["asm"]["gets"]).apply(null, arguments)
        }
        ;
        var _getservbyname_r = Module["_getservbyname_r"] = function() {
            return (_getservbyname_r = Module["_getservbyname_r"] = Module["asm"]["getservbyname_r"]).apply(null, arguments)
        }
        ;
        var _getservbyport_r = Module["_getservbyport_r"] = function() {
            return (_getservbyport_r = Module["_getservbyport_r"] = Module["asm"]["getservbyport_r"]).apply(null, arguments)
        }
        ;
        var _getsubopt = Module["_getsubopt"] = function() {
            return (_getsubopt = Module["_getsubopt"] = Module["asm"]["getsubopt"]).apply(null, arguments)
        }
        ;
        var _gettid = Module["_gettid"] = function() {
            return (_gettid = Module["_gettid"] = Module["asm"]["gettid"]).apply(null, arguments)
        }
        ;
        var _getw = Module["_getw"] = function() {
            return (_getw = Module["_getw"] = Module["asm"]["getw"]).apply(null, arguments)
        }
        ;
        var _getwc = Module["_getwc"] = function() {
            return (_getwc = Module["_getwc"] = Module["asm"]["getwc"]).apply(null, arguments)
        }
        ;
        var _getwchar = Module["_getwchar"] = function() {
            return (_getwchar = Module["_getwchar"] = Module["asm"]["getwchar"]).apply(null, arguments)
        }
        ;
        var _getwchar_unlocked = Module["_getwchar_unlocked"] = function() {
            return (_getwchar_unlocked = Module["_getwchar_unlocked"] = Module["asm"]["getwchar_unlocked"]).apply(null, arguments)
        }
        ;
        var _glob = Module["_glob"] = function() {
            return (_glob = Module["_glob"] = Module["asm"]["glob"]).apply(null, arguments)
        }
        ;
        var _globfree = Module["_globfree"] = function() {
            return (_globfree = Module["_globfree"] = Module["asm"]["globfree"]).apply(null, arguments)
        }
        ;
        var _glob64 = Module["_glob64"] = function() {
            return (_glob64 = Module["_glob64"] = Module["asm"]["glob64"]).apply(null, arguments)
        }
        ;
        var _globfree64 = Module["_globfree64"] = function() {
            return (_globfree64 = Module["_globfree64"] = Module["asm"]["globfree64"]).apply(null, arguments)
        }
        ;
        var _gmtime = Module["_gmtime"] = function() {
            return (_gmtime = Module["_gmtime"] = Module["asm"]["gmtime"]).apply(null, arguments)
        }
        ;
        var _herror = Module["_herror"] = function() {
            return (_herror = Module["_herror"] = Module["asm"]["herror"]).apply(null, arguments)
        }
        ;
        var _hcreate = Module["_hcreate"] = function() {
            return (_hcreate = Module["_hcreate"] = Module["asm"]["hcreate"]).apply(null, arguments)
        }
        ;
        var _hdestroy = Module["_hdestroy"] = function() {
            return (_hdestroy = Module["_hdestroy"] = Module["asm"]["hdestroy"]).apply(null, arguments)
        }
        ;
        var _hsearch = Module["_hsearch"] = function() {
            return (_hsearch = Module["_hsearch"] = Module["asm"]["hsearch"]).apply(null, arguments)
        }
        ;
        var _hcreate_r = Module["_hcreate_r"] = function() {
            return (_hcreate_r = Module["_hcreate_r"] = Module["asm"]["hcreate_r"]).apply(null, arguments)
        }
        ;
        var _hdestroy_r = Module["_hdestroy_r"] = function() {
            return (_hdestroy_r = Module["_hdestroy_r"] = Module["asm"]["hdestroy_r"]).apply(null, arguments)
        }
        ;
        var _hsearch_r = Module["_hsearch_r"] = function() {
            return (_hsearch_r = Module["_hsearch_r"] = Module["asm"]["hsearch_r"]).apply(null, arguments)
        }
        ;
        var _iconv_open = Module["_iconv_open"] = function() {
            return (_iconv_open = Module["_iconv_open"] = Module["asm"]["iconv_open"]).apply(null, arguments)
        }
        ;
        var _iconv = Module["_iconv"] = function() {
            return (_iconv = Module["_iconv"] = Module["asm"]["iconv"]).apply(null, arguments)
        }
        ;
        var _iconv_close = Module["_iconv_close"] = function() {
            return (_iconv_close = Module["_iconv_close"] = Module["asm"]["iconv_close"]).apply(null, arguments)
        }
        ;
        var _if_freenameindex = Module["_if_freenameindex"] = function() {
            return (_if_freenameindex = Module["_if_freenameindex"] = Module["asm"]["if_freenameindex"]).apply(null, arguments)
        }
        ;
        var _if_indextoname = Module["_if_indextoname"] = function() {
            return (_if_indextoname = Module["_if_indextoname"] = Module["asm"]["if_indextoname"]).apply(null, arguments)
        }
        ;
        var _if_nameindex = Module["_if_nameindex"] = function() {
            return (_if_nameindex = Module["_if_nameindex"] = Module["asm"]["if_nameindex"]).apply(null, arguments)
        }
        ;
        var _if_nametoindex = Module["_if_nametoindex"] = function() {
            return (_if_nametoindex = Module["_if_nametoindex"] = Module["asm"]["if_nametoindex"]).apply(null, arguments)
        }
        ;
        var _ilogb = Module["_ilogb"] = function() {
            return (_ilogb = Module["_ilogb"] = Module["asm"]["ilogb"]).apply(null, arguments)
        }
        ;
        var _ilogbf = Module["_ilogbf"] = function() {
            return (_ilogbf = Module["_ilogbf"] = Module["asm"]["ilogbf"]).apply(null, arguments)
        }
        ;
        var _imaxabs = Module["_imaxabs"] = function() {
            return (_imaxabs = Module["_imaxabs"] = Module["asm"]["imaxabs"]).apply(null, arguments)
        }
        ;
        var _imaxdiv = Module["_imaxdiv"] = function() {
            return (_imaxdiv = Module["_imaxdiv"] = Module["asm"]["imaxdiv"]).apply(null, arguments)
        }
        ;
        var _index = Module["_index"] = function() {
            return (_index = Module["_index"] = Module["asm"]["index"]).apply(null, arguments)
        }
        ;
        var _inet_addr = Module["_inet_addr"] = function() {
            return (_inet_addr = Module["_inet_addr"] = Module["asm"]["inet_addr"]).apply(null, arguments)
        }
        ;
        var _inet_network = Module["_inet_network"] = function() {
            return (_inet_network = Module["_inet_network"] = Module["asm"]["inet_network"]).apply(null, arguments)
        }
        ;
        var _inet_makeaddr = Module["_inet_makeaddr"] = function() {
            return (_inet_makeaddr = Module["_inet_makeaddr"] = Module["asm"]["inet_makeaddr"]).apply(null, arguments)
        }
        ;
        var _inet_lnaof = Module["_inet_lnaof"] = function() {
            return (_inet_lnaof = Module["_inet_lnaof"] = Module["asm"]["inet_lnaof"]).apply(null, arguments)
        }
        ;
        var _inet_netof = Module["_inet_netof"] = function() {
            return (_inet_netof = Module["_inet_netof"] = Module["asm"]["inet_netof"]).apply(null, arguments)
        }
        ;
        var _insque = Module["_insque"] = function() {
            return (_insque = Module["_insque"] = Module["asm"]["insque"]).apply(null, arguments)
        }
        ;
        var _remque = Module["_remque"] = function() {
            return (_remque = Module["_remque"] = Module["asm"]["remque"]).apply(null, arguments)
        }
        ;
        var ___intscan = Module["___intscan"] = function() {
            return (___intscan = Module["___intscan"] = Module["asm"]["__intscan"]).apply(null, arguments)
        }
        ;
        var ___multi3 = Module["___multi3"] = function() {
            return (___multi3 = Module["___multi3"] = Module["asm"]["__multi3"]).apply(null, arguments)
        }
        ;
        var _isalpha = Module["_isalpha"] = function() {
            return (_isalpha = Module["_isalpha"] = Module["asm"]["isalpha"]).apply(null, arguments)
        }
        ;
        var ___isalnum_l = Module["___isalnum_l"] = function() {
            return (___isalnum_l = Module["___isalnum_l"] = Module["asm"]["__isalnum_l"]).apply(null, arguments)
        }
        ;
        var _isalnum_l = Module["_isalnum_l"] = function() {
            return (_isalnum_l = Module["_isalnum_l"] = Module["asm"]["isalnum_l"]).apply(null, arguments)
        }
        ;
        var ___isalpha_l = Module["___isalpha_l"] = function() {
            return (___isalpha_l = Module["___isalpha_l"] = Module["asm"]["__isalpha_l"]).apply(null, arguments)
        }
        ;
        var _isalpha_l = Module["_isalpha_l"] = function() {
            return (_isalpha_l = Module["_isalpha_l"] = Module["asm"]["isalpha_l"]).apply(null, arguments)
        }
        ;
        var _isascii = Module["_isascii"] = function() {
            return (_isascii = Module["_isascii"] = Module["asm"]["isascii"]).apply(null, arguments)
        }
        ;
        var _isblank = Module["_isblank"] = function() {
            return (_isblank = Module["_isblank"] = Module["asm"]["isblank"]).apply(null, arguments)
        }
        ;
        var ___isblank_l = Module["___isblank_l"] = function() {
            return (___isblank_l = Module["___isblank_l"] = Module["asm"]["__isblank_l"]).apply(null, arguments)
        }
        ;
        var _isblank_l = Module["_isblank_l"] = function() {
            return (_isblank_l = Module["_isblank_l"] = Module["asm"]["isblank_l"]).apply(null, arguments)
        }
        ;
        var _iscntrl = Module["_iscntrl"] = function() {
            return (_iscntrl = Module["_iscntrl"] = Module["asm"]["iscntrl"]).apply(null, arguments)
        }
        ;
        var ___iscntrl_l = Module["___iscntrl_l"] = function() {
            return (___iscntrl_l = Module["___iscntrl_l"] = Module["asm"]["__iscntrl_l"]).apply(null, arguments)
        }
        ;
        var _iscntrl_l = Module["_iscntrl_l"] = function() {
            return (_iscntrl_l = Module["_iscntrl_l"] = Module["asm"]["iscntrl_l"]).apply(null, arguments)
        }
        ;
        var ___isdigit_l = Module["___isdigit_l"] = function() {
            return (___isdigit_l = Module["___isdigit_l"] = Module["asm"]["__isdigit_l"]).apply(null, arguments)
        }
        ;
        var _isdigit_l = Module["_isdigit_l"] = function() {
            return (_isdigit_l = Module["_isdigit_l"] = Module["asm"]["isdigit_l"]).apply(null, arguments)
        }
        ;
        var _isgraph = Module["_isgraph"] = function() {
            return (_isgraph = Module["_isgraph"] = Module["asm"]["isgraph"]).apply(null, arguments)
        }
        ;
        var ___isgraph_l = Module["___isgraph_l"] = function() {
            return (___isgraph_l = Module["___isgraph_l"] = Module["asm"]["__isgraph_l"]).apply(null, arguments)
        }
        ;
        var _isgraph_l = Module["_isgraph_l"] = function() {
            return (_isgraph_l = Module["_isgraph_l"] = Module["asm"]["isgraph_l"]).apply(null, arguments)
        }
        ;
        var _islower = Module["_islower"] = function() {
            return (_islower = Module["_islower"] = Module["asm"]["islower"]).apply(null, arguments)
        }
        ;
        var ___islower_l = Module["___islower_l"] = function() {
            return (___islower_l = Module["___islower_l"] = Module["asm"]["__islower_l"]).apply(null, arguments)
        }
        ;
        var _islower_l = Module["_islower_l"] = function() {
            return (_islower_l = Module["_islower_l"] = Module["asm"]["islower_l"]).apply(null, arguments)
        }
        ;
        var _isprint = Module["_isprint"] = function() {
            return (_isprint = Module["_isprint"] = Module["asm"]["isprint"]).apply(null, arguments)
        }
        ;
        var ___isprint_l = Module["___isprint_l"] = function() {
            return (___isprint_l = Module["___isprint_l"] = Module["asm"]["__isprint_l"]).apply(null, arguments)
        }
        ;
        var _isprint_l = Module["_isprint_l"] = function() {
            return (_isprint_l = Module["_isprint_l"] = Module["asm"]["isprint_l"]).apply(null, arguments)
        }
        ;
        var _ispunct = Module["_ispunct"] = function() {
            return (_ispunct = Module["_ispunct"] = Module["asm"]["ispunct"]).apply(null, arguments)
        }
        ;
        var ___ispunct_l = Module["___ispunct_l"] = function() {
            return (___ispunct_l = Module["___ispunct_l"] = Module["asm"]["__ispunct_l"]).apply(null, arguments)
        }
        ;
        var _ispunct_l = Module["_ispunct_l"] = function() {
            return (_ispunct_l = Module["_ispunct_l"] = Module["asm"]["ispunct_l"]).apply(null, arguments)
        }
        ;
        var _issetugid = Module["_issetugid"] = function() {
            return (_issetugid = Module["_issetugid"] = Module["asm"]["issetugid"]).apply(null, arguments)
        }
        ;
        var ___isspace_l = Module["___isspace_l"] = function() {
            return (___isspace_l = Module["___isspace_l"] = Module["asm"]["__isspace_l"]).apply(null, arguments)
        }
        ;
        var _isspace_l = Module["_isspace_l"] = function() {
            return (_isspace_l = Module["_isspace_l"] = Module["asm"]["isspace_l"]).apply(null, arguments)
        }
        ;
        var ___isupper_l = Module["___isupper_l"] = function() {
            return (___isupper_l = Module["___isupper_l"] = Module["asm"]["__isupper_l"]).apply(null, arguments)
        }
        ;
        var _isupper_l = Module["_isupper_l"] = function() {
            return (_isupper_l = Module["_isupper_l"] = Module["asm"]["isupper_l"]).apply(null, arguments)
        }
        ;
        var _iswalnum = Module["_iswalnum"] = function() {
            return (_iswalnum = Module["_iswalnum"] = Module["asm"]["iswalnum"]).apply(null, arguments)
        }
        ;
        var _iswdigit = Module["_iswdigit"] = function() {
            return (_iswdigit = Module["_iswdigit"] = Module["asm"]["iswdigit"]).apply(null, arguments)
        }
        ;
        var _iswalpha = Module["_iswalpha"] = function() {
            return (_iswalpha = Module["_iswalpha"] = Module["asm"]["iswalpha"]).apply(null, arguments)
        }
        ;
        var ___iswalnum_l = Module["___iswalnum_l"] = function() {
            return (___iswalnum_l = Module["___iswalnum_l"] = Module["asm"]["__iswalnum_l"]).apply(null, arguments)
        }
        ;
        var _iswalnum_l = Module["_iswalnum_l"] = function() {
            return (_iswalnum_l = Module["_iswalnum_l"] = Module["asm"]["iswalnum_l"]).apply(null, arguments)
        }
        ;
        var ___iswalpha_l = Module["___iswalpha_l"] = function() {
            return (___iswalpha_l = Module["___iswalpha_l"] = Module["asm"]["__iswalpha_l"]).apply(null, arguments)
        }
        ;
        var _iswalpha_l = Module["_iswalpha_l"] = function() {
            return (_iswalpha_l = Module["_iswalpha_l"] = Module["asm"]["iswalpha_l"]).apply(null, arguments)
        }
        ;
        var _iswblank = Module["_iswblank"] = function() {
            return (_iswblank = Module["_iswblank"] = Module["asm"]["iswblank"]).apply(null, arguments)
        }
        ;
        var ___iswblank_l = Module["___iswblank_l"] = function() {
            return (___iswblank_l = Module["___iswblank_l"] = Module["asm"]["__iswblank_l"]).apply(null, arguments)
        }
        ;
        var _iswblank_l = Module["_iswblank_l"] = function() {
            return (_iswblank_l = Module["_iswblank_l"] = Module["asm"]["iswblank_l"]).apply(null, arguments)
        }
        ;
        var _iswcntrl = Module["_iswcntrl"] = function() {
            return (_iswcntrl = Module["_iswcntrl"] = Module["asm"]["iswcntrl"]).apply(null, arguments)
        }
        ;
        var ___iswcntrl_l = Module["___iswcntrl_l"] = function() {
            return (___iswcntrl_l = Module["___iswcntrl_l"] = Module["asm"]["__iswcntrl_l"]).apply(null, arguments)
        }
        ;
        var _iswcntrl_l = Module["_iswcntrl_l"] = function() {
            return (_iswcntrl_l = Module["_iswcntrl_l"] = Module["asm"]["iswcntrl_l"]).apply(null, arguments)
        }
        ;
        var _iswgraph = Module["_iswgraph"] = function() {
            return (_iswgraph = Module["_iswgraph"] = Module["asm"]["iswgraph"]).apply(null, arguments)
        }
        ;
        var _iswlower = Module["_iswlower"] = function() {
            return (_iswlower = Module["_iswlower"] = Module["asm"]["iswlower"]).apply(null, arguments)
        }
        ;
        var _iswprint = Module["_iswprint"] = function() {
            return (_iswprint = Module["_iswprint"] = Module["asm"]["iswprint"]).apply(null, arguments)
        }
        ;
        var _iswpunct = Module["_iswpunct"] = function() {
            return (_iswpunct = Module["_iswpunct"] = Module["asm"]["iswpunct"]).apply(null, arguments)
        }
        ;
        var _iswspace = Module["_iswspace"] = function() {
            return (_iswspace = Module["_iswspace"] = Module["asm"]["iswspace"]).apply(null, arguments)
        }
        ;
        var _iswupper = Module["_iswupper"] = function() {
            return (_iswupper = Module["_iswupper"] = Module["asm"]["iswupper"]).apply(null, arguments)
        }
        ;
        var _iswxdigit = Module["_iswxdigit"] = function() {
            return (_iswxdigit = Module["_iswxdigit"] = Module["asm"]["iswxdigit"]).apply(null, arguments)
        }
        ;
        var ___iswctype_l = Module["___iswctype_l"] = function() {
            return (___iswctype_l = Module["___iswctype_l"] = Module["asm"]["__iswctype_l"]).apply(null, arguments)
        }
        ;
        var ___wctype_l = Module["___wctype_l"] = function() {
            return (___wctype_l = Module["___wctype_l"] = Module["asm"]["__wctype_l"]).apply(null, arguments)
        }
        ;
        var _iswctype_l = Module["_iswctype_l"] = function() {
            return (_iswctype_l = Module["_iswctype_l"] = Module["asm"]["iswctype_l"]).apply(null, arguments)
        }
        ;
        var _wctype_l = Module["_wctype_l"] = function() {
            return (_wctype_l = Module["_wctype_l"] = Module["asm"]["wctype_l"]).apply(null, arguments)
        }
        ;
        var ___iswdigit_l = Module["___iswdigit_l"] = function() {
            return (___iswdigit_l = Module["___iswdigit_l"] = Module["asm"]["__iswdigit_l"]).apply(null, arguments)
        }
        ;
        var _iswdigit_l = Module["_iswdigit_l"] = function() {
            return (_iswdigit_l = Module["_iswdigit_l"] = Module["asm"]["iswdigit_l"]).apply(null, arguments)
        }
        ;
        var ___iswgraph_l = Module["___iswgraph_l"] = function() {
            return (___iswgraph_l = Module["___iswgraph_l"] = Module["asm"]["__iswgraph_l"]).apply(null, arguments)
        }
        ;
        var _iswgraph_l = Module["_iswgraph_l"] = function() {
            return (_iswgraph_l = Module["_iswgraph_l"] = Module["asm"]["iswgraph_l"]).apply(null, arguments)
        }
        ;
        var ___iswlower_l = Module["___iswlower_l"] = function() {
            return (___iswlower_l = Module["___iswlower_l"] = Module["asm"]["__iswlower_l"]).apply(null, arguments)
        }
        ;
        var _iswlower_l = Module["_iswlower_l"] = function() {
            return (_iswlower_l = Module["_iswlower_l"] = Module["asm"]["iswlower_l"]).apply(null, arguments)
        }
        ;
        var ___iswprint_l = Module["___iswprint_l"] = function() {
            return (___iswprint_l = Module["___iswprint_l"] = Module["asm"]["__iswprint_l"]).apply(null, arguments)
        }
        ;
        var _iswprint_l = Module["_iswprint_l"] = function() {
            return (_iswprint_l = Module["_iswprint_l"] = Module["asm"]["iswprint_l"]).apply(null, arguments)
        }
        ;
        var ___iswpunct_l = Module["___iswpunct_l"] = function() {
            return (___iswpunct_l = Module["___iswpunct_l"] = Module["asm"]["__iswpunct_l"]).apply(null, arguments)
        }
        ;
        var _iswpunct_l = Module["_iswpunct_l"] = function() {
            return (_iswpunct_l = Module["_iswpunct_l"] = Module["asm"]["iswpunct_l"]).apply(null, arguments)
        }
        ;
        var ___iswspace_l = Module["___iswspace_l"] = function() {
            return (___iswspace_l = Module["___iswspace_l"] = Module["asm"]["__iswspace_l"]).apply(null, arguments)
        }
        ;
        var _iswspace_l = Module["_iswspace_l"] = function() {
            return (_iswspace_l = Module["_iswspace_l"] = Module["asm"]["iswspace_l"]).apply(null, arguments)
        }
        ;
        var ___iswupper_l = Module["___iswupper_l"] = function() {
            return (___iswupper_l = Module["___iswupper_l"] = Module["asm"]["__iswupper_l"]).apply(null, arguments)
        }
        ;
        var _iswupper_l = Module["_iswupper_l"] = function() {
            return (_iswupper_l = Module["_iswupper_l"] = Module["asm"]["iswupper_l"]).apply(null, arguments)
        }
        ;
        var ___iswxdigit_l = Module["___iswxdigit_l"] = function() {
            return (___iswxdigit_l = Module["___iswxdigit_l"] = Module["asm"]["__iswxdigit_l"]).apply(null, arguments)
        }
        ;
        var _iswxdigit_l = Module["_iswxdigit_l"] = function() {
            return (_iswxdigit_l = Module["_iswxdigit_l"] = Module["asm"]["iswxdigit_l"]).apply(null, arguments)
        }
        ;
        var ___isxdigit_l = Module["___isxdigit_l"] = function() {
            return (___isxdigit_l = Module["___isxdigit_l"] = Module["asm"]["__isxdigit_l"]).apply(null, arguments)
        }
        ;
        var _isxdigit_l = Module["_isxdigit_l"] = function() {
            return (_isxdigit_l = Module["_isxdigit_l"] = Module["asm"]["isxdigit_l"]).apply(null, arguments)
        }
        ;
        var _j0 = Module["_j0"] = function() {
            return (_j0 = Module["_j0"] = Module["asm"]["j0"]).apply(null, arguments)
        }
        ;
        var _y0 = Module["_y0"] = function() {
            return (_y0 = Module["_y0"] = Module["asm"]["y0"]).apply(null, arguments)
        }
        ;
        var _j0f = Module["_j0f"] = function() {
            return (_j0f = Module["_j0f"] = Module["asm"]["j0f"]).apply(null, arguments)
        }
        ;
        var _y0f = Module["_y0f"] = function() {
            return (_y0f = Module["_y0f"] = Module["asm"]["y0f"]).apply(null, arguments)
        }
        ;
        var _j1 = Module["_j1"] = function() {
            return (_j1 = Module["_j1"] = Module["asm"]["j1"]).apply(null, arguments)
        }
        ;
        var _y1 = Module["_y1"] = function() {
            return (_y1 = Module["_y1"] = Module["asm"]["y1"]).apply(null, arguments)
        }
        ;
        var _j1f = Module["_j1f"] = function() {
            return (_j1f = Module["_j1f"] = Module["asm"]["j1f"]).apply(null, arguments)
        }
        ;
        var _y1f = Module["_y1f"] = function() {
            return (_y1f = Module["_y1f"] = Module["asm"]["y1f"]).apply(null, arguments)
        }
        ;
        var _jn = Module["_jn"] = function() {
            return (_jn = Module["_jn"] = Module["asm"]["jn"]).apply(null, arguments)
        }
        ;
        var _yn = Module["_yn"] = function() {
            return (_yn = Module["_yn"] = Module["asm"]["yn"]).apply(null, arguments)
        }
        ;
        var _jnf = Module["_jnf"] = function() {
            return (_jnf = Module["_jnf"] = Module["asm"]["jnf"]).apply(null, arguments)
        }
        ;
        var _ynf = Module["_ynf"] = function() {
            return (_ynf = Module["_ynf"] = Module["asm"]["ynf"]).apply(null, arguments)
        }
        ;
        var _labs = Module["_labs"] = function() {
            return (_labs = Module["_labs"] = Module["asm"]["labs"]).apply(null, arguments)
        }
        ;
        var ___nl_langinfo = Module["___nl_langinfo"] = function() {
            return (___nl_langinfo = Module["___nl_langinfo"] = Module["asm"]["__nl_langinfo"]).apply(null, arguments)
        }
        ;
        var _nl_langinfo_l = Module["_nl_langinfo_l"] = function() {
            return (_nl_langinfo_l = Module["_nl_langinfo_l"] = Module["asm"]["nl_langinfo_l"]).apply(null, arguments)
        }
        ;
        var _lcong48 = Module["_lcong48"] = function() {
            return (_lcong48 = Module["_lcong48"] = Module["asm"]["lcong48"]).apply(null, arguments)
        }
        ;
        var _ldexpf = Module["_ldexpf"] = function() {
            return (_ldexpf = Module["_ldexpf"] = Module["asm"]["ldexpf"]).apply(null, arguments)
        }
        ;
        var _scalbnf = Module["_scalbnf"] = function() {
            return (_scalbnf = Module["_scalbnf"] = Module["asm"]["scalbnf"]).apply(null, arguments)
        }
        ;
        var _ldexpl = Module["_ldexpl"] = function() {
            return (_ldexpl = Module["_ldexpl"] = Module["asm"]["ldexpl"]).apply(null, arguments)
        }
        ;
        var _ldiv = Module["_ldiv"] = function() {
            return (_ldiv = Module["_ldiv"] = Module["asm"]["ldiv"]).apply(null, arguments)
        }
        ;
        var _get_nprocs_conf = Module["_get_nprocs_conf"] = function() {
            return (_get_nprocs_conf = Module["_get_nprocs_conf"] = Module["asm"]["get_nprocs_conf"]).apply(null, arguments)
        }
        ;
        var _get_nprocs = Module["_get_nprocs"] = function() {
            return (_get_nprocs = Module["_get_nprocs"] = Module["asm"]["get_nprocs"]).apply(null, arguments)
        }
        ;
        var _get_phys_pages = Module["_get_phys_pages"] = function() {
            return (_get_phys_pages = Module["_get_phys_pages"] = Module["asm"]["get_phys_pages"]).apply(null, arguments)
        }
        ;
        var _get_avphys_pages = Module["_get_avphys_pages"] = function() {
            return (_get_avphys_pages = Module["_get_avphys_pages"] = Module["asm"]["get_avphys_pages"]).apply(null, arguments)
        }
        ;
        var _lgamma = Module["_lgamma"] = function() {
            return (_lgamma = Module["_lgamma"] = Module["asm"]["lgamma"]).apply(null, arguments)
        }
        ;
        var _lgamma_r = Module["_lgamma_r"] = function() {
            return (_lgamma_r = Module["_lgamma_r"] = Module["asm"]["lgamma_r"]).apply(null, arguments)
        }
        ;
        var _lgammaf = Module["_lgammaf"] = function() {
            return (_lgammaf = Module["_lgammaf"] = Module["asm"]["lgammaf"]).apply(null, arguments)
        }
        ;
        var _lgammaf_r = Module["_lgammaf_r"] = function() {
            return (_lgammaf_r = Module["_lgammaf_r"] = Module["asm"]["lgammaf_r"]).apply(null, arguments)
        }
        ;
        var ___lgammal_r = Module["___lgammal_r"] = function() {
            return (___lgammal_r = Module["___lgammal_r"] = Module["asm"]["__lgammal_r"]).apply(null, arguments)
        }
        ;
        var _lgammal = Module["_lgammal"] = function() {
            return (_lgammal = Module["_lgammal"] = Module["asm"]["lgammal"]).apply(null, arguments)
        }
        ;
        var _lgammal_r = Module["_lgammal_r"] = function() {
            return (_lgammal_r = Module["_lgammal_r"] = Module["asm"]["lgammal_r"]).apply(null, arguments)
        }
        ;
        var _emscripten_has_threading_support = Module["_emscripten_has_threading_support"] = function() {
            return (_emscripten_has_threading_support = Module["_emscripten_has_threading_support"] = Module["asm"]["emscripten_has_threading_support"]).apply(null, arguments)
        }
        ;
        var _emscripten_num_logical_cores = Module["_emscripten_num_logical_cores"] = function() {
            return (_emscripten_num_logical_cores = Module["_emscripten_num_logical_cores"] = Module["asm"]["emscripten_num_logical_cores"]).apply(null, arguments)
        }
        ;
        var _emscripten_force_num_logical_cores = Module["_emscripten_force_num_logical_cores"] = function() {
            return (_emscripten_force_num_logical_cores = Module["_emscripten_force_num_logical_cores"] = Module["asm"]["emscripten_force_num_logical_cores"]).apply(null, arguments)
        }
        ;
        var _emscripten_futex_wait = Module["_emscripten_futex_wait"] = function() {
            return (_emscripten_futex_wait = Module["_emscripten_futex_wait"] = Module["asm"]["emscripten_futex_wait"]).apply(null, arguments)
        }
        ;
        var _emscripten_is_main_runtime_thread = Module["_emscripten_is_main_runtime_thread"] = function() {
            return (_emscripten_is_main_runtime_thread = Module["_emscripten_is_main_runtime_thread"] = Module["asm"]["emscripten_is_main_runtime_thread"]).apply(null, arguments)
        }
        ;
        var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = function() {
            return (_emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = Module["asm"]["emscripten_main_thread_process_queued_calls"]).apply(null, arguments)
        }
        ;
        var _emscripten_current_thread_process_queued_calls = Module["_emscripten_current_thread_process_queued_calls"] = function() {
            return (_emscripten_current_thread_process_queued_calls = Module["_emscripten_current_thread_process_queued_calls"] = Module["asm"]["emscripten_current_thread_process_queued_calls"]).apply(null, arguments)
        }
        ;
        var __emscripten_yield = Module["__emscripten_yield"] = function() {
            return (__emscripten_yield = Module["__emscripten_yield"] = Module["asm"]["_emscripten_yield"]).apply(null, arguments)
        }
        ;
        var _pthread_mutex_consistent = Module["_pthread_mutex_consistent"] = function() {
            return (_pthread_mutex_consistent = Module["_pthread_mutex_consistent"] = Module["asm"]["pthread_mutex_consistent"]).apply(null, arguments)
        }
        ;
        var _pthread_barrier_init = Module["_pthread_barrier_init"] = function() {
            return (_pthread_barrier_init = Module["_pthread_barrier_init"] = Module["asm"]["pthread_barrier_init"]).apply(null, arguments)
        }
        ;
        var _pthread_barrier_destroy = Module["_pthread_barrier_destroy"] = function() {
            return (_pthread_barrier_destroy = Module["_pthread_barrier_destroy"] = Module["asm"]["pthread_barrier_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_barrier_wait = Module["_pthread_barrier_wait"] = function() {
            return (_pthread_barrier_wait = Module["_pthread_barrier_wait"] = Module["asm"]["pthread_barrier_wait"]).apply(null, arguments)
        }
        ;
        var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function() {
            return (_pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = Module["asm"]["pthread_cond_broadcast"]).apply(null, arguments)
        }
        ;
        var _pthread_atfork = Module["_pthread_atfork"] = function() {
            return (_pthread_atfork = Module["_pthread_atfork"] = Module["asm"]["pthread_atfork"]).apply(null, arguments)
        }
        ;
        var _pthread_cancel = Module["_pthread_cancel"] = function() {
            return (_pthread_cancel = Module["_pthread_cancel"] = Module["asm"]["pthread_cancel"]).apply(null, arguments)
        }
        ;
        var _pthread_testcancel = Module["_pthread_testcancel"] = function() {
            return (_pthread_testcancel = Module["_pthread_testcancel"] = Module["asm"]["pthread_testcancel"]).apply(null, arguments)
        }
        ;
        var ___pthread_detach = Module["___pthread_detach"] = function() {
            return (___pthread_detach = Module["___pthread_detach"] = Module["asm"]["__pthread_detach"]).apply(null, arguments)
        }
        ;
        var _pthread_equal = Module["_pthread_equal"] = function() {
            return (_pthread_equal = Module["_pthread_equal"] = Module["asm"]["pthread_equal"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_init = Module["_pthread_mutexattr_init"] = function() {
            return (_pthread_mutexattr_init = Module["_pthread_mutexattr_init"] = Module["asm"]["pthread_mutexattr_init"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_setprotocol = Module["_pthread_mutexattr_setprotocol"] = function() {
            return (_pthread_mutexattr_setprotocol = Module["_pthread_mutexattr_setprotocol"] = Module["asm"]["pthread_mutexattr_setprotocol"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_settype = Module["_pthread_mutexattr_settype"] = function() {
            return (_pthread_mutexattr_settype = Module["_pthread_mutexattr_settype"] = Module["asm"]["pthread_mutexattr_settype"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_destroy = Module["_pthread_mutexattr_destroy"] = function() {
            return (_pthread_mutexattr_destroy = Module["_pthread_mutexattr_destroy"] = Module["asm"]["pthread_mutexattr_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_setpshared = Module["_pthread_mutexattr_setpshared"] = function() {
            return (_pthread_mutexattr_setpshared = Module["_pthread_mutexattr_setpshared"] = Module["asm"]["pthread_mutexattr_setpshared"]).apply(null, arguments)
        }
        ;
        var _pthread_condattr_destroy = Module["_pthread_condattr_destroy"] = function() {
            return (_pthread_condattr_destroy = Module["_pthread_condattr_destroy"] = Module["asm"]["pthread_condattr_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_condattr_setpshared = Module["_pthread_condattr_setpshared"] = function() {
            return (_pthread_condattr_setpshared = Module["_pthread_condattr_setpshared"] = Module["asm"]["pthread_condattr_setpshared"]).apply(null, arguments)
        }
        ;
        var _pthread_getattr_np = Module["_pthread_getattr_np"] = function() {
            return (_pthread_getattr_np = Module["_pthread_getattr_np"] = Module["asm"]["pthread_getattr_np"]).apply(null, arguments)
        }
        ;
        var _pthread_setcanceltype = Module["_pthread_setcanceltype"] = function() {
            return (_pthread_setcanceltype = Module["_pthread_setcanceltype"] = Module["asm"]["pthread_setcanceltype"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_init = Module["_pthread_rwlock_init"] = function() {
            return (_pthread_rwlock_init = Module["_pthread_rwlock_init"] = Module["asm"]["pthread_rwlock_init"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_destroy = Module["_pthread_rwlock_destroy"] = function() {
            return (_pthread_rwlock_destroy = Module["_pthread_rwlock_destroy"] = Module["asm"]["pthread_rwlock_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_tryrdlock = Module["_pthread_rwlock_tryrdlock"] = function() {
            return (_pthread_rwlock_tryrdlock = Module["_pthread_rwlock_tryrdlock"] = Module["asm"]["pthread_rwlock_tryrdlock"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_timedrdlock = Module["_pthread_rwlock_timedrdlock"] = function() {
            return (_pthread_rwlock_timedrdlock = Module["_pthread_rwlock_timedrdlock"] = Module["asm"]["pthread_rwlock_timedrdlock"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_trywrlock = Module["_pthread_rwlock_trywrlock"] = function() {
            return (_pthread_rwlock_trywrlock = Module["_pthread_rwlock_trywrlock"] = Module["asm"]["pthread_rwlock_trywrlock"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlock_timedwrlock = Module["_pthread_rwlock_timedwrlock"] = function() {
            return (_pthread_rwlock_timedwrlock = Module["_pthread_rwlock_timedwrlock"] = Module["asm"]["pthread_rwlock_timedwrlock"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlockattr_init = Module["_pthread_rwlockattr_init"] = function() {
            return (_pthread_rwlockattr_init = Module["_pthread_rwlockattr_init"] = Module["asm"]["pthread_rwlockattr_init"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlockattr_destroy = Module["_pthread_rwlockattr_destroy"] = function() {
            return (_pthread_rwlockattr_destroy = Module["_pthread_rwlockattr_destroy"] = Module["asm"]["pthread_rwlockattr_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlockattr_setpshared = Module["_pthread_rwlockattr_setpshared"] = function() {
            return (_pthread_rwlockattr_setpshared = Module["_pthread_rwlockattr_setpshared"] = Module["asm"]["pthread_rwlockattr_setpshared"]).apply(null, arguments)
        }
        ;
        var _pthread_spin_init = Module["_pthread_spin_init"] = function() {
            return (_pthread_spin_init = Module["_pthread_spin_init"] = Module["asm"]["pthread_spin_init"]).apply(null, arguments)
        }
        ;
        var _pthread_spin_destroy = Module["_pthread_spin_destroy"] = function() {
            return (_pthread_spin_destroy = Module["_pthread_spin_destroy"] = Module["asm"]["pthread_spin_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_spin_lock = Module["_pthread_spin_lock"] = function() {
            return (_pthread_spin_lock = Module["_pthread_spin_lock"] = Module["asm"]["pthread_spin_lock"]).apply(null, arguments)
        }
        ;
        var _pthread_spin_trylock = Module["_pthread_spin_trylock"] = function() {
            return (_pthread_spin_trylock = Module["_pthread_spin_trylock"] = Module["asm"]["pthread_spin_trylock"]).apply(null, arguments)
        }
        ;
        var _pthread_spin_unlock = Module["_pthread_spin_unlock"] = function() {
            return (_pthread_spin_unlock = Module["_pthread_spin_unlock"] = Module["asm"]["pthread_spin_unlock"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_setdetachstate = Module["_pthread_attr_setdetachstate"] = function() {
            return (_pthread_attr_setdetachstate = Module["_pthread_attr_setdetachstate"] = Module["asm"]["pthread_attr_setdetachstate"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_setschedparam = Module["_pthread_attr_setschedparam"] = function() {
            return (_pthread_attr_setschedparam = Module["_pthread_attr_setschedparam"] = Module["asm"]["pthread_attr_setschedparam"]).apply(null, arguments)
        }
        ;
        var _sem_init = Module["_sem_init"] = function() {
            return (_sem_init = Module["_sem_init"] = Module["asm"]["sem_init"]).apply(null, arguments)
        }
        ;
        var _sem_post = Module["_sem_post"] = function() {
            return (_sem_post = Module["_sem_post"] = Module["asm"]["sem_post"]).apply(null, arguments)
        }
        ;
        var _sem_wait = Module["_sem_wait"] = function() {
            return (_sem_wait = Module["_sem_wait"] = Module["asm"]["sem_wait"]).apply(null, arguments)
        }
        ;
        var _sem_trywait = Module["_sem_trywait"] = function() {
            return (_sem_trywait = Module["_sem_trywait"] = Module["asm"]["sem_trywait"]).apply(null, arguments)
        }
        ;
        var _sem_destroy = Module["_sem_destroy"] = function() {
            return (_sem_destroy = Module["_sem_destroy"] = Module["asm"]["sem_destroy"]).apply(null, arguments)
        }
        ;
        var _pthread_mutex_timedlock = Module["_pthread_mutex_timedlock"] = function() {
            return (_pthread_mutex_timedlock = Module["_pthread_mutex_timedlock"] = Module["asm"]["pthread_mutex_timedlock"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_pthread_create = Module["_emscripten_builtin_pthread_create"] = function() {
            return (_emscripten_builtin_pthread_create = Module["_emscripten_builtin_pthread_create"] = Module["asm"]["emscripten_builtin_pthread_create"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_pthread_join = Module["_emscripten_builtin_pthread_join"] = function() {
            return (_emscripten_builtin_pthread_join = Module["_emscripten_builtin_pthread_join"] = Module["asm"]["emscripten_builtin_pthread_join"]).apply(null, arguments)
        }
        ;
        var _pthread_join = Module["_pthread_join"] = function() {
            return (_pthread_join = Module["_pthread_join"] = Module["asm"]["pthread_join"]).apply(null, arguments)
        }
        ;
        var _pthread_once = Module["_pthread_once"] = function() {
            return (_pthread_once = Module["_pthread_once"] = Module["asm"]["pthread_once"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_pthread_detach = Module["_emscripten_builtin_pthread_detach"] = function() {
            return (_emscripten_builtin_pthread_detach = Module["_emscripten_builtin_pthread_detach"] = Module["asm"]["emscripten_builtin_pthread_detach"]).apply(null, arguments)
        }
        ;
        var _thrd_detach = Module["_thrd_detach"] = function() {
            return (_thrd_detach = Module["_thrd_detach"] = Module["asm"]["thrd_detach"]).apply(null, arguments)
        }
        ;
        var _linkat = Module["_linkat"] = function() {
            return (_linkat = Module["_linkat"] = Module["asm"]["linkat"]).apply(null, arguments)
        }
        ;
        var _llabs = Module["_llabs"] = function() {
            return (_llabs = Module["_llabs"] = Module["asm"]["llabs"]).apply(null, arguments)
        }
        ;
        var _lldiv = Module["_lldiv"] = function() {
            return (_lldiv = Module["_lldiv"] = Module["asm"]["lldiv"]).apply(null, arguments)
        }
        ;
        var _llrint = Module["_llrint"] = function() {
            return (_llrint = Module["_llrint"] = Module["asm"]["llrint"]).apply(null, arguments)
        }
        ;
        var _rint = Module["_rint"] = function() {
            return (_rint = Module["_rint"] = Module["asm"]["rint"]).apply(null, arguments)
        }
        ;
        var _llrintf = Module["_llrintf"] = function() {
            return (_llrintf = Module["_llrintf"] = Module["asm"]["llrintf"]).apply(null, arguments)
        }
        ;
        var _rintf = Module["_rintf"] = function() {
            return (_rintf = Module["_rintf"] = Module["asm"]["rintf"]).apply(null, arguments)
        }
        ;
        var _llrintl = Module["_llrintl"] = function() {
            return (_llrintl = Module["_llrintl"] = Module["asm"]["llrintl"]).apply(null, arguments)
        }
        ;
        var _rintl = Module["_rintl"] = function() {
            return (_rintl = Module["_rintl"] = Module["asm"]["rintl"]).apply(null, arguments)
        }
        ;
        var _llround = Module["_llround"] = function() {
            return (_llround = Module["_llround"] = Module["asm"]["llround"]).apply(null, arguments)
        }
        ;
        var _llroundf = Module["_llroundf"] = function() {
            return (_llroundf = Module["_llroundf"] = Module["asm"]["llroundf"]).apply(null, arguments)
        }
        ;
        var _roundf = Module["_roundf"] = function() {
            return (_roundf = Module["_roundf"] = Module["asm"]["roundf"]).apply(null, arguments)
        }
        ;
        var _llroundl = Module["_llroundl"] = function() {
            return (_llroundl = Module["_llroundl"] = Module["asm"]["llroundl"]).apply(null, arguments)
        }
        ;
        var _roundl = Module["_roundl"] = function() {
            return (_roundl = Module["_roundl"] = Module["asm"]["roundl"]).apply(null, arguments)
        }
        ;
        var _lockf64 = Module["_lockf64"] = function() {
            return (_lockf64 = Module["_lockf64"] = Module["asm"]["lockf64"]).apply(null, arguments)
        }
        ;
        var _log10f = Module["_log10f"] = function() {
            return (_log10f = Module["_log10f"] = Module["asm"]["log10f"]).apply(null, arguments)
        }
        ;
        var _log10l = Module["_log10l"] = function() {
            return (_log10l = Module["_log10l"] = Module["asm"]["log10l"]).apply(null, arguments)
        }
        ;
        var _log2f = Module["_log2f"] = function() {
            return (_log2f = Module["_log2f"] = Module["asm"]["log2f"]).apply(null, arguments)
        }
        ;
        var _log2l = Module["_log2l"] = function() {
            return (_log2l = Module["_log2l"] = Module["asm"]["log2l"]).apply(null, arguments)
        }
        ;
        var _logb = Module["_logb"] = function() {
            return (_logb = Module["_logb"] = Module["asm"]["logb"]).apply(null, arguments)
        }
        ;
        var _logbf = Module["_logbf"] = function() {
            return (_logbf = Module["_logbf"] = Module["asm"]["logbf"]).apply(null, arguments)
        }
        ;
        var _logbl = Module["_logbl"] = function() {
            return (_logbl = Module["_logbl"] = Module["asm"]["logbl"]).apply(null, arguments)
        }
        ;
        var _strtoull = Module["_strtoull"] = function() {
            return (_strtoull = Module["_strtoull"] = Module["asm"]["strtoull"]).apply(null, arguments)
        }
        ;
        var _nrand48 = Module["_nrand48"] = function() {
            return (_nrand48 = Module["_nrand48"] = Module["asm"]["nrand48"]).apply(null, arguments)
        }
        ;
        var _lrand48 = Module["_lrand48"] = function() {
            return (_lrand48 = Module["_lrand48"] = Module["asm"]["lrand48"]).apply(null, arguments)
        }
        ;
        var _lrint = Module["_lrint"] = function() {
            return (_lrint = Module["_lrint"] = Module["asm"]["lrint"]).apply(null, arguments)
        }
        ;
        var _lrintf = Module["_lrintf"] = function() {
            return (_lrintf = Module["_lrintf"] = Module["asm"]["lrintf"]).apply(null, arguments)
        }
        ;
        var _lrintl = Module["_lrintl"] = function() {
            return (_lrintl = Module["_lrintl"] = Module["asm"]["lrintl"]).apply(null, arguments)
        }
        ;
        var _lround = Module["_lround"] = function() {
            return (_lround = Module["_lround"] = Module["asm"]["lround"]).apply(null, arguments)
        }
        ;
        var _lroundf = Module["_lroundf"] = function() {
            return (_lroundf = Module["_lroundf"] = Module["asm"]["lroundf"]).apply(null, arguments)
        }
        ;
        var _lroundl = Module["_lroundl"] = function() {
            return (_lroundl = Module["_lroundl"] = Module["asm"]["lroundl"]).apply(null, arguments)
        }
        ;
        var _lsearch = Module["_lsearch"] = function() {
            return (_lsearch = Module["_lsearch"] = Module["asm"]["lsearch"]).apply(null, arguments)
        }
        ;
        var _lfind = Module["_lfind"] = function() {
            return (_lfind = Module["_lfind"] = Module["asm"]["lfind"]).apply(null, arguments)
        }
        ;
        var _lseek64 = Module["_lseek64"] = function() {
            return (_lseek64 = Module["_lseek64"] = Module["asm"]["lseek64"]).apply(null, arguments)
        }
        ;
        var _lstat64 = Module["_lstat64"] = function() {
            return (_lstat64 = Module["_lstat64"] = Module["asm"]["lstat64"]).apply(null, arguments)
        }
        ;
        var _mbrlen = Module["_mbrlen"] = function() {
            return (_mbrlen = Module["_mbrlen"] = Module["asm"]["mbrlen"]).apply(null, arguments)
        }
        ;
        var _mbrtoc16 = Module["_mbrtoc16"] = function() {
            return (_mbrtoc16 = Module["_mbrtoc16"] = Module["asm"]["mbrtoc16"]).apply(null, arguments)
        }
        ;
        var _mbrtoc32 = Module["_mbrtoc32"] = function() {
            return (_mbrtoc32 = Module["_mbrtoc32"] = Module["asm"]["mbrtoc32"]).apply(null, arguments)
        }
        ;
        var _mbsinit = Module["_mbsinit"] = function() {
            return (_mbsinit = Module["_mbsinit"] = Module["asm"]["mbsinit"]).apply(null, arguments)
        }
        ;
        var _mbsnrtowcs = Module["_mbsnrtowcs"] = function() {
            return (_mbsnrtowcs = Module["_mbsnrtowcs"] = Module["asm"]["mbsnrtowcs"]).apply(null, arguments)
        }
        ;
        var _mbsrtowcs = Module["_mbsrtowcs"] = function() {
            return (_mbsrtowcs = Module["_mbsrtowcs"] = Module["asm"]["mbsrtowcs"]).apply(null, arguments)
        }
        ;
        var _memccpy = Module["_memccpy"] = function() {
            return (_memccpy = Module["_memccpy"] = Module["asm"]["memccpy"]).apply(null, arguments)
        }
        ;
        var _memmem = Module["_memmem"] = function() {
            return (_memmem = Module["_memmem"] = Module["asm"]["memmem"]).apply(null, arguments)
        }
        ;
        var _mempcpy = Module["_mempcpy"] = function() {
            return (_mempcpy = Module["_mempcpy"] = Module["asm"]["mempcpy"]).apply(null, arguments)
        }
        ;
        var _mincore = Module["_mincore"] = function() {
            return (_mincore = Module["_mincore"] = Module["asm"]["mincore"]).apply(null, arguments)
        }
        ;
        var _mkdirat = Module["_mkdirat"] = function() {
            return (_mkdirat = Module["_mkdirat"] = Module["asm"]["mkdirat"]).apply(null, arguments)
        }
        ;
        var _mkdtemp = Module["_mkdtemp"] = function() {
            return (_mkdtemp = Module["_mkdtemp"] = Module["asm"]["mkdtemp"]).apply(null, arguments)
        }
        ;
        var _mkostemp = Module["_mkostemp"] = function() {
            return (_mkostemp = Module["_mkostemp"] = Module["asm"]["mkostemp"]).apply(null, arguments)
        }
        ;
        var _mkostemp64 = Module["_mkostemp64"] = function() {
            return (_mkostemp64 = Module["_mkostemp64"] = Module["asm"]["mkostemp64"]).apply(null, arguments)
        }
        ;
        var _mkostemps = Module["_mkostemps"] = function() {
            return (_mkostemps = Module["_mkostemps"] = Module["asm"]["mkostemps"]).apply(null, arguments)
        }
        ;
        var _mkostemps64 = Module["_mkostemps64"] = function() {
            return (_mkostemps64 = Module["_mkostemps64"] = Module["asm"]["mkostemps64"]).apply(null, arguments)
        }
        ;
        var _mkstemp = Module["_mkstemp"] = function() {
            return (_mkstemp = Module["_mkstemp"] = Module["asm"]["mkstemp"]).apply(null, arguments)
        }
        ;
        var _mkstemp64 = Module["_mkstemp64"] = function() {
            return (_mkstemp64 = Module["_mkstemp64"] = Module["asm"]["mkstemp64"]).apply(null, arguments)
        }
        ;
        var _mkstemps = Module["_mkstemps"] = function() {
            return (_mkstemps = Module["_mkstemps"] = Module["asm"]["mkstemps"]).apply(null, arguments)
        }
        ;
        var _mkstemps64 = Module["_mkstemps64"] = function() {
            return (_mkstemps64 = Module["_mkstemps64"] = Module["asm"]["mkstemps64"]).apply(null, arguments)
        }
        ;
        var _mktemp = Module["_mktemp"] = function() {
            return (_mktemp = Module["_mktemp"] = Module["asm"]["mktemp"]).apply(null, arguments)
        }
        ;
        var _mlock = Module["_mlock"] = function() {
            return (_mlock = Module["_mlock"] = Module["asm"]["mlock"]).apply(null, arguments)
        }
        ;
        var _mlockall = Module["_mlockall"] = function() {
            return (_mlockall = Module["_mlockall"] = Module["asm"]["mlockall"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_mmap = Module["_emscripten_builtin_mmap"] = function() {
            return (_emscripten_builtin_mmap = Module["_emscripten_builtin_mmap"] = Module["asm"]["emscripten_builtin_mmap"]).apply(null, arguments)
        }
        ;
        var _mmap64 = Module["_mmap64"] = function() {
            return (_mmap64 = Module["_mmap64"] = Module["asm"]["mmap64"]).apply(null, arguments)
        }
        ;
        var _setmntent = Module["_setmntent"] = function() {
            return (_setmntent = Module["_setmntent"] = Module["asm"]["setmntent"]).apply(null, arguments)
        }
        ;
        var _endmntent = Module["_endmntent"] = function() {
            return (_endmntent = Module["_endmntent"] = Module["asm"]["endmntent"]).apply(null, arguments)
        }
        ;
        var _getmntent_r = Module["_getmntent_r"] = function() {
            return (_getmntent_r = Module["_getmntent_r"] = Module["asm"]["getmntent_r"]).apply(null, arguments)
        }
        ;
        var _sscanf = Module["_sscanf"] = function() {
            return (_sscanf = Module["_sscanf"] = Module["asm"]["sscanf"]).apply(null, arguments)
        }
        ;
        var _getmntent = Module["_getmntent"] = function() {
            return (_getmntent = Module["_getmntent"] = Module["asm"]["getmntent"]).apply(null, arguments)
        }
        ;
        var _addmntent = Module["_addmntent"] = function() {
            return (_addmntent = Module["_addmntent"] = Module["asm"]["addmntent"]).apply(null, arguments)
        }
        ;
        var _hasmntopt = Module["_hasmntopt"] = function() {
            return (_hasmntopt = Module["_hasmntopt"] = Module["asm"]["hasmntopt"]).apply(null, arguments)
        }
        ;
        var _mprotect = Module["_mprotect"] = function() {
            return (_mprotect = Module["_mprotect"] = Module["asm"]["mprotect"]).apply(null, arguments)
        }
        ;
        var _jrand48 = Module["_jrand48"] = function() {
            return (_jrand48 = Module["_jrand48"] = Module["asm"]["jrand48"]).apply(null, arguments)
        }
        ;
        var _mrand48 = Module["_mrand48"] = function() {
            return (_mrand48 = Module["_mrand48"] = Module["asm"]["mrand48"]).apply(null, arguments)
        }
        ;
        var _mtx_destroy = Module["_mtx_destroy"] = function() {
            return (_mtx_destroy = Module["_mtx_destroy"] = Module["asm"]["mtx_destroy"]).apply(null, arguments)
        }
        ;
        var _mtx_init = Module["_mtx_init"] = function() {
            return (_mtx_init = Module["_mtx_init"] = Module["asm"]["mtx_init"]).apply(null, arguments)
        }
        ;
        var _mtx_lock = Module["_mtx_lock"] = function() {
            return (_mtx_lock = Module["_mtx_lock"] = Module["asm"]["mtx_lock"]).apply(null, arguments)
        }
        ;
        var _mtx_timedlock = Module["_mtx_timedlock"] = function() {
            return (_mtx_timedlock = Module["_mtx_timedlock"] = Module["asm"]["mtx_timedlock"]).apply(null, arguments)
        }
        ;
        var _mtx_trylock = Module["_mtx_trylock"] = function() {
            return (_mtx_trylock = Module["_mtx_trylock"] = Module["asm"]["mtx_trylock"]).apply(null, arguments)
        }
        ;
        var _mtx_unlock = Module["_mtx_unlock"] = function() {
            return (_mtx_unlock = Module["_mtx_unlock"] = Module["asm"]["mtx_unlock"]).apply(null, arguments)
        }
        ;
        var _munlock = Module["_munlock"] = function() {
            return (_munlock = Module["_munlock"] = Module["asm"]["munlock"]).apply(null, arguments)
        }
        ;
        var _munlockall = Module["_munlockall"] = function() {
            return (_munlockall = Module["_munlockall"] = Module["asm"]["munlockall"]).apply(null, arguments)
        }
        ;
        var _emscripten_builtin_munmap = Module["_emscripten_builtin_munmap"] = function() {
            return (_emscripten_builtin_munmap = Module["_emscripten_builtin_munmap"] = Module["asm"]["emscripten_builtin_munmap"]).apply(null, arguments)
        }
        ;
        var _nan = Module["_nan"] = function() {
            return (_nan = Module["_nan"] = Module["asm"]["nan"]).apply(null, arguments)
        }
        ;
        var _nanf = Module["_nanf"] = function() {
            return (_nanf = Module["_nanf"] = Module["asm"]["nanf"]).apply(null, arguments)
        }
        ;
        var _nanl = Module["_nanl"] = function() {
            return (_nanl = Module["_nanl"] = Module["asm"]["nanl"]).apply(null, arguments)
        }
        ;
        var _nanosleep = Module["_nanosleep"] = function() {
            return (_nanosleep = Module["_nanosleep"] = Module["asm"]["nanosleep"]).apply(null, arguments)
        }
        ;
        var _nearbyint = Module["_nearbyint"] = function() {
            return (_nearbyint = Module["_nearbyint"] = Module["asm"]["nearbyint"]).apply(null, arguments)
        }
        ;
        var _nearbyintf = Module["_nearbyintf"] = function() {
            return (_nearbyintf = Module["_nearbyintf"] = Module["asm"]["nearbyintf"]).apply(null, arguments)
        }
        ;
        var _nearbyintl = Module["_nearbyintl"] = function() {
            return (_nearbyintl = Module["_nearbyintl"] = Module["asm"]["nearbyintl"]).apply(null, arguments)
        }
        ;
        var _getnetbyaddr = Module["_getnetbyaddr"] = function() {
            return (_getnetbyaddr = Module["_getnetbyaddr"] = Module["asm"]["getnetbyaddr"]).apply(null, arguments)
        }
        ;
        var _getnetbyname = Module["_getnetbyname"] = function() {
            return (_getnetbyname = Module["_getnetbyname"] = Module["asm"]["getnetbyname"]).apply(null, arguments)
        }
        ;
        var ___newlocale = Module["___newlocale"] = function() {
            return (___newlocale = Module["___newlocale"] = Module["asm"]["__newlocale"]).apply(null, arguments)
        }
        ;
        var _newlocale = Module["_newlocale"] = function() {
            return (_newlocale = Module["_newlocale"] = Module["asm"]["newlocale"]).apply(null, arguments)
        }
        ;
        var _nextafterf = Module["_nextafterf"] = function() {
            return (_nextafterf = Module["_nextafterf"] = Module["asm"]["nextafterf"]).apply(null, arguments)
        }
        ;
        var _nexttoward = Module["_nexttoward"] = function() {
            return (_nexttoward = Module["_nexttoward"] = Module["asm"]["nexttoward"]).apply(null, arguments)
        }
        ;
        var _nexttowardf = Module["_nexttowardf"] = function() {
            return (_nexttowardf = Module["_nexttowardf"] = Module["asm"]["nexttowardf"]).apply(null, arguments)
        }
        ;
        var _nexttowardl = Module["_nexttowardl"] = function() {
            return (_nexttowardl = Module["_nexttowardl"] = Module["asm"]["nexttowardl"]).apply(null, arguments)
        }
        ;
        var _nftw = Module["_nftw"] = function() {
            return (_nftw = Module["_nftw"] = Module["asm"]["nftw"]).apply(null, arguments)
        }
        ;
        var _nftw64 = Module["_nftw64"] = function() {
            return (_nftw64 = Module["_nftw64"] = Module["asm"]["nftw64"]).apply(null, arguments)
        }
        ;
        var _nice = Module["_nice"] = function() {
            return (_nice = Module["_nice"] = Module["asm"]["nice"]).apply(null, arguments)
        }
        ;
        var _ns_get16 = Module["_ns_get16"] = function() {
            return (_ns_get16 = Module["_ns_get16"] = Module["asm"]["ns_get16"]).apply(null, arguments)
        }
        ;
        var _ns_get32 = Module["_ns_get32"] = function() {
            return (_ns_get32 = Module["_ns_get32"] = Module["asm"]["ns_get32"]).apply(null, arguments)
        }
        ;
        var _ns_put16 = Module["_ns_put16"] = function() {
            return (_ns_put16 = Module["_ns_put16"] = Module["asm"]["ns_put16"]).apply(null, arguments)
        }
        ;
        var _ns_put32 = Module["_ns_put32"] = function() {
            return (_ns_put32 = Module["_ns_put32"] = Module["asm"]["ns_put32"]).apply(null, arguments)
        }
        ;
        var _ns_skiprr = Module["_ns_skiprr"] = function() {
            return (_ns_skiprr = Module["_ns_skiprr"] = Module["asm"]["ns_skiprr"]).apply(null, arguments)
        }
        ;
        var _ns_initparse = Module["_ns_initparse"] = function() {
            return (_ns_initparse = Module["_ns_initparse"] = Module["asm"]["ns_initparse"]).apply(null, arguments)
        }
        ;
        var _ns_name_uncompress = Module["_ns_name_uncompress"] = function() {
            return (_ns_name_uncompress = Module["_ns_name_uncompress"] = Module["asm"]["ns_name_uncompress"]).apply(null, arguments)
        }
        ;
        var _ns_parserr = Module["_ns_parserr"] = function() {
            return (_ns_parserr = Module["_ns_parserr"] = Module["asm"]["ns_parserr"]).apply(null, arguments)
        }
        ;
        var _open64 = Module["_open64"] = function() {
            return (_open64 = Module["_open64"] = Module["asm"]["open64"]).apply(null, arguments)
        }
        ;
        var _open_memstream = Module["_open_memstream"] = function() {
            return (_open_memstream = Module["_open_memstream"] = Module["asm"]["open_memstream"]).apply(null, arguments)
        }
        ;
        var _open_wmemstream = Module["_open_wmemstream"] = function() {
            return (_open_wmemstream = Module["_open_wmemstream"] = Module["asm"]["open_wmemstream"]).apply(null, arguments)
        }
        ;
        var _openat = Module["_openat"] = function() {
            return (_openat = Module["_openat"] = Module["asm"]["openat"]).apply(null, arguments)
        }
        ;
        var _openat64 = Module["_openat64"] = function() {
            return (_openat64 = Module["_openat64"] = Module["asm"]["openat64"]).apply(null, arguments)
        }
        ;
        var _tcsetattr = Module["_tcsetattr"] = function() {
            return (_tcsetattr = Module["_tcsetattr"] = Module["asm"]["tcsetattr"]).apply(null, arguments)
        }
        ;
        var _posix_close = Module["_posix_close"] = function() {
            return (_posix_close = Module["_posix_close"] = Module["asm"]["posix_close"]).apply(null, arguments)
        }
        ;
        var _posix_fadvise64 = Module["_posix_fadvise64"] = function() {
            return (_posix_fadvise64 = Module["_posix_fadvise64"] = Module["asm"]["posix_fadvise64"]).apply(null, arguments)
        }
        ;
        var _posix_fallocate64 = Module["_posix_fallocate64"] = function() {
            return (_posix_fallocate64 = Module["_posix_fallocate64"] = Module["asm"]["posix_fallocate64"]).apply(null, arguments)
        }
        ;
        var _posix_madvise = Module["_posix_madvise"] = function() {
            return (_posix_madvise = Module["_posix_madvise"] = Module["asm"]["posix_madvise"]).apply(null, arguments)
        }
        ;
        var _posix_spawn_file_actions_addchdir_np = Module["_posix_spawn_file_actions_addchdir_np"] = function() {
            return (_posix_spawn_file_actions_addchdir_np = Module["_posix_spawn_file_actions_addchdir_np"] = Module["asm"]["posix_spawn_file_actions_addchdir_np"]).apply(null, arguments)
        }
        ;
        var _posix_spawn_file_actions_addfchdir_np = Module["_posix_spawn_file_actions_addfchdir_np"] = function() {
            return (_posix_spawn_file_actions_addfchdir_np = Module["_posix_spawn_file_actions_addfchdir_np"] = Module["asm"]["posix_spawn_file_actions_addfchdir_np"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_getflags = Module["_posix_spawnattr_getflags"] = function() {
            return (_posix_spawnattr_getflags = Module["_posix_spawnattr_getflags"] = Module["asm"]["posix_spawnattr_getflags"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_getpgroup = Module["_posix_spawnattr_getpgroup"] = function() {
            return (_posix_spawnattr_getpgroup = Module["_posix_spawnattr_getpgroup"] = Module["asm"]["posix_spawnattr_getpgroup"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_getsigdefault = Module["_posix_spawnattr_getsigdefault"] = function() {
            return (_posix_spawnattr_getsigdefault = Module["_posix_spawnattr_getsigdefault"] = Module["asm"]["posix_spawnattr_getsigdefault"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_getsigmask = Module["_posix_spawnattr_getsigmask"] = function() {
            return (_posix_spawnattr_getsigmask = Module["_posix_spawnattr_getsigmask"] = Module["asm"]["posix_spawnattr_getsigmask"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_getschedparam = Module["_posix_spawnattr_getschedparam"] = function() {
            return (_posix_spawnattr_getschedparam = Module["_posix_spawnattr_getschedparam"] = Module["asm"]["posix_spawnattr_getschedparam"]).apply(null, arguments)
        }
        ;
        var _posix_spawnattr_getschedpolicy = Module["_posix_spawnattr_getschedpolicy"] = function() {
            return (_posix_spawnattr_getschedpolicy = Module["_posix_spawnattr_getschedpolicy"] = Module["asm"]["posix_spawnattr_getschedpolicy"]).apply(null, arguments)
        }
        ;
        var _powf = Module["_powf"] = function() {
            return (_powf = Module["_powf"] = Module["asm"]["powf"]).apply(null, arguments)
        }
        ;
        var _pread64 = Module["_pread64"] = function() {
            return (_pread64 = Module["_pread64"] = Module["asm"]["pread64"]).apply(null, arguments)
        }
        ;
        var _preadv = Module["_preadv"] = function() {
            return (_preadv = Module["_preadv"] = Module["asm"]["preadv"]).apply(null, arguments)
        }
        ;
        var _preadv64 = Module["_preadv64"] = function() {
            return (_preadv64 = Module["_preadv64"] = Module["asm"]["preadv64"]).apply(null, arguments)
        }
        ;
        var _printf = Module["_printf"] = function() {
            return (_printf = Module["_printf"] = Module["asm"]["printf"]).apply(null, arguments)
        }
        ;
        var ___small_printf = Module["___small_printf"] = function() {
            return (___small_printf = Module["___small_printf"] = Module["asm"]["__small_printf"]).apply(null, arguments)
        }
        ;
        var _em_proxying_queue_create = Module["_em_proxying_queue_create"] = function() {
            return (_em_proxying_queue_create = Module["_em_proxying_queue_create"] = Module["asm"]["em_proxying_queue_create"]).apply(null, arguments)
        }
        ;
        var _em_proxying_queue_destroy = Module["_em_proxying_queue_destroy"] = function() {
            return (_em_proxying_queue_destroy = Module["_em_proxying_queue_destroy"] = Module["asm"]["em_proxying_queue_destroy"]).apply(null, arguments)
        }
        ;
        var _emscripten_proxy_get_system_queue = Module["_emscripten_proxy_get_system_queue"] = function() {
            return (_emscripten_proxy_get_system_queue = Module["_emscripten_proxy_get_system_queue"] = Module["asm"]["emscripten_proxy_get_system_queue"]).apply(null, arguments)
        }
        ;
        var _emscripten_proxy_execute_queue = Module["_emscripten_proxy_execute_queue"] = function() {
            return (_emscripten_proxy_execute_queue = Module["_emscripten_proxy_execute_queue"] = Module["asm"]["emscripten_proxy_execute_queue"]).apply(null, arguments)
        }
        ;
        var _emscripten_proxy_finish = Module["_emscripten_proxy_finish"] = function() {
            return (_emscripten_proxy_finish = Module["_emscripten_proxy_finish"] = Module["asm"]["emscripten_proxy_finish"]).apply(null, arguments)
        }
        ;
        var _emscripten_proxy_async = Module["_emscripten_proxy_async"] = function() {
            return (_emscripten_proxy_async = Module["_emscripten_proxy_async"] = Module["asm"]["emscripten_proxy_async"]).apply(null, arguments)
        }
        ;
        var _emscripten_proxy_sync = Module["_emscripten_proxy_sync"] = function() {
            return (_emscripten_proxy_sync = Module["_emscripten_proxy_sync"] = Module["asm"]["emscripten_proxy_sync"]).apply(null, arguments)
        }
        ;
        var _emscripten_proxy_sync_with_ctx = Module["_emscripten_proxy_sync_with_ctx"] = function() {
            return (_emscripten_proxy_sync_with_ctx = Module["_emscripten_proxy_sync_with_ctx"] = Module["asm"]["emscripten_proxy_sync_with_ctx"]).apply(null, arguments)
        }
        ;
        var _pselect = Module["_pselect"] = function() {
            return (_pselect = Module["_pselect"] = Module["asm"]["pselect"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_getdetachstate = Module["_pthread_attr_getdetachstate"] = function() {
            return (_pthread_attr_getdetachstate = Module["_pthread_attr_getdetachstate"] = Module["asm"]["pthread_attr_getdetachstate"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_getguardsize = Module["_pthread_attr_getguardsize"] = function() {
            return (_pthread_attr_getguardsize = Module["_pthread_attr_getguardsize"] = Module["asm"]["pthread_attr_getguardsize"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_getinheritsched = Module["_pthread_attr_getinheritsched"] = function() {
            return (_pthread_attr_getinheritsched = Module["_pthread_attr_getinheritsched"] = Module["asm"]["pthread_attr_getinheritsched"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_getschedparam = Module["_pthread_attr_getschedparam"] = function() {
            return (_pthread_attr_getschedparam = Module["_pthread_attr_getschedparam"] = Module["asm"]["pthread_attr_getschedparam"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_getschedpolicy = Module["_pthread_attr_getschedpolicy"] = function() {
            return (_pthread_attr_getschedpolicy = Module["_pthread_attr_getschedpolicy"] = Module["asm"]["pthread_attr_getschedpolicy"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_getscope = Module["_pthread_attr_getscope"] = function() {
            return (_pthread_attr_getscope = Module["_pthread_attr_getscope"] = Module["asm"]["pthread_attr_getscope"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_getstack = Module["_pthread_attr_getstack"] = function() {
            return (_pthread_attr_getstack = Module["_pthread_attr_getstack"] = Module["asm"]["pthread_attr_getstack"]).apply(null, arguments)
        }
        ;
        var _pthread_attr_getstacksize = Module["_pthread_attr_getstacksize"] = function() {
            return (_pthread_attr_getstacksize = Module["_pthread_attr_getstacksize"] = Module["asm"]["pthread_attr_getstacksize"]).apply(null, arguments)
        }
        ;
        var _pthread_barrierattr_getpshared = Module["_pthread_barrierattr_getpshared"] = function() {
            return (_pthread_barrierattr_getpshared = Module["_pthread_barrierattr_getpshared"] = Module["asm"]["pthread_barrierattr_getpshared"]).apply(null, arguments)
        }
        ;
        var _pthread_condattr_getclock = Module["_pthread_condattr_getclock"] = function() {
            return (_pthread_condattr_getclock = Module["_pthread_condattr_getclock"] = Module["asm"]["pthread_condattr_getclock"]).apply(null, arguments)
        }
        ;
        var _pthread_condattr_getpshared = Module["_pthread_condattr_getpshared"] = function() {
            return (_pthread_condattr_getpshared = Module["_pthread_condattr_getpshared"] = Module["asm"]["pthread_condattr_getpshared"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_getprotocol = Module["_pthread_mutexattr_getprotocol"] = function() {
            return (_pthread_mutexattr_getprotocol = Module["_pthread_mutexattr_getprotocol"] = Module["asm"]["pthread_mutexattr_getprotocol"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_getpshared = Module["_pthread_mutexattr_getpshared"] = function() {
            return (_pthread_mutexattr_getpshared = Module["_pthread_mutexattr_getpshared"] = Module["asm"]["pthread_mutexattr_getpshared"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_getrobust = Module["_pthread_mutexattr_getrobust"] = function() {
            return (_pthread_mutexattr_getrobust = Module["_pthread_mutexattr_getrobust"] = Module["asm"]["pthread_mutexattr_getrobust"]).apply(null, arguments)
        }
        ;
        var _pthread_mutexattr_gettype = Module["_pthread_mutexattr_gettype"] = function() {
            return (_pthread_mutexattr_gettype = Module["_pthread_mutexattr_gettype"] = Module["asm"]["pthread_mutexattr_gettype"]).apply(null, arguments)
        }
        ;
        var _pthread_rwlockattr_getpshared = Module["_pthread_rwlockattr_getpshared"] = function() {
            return (_pthread_rwlockattr_getpshared = Module["_pthread_rwlockattr_getpshared"] = Module["asm"]["pthread_rwlockattr_getpshared"]).apply(null, arguments)
        }
        ;
        var __pthread_cleanup_push = Module["__pthread_cleanup_push"] = function() {
            return (__pthread_cleanup_push = Module["__pthread_cleanup_push"] = Module["asm"]["_pthread_cleanup_push"]).apply(null, arguments)
        }
        ;
        var __pthread_cleanup_pop = Module["__pthread_cleanup_pop"] = function() {
            return (__pthread_cleanup_pop = Module["__pthread_cleanup_pop"] = Module["asm"]["_pthread_cleanup_pop"]).apply(null, arguments)
        }
        ;
        var _thrd_current = Module["_thrd_current"] = function() {
            return (_thrd_current = Module["_thrd_current"] = Module["asm"]["thrd_current"]).apply(null, arguments)
        }
        ;
        var _emscripten_main_browser_thread_id = Module["_emscripten_main_browser_thread_id"] = function() {
            return (_emscripten_main_browser_thread_id = Module["_emscripten_main_browser_thread_id"] = Module["asm"]["emscripten_main_browser_thread_id"]).apply(null, arguments)
        }
        ;
        var ___sig_is_blocked = Module["___sig_is_blocked"] = function() {
            return (___sig_is_blocked = Module["___sig_is_blocked"] = Module["asm"]["__sig_is_blocked"]).apply(null, arguments)
        }
        ;
        var _sigorset = Module["_sigorset"] = function() {
            return (_sigorset = Module["_sigorset"] = Module["asm"]["sigorset"]).apply(null, arguments)
        }
        ;
        var _sigandset = Module["_sigandset"] = function() {
            return (_sigandset = Module["_sigandset"] = Module["asm"]["sigandset"]).apply(null, arguments)
        }
        ;
        var _sigdelset = Module["_sigdelset"] = function() {
            return (_sigdelset = Module["_sigdelset"] = Module["asm"]["sigdelset"]).apply(null, arguments)
        }
        ;
        var _ptsname = Module["_ptsname"] = function() {
            return (_ptsname = Module["_ptsname"] = Module["asm"]["ptsname"]).apply(null, arguments)
        }
        ;
        var _posix_openpt = Module["_posix_openpt"] = function() {
            return (_posix_openpt = Module["_posix_openpt"] = Module["asm"]["posix_openpt"]).apply(null, arguments)
        }
        ;
        var _grantpt = Module["_grantpt"] = function() {
            return (_grantpt = Module["_grantpt"] = Module["asm"]["grantpt"]).apply(null, arguments)
        }
        ;
        var _unlockpt = Module["_unlockpt"] = function() {
            return (_unlockpt = Module["_unlockpt"] = Module["asm"]["unlockpt"]).apply(null, arguments)
        }
        ;
        var _ptsname_r = Module["_ptsname_r"] = function() {
            return (_ptsname_r = Module["_ptsname_r"] = Module["asm"]["ptsname_r"]).apply(null, arguments)
        }
        ;
        var __IO_putc = Module["__IO_putc"] = function() {
            return (__IO_putc = Module["__IO_putc"] = Module["asm"]["_IO_putc"]).apply(null, arguments)
        }
        ;
        var _putc_unlocked = Module["_putc_unlocked"] = function() {
            return (_putc_unlocked = Module["_putc_unlocked"] = Module["asm"]["putc_unlocked"]).apply(null, arguments)
        }
        ;
        var _fputc_unlocked = Module["_fputc_unlocked"] = function() {
            return (_fputc_unlocked = Module["_fputc_unlocked"] = Module["asm"]["fputc_unlocked"]).apply(null, arguments)
        }
        ;
        var __IO_putc_unlocked = Module["__IO_putc_unlocked"] = function() {
            return (__IO_putc_unlocked = Module["__IO_putc_unlocked"] = Module["asm"]["_IO_putc_unlocked"]).apply(null, arguments)
        }
        ;
        var _putchar = Module["_putchar"] = function() {
            return (_putchar = Module["_putchar"] = Module["asm"]["putchar"]).apply(null, arguments)
        }
        ;
        var _putchar_unlocked = Module["_putchar_unlocked"] = function() {
            return (_putchar_unlocked = Module["_putchar_unlocked"] = Module["asm"]["putchar_unlocked"]).apply(null, arguments)
        }
        ;
        var _putenv = Module["_putenv"] = function() {
            return (_putenv = Module["_putenv"] = Module["asm"]["putenv"]).apply(null, arguments)
        }
        ;
        var _putw = Module["_putw"] = function() {
            return (_putw = Module["_putw"] = Module["asm"]["putw"]).apply(null, arguments)
        }
        ;
        var _putwc = Module["_putwc"] = function() {
            return (_putwc = Module["_putwc"] = Module["asm"]["putwc"]).apply(null, arguments)
        }
        ;
        var _putwchar = Module["_putwchar"] = function() {
            return (_putwchar = Module["_putwchar"] = Module["asm"]["putwchar"]).apply(null, arguments)
        }
        ;
        var _putwchar_unlocked = Module["_putwchar_unlocked"] = function() {
            return (_putwchar_unlocked = Module["_putwchar_unlocked"] = Module["asm"]["putwchar_unlocked"]).apply(null, arguments)
        }
        ;
        var _pwrite64 = Module["_pwrite64"] = function() {
            return (_pwrite64 = Module["_pwrite64"] = Module["asm"]["pwrite64"]).apply(null, arguments)
        }
        ;
        var _pwritev = Module["_pwritev"] = function() {
            return (_pwritev = Module["_pwritev"] = Module["asm"]["pwritev"]).apply(null, arguments)
        }
        ;
        var _pwritev64 = Module["_pwritev64"] = function() {
            return (_pwritev64 = Module["_pwritev64"] = Module["asm"]["pwritev64"]).apply(null, arguments)
        }
        ;
        var _srand = Module["_srand"] = function() {
            return (_srand = Module["_srand"] = Module["asm"]["srand"]).apply(null, arguments)
        }
        ;
        var _rand = Module["_rand"] = function() {
            return (_rand = Module["_rand"] = Module["asm"]["rand"]).apply(null, arguments)
        }
        ;
        var _rand_r = Module["_rand_r"] = function() {
            return (_rand_r = Module["_rand_r"] = Module["asm"]["rand_r"]).apply(null, arguments)
        }
        ;
        var _srandom = Module["_srandom"] = function() {
            return (_srandom = Module["_srandom"] = Module["asm"]["srandom"]).apply(null, arguments)
        }
        ;
        var _initstate = Module["_initstate"] = function() {
            return (_initstate = Module["_initstate"] = Module["asm"]["initstate"]).apply(null, arguments)
        }
        ;
        var _setstate = Module["_setstate"] = function() {
            return (_setstate = Module["_setstate"] = Module["asm"]["setstate"]).apply(null, arguments)
        }
        ;
        var _random = Module["_random"] = function() {
            return (_random = Module["_random"] = Module["asm"]["random"]).apply(null, arguments)
        }
        ;
        var _readdir64 = Module["_readdir64"] = function() {
            return (_readdir64 = Module["_readdir64"] = Module["asm"]["readdir64"]).apply(null, arguments)
        }
        ;
        var _readdir_r = Module["_readdir_r"] = function() {
            return (_readdir_r = Module["_readdir_r"] = Module["asm"]["readdir_r"]).apply(null, arguments)
        }
        ;
        var _readdir64_r = Module["_readdir64_r"] = function() {
            return (_readdir64_r = Module["_readdir64_r"] = Module["asm"]["readdir64_r"]).apply(null, arguments)
        }
        ;
        var _readlinkat = Module["_readlinkat"] = function() {
            return (_readlinkat = Module["_readlinkat"] = Module["asm"]["readlinkat"]).apply(null, arguments)
        }
        ;
        var _recvmmsg = Module["_recvmmsg"] = function() {
            return (_recvmmsg = Module["_recvmmsg"] = Module["asm"]["recvmmsg"]).apply(null, arguments)
        }
        ;
        var _regcomp = Module["_regcomp"] = function() {
            return (_regcomp = Module["_regcomp"] = Module["asm"]["regcomp"]).apply(null, arguments)
        }
        ;
        var _regfree = Module["_regfree"] = function() {
            return (_regfree = Module["_regfree"] = Module["asm"]["regfree"]).apply(null, arguments)
        }
        ;
        var _regerror = Module["_regerror"] = function() {
            return (_regerror = Module["_regerror"] = Module["asm"]["regerror"]).apply(null, arguments)
        }
        ;
        var _regexec = Module["_regexec"] = function() {
            return (_regexec = Module["_regexec"] = Module["asm"]["regexec"]).apply(null, arguments)
        }
        ;
        var _remainder = Module["_remainder"] = function() {
            return (_remainder = Module["_remainder"] = Module["asm"]["remainder"]).apply(null, arguments)
        }
        ;
        var _remquo = Module["_remquo"] = function() {
            return (_remquo = Module["_remquo"] = Module["asm"]["remquo"]).apply(null, arguments)
        }
        ;
        var _drem = Module["_drem"] = function() {
            return (_drem = Module["_drem"] = Module["asm"]["drem"]).apply(null, arguments)
        }
        ;
        var _remainderf = Module["_remainderf"] = function() {
            return (_remainderf = Module["_remainderf"] = Module["asm"]["remainderf"]).apply(null, arguments)
        }
        ;
        var _remquof = Module["_remquof"] = function() {
            return (_remquof = Module["_remquof"] = Module["asm"]["remquof"]).apply(null, arguments)
        }
        ;
        var _dremf = Module["_dremf"] = function() {
            return (_dremf = Module["_dremf"] = Module["asm"]["dremf"]).apply(null, arguments)
        }
        ;
        var _remainderl = Module["_remainderl"] = function() {
            return (_remainderl = Module["_remainderl"] = Module["asm"]["remainderl"]).apply(null, arguments)
        }
        ;
        var _remquol = Module["_remquol"] = function() {
            return (_remquol = Module["_remquol"] = Module["asm"]["remquol"]).apply(null, arguments)
        }
        ;
        var _remove = Module["_remove"] = function() {
            return (_remove = Module["_remove"] = Module["asm"]["remove"]).apply(null, arguments)
        }
        ;
        var _renameat = Module["_renameat"] = function() {
            return (_renameat = Module["_renameat"] = Module["asm"]["renameat"]).apply(null, arguments)
        }
        ;
        var _res_init = Module["_res_init"] = function() {
            return (_res_init = Module["_res_init"] = Module["asm"]["res_init"]).apply(null, arguments)
        }
        ;
        var _res_mkquery = Module["_res_mkquery"] = function() {
            return (_res_mkquery = Module["_res_mkquery"] = Module["asm"]["res_mkquery"]).apply(null, arguments)
        }
        ;
        var ___res_msend = Module["___res_msend"] = function() {
            return (___res_msend = Module["___res_msend"] = Module["asm"]["__res_msend"]).apply(null, arguments)
        }
        ;
        var _res_send = Module["_res_send"] = function() {
            return (_res_send = Module["_res_send"] = Module["asm"]["res_send"]).apply(null, arguments)
        }
        ;
        var ___res_state = Module["___res_state"] = function() {
            return (___res_state = Module["___res_state"] = Module["asm"]["__res_state"]).apply(null, arguments)
        }
        ;
        var _rindex = Module["_rindex"] = function() {
            return (_rindex = Module["_rindex"] = Module["asm"]["rindex"]).apply(null, arguments)
        }
        ;
        var _scalb = Module["_scalb"] = function() {
            return (_scalb = Module["_scalb"] = Module["asm"]["scalb"]).apply(null, arguments)
        }
        ;
        var _scalbf = Module["_scalbf"] = function() {
            return (_scalbf = Module["_scalbf"] = Module["asm"]["scalbf"]).apply(null, arguments)
        }
        ;
        var _scalbln = Module["_scalbln"] = function() {
            return (_scalbln = Module["_scalbln"] = Module["asm"]["scalbln"]).apply(null, arguments)
        }
        ;
        var _scalblnf = Module["_scalblnf"] = function() {
            return (_scalblnf = Module["_scalblnf"] = Module["asm"]["scalblnf"]).apply(null, arguments)
        }
        ;
        var _scalblnl = Module["_scalblnl"] = function() {
            return (_scalblnl = Module["_scalblnl"] = Module["asm"]["scalblnl"]).apply(null, arguments)
        }
        ;
        var _scandir = Module["_scandir"] = function() {
            return (_scandir = Module["_scandir"] = Module["asm"]["scandir"]).apply(null, arguments)
        }
        ;
        var _scandir64 = Module["_scandir64"] = function() {
            return (_scandir64 = Module["_scandir64"] = Module["asm"]["scandir64"]).apply(null, arguments)
        }
        ;
        var _scanf = Module["_scanf"] = function() {
            return (_scanf = Module["_scanf"] = Module["asm"]["scanf"]).apply(null, arguments)
        }
        ;
        var _vscanf = Module["_vscanf"] = function() {
            return (_vscanf = Module["_vscanf"] = Module["asm"]["vscanf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_scanf = Module["___isoc99_scanf"] = function() {
            return (___isoc99_scanf = Module["___isoc99_scanf"] = Module["asm"]["__isoc99_scanf"]).apply(null, arguments)
        }
        ;
        var _seed48 = Module["_seed48"] = function() {
            return (_seed48 = Module["_seed48"] = Module["asm"]["seed48"]).apply(null, arguments)
        }
        ;
        var _seekdir = Module["_seekdir"] = function() {
            return (_seekdir = Module["_seekdir"] = Module["asm"]["seekdir"]).apply(null, arguments)
        }
        ;
        var _sendmmsg = Module["_sendmmsg"] = function() {
            return (_sendmmsg = Module["_sendmmsg"] = Module["asm"]["sendmmsg"]).apply(null, arguments)
        }
        ;
        var _endservent = Module["_endservent"] = function() {
            return (_endservent = Module["_endservent"] = Module["asm"]["endservent"]).apply(null, arguments)
        }
        ;
        var _setservent = Module["_setservent"] = function() {
            return (_setservent = Module["_setservent"] = Module["asm"]["setservent"]).apply(null, arguments)
        }
        ;
        var _getservent = Module["_getservent"] = function() {
            return (_getservent = Module["_getservent"] = Module["asm"]["getservent"]).apply(null, arguments)
        }
        ;
        var _setbuffer = Module["_setbuffer"] = function() {
            return (_setbuffer = Module["_setbuffer"] = Module["asm"]["setbuffer"]).apply(null, arguments)
        }
        ;
        var _setdomainname = Module["_setdomainname"] = function() {
            return (_setdomainname = Module["_setdomainname"] = Module["asm"]["setdomainname"]).apply(null, arguments)
        }
        ;
        var _setlinebuf = Module["_setlinebuf"] = function() {
            return (_setlinebuf = Module["_setlinebuf"] = Module["asm"]["setlinebuf"]).apply(null, arguments)
        }
        ;
        var _setrlimit64 = Module["_setrlimit64"] = function() {
            return (_setrlimit64 = Module["_setrlimit64"] = Module["asm"]["setrlimit64"]).apply(null, arguments)
        }
        ;
        var _shm_open = Module["_shm_open"] = function() {
            return (_shm_open = Module["_shm_open"] = Module["asm"]["shm_open"]).apply(null, arguments)
        }
        ;
        var _shm_unlink = Module["_shm_unlink"] = function() {
            return (_shm_unlink = Module["_shm_unlink"] = Module["asm"]["shm_unlink"]).apply(null, arguments)
        }
        ;
        var _sigaction = Module["_sigaction"] = function() {
            return (_sigaction = Module["_sigaction"] = Module["asm"]["sigaction"]).apply(null, arguments)
        }
        ;
        var _bsd_signal = Module["_bsd_signal"] = function() {
            return (_bsd_signal = Module["_bsd_signal"] = Module["asm"]["bsd_signal"]).apply(null, arguments)
        }
        ;
        var ___sysv_signal = Module["___sysv_signal"] = function() {
            return (___sysv_signal = Module["___sysv_signal"] = Module["asm"]["__sysv_signal"]).apply(null, arguments)
        }
        ;
        var _significand = Module["_significand"] = function() {
            return (_significand = Module["_significand"] = Module["asm"]["significand"]).apply(null, arguments)
        }
        ;
        var _significandf = Module["_significandf"] = function() {
            return (_significandf = Module["_significandf"] = Module["asm"]["significandf"]).apply(null, arguments)
        }
        ;
        var _sigprocmask = Module["_sigprocmask"] = function() {
            return (_sigprocmask = Module["_sigprocmask"] = Module["asm"]["sigprocmask"]).apply(null, arguments)
        }
        ;
        var _sincos = Module["_sincos"] = function() {
            return (_sincos = Module["_sincos"] = Module["asm"]["sincos"]).apply(null, arguments)
        }
        ;
        var _sincosf = Module["_sincosf"] = function() {
            return (_sincosf = Module["_sincosf"] = Module["asm"]["sincosf"]).apply(null, arguments)
        }
        ;
        var _sincosl = Module["_sincosl"] = function() {
            return (_sincosl = Module["_sincosl"] = Module["asm"]["sincosl"]).apply(null, arguments)
        }
        ;
        var _sinhl = Module["_sinhl"] = function() {
            return (_sinhl = Module["_sinhl"] = Module["asm"]["sinhl"]).apply(null, arguments)
        }
        ;
        var _sinl = Module["_sinl"] = function() {
            return (_sinl = Module["_sinl"] = Module["asm"]["sinl"]).apply(null, arguments)
        }
        ;
        var _sleep = Module["_sleep"] = function() {
            return (_sleep = Module["_sleep"] = Module["asm"]["sleep"]).apply(null, arguments)
        }
        ;
        var _sockatmark = Module["_sockatmark"] = function() {
            return (_sockatmark = Module["_sockatmark"] = Module["asm"]["sockatmark"]).apply(null, arguments)
        }
        ;
        var _vsprintf = Module["_vsprintf"] = function() {
            return (_vsprintf = Module["_vsprintf"] = Module["asm"]["vsprintf"]).apply(null, arguments)
        }
        ;
        var _vsiprintf = Module["_vsiprintf"] = function() {
            return (_vsiprintf = Module["_vsiprintf"] = Module["asm"]["vsiprintf"]).apply(null, arguments)
        }
        ;
        var ___small_sprintf = Module["___small_sprintf"] = function() {
            return (___small_sprintf = Module["___small_sprintf"] = Module["asm"]["__small_sprintf"]).apply(null, arguments)
        }
        ;
        var ___small_vsprintf = Module["___small_vsprintf"] = function() {
            return (___small_vsprintf = Module["___small_vsprintf"] = Module["asm"]["__small_vsprintf"]).apply(null, arguments)
        }
        ;
        var _srand48 = Module["_srand48"] = function() {
            return (_srand48 = Module["_srand48"] = Module["asm"]["srand48"]).apply(null, arguments)
        }
        ;
        var _vsscanf = Module["_vsscanf"] = function() {
            return (_vsscanf = Module["_vsscanf"] = Module["asm"]["vsscanf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_sscanf = Module["___isoc99_sscanf"] = function() {
            return (___isoc99_sscanf = Module["___isoc99_sscanf"] = Module["asm"]["__isoc99_sscanf"]).apply(null, arguments)
        }
        ;
        var _stat64 = Module["_stat64"] = function() {
            return (_stat64 = Module["_stat64"] = Module["asm"]["stat64"]).apply(null, arguments)
        }
        ;
        var _statfs = Module["_statfs"] = function() {
            return (_statfs = Module["_statfs"] = Module["asm"]["statfs"]).apply(null, arguments)
        }
        ;
        var _fstatfs = Module["_fstatfs"] = function() {
            return (_fstatfs = Module["_fstatfs"] = Module["asm"]["fstatfs"]).apply(null, arguments)
        }
        ;
        var _statvfs64 = Module["_statvfs64"] = function() {
            return (_statvfs64 = Module["_statvfs64"] = Module["asm"]["statvfs64"]).apply(null, arguments)
        }
        ;
        var _statfs64 = Module["_statfs64"] = function() {
            return (_statfs64 = Module["_statfs64"] = Module["asm"]["statfs64"]).apply(null, arguments)
        }
        ;
        var _fstatvfs64 = Module["_fstatvfs64"] = function() {
            return (_fstatvfs64 = Module["_fstatvfs64"] = Module["asm"]["fstatvfs64"]).apply(null, arguments)
        }
        ;
        var _fstatfs64 = Module["_fstatfs64"] = function() {
            return (_fstatfs64 = Module["_fstatfs64"] = Module["asm"]["fstatfs64"]).apply(null, arguments)
        }
        ;
        var _stpcpy = Module["_stpcpy"] = function() {
            return (_stpcpy = Module["_stpcpy"] = Module["asm"]["stpcpy"]).apply(null, arguments)
        }
        ;
        var _stpncpy = Module["_stpncpy"] = function() {
            return (_stpncpy = Module["_stpncpy"] = Module["asm"]["stpncpy"]).apply(null, arguments)
        }
        ;
        var ___strcasecmp_l = Module["___strcasecmp_l"] = function() {
            return (___strcasecmp_l = Module["___strcasecmp_l"] = Module["asm"]["__strcasecmp_l"]).apply(null, arguments)
        }
        ;
        var _strcasecmp_l = Module["_strcasecmp_l"] = function() {
            return (_strcasecmp_l = Module["_strcasecmp_l"] = Module["asm"]["strcasecmp_l"]).apply(null, arguments)
        }
        ;
        var _strcasestr = Module["_strcasestr"] = function() {
            return (_strcasestr = Module["_strcasestr"] = Module["asm"]["strcasestr"]).apply(null, arguments)
        }
        ;
        var _strncasecmp = Module["_strncasecmp"] = function() {
            return (_strncasecmp = Module["_strncasecmp"] = Module["asm"]["strncasecmp"]).apply(null, arguments)
        }
        ;
        var _strchrnul = Module["_strchrnul"] = function() {
            return (_strchrnul = Module["_strchrnul"] = Module["asm"]["strchrnul"]).apply(null, arguments)
        }
        ;
        var ___strcoll_l = Module["___strcoll_l"] = function() {
            return (___strcoll_l = Module["___strcoll_l"] = Module["asm"]["__strcoll_l"]).apply(null, arguments)
        }
        ;
        var _strcoll_l = Module["_strcoll_l"] = function() {
            return (_strcoll_l = Module["_strcoll_l"] = Module["asm"]["strcoll_l"]).apply(null, arguments)
        }
        ;
        var ___strerror_l = Module["___strerror_l"] = function() {
            return (___strerror_l = Module["___strerror_l"] = Module["asm"]["__strerror_l"]).apply(null, arguments)
        }
        ;
        var _strerror_l = Module["_strerror_l"] = function() {
            return (_strerror_l = Module["_strerror_l"] = Module["asm"]["strerror_l"]).apply(null, arguments)
        }
        ;
        var _strerror_r = Module["_strerror_r"] = function() {
            return (_strerror_r = Module["_strerror_r"] = Module["asm"]["strerror_r"]).apply(null, arguments)
        }
        ;
        var ___xpg_strerror_r = Module["___xpg_strerror_r"] = function() {
            return (___xpg_strerror_r = Module["___xpg_strerror_r"] = Module["asm"]["__xpg_strerror_r"]).apply(null, arguments)
        }
        ;
        var _strfmon_l = Module["_strfmon_l"] = function() {
            return (_strfmon_l = Module["_strfmon_l"] = Module["asm"]["strfmon_l"]).apply(null, arguments)
        }
        ;
        var _strfmon = Module["_strfmon"] = function() {
            return (_strfmon = Module["_strfmon"] = Module["asm"]["strfmon"]).apply(null, arguments)
        }
        ;
        var _strlcat = Module["_strlcat"] = function() {
            return (_strlcat = Module["_strlcat"] = Module["asm"]["strlcat"]).apply(null, arguments)
        }
        ;
        var _strlcpy = Module["_strlcpy"] = function() {
            return (_strlcpy = Module["_strlcpy"] = Module["asm"]["strlcpy"]).apply(null, arguments)
        }
        ;
        var _strlwr = Module["_strlwr"] = function() {
            return (_strlwr = Module["_strlwr"] = Module["asm"]["strlwr"]).apply(null, arguments)
        }
        ;
        var ___strncasecmp_l = Module["___strncasecmp_l"] = function() {
            return (___strncasecmp_l = Module["___strncasecmp_l"] = Module["asm"]["__strncasecmp_l"]).apply(null, arguments)
        }
        ;
        var _strncasecmp_l = Module["_strncasecmp_l"] = function() {
            return (_strncasecmp_l = Module["_strncasecmp_l"] = Module["asm"]["strncasecmp_l"]).apply(null, arguments)
        }
        ;
        var _strncat = Module["_strncat"] = function() {
            return (_strncat = Module["_strncat"] = Module["asm"]["strncat"]).apply(null, arguments)
        }
        ;
        var _strndup = Module["_strndup"] = function() {
            return (_strndup = Module["_strndup"] = Module["asm"]["strndup"]).apply(null, arguments)
        }
        ;
        var _strpbrk = Module["_strpbrk"] = function() {
            return (_strpbrk = Module["_strpbrk"] = Module["asm"]["strpbrk"]).apply(null, arguments)
        }
        ;
        var _strsep = Module["_strsep"] = function() {
            return (_strsep = Module["_strsep"] = Module["asm"]["strsep"]).apply(null, arguments)
        }
        ;
        var _strtof = Module["_strtof"] = function() {
            return (_strtof = Module["_strtof"] = Module["asm"]["strtof"]).apply(null, arguments)
        }
        ;
        var _strtold = Module["_strtold"] = function() {
            return (_strtold = Module["_strtold"] = Module["asm"]["strtold"]).apply(null, arguments)
        }
        ;
        var _strtof_l = Module["_strtof_l"] = function() {
            return (_strtof_l = Module["_strtof_l"] = Module["asm"]["strtof_l"]).apply(null, arguments)
        }
        ;
        var _strtod_l = Module["_strtod_l"] = function() {
            return (_strtod_l = Module["_strtod_l"] = Module["asm"]["strtod_l"]).apply(null, arguments)
        }
        ;
        var _strtold_l = Module["_strtold_l"] = function() {
            return (_strtold_l = Module["_strtold_l"] = Module["asm"]["strtold_l"]).apply(null, arguments)
        }
        ;
        var _strtok = Module["_strtok"] = function() {
            return (_strtok = Module["_strtok"] = Module["asm"]["strtok"]).apply(null, arguments)
        }
        ;
        var _strtok_r = Module["_strtok_r"] = function() {
            return (_strtok_r = Module["_strtok_r"] = Module["asm"]["strtok_r"]).apply(null, arguments)
        }
        ;
        var _strtoll = Module["_strtoll"] = function() {
            return (_strtoll = Module["_strtoll"] = Module["asm"]["strtoll"]).apply(null, arguments)
        }
        ;
        var _strtoimax = Module["_strtoimax"] = function() {
            return (_strtoimax = Module["_strtoimax"] = Module["asm"]["strtoimax"]).apply(null, arguments)
        }
        ;
        var _strtoumax = Module["_strtoumax"] = function() {
            return (_strtoumax = Module["_strtoumax"] = Module["asm"]["strtoumax"]).apply(null, arguments)
        }
        ;
        var ___strtol_internal = Module["___strtol_internal"] = function() {
            return (___strtol_internal = Module["___strtol_internal"] = Module["asm"]["__strtol_internal"]).apply(null, arguments)
        }
        ;
        var ___strtoul_internal = Module["___strtoul_internal"] = function() {
            return (___strtoul_internal = Module["___strtoul_internal"] = Module["asm"]["__strtoul_internal"]).apply(null, arguments)
        }
        ;
        var ___strtoll_internal = Module["___strtoll_internal"] = function() {
            return (___strtoll_internal = Module["___strtoll_internal"] = Module["asm"]["__strtoll_internal"]).apply(null, arguments)
        }
        ;
        var ___strtoull_internal = Module["___strtoull_internal"] = function() {
            return (___strtoull_internal = Module["___strtoull_internal"] = Module["asm"]["__strtoull_internal"]).apply(null, arguments)
        }
        ;
        var ___strtoimax_internal = Module["___strtoimax_internal"] = function() {
            return (___strtoimax_internal = Module["___strtoimax_internal"] = Module["asm"]["__strtoimax_internal"]).apply(null, arguments)
        }
        ;
        var ___strtoumax_internal = Module["___strtoumax_internal"] = function() {
            return (___strtoumax_internal = Module["___strtoumax_internal"] = Module["asm"]["__strtoumax_internal"]).apply(null, arguments)
        }
        ;
        var _strtoull_l = Module["_strtoull_l"] = function() {
            return (_strtoull_l = Module["_strtoull_l"] = Module["asm"]["strtoull_l"]).apply(null, arguments)
        }
        ;
        var _strtoll_l = Module["_strtoll_l"] = function() {
            return (_strtoll_l = Module["_strtoll_l"] = Module["asm"]["strtoll_l"]).apply(null, arguments)
        }
        ;
        var _strtoul_l = Module["_strtoul_l"] = function() {
            return (_strtoul_l = Module["_strtoul_l"] = Module["asm"]["strtoul_l"]).apply(null, arguments)
        }
        ;
        var _strtol_l = Module["_strtol_l"] = function() {
            return (_strtol_l = Module["_strtol_l"] = Module["asm"]["strtol_l"]).apply(null, arguments)
        }
        ;
        var _strupr = Module["_strupr"] = function() {
            return (_strupr = Module["_strupr"] = Module["asm"]["strupr"]).apply(null, arguments)
        }
        ;
        var _strverscmp = Module["_strverscmp"] = function() {
            return (_strverscmp = Module["_strverscmp"] = Module["asm"]["strverscmp"]).apply(null, arguments)
        }
        ;
        var ___strxfrm_l = Module["___strxfrm_l"] = function() {
            return (___strxfrm_l = Module["___strxfrm_l"] = Module["asm"]["__strxfrm_l"]).apply(null, arguments)
        }
        ;
        var _strxfrm = Module["_strxfrm"] = function() {
            return (_strxfrm = Module["_strxfrm"] = Module["asm"]["strxfrm"]).apply(null, arguments)
        }
        ;
        var _strxfrm_l = Module["_strxfrm_l"] = function() {
            return (_strxfrm_l = Module["_strxfrm_l"] = Module["asm"]["strxfrm_l"]).apply(null, arguments)
        }
        ;
        var _swab = Module["_swab"] = function() {
            return (_swab = Module["_swab"] = Module["asm"]["swab"]).apply(null, arguments)
        }
        ;
        var _swprintf = Module["_swprintf"] = function() {
            return (_swprintf = Module["_swprintf"] = Module["asm"]["swprintf"]).apply(null, arguments)
        }
        ;
        var _vswprintf = Module["_vswprintf"] = function() {
            return (_vswprintf = Module["_vswprintf"] = Module["asm"]["vswprintf"]).apply(null, arguments)
        }
        ;
        var _swscanf = Module["_swscanf"] = function() {
            return (_swscanf = Module["_swscanf"] = Module["asm"]["swscanf"]).apply(null, arguments)
        }
        ;
        var _vswscanf = Module["_vswscanf"] = function() {
            return (_vswscanf = Module["_vswscanf"] = Module["asm"]["vswscanf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_swscanf = Module["___isoc99_swscanf"] = function() {
            return (___isoc99_swscanf = Module["___isoc99_swscanf"] = Module["asm"]["__isoc99_swscanf"]).apply(null, arguments)
        }
        ;
        var _symlinkat = Module["_symlinkat"] = function() {
            return (_symlinkat = Module["_symlinkat"] = Module["asm"]["symlinkat"]).apply(null, arguments)
        }
        ;
        var _setlogmask = Module["_setlogmask"] = function() {
            return (_setlogmask = Module["_setlogmask"] = Module["asm"]["setlogmask"]).apply(null, arguments)
        }
        ;
        var _closelog = Module["_closelog"] = function() {
            return (_closelog = Module["_closelog"] = Module["asm"]["closelog"]).apply(null, arguments)
        }
        ;
        var _openlog = Module["_openlog"] = function() {
            return (_openlog = Module["_openlog"] = Module["asm"]["openlog"]).apply(null, arguments)
        }
        ;
        var _syslog = Module["_syslog"] = function() {
            return (_syslog = Module["_syslog"] = Module["asm"]["syslog"]).apply(null, arguments)
        }
        ;
        var _vsyslog = Module["_vsyslog"] = function() {
            return (_vsyslog = Module["_vsyslog"] = Module["asm"]["vsyslog"]).apply(null, arguments)
        }
        ;
        var _tanhf = Module["_tanhf"] = function() {
            return (_tanhf = Module["_tanhf"] = Module["asm"]["tanhf"]).apply(null, arguments)
        }
        ;
        var _tanhl = Module["_tanhl"] = function() {
            return (_tanhl = Module["_tanhl"] = Module["asm"]["tanhl"]).apply(null, arguments)
        }
        ;
        var _tanl = Module["_tanl"] = function() {
            return (_tanl = Module["_tanl"] = Module["asm"]["tanl"]).apply(null, arguments)
        }
        ;
        var _tcdrain = Module["_tcdrain"] = function() {
            return (_tcdrain = Module["_tcdrain"] = Module["asm"]["tcdrain"]).apply(null, arguments)
        }
        ;
        var _tcflow = Module["_tcflow"] = function() {
            return (_tcflow = Module["_tcflow"] = Module["asm"]["tcflow"]).apply(null, arguments)
        }
        ;
        var _tcflush = Module["_tcflush"] = function() {
            return (_tcflush = Module["_tcflush"] = Module["asm"]["tcflush"]).apply(null, arguments)
        }
        ;
        var _tcgetattr = Module["_tcgetattr"] = function() {
            return (_tcgetattr = Module["_tcgetattr"] = Module["asm"]["tcgetattr"]).apply(null, arguments)
        }
        ;
        var _tcgetsid = Module["_tcgetsid"] = function() {
            return (_tcgetsid = Module["_tcgetsid"] = Module["asm"]["tcgetsid"]).apply(null, arguments)
        }
        ;
        var _tcgetwinsize = Module["_tcgetwinsize"] = function() {
            return (_tcgetwinsize = Module["_tcgetwinsize"] = Module["asm"]["tcgetwinsize"]).apply(null, arguments)
        }
        ;
        var _tcsendbreak = Module["_tcsendbreak"] = function() {
            return (_tcsendbreak = Module["_tcsendbreak"] = Module["asm"]["tcsendbreak"]).apply(null, arguments)
        }
        ;
        var _tcsetwinsize = Module["_tcsetwinsize"] = function() {
            return (_tcsetwinsize = Module["_tcsetwinsize"] = Module["asm"]["tcsetwinsize"]).apply(null, arguments)
        }
        ;
        var _tdelete = Module["_tdelete"] = function() {
            return (_tdelete = Module["_tdelete"] = Module["asm"]["tdelete"]).apply(null, arguments)
        }
        ;
        var _tdestroy = Module["_tdestroy"] = function() {
            return (_tdestroy = Module["_tdestroy"] = Module["asm"]["tdestroy"]).apply(null, arguments)
        }
        ;
        var _telldir = Module["_telldir"] = function() {
            return (_telldir = Module["_telldir"] = Module["asm"]["telldir"]).apply(null, arguments)
        }
        ;
        var _tempnam = Module["_tempnam"] = function() {
            return (_tempnam = Module["_tempnam"] = Module["asm"]["tempnam"]).apply(null, arguments)
        }
        ;
        var _ngettext = Module["_ngettext"] = function() {
            return (_ngettext = Module["_ngettext"] = Module["asm"]["ngettext"]).apply(null, arguments)
        }
        ;
        var _tfind = Module["_tfind"] = function() {
            return (_tfind = Module["_tfind"] = Module["asm"]["tfind"]).apply(null, arguments)
        }
        ;
        var _tgamma = Module["_tgamma"] = function() {
            return (_tgamma = Module["_tgamma"] = Module["asm"]["tgamma"]).apply(null, arguments)
        }
        ;
        var _tgammaf = Module["_tgammaf"] = function() {
            return (_tgammaf = Module["_tgammaf"] = Module["asm"]["tgammaf"]).apply(null, arguments)
        }
        ;
        var _tgammal = Module["_tgammal"] = function() {
            return (_tgammal = Module["_tgammal"] = Module["asm"]["tgammal"]).apply(null, arguments)
        }
        ;
        var _thrd_create = Module["_thrd_create"] = function() {
            return (_thrd_create = Module["_thrd_create"] = Module["asm"]["thrd_create"]).apply(null, arguments)
        }
        ;
        var _thrd_exit = Module["_thrd_exit"] = function() {
            return (_thrd_exit = Module["_thrd_exit"] = Module["asm"]["thrd_exit"]).apply(null, arguments)
        }
        ;
        var _thrd_join = Module["_thrd_join"] = function() {
            return (_thrd_join = Module["_thrd_join"] = Module["asm"]["thrd_join"]).apply(null, arguments)
        }
        ;
        var _thrd_sleep = Module["_thrd_sleep"] = function() {
            return (_thrd_sleep = Module["_thrd_sleep"] = Module["asm"]["thrd_sleep"]).apply(null, arguments)
        }
        ;
        var _thrd_yield = Module["_thrd_yield"] = function() {
            return (_thrd_yield = Module["_thrd_yield"] = Module["asm"]["thrd_yield"]).apply(null, arguments)
        }
        ;
        var _emscripten_set_thread_name = Module["_emscripten_set_thread_name"] = function() {
            return (_emscripten_set_thread_name = Module["_emscripten_set_thread_name"] = Module["asm"]["emscripten_set_thread_name"]).apply(null, arguments)
        }
        ;
        var _timespec_get = Module["_timespec_get"] = function() {
            return (_timespec_get = Module["_timespec_get"] = Module["asm"]["timespec_get"]).apply(null, arguments)
        }
        ;
        var _tmpfile = Module["_tmpfile"] = function() {
            return (_tmpfile = Module["_tmpfile"] = Module["asm"]["tmpfile"]).apply(null, arguments)
        }
        ;
        var _tmpfile64 = Module["_tmpfile64"] = function() {
            return (_tmpfile64 = Module["_tmpfile64"] = Module["asm"]["tmpfile64"]).apply(null, arguments)
        }
        ;
        var _tmpnam = Module["_tmpnam"] = function() {
            return (_tmpnam = Module["_tmpnam"] = Module["asm"]["tmpnam"]).apply(null, arguments)
        }
        ;
        var _toascii = Module["_toascii"] = function() {
            return (_toascii = Module["_toascii"] = Module["asm"]["toascii"]).apply(null, arguments)
        }
        ;
        var ___tolower_l = Module["___tolower_l"] = function() {
            return (___tolower_l = Module["___tolower_l"] = Module["asm"]["__tolower_l"]).apply(null, arguments)
        }
        ;
        var _tolower_l = Module["_tolower_l"] = function() {
            return (_tolower_l = Module["_tolower_l"] = Module["asm"]["tolower_l"]).apply(null, arguments)
        }
        ;
        var ___toupper_l = Module["___toupper_l"] = function() {
            return (___toupper_l = Module["___toupper_l"] = Module["asm"]["__toupper_l"]).apply(null, arguments)
        }
        ;
        var _toupper_l = Module["_toupper_l"] = function() {
            return (_toupper_l = Module["_toupper_l"] = Module["asm"]["toupper_l"]).apply(null, arguments)
        }
        ;
        var ___towupper_l = Module["___towupper_l"] = function() {
            return (___towupper_l = Module["___towupper_l"] = Module["asm"]["__towupper_l"]).apply(null, arguments)
        }
        ;
        var ___towlower_l = Module["___towlower_l"] = function() {
            return (___towlower_l = Module["___towlower_l"] = Module["asm"]["__towlower_l"]).apply(null, arguments)
        }
        ;
        var _towupper_l = Module["_towupper_l"] = function() {
            return (_towupper_l = Module["_towupper_l"] = Module["asm"]["towupper_l"]).apply(null, arguments)
        }
        ;
        var _towlower_l = Module["_towlower_l"] = function() {
            return (_towlower_l = Module["_towlower_l"] = Module["asm"]["towlower_l"]).apply(null, arguments)
        }
        ;
        var _trunc = Module["_trunc"] = function() {
            return (_trunc = Module["_trunc"] = Module["asm"]["trunc"]).apply(null, arguments)
        }
        ;
        var _truncate64 = Module["_truncate64"] = function() {
            return (_truncate64 = Module["_truncate64"] = Module["asm"]["truncate64"]).apply(null, arguments)
        }
        ;
        var _truncf = Module["_truncf"] = function() {
            return (_truncf = Module["_truncf"] = Module["asm"]["truncf"]).apply(null, arguments)
        }
        ;
        var _truncl = Module["_truncl"] = function() {
            return (_truncl = Module["_truncl"] = Module["asm"]["truncl"]).apply(null, arguments)
        }
        ;
        var _tsearch = Module["_tsearch"] = function() {
            return (_tsearch = Module["_tsearch"] = Module["asm"]["tsearch"]).apply(null, arguments)
        }
        ;
        var _tss_create = Module["_tss_create"] = function() {
            return (_tss_create = Module["_tss_create"] = Module["asm"]["tss_create"]).apply(null, arguments)
        }
        ;
        var _tss_delete = Module["_tss_delete"] = function() {
            return (_tss_delete = Module["_tss_delete"] = Module["asm"]["tss_delete"]).apply(null, arguments)
        }
        ;
        var _tss_set = Module["_tss_set"] = function() {
            return (_tss_set = Module["_tss_set"] = Module["asm"]["tss_set"]).apply(null, arguments)
        }
        ;
        var _ttyname = Module["_ttyname"] = function() {
            return (_ttyname = Module["_ttyname"] = Module["asm"]["ttyname"]).apply(null, arguments)
        }
        ;
        var _twalk = Module["_twalk"] = function() {
            return (_twalk = Module["_twalk"] = Module["asm"]["twalk"]).apply(null, arguments)
        }
        ;
        var _ualarm = Module["_ualarm"] = function() {
            return (_ualarm = Module["_ualarm"] = Module["asm"]["ualarm"]).apply(null, arguments)
        }
        ;
        var _ungetwc = Module["_ungetwc"] = function() {
            return (_ungetwc = Module["_ungetwc"] = Module["asm"]["ungetwc"]).apply(null, arguments)
        }
        ;
        var ___uselocale = Module["___uselocale"] = function() {
            return (___uselocale = Module["___uselocale"] = Module["asm"]["__uselocale"]).apply(null, arguments)
        }
        ;
        var _uselocale = Module["_uselocale"] = function() {
            return (_uselocale = Module["_uselocale"] = Module["asm"]["uselocale"]).apply(null, arguments)
        }
        ;
        var _usleep = Module["_usleep"] = function() {
            return (_usleep = Module["_usleep"] = Module["asm"]["usleep"]).apply(null, arguments)
        }
        ;
        var _utime = Module["_utime"] = function() {
            return (_utime = Module["_utime"] = Module["asm"]["utime"]).apply(null, arguments)
        }
        ;
        var _versionsort = Module["_versionsort"] = function() {
            return (_versionsort = Module["_versionsort"] = Module["asm"]["versionsort"]).apply(null, arguments)
        }
        ;
        var _versionsort64 = Module["_versionsort64"] = function() {
            return (_versionsort64 = Module["_versionsort64"] = Module["asm"]["versionsort64"]).apply(null, arguments)
        }
        ;
        var ___vfprintf_internal = Module["___vfprintf_internal"] = function() {
            return (___vfprintf_internal = Module["___vfprintf_internal"] = Module["asm"]["__vfprintf_internal"]).apply(null, arguments)
        }
        ;
        var ___isoc99_vfscanf = Module["___isoc99_vfscanf"] = function() {
            return (___isoc99_vfscanf = Module["___isoc99_vfscanf"] = Module["asm"]["__isoc99_vfscanf"]).apply(null, arguments)
        }
        ;
        var _wcsnlen = Module["_wcsnlen"] = function() {
            return (_wcsnlen = Module["_wcsnlen"] = Module["asm"]["wcsnlen"]).apply(null, arguments)
        }
        ;
        var ___isoc99_vfwscanf = Module["___isoc99_vfwscanf"] = function() {
            return (___isoc99_vfwscanf = Module["___isoc99_vfwscanf"] = Module["asm"]["__isoc99_vfwscanf"]).apply(null, arguments)
        }
        ;
        var _vprintf = Module["_vprintf"] = function() {
            return (_vprintf = Module["_vprintf"] = Module["asm"]["vprintf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_vscanf = Module["___isoc99_vscanf"] = function() {
            return (___isoc99_vscanf = Module["___isoc99_vscanf"] = Module["asm"]["__isoc99_vscanf"]).apply(null, arguments)
        }
        ;
        var _vsniprintf = Module["_vsniprintf"] = function() {
            return (_vsniprintf = Module["_vsniprintf"] = Module["asm"]["vsniprintf"]).apply(null, arguments)
        }
        ;
        var ___small_vsnprintf = Module["___small_vsnprintf"] = function() {
            return (___small_vsnprintf = Module["___small_vsnprintf"] = Module["asm"]["__small_vsnprintf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_vsscanf = Module["___isoc99_vsscanf"] = function() {
            return (___isoc99_vsscanf = Module["___isoc99_vsscanf"] = Module["asm"]["__isoc99_vsscanf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_vswscanf = Module["___isoc99_vswscanf"] = function() {
            return (___isoc99_vswscanf = Module["___isoc99_vswscanf"] = Module["asm"]["__isoc99_vswscanf"]).apply(null, arguments)
        }
        ;
        var _vwprintf = Module["_vwprintf"] = function() {
            return (_vwprintf = Module["_vwprintf"] = Module["asm"]["vwprintf"]).apply(null, arguments)
        }
        ;
        var _vwscanf = Module["_vwscanf"] = function() {
            return (_vwscanf = Module["_vwscanf"] = Module["asm"]["vwscanf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_vwscanf = Module["___isoc99_vwscanf"] = function() {
            return (___isoc99_vwscanf = Module["___isoc99_vwscanf"] = Module["asm"]["__isoc99_vwscanf"]).apply(null, arguments)
        }
        ;
        var _wcpcpy = Module["_wcpcpy"] = function() {
            return (_wcpcpy = Module["_wcpcpy"] = Module["asm"]["wcpcpy"]).apply(null, arguments)
        }
        ;
        var _wcpncpy = Module["_wcpncpy"] = function() {
            return (_wcpncpy = Module["_wcpncpy"] = Module["asm"]["wcpncpy"]).apply(null, arguments)
        }
        ;
        var _wcscasecmp = Module["_wcscasecmp"] = function() {
            return (_wcscasecmp = Module["_wcscasecmp"] = Module["asm"]["wcscasecmp"]).apply(null, arguments)
        }
        ;
        var _wcsncasecmp = Module["_wcsncasecmp"] = function() {
            return (_wcsncasecmp = Module["_wcsncasecmp"] = Module["asm"]["wcsncasecmp"]).apply(null, arguments)
        }
        ;
        var _wcscasecmp_l = Module["_wcscasecmp_l"] = function() {
            return (_wcscasecmp_l = Module["_wcscasecmp_l"] = Module["asm"]["wcscasecmp_l"]).apply(null, arguments)
        }
        ;
        var ___wcscoll_l = Module["___wcscoll_l"] = function() {
            return (___wcscoll_l = Module["___wcscoll_l"] = Module["asm"]["__wcscoll_l"]).apply(null, arguments)
        }
        ;
        var _wcscoll_l = Module["_wcscoll_l"] = function() {
            return (_wcscoll_l = Module["_wcscoll_l"] = Module["asm"]["wcscoll_l"]).apply(null, arguments)
        }
        ;
        var _wcscspn = Module["_wcscspn"] = function() {
            return (_wcscspn = Module["_wcscspn"] = Module["asm"]["wcscspn"]).apply(null, arguments)
        }
        ;
        var _wcsdup = Module["_wcsdup"] = function() {
            return (_wcsdup = Module["_wcsdup"] = Module["asm"]["wcsdup"]).apply(null, arguments)
        }
        ;
        var _wmemcpy = Module["_wmemcpy"] = function() {
            return (_wmemcpy = Module["_wmemcpy"] = Module["asm"]["wmemcpy"]).apply(null, arguments)
        }
        ;
        var _wcsncasecmp_l = Module["_wcsncasecmp_l"] = function() {
            return (_wcsncasecmp_l = Module["_wcsncasecmp_l"] = Module["asm"]["wcsncasecmp_l"]).apply(null, arguments)
        }
        ;
        var _wmemset = Module["_wmemset"] = function() {
            return (_wmemset = Module["_wmemset"] = Module["asm"]["wmemset"]).apply(null, arguments)
        }
        ;
        var _wmemchr = Module["_wmemchr"] = function() {
            return (_wmemchr = Module["_wmemchr"] = Module["asm"]["wmemchr"]).apply(null, arguments)
        }
        ;
        var _wcsnrtombs = Module["_wcsnrtombs"] = function() {
            return (_wcsnrtombs = Module["_wcsnrtombs"] = Module["asm"]["wcsnrtombs"]).apply(null, arguments)
        }
        ;
        var _wcspbrk = Module["_wcspbrk"] = function() {
            return (_wcspbrk = Module["_wcspbrk"] = Module["asm"]["wcspbrk"]).apply(null, arguments)
        }
        ;
        var _wcsspn = Module["_wcsspn"] = function() {
            return (_wcsspn = Module["_wcsspn"] = Module["asm"]["wcsspn"]).apply(null, arguments)
        }
        ;
        var _wcsstr = Module["_wcsstr"] = function() {
            return (_wcsstr = Module["_wcsstr"] = Module["asm"]["wcsstr"]).apply(null, arguments)
        }
        ;
        var _wcstof = Module["_wcstof"] = function() {
            return (_wcstof = Module["_wcstof"] = Module["asm"]["wcstof"]).apply(null, arguments)
        }
        ;
        var _wcstod = Module["_wcstod"] = function() {
            return (_wcstod = Module["_wcstod"] = Module["asm"]["wcstod"]).apply(null, arguments)
        }
        ;
        var _wcstold = Module["_wcstold"] = function() {
            return (_wcstold = Module["_wcstold"] = Module["asm"]["wcstold"]).apply(null, arguments)
        }
        ;
        var _wcstoull = Module["_wcstoull"] = function() {
            return (_wcstoull = Module["_wcstoull"] = Module["asm"]["wcstoull"]).apply(null, arguments)
        }
        ;
        var _wcstoll = Module["_wcstoll"] = function() {
            return (_wcstoll = Module["_wcstoll"] = Module["asm"]["wcstoll"]).apply(null, arguments)
        }
        ;
        var _wcstoul = Module["_wcstoul"] = function() {
            return (_wcstoul = Module["_wcstoul"] = Module["asm"]["wcstoul"]).apply(null, arguments)
        }
        ;
        var _wcstoimax = Module["_wcstoimax"] = function() {
            return (_wcstoimax = Module["_wcstoimax"] = Module["asm"]["wcstoimax"]).apply(null, arguments)
        }
        ;
        var _wcstoumax = Module["_wcstoumax"] = function() {
            return (_wcstoumax = Module["_wcstoumax"] = Module["asm"]["wcstoumax"]).apply(null, arguments)
        }
        ;
        var _wcswcs = Module["_wcswcs"] = function() {
            return (_wcswcs = Module["_wcswcs"] = Module["asm"]["wcswcs"]).apply(null, arguments)
        }
        ;
        var _wcswidth = Module["_wcswidth"] = function() {
            return (_wcswidth = Module["_wcswidth"] = Module["asm"]["wcswidth"]).apply(null, arguments)
        }
        ;
        var _wcwidth = Module["_wcwidth"] = function() {
            return (_wcwidth = Module["_wcwidth"] = Module["asm"]["wcwidth"]).apply(null, arguments)
        }
        ;
        var ___wcsxfrm_l = Module["___wcsxfrm_l"] = function() {
            return (___wcsxfrm_l = Module["___wcsxfrm_l"] = Module["asm"]["__wcsxfrm_l"]).apply(null, arguments)
        }
        ;
        var _wcsxfrm_l = Module["_wcsxfrm_l"] = function() {
            return (_wcsxfrm_l = Module["_wcsxfrm_l"] = Module["asm"]["wcsxfrm_l"]).apply(null, arguments)
        }
        ;
        var _wctob = Module["_wctob"] = function() {
            return (_wctob = Module["_wctob"] = Module["asm"]["wctob"]).apply(null, arguments)
        }
        ;
        var _wctrans = Module["_wctrans"] = function() {
            return (_wctrans = Module["_wctrans"] = Module["asm"]["wctrans"]).apply(null, arguments)
        }
        ;
        var _towctrans = Module["_towctrans"] = function() {
            return (_towctrans = Module["_towctrans"] = Module["asm"]["towctrans"]).apply(null, arguments)
        }
        ;
        var ___wctrans_l = Module["___wctrans_l"] = function() {
            return (___wctrans_l = Module["___wctrans_l"] = Module["asm"]["__wctrans_l"]).apply(null, arguments)
        }
        ;
        var ___towctrans_l = Module["___towctrans_l"] = function() {
            return (___towctrans_l = Module["___towctrans_l"] = Module["asm"]["__towctrans_l"]).apply(null, arguments)
        }
        ;
        var _wctrans_l = Module["_wctrans_l"] = function() {
            return (_wctrans_l = Module["_wctrans_l"] = Module["asm"]["wctrans_l"]).apply(null, arguments)
        }
        ;
        var _towctrans_l = Module["_towctrans_l"] = function() {
            return (_towctrans_l = Module["_towctrans_l"] = Module["asm"]["towctrans_l"]).apply(null, arguments)
        }
        ;
        var _wmemmove = Module["_wmemmove"] = function() {
            return (_wmemmove = Module["_wmemmove"] = Module["asm"]["wmemmove"]).apply(null, arguments)
        }
        ;
        var _wprintf = Module["_wprintf"] = function() {
            return (_wprintf = Module["_wprintf"] = Module["asm"]["wprintf"]).apply(null, arguments)
        }
        ;
        var _wscanf = Module["_wscanf"] = function() {
            return (_wscanf = Module["_wscanf"] = Module["asm"]["wscanf"]).apply(null, arguments)
        }
        ;
        var ___isoc99_wscanf = Module["___isoc99_wscanf"] = function() {
            return (___isoc99_wscanf = Module["___isoc99_wscanf"] = Module["asm"]["__isoc99_wscanf"]).apply(null, arguments)
        }
        ;
        var _sbrk = Module["_sbrk"] = function() {
            return (_sbrk = Module["_sbrk"] = Module["asm"]["sbrk"]).apply(null, arguments)
        }
        ;
        var ___libc_realloc = Module["___libc_realloc"] = function() {
            return (___libc_realloc = Module["___libc_realloc"] = Module["asm"]["__libc_realloc"]).apply(null, arguments)
        }
        ;
        var _realloc_in_place = Module["_realloc_in_place"] = function() {
            return (_realloc_in_place = Module["_realloc_in_place"] = Module["asm"]["realloc_in_place"]).apply(null, arguments)
        }
        ;
        var _memalign = Module["_memalign"] = function() {
            return (_memalign = Module["_memalign"] = Module["asm"]["memalign"]).apply(null, arguments)
        }
        ;
        var _valloc = Module["_valloc"] = function() {
            return (_valloc = Module["_valloc"] = Module["asm"]["valloc"]).apply(null, arguments)
        }
        ;
        var _pvalloc = Module["_pvalloc"] = function() {
            return (_pvalloc = Module["_pvalloc"] = Module["asm"]["pvalloc"]).apply(null, arguments)
        }
        ;
        var _mallinfo = Module["_mallinfo"] = function() {
            return (_mallinfo = Module["_mallinfo"] = Module["asm"]["mallinfo"]).apply(null, arguments)
        }
        ;
        var _mallopt = Module["_mallopt"] = function() {
            return (_mallopt = Module["_mallopt"] = Module["asm"]["mallopt"]).apply(null, arguments)
        }
        ;
        var _malloc_trim = Module["_malloc_trim"] = function() {
            return (_malloc_trim = Module["_malloc_trim"] = Module["asm"]["malloc_trim"]).apply(null, arguments)
        }
        ;
        var _malloc_usable_size = Module["_malloc_usable_size"] = function() {
            return (_malloc_usable_size = Module["_malloc_usable_size"] = Module["asm"]["malloc_usable_size"]).apply(null, arguments)
        }
        ;
        var _malloc_footprint = Module["_malloc_footprint"] = function() {
            return (_malloc_footprint = Module["_malloc_footprint"] = Module["asm"]["malloc_footprint"]).apply(null, arguments)
        }
        ;
        var _malloc_max_footprint = Module["_malloc_max_footprint"] = function() {
            return (_malloc_max_footprint = Module["_malloc_max_footprint"] = Module["asm"]["malloc_max_footprint"]).apply(null, arguments)
        }
        ;
        var _malloc_footprint_limit = Module["_malloc_footprint_limit"] = function() {
            return (_malloc_footprint_limit = Module["_malloc_footprint_limit"] = Module["asm"]["malloc_footprint_limit"]).apply(null, arguments)
        }
        ;
        var _malloc_set_footprint_limit = Module["_malloc_set_footprint_limit"] = function() {
            return (_malloc_set_footprint_limit = Module["_malloc_set_footprint_limit"] = Module["asm"]["malloc_set_footprint_limit"]).apply(null, arguments)
        }
        ;
        var _independent_calloc = Module["_independent_calloc"] = function() {
            return (_independent_calloc = Module["_independent_calloc"] = Module["asm"]["independent_calloc"]).apply(null, arguments)
        }
        ;
        var _independent_comalloc = Module["_independent_comalloc"] = function() {
            return (_independent_comalloc = Module["_independent_comalloc"] = Module["asm"]["independent_comalloc"]).apply(null, arguments)
        }
        ;
        var _bulk_free = Module["_bulk_free"] = function() {
            return (_bulk_free = Module["_bulk_free"] = Module["asm"]["bulk_free"]).apply(null, arguments)
        }
        ;
        var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = function() {
            return (_emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = Module["asm"]["emscripten_get_sbrk_ptr"]).apply(null, arguments)
        }
        ;
        var _brk = Module["_brk"] = function() {
            return (_brk = Module["_brk"] = Module["asm"]["brk"]).apply(null, arguments)
        }
        ;
        var ___trap = Module["___trap"] = function() {
            return (___trap = Module["___trap"] = Module["asm"]["__trap"]).apply(null, arguments)
        }
        ;
        var ___absvdi2 = Module["___absvdi2"] = function() {
            return (___absvdi2 = Module["___absvdi2"] = Module["asm"]["__absvdi2"]).apply(null, arguments)
        }
        ;
        var ___absvsi2 = Module["___absvsi2"] = function() {
            return (___absvsi2 = Module["___absvsi2"] = Module["asm"]["__absvsi2"]).apply(null, arguments)
        }
        ;
        var ___absvti2 = Module["___absvti2"] = function() {
            return (___absvti2 = Module["___absvti2"] = Module["asm"]["__absvti2"]).apply(null, arguments)
        }
        ;
        var ___adddf3 = Module["___adddf3"] = function() {
            return (___adddf3 = Module["___adddf3"] = Module["asm"]["__adddf3"]).apply(null, arguments)
        }
        ;
        var ___fe_getround = Module["___fe_getround"] = function() {
            return (___fe_getround = Module["___fe_getround"] = Module["asm"]["__fe_getround"]).apply(null, arguments)
        }
        ;
        var ___fe_raise_inexact = Module["___fe_raise_inexact"] = function() {
            return (___fe_raise_inexact = Module["___fe_raise_inexact"] = Module["asm"]["__fe_raise_inexact"]).apply(null, arguments)
        }
        ;
        var ___addsf3 = Module["___addsf3"] = function() {
            return (___addsf3 = Module["___addsf3"] = Module["asm"]["__addsf3"]).apply(null, arguments)
        }
        ;
        var ___ashlti3 = Module["___ashlti3"] = function() {
            return (___ashlti3 = Module["___ashlti3"] = Module["asm"]["__ashlti3"]).apply(null, arguments)
        }
        ;
        var ___lshrti3 = Module["___lshrti3"] = function() {
            return (___lshrti3 = Module["___lshrti3"] = Module["asm"]["__lshrti3"]).apply(null, arguments)
        }
        ;
        var ___addvdi3 = Module["___addvdi3"] = function() {
            return (___addvdi3 = Module["___addvdi3"] = Module["asm"]["__addvdi3"]).apply(null, arguments)
        }
        ;
        var ___addvsi3 = Module["___addvsi3"] = function() {
            return (___addvsi3 = Module["___addvsi3"] = Module["asm"]["__addvsi3"]).apply(null, arguments)
        }
        ;
        var ___addvti3 = Module["___addvti3"] = function() {
            return (___addvti3 = Module["___addvti3"] = Module["asm"]["__addvti3"]).apply(null, arguments)
        }
        ;
        var ___ashldi3 = Module["___ashldi3"] = function() {
            return (___ashldi3 = Module["___ashldi3"] = Module["asm"]["__ashldi3"]).apply(null, arguments)
        }
        ;
        var ___ashrdi3 = Module["___ashrdi3"] = function() {
            return (___ashrdi3 = Module["___ashrdi3"] = Module["asm"]["__ashrdi3"]).apply(null, arguments)
        }
        ;
        var ___ashrti3 = Module["___ashrti3"] = function() {
            return (___ashrti3 = Module["___ashrti3"] = Module["asm"]["__ashrti3"]).apply(null, arguments)
        }
        ;
        var ___atomic_is_lock_free = Module["___atomic_is_lock_free"] = function() {
            return (___atomic_is_lock_free = Module["___atomic_is_lock_free"] = Module["asm"]["__atomic_is_lock_free"]).apply(null, arguments)
        }
        ;
        var ___atomic_load = Module["___atomic_load"] = function() {
            return (___atomic_load = Module["___atomic_load"] = Module["asm"]["__atomic_load"]).apply(null, arguments)
        }
        ;
        var ___atomic_store = Module["___atomic_store"] = function() {
            return (___atomic_store = Module["___atomic_store"] = Module["asm"]["__atomic_store"]).apply(null, arguments)
        }
        ;
        var ___atomic_compare_exchange = Module["___atomic_compare_exchange"] = function() {
            return (___atomic_compare_exchange = Module["___atomic_compare_exchange"] = Module["asm"]["__atomic_compare_exchange"]).apply(null, arguments)
        }
        ;
        var ___atomic_exchange = Module["___atomic_exchange"] = function() {
            return (___atomic_exchange = Module["___atomic_exchange"] = Module["asm"]["__atomic_exchange"]).apply(null, arguments)
        }
        ;
        var ___atomic_load_1 = Module["___atomic_load_1"] = function() {
            return (___atomic_load_1 = Module["___atomic_load_1"] = Module["asm"]["__atomic_load_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_load_2 = Module["___atomic_load_2"] = function() {
            return (___atomic_load_2 = Module["___atomic_load_2"] = Module["asm"]["__atomic_load_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_load_4 = Module["___atomic_load_4"] = function() {
            return (___atomic_load_4 = Module["___atomic_load_4"] = Module["asm"]["__atomic_load_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_load_8 = Module["___atomic_load_8"] = function() {
            return (___atomic_load_8 = Module["___atomic_load_8"] = Module["asm"]["__atomic_load_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_load_16 = Module["___atomic_load_16"] = function() {
            return (___atomic_load_16 = Module["___atomic_load_16"] = Module["asm"]["__atomic_load_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_store_1 = Module["___atomic_store_1"] = function() {
            return (___atomic_store_1 = Module["___atomic_store_1"] = Module["asm"]["__atomic_store_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_store_2 = Module["___atomic_store_2"] = function() {
            return (___atomic_store_2 = Module["___atomic_store_2"] = Module["asm"]["__atomic_store_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_store_4 = Module["___atomic_store_4"] = function() {
            return (___atomic_store_4 = Module["___atomic_store_4"] = Module["asm"]["__atomic_store_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_store_8 = Module["___atomic_store_8"] = function() {
            return (___atomic_store_8 = Module["___atomic_store_8"] = Module["asm"]["__atomic_store_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_store_16 = Module["___atomic_store_16"] = function() {
            return (___atomic_store_16 = Module["___atomic_store_16"] = Module["asm"]["__atomic_store_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_exchange_1 = Module["___atomic_exchange_1"] = function() {
            return (___atomic_exchange_1 = Module["___atomic_exchange_1"] = Module["asm"]["__atomic_exchange_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_exchange_2 = Module["___atomic_exchange_2"] = function() {
            return (___atomic_exchange_2 = Module["___atomic_exchange_2"] = Module["asm"]["__atomic_exchange_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_exchange_4 = Module["___atomic_exchange_4"] = function() {
            return (___atomic_exchange_4 = Module["___atomic_exchange_4"] = Module["asm"]["__atomic_exchange_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_exchange_8 = Module["___atomic_exchange_8"] = function() {
            return (___atomic_exchange_8 = Module["___atomic_exchange_8"] = Module["asm"]["__atomic_exchange_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_exchange_16 = Module["___atomic_exchange_16"] = function() {
            return (___atomic_exchange_16 = Module["___atomic_exchange_16"] = Module["asm"]["__atomic_exchange_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_compare_exchange_1 = Module["___atomic_compare_exchange_1"] = function() {
            return (___atomic_compare_exchange_1 = Module["___atomic_compare_exchange_1"] = Module["asm"]["__atomic_compare_exchange_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_compare_exchange_2 = Module["___atomic_compare_exchange_2"] = function() {
            return (___atomic_compare_exchange_2 = Module["___atomic_compare_exchange_2"] = Module["asm"]["__atomic_compare_exchange_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_compare_exchange_4 = Module["___atomic_compare_exchange_4"] = function() {
            return (___atomic_compare_exchange_4 = Module["___atomic_compare_exchange_4"] = Module["asm"]["__atomic_compare_exchange_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_compare_exchange_8 = Module["___atomic_compare_exchange_8"] = function() {
            return (___atomic_compare_exchange_8 = Module["___atomic_compare_exchange_8"] = Module["asm"]["__atomic_compare_exchange_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_compare_exchange_16 = Module["___atomic_compare_exchange_16"] = function() {
            return (___atomic_compare_exchange_16 = Module["___atomic_compare_exchange_16"] = Module["asm"]["__atomic_compare_exchange_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_add_1 = Module["___atomic_fetch_add_1"] = function() {
            return (___atomic_fetch_add_1 = Module["___atomic_fetch_add_1"] = Module["asm"]["__atomic_fetch_add_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_add_2 = Module["___atomic_fetch_add_2"] = function() {
            return (___atomic_fetch_add_2 = Module["___atomic_fetch_add_2"] = Module["asm"]["__atomic_fetch_add_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_add_4 = Module["___atomic_fetch_add_4"] = function() {
            return (___atomic_fetch_add_4 = Module["___atomic_fetch_add_4"] = Module["asm"]["__atomic_fetch_add_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_add_8 = Module["___atomic_fetch_add_8"] = function() {
            return (___atomic_fetch_add_8 = Module["___atomic_fetch_add_8"] = Module["asm"]["__atomic_fetch_add_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_add_16 = Module["___atomic_fetch_add_16"] = function() {
            return (___atomic_fetch_add_16 = Module["___atomic_fetch_add_16"] = Module["asm"]["__atomic_fetch_add_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_sub_1 = Module["___atomic_fetch_sub_1"] = function() {
            return (___atomic_fetch_sub_1 = Module["___atomic_fetch_sub_1"] = Module["asm"]["__atomic_fetch_sub_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_sub_2 = Module["___atomic_fetch_sub_2"] = function() {
            return (___atomic_fetch_sub_2 = Module["___atomic_fetch_sub_2"] = Module["asm"]["__atomic_fetch_sub_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_sub_4 = Module["___atomic_fetch_sub_4"] = function() {
            return (___atomic_fetch_sub_4 = Module["___atomic_fetch_sub_4"] = Module["asm"]["__atomic_fetch_sub_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_sub_8 = Module["___atomic_fetch_sub_8"] = function() {
            return (___atomic_fetch_sub_8 = Module["___atomic_fetch_sub_8"] = Module["asm"]["__atomic_fetch_sub_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_sub_16 = Module["___atomic_fetch_sub_16"] = function() {
            return (___atomic_fetch_sub_16 = Module["___atomic_fetch_sub_16"] = Module["asm"]["__atomic_fetch_sub_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_and_1 = Module["___atomic_fetch_and_1"] = function() {
            return (___atomic_fetch_and_1 = Module["___atomic_fetch_and_1"] = Module["asm"]["__atomic_fetch_and_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_and_2 = Module["___atomic_fetch_and_2"] = function() {
            return (___atomic_fetch_and_2 = Module["___atomic_fetch_and_2"] = Module["asm"]["__atomic_fetch_and_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_and_4 = Module["___atomic_fetch_and_4"] = function() {
            return (___atomic_fetch_and_4 = Module["___atomic_fetch_and_4"] = Module["asm"]["__atomic_fetch_and_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_and_8 = Module["___atomic_fetch_and_8"] = function() {
            return (___atomic_fetch_and_8 = Module["___atomic_fetch_and_8"] = Module["asm"]["__atomic_fetch_and_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_and_16 = Module["___atomic_fetch_and_16"] = function() {
            return (___atomic_fetch_and_16 = Module["___atomic_fetch_and_16"] = Module["asm"]["__atomic_fetch_and_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_or_1 = Module["___atomic_fetch_or_1"] = function() {
            return (___atomic_fetch_or_1 = Module["___atomic_fetch_or_1"] = Module["asm"]["__atomic_fetch_or_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_or_2 = Module["___atomic_fetch_or_2"] = function() {
            return (___atomic_fetch_or_2 = Module["___atomic_fetch_or_2"] = Module["asm"]["__atomic_fetch_or_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_or_4 = Module["___atomic_fetch_or_4"] = function() {
            return (___atomic_fetch_or_4 = Module["___atomic_fetch_or_4"] = Module["asm"]["__atomic_fetch_or_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_or_8 = Module["___atomic_fetch_or_8"] = function() {
            return (___atomic_fetch_or_8 = Module["___atomic_fetch_or_8"] = Module["asm"]["__atomic_fetch_or_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_or_16 = Module["___atomic_fetch_or_16"] = function() {
            return (___atomic_fetch_or_16 = Module["___atomic_fetch_or_16"] = Module["asm"]["__atomic_fetch_or_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_xor_1 = Module["___atomic_fetch_xor_1"] = function() {
            return (___atomic_fetch_xor_1 = Module["___atomic_fetch_xor_1"] = Module["asm"]["__atomic_fetch_xor_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_xor_2 = Module["___atomic_fetch_xor_2"] = function() {
            return (___atomic_fetch_xor_2 = Module["___atomic_fetch_xor_2"] = Module["asm"]["__atomic_fetch_xor_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_xor_4 = Module["___atomic_fetch_xor_4"] = function() {
            return (___atomic_fetch_xor_4 = Module["___atomic_fetch_xor_4"] = Module["asm"]["__atomic_fetch_xor_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_xor_8 = Module["___atomic_fetch_xor_8"] = function() {
            return (___atomic_fetch_xor_8 = Module["___atomic_fetch_xor_8"] = Module["asm"]["__atomic_fetch_xor_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_xor_16 = Module["___atomic_fetch_xor_16"] = function() {
            return (___atomic_fetch_xor_16 = Module["___atomic_fetch_xor_16"] = Module["asm"]["__atomic_fetch_xor_16"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_nand_1 = Module["___atomic_fetch_nand_1"] = function() {
            return (___atomic_fetch_nand_1 = Module["___atomic_fetch_nand_1"] = Module["asm"]["__atomic_fetch_nand_1"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_nand_2 = Module["___atomic_fetch_nand_2"] = function() {
            return (___atomic_fetch_nand_2 = Module["___atomic_fetch_nand_2"] = Module["asm"]["__atomic_fetch_nand_2"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_nand_4 = Module["___atomic_fetch_nand_4"] = function() {
            return (___atomic_fetch_nand_4 = Module["___atomic_fetch_nand_4"] = Module["asm"]["__atomic_fetch_nand_4"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_nand_8 = Module["___atomic_fetch_nand_8"] = function() {
            return (___atomic_fetch_nand_8 = Module["___atomic_fetch_nand_8"] = Module["asm"]["__atomic_fetch_nand_8"]).apply(null, arguments)
        }
        ;
        var ___atomic_fetch_nand_16 = Module["___atomic_fetch_nand_16"] = function() {
            return (___atomic_fetch_nand_16 = Module["___atomic_fetch_nand_16"] = Module["asm"]["__atomic_fetch_nand_16"]).apply(null, arguments)
        }
        ;
        var _atomic_flag_clear = Module["_atomic_flag_clear"] = function() {
            return (_atomic_flag_clear = Module["_atomic_flag_clear"] = Module["asm"]["atomic_flag_clear"]).apply(null, arguments)
        }
        ;
        var _atomic_flag_clear_explicit = Module["_atomic_flag_clear_explicit"] = function() {
            return (_atomic_flag_clear_explicit = Module["_atomic_flag_clear_explicit"] = Module["asm"]["atomic_flag_clear_explicit"]).apply(null, arguments)
        }
        ;
        var _atomic_flag_test_and_set = Module["_atomic_flag_test_and_set"] = function() {
            return (_atomic_flag_test_and_set = Module["_atomic_flag_test_and_set"] = Module["asm"]["atomic_flag_test_and_set"]).apply(null, arguments)
        }
        ;
        var _atomic_flag_test_and_set_explicit = Module["_atomic_flag_test_and_set_explicit"] = function() {
            return (_atomic_flag_test_and_set_explicit = Module["_atomic_flag_test_and_set_explicit"] = Module["asm"]["atomic_flag_test_and_set_explicit"]).apply(null, arguments)
        }
        ;
        var _atomic_signal_fence = Module["_atomic_signal_fence"] = function() {
            return (_atomic_signal_fence = Module["_atomic_signal_fence"] = Module["asm"]["atomic_signal_fence"]).apply(null, arguments)
        }
        ;
        var _atomic_thread_fence = Module["_atomic_thread_fence"] = function() {
            return (_atomic_thread_fence = Module["_atomic_thread_fence"] = Module["asm"]["atomic_thread_fence"]).apply(null, arguments)
        }
        ;
        var ___bswapdi2 = Module["___bswapdi2"] = function() {
            return (___bswapdi2 = Module["___bswapdi2"] = Module["asm"]["__bswapdi2"]).apply(null, arguments)
        }
        ;
        var ___bswapsi2 = Module["___bswapsi2"] = function() {
            return (___bswapsi2 = Module["___bswapsi2"] = Module["asm"]["__bswapsi2"]).apply(null, arguments)
        }
        ;
        var ___clear_cache = Module["___clear_cache"] = function() {
            return (___clear_cache = Module["___clear_cache"] = Module["asm"]["__clear_cache"]).apply(null, arguments)
        }
        ;
        var ___clzdi2 = Module["___clzdi2"] = function() {
            return (___clzdi2 = Module["___clzdi2"] = Module["asm"]["__clzdi2"]).apply(null, arguments)
        }
        ;
        var ___clzsi2 = Module["___clzsi2"] = function() {
            return (___clzsi2 = Module["___clzsi2"] = Module["asm"]["__clzsi2"]).apply(null, arguments)
        }
        ;
        var ___clzti2 = Module["___clzti2"] = function() {
            return (___clzti2 = Module["___clzti2"] = Module["asm"]["__clzti2"]).apply(null, arguments)
        }
        ;
        var ___cmpdi2 = Module["___cmpdi2"] = function() {
            return (___cmpdi2 = Module["___cmpdi2"] = Module["asm"]["__cmpdi2"]).apply(null, arguments)
        }
        ;
        var ___cmpti2 = Module["___cmpti2"] = function() {
            return (___cmpti2 = Module["___cmpti2"] = Module["asm"]["__cmpti2"]).apply(null, arguments)
        }
        ;
        var ___ledf2 = Module["___ledf2"] = function() {
            return (___ledf2 = Module["___ledf2"] = Module["asm"]["__ledf2"]).apply(null, arguments)
        }
        ;
        var ___gedf2 = Module["___gedf2"] = function() {
            return (___gedf2 = Module["___gedf2"] = Module["asm"]["__gedf2"]).apply(null, arguments)
        }
        ;
        var ___unorddf2 = Module["___unorddf2"] = function() {
            return (___unorddf2 = Module["___unorddf2"] = Module["asm"]["__unorddf2"]).apply(null, arguments)
        }
        ;
        var ___eqdf2 = Module["___eqdf2"] = function() {
            return (___eqdf2 = Module["___eqdf2"] = Module["asm"]["__eqdf2"]).apply(null, arguments)
        }
        ;
        var ___ltdf2 = Module["___ltdf2"] = function() {
            return (___ltdf2 = Module["___ltdf2"] = Module["asm"]["__ltdf2"]).apply(null, arguments)
        }
        ;
        var ___nedf2 = Module["___nedf2"] = function() {
            return (___nedf2 = Module["___nedf2"] = Module["asm"]["__nedf2"]).apply(null, arguments)
        }
        ;
        var ___gtdf2 = Module["___gtdf2"] = function() {
            return (___gtdf2 = Module["___gtdf2"] = Module["asm"]["__gtdf2"]).apply(null, arguments)
        }
        ;
        var ___lesf2 = Module["___lesf2"] = function() {
            return (___lesf2 = Module["___lesf2"] = Module["asm"]["__lesf2"]).apply(null, arguments)
        }
        ;
        var ___gesf2 = Module["___gesf2"] = function() {
            return (___gesf2 = Module["___gesf2"] = Module["asm"]["__gesf2"]).apply(null, arguments)
        }
        ;
        var ___unordsf2 = Module["___unordsf2"] = function() {
            return (___unordsf2 = Module["___unordsf2"] = Module["asm"]["__unordsf2"]).apply(null, arguments)
        }
        ;
        var ___eqsf2 = Module["___eqsf2"] = function() {
            return (___eqsf2 = Module["___eqsf2"] = Module["asm"]["__eqsf2"]).apply(null, arguments)
        }
        ;
        var ___ltsf2 = Module["___ltsf2"] = function() {
            return (___ltsf2 = Module["___ltsf2"] = Module["asm"]["__ltsf2"]).apply(null, arguments)
        }
        ;
        var ___nesf2 = Module["___nesf2"] = function() {
            return (___nesf2 = Module["___nesf2"] = Module["asm"]["__nesf2"]).apply(null, arguments)
        }
        ;
        var ___gtsf2 = Module["___gtsf2"] = function() {
            return (___gtsf2 = Module["___gtsf2"] = Module["asm"]["__gtsf2"]).apply(null, arguments)
        }
        ;
        var ___ctzdi2 = Module["___ctzdi2"] = function() {
            return (___ctzdi2 = Module["___ctzdi2"] = Module["asm"]["__ctzdi2"]).apply(null, arguments)
        }
        ;
        var ___ctzsi2 = Module["___ctzsi2"] = function() {
            return (___ctzsi2 = Module["___ctzsi2"] = Module["asm"]["__ctzsi2"]).apply(null, arguments)
        }
        ;
        var ___ctzti2 = Module["___ctzti2"] = function() {
            return (___ctzti2 = Module["___ctzti2"] = Module["asm"]["__ctzti2"]).apply(null, arguments)
        }
        ;
        var ___divdc3 = Module["___divdc3"] = function() {
            return (___divdc3 = Module["___divdc3"] = Module["asm"]["__divdc3"]).apply(null, arguments)
        }
        ;
        var ___divdf3 = Module["___divdf3"] = function() {
            return (___divdf3 = Module["___divdf3"] = Module["asm"]["__divdf3"]).apply(null, arguments)
        }
        ;
        var ___divdi3 = Module["___divdi3"] = function() {
            return (___divdi3 = Module["___divdi3"] = Module["asm"]["__divdi3"]).apply(null, arguments)
        }
        ;
        var ___udivmoddi4 = Module["___udivmoddi4"] = function() {
            return (___udivmoddi4 = Module["___udivmoddi4"] = Module["asm"]["__udivmoddi4"]).apply(null, arguments)
        }
        ;
        var ___divmoddi4 = Module["___divmoddi4"] = function() {
            return (___divmoddi4 = Module["___divmoddi4"] = Module["asm"]["__divmoddi4"]).apply(null, arguments)
        }
        ;
        var ___divmodsi4 = Module["___divmodsi4"] = function() {
            return (___divmodsi4 = Module["___divmodsi4"] = Module["asm"]["__divmodsi4"]).apply(null, arguments)
        }
        ;
        var ___udivmodsi4 = Module["___udivmodsi4"] = function() {
            return (___udivmodsi4 = Module["___udivmodsi4"] = Module["asm"]["__udivmodsi4"]).apply(null, arguments)
        }
        ;
        var ___divmodti4 = Module["___divmodti4"] = function() {
            return (___divmodti4 = Module["___divmodti4"] = Module["asm"]["__divmodti4"]).apply(null, arguments)
        }
        ;
        var ___udivmodti4 = Module["___udivmodti4"] = function() {
            return (___udivmodti4 = Module["___udivmodti4"] = Module["asm"]["__udivmodti4"]).apply(null, arguments)
        }
        ;
        var ___divsc3 = Module["___divsc3"] = function() {
            return (___divsc3 = Module["___divsc3"] = Module["asm"]["__divsc3"]).apply(null, arguments)
        }
        ;
        var ___divsf3 = Module["___divsf3"] = function() {
            return (___divsf3 = Module["___divsf3"] = Module["asm"]["__divsf3"]).apply(null, arguments)
        }
        ;
        var ___divsi3 = Module["___divsi3"] = function() {
            return (___divsi3 = Module["___divsi3"] = Module["asm"]["__divsi3"]).apply(null, arguments)
        }
        ;
        var ___divtc3 = Module["___divtc3"] = function() {
            return (___divtc3 = Module["___divtc3"] = Module["asm"]["__divtc3"]).apply(null, arguments)
        }
        ;
        var ___divti3 = Module["___divti3"] = function() {
            return (___divti3 = Module["___divti3"] = Module["asm"]["__divti3"]).apply(null, arguments)
        }
        ;
        var ___divxc3 = Module["___divxc3"] = function() {
            return (___divxc3 = Module["___divxc3"] = Module["asm"]["__divxc3"]).apply(null, arguments)
        }
        ;
        var _setThrew = Module["_setThrew"] = function() {
            return (_setThrew = Module["_setThrew"] = Module["asm"]["setThrew"]).apply(null, arguments)
        }
        ;
        var _saveSetjmp = Module["_saveSetjmp"] = function() {
            return (_saveSetjmp = Module["_saveSetjmp"] = Module["asm"]["saveSetjmp"]).apply(null, arguments)
        }
        ;
        var setTempRet0 = Module["setTempRet0"] = function() {
            return (setTempRet0 = Module["setTempRet0"] = Module["asm"]["setTempRet0"]).apply(null, arguments)
        }
        ;
        var _testSetjmp = Module["_testSetjmp"] = function() {
            return (_testSetjmp = Module["_testSetjmp"] = Module["asm"]["testSetjmp"]).apply(null, arguments)
        }
        ;
        var _emscripten_longjmp = Module["_emscripten_longjmp"] = function() {
            return (_emscripten_longjmp = Module["_emscripten_longjmp"] = Module["asm"]["emscripten_longjmp"]).apply(null, arguments)
        }
        ;
        var getTempRet0 = Module["getTempRet0"] = function() {
            return (getTempRet0 = Module["getTempRet0"] = Module["asm"]["getTempRet0"]).apply(null, arguments)
        }
        ;
        var ___get_temp_ret = Module["___get_temp_ret"] = function() {
            return (___get_temp_ret = Module["___get_temp_ret"] = Module["asm"]["__get_temp_ret"]).apply(null, arguments)
        }
        ;
        var ___set_temp_ret = Module["___set_temp_ret"] = function() {
            return (___set_temp_ret = Module["___set_temp_ret"] = Module["asm"]["__set_temp_ret"]).apply(null, arguments)
        }
        ;
        var ___emutls_get_address = Module["___emutls_get_address"] = function() {
            return (___emutls_get_address = Module["___emutls_get_address"] = Module["asm"]["__emutls_get_address"]).apply(null, arguments)
        }
        ;
        var ___enable_execute_stack = Module["___enable_execute_stack"] = function() {
            return (___enable_execute_stack = Module["___enable_execute_stack"] = Module["asm"]["__enable_execute_stack"]).apply(null, arguments)
        }
        ;
        var ___extendhfsf2 = Module["___extendhfsf2"] = function() {
            return (___extendhfsf2 = Module["___extendhfsf2"] = Module["asm"]["__extendhfsf2"]).apply(null, arguments)
        }
        ;
        var ___gnu_h2f_ieee = Module["___gnu_h2f_ieee"] = function() {
            return (___gnu_h2f_ieee = Module["___gnu_h2f_ieee"] = Module["asm"]["__gnu_h2f_ieee"]).apply(null, arguments)
        }
        ;
        var ___extendsfdf2 = Module["___extendsfdf2"] = function() {
            return (___extendsfdf2 = Module["___extendsfdf2"] = Module["asm"]["__extendsfdf2"]).apply(null, arguments)
        }
        ;
        var ___ffsdi2 = Module["___ffsdi2"] = function() {
            return (___ffsdi2 = Module["___ffsdi2"] = Module["asm"]["__ffsdi2"]).apply(null, arguments)
        }
        ;
        var ___ffssi2 = Module["___ffssi2"] = function() {
            return (___ffssi2 = Module["___ffssi2"] = Module["asm"]["__ffssi2"]).apply(null, arguments)
        }
        ;
        var ___ffsti2 = Module["___ffsti2"] = function() {
            return (___ffsti2 = Module["___ffsti2"] = Module["asm"]["__ffsti2"]).apply(null, arguments)
        }
        ;
        var ___fixdfdi = Module["___fixdfdi"] = function() {
            return (___fixdfdi = Module["___fixdfdi"] = Module["asm"]["__fixdfdi"]).apply(null, arguments)
        }
        ;
        var ___fixunsdfdi = Module["___fixunsdfdi"] = function() {
            return (___fixunsdfdi = Module["___fixunsdfdi"] = Module["asm"]["__fixunsdfdi"]).apply(null, arguments)
        }
        ;
        var ___fixdfsi = Module["___fixdfsi"] = function() {
            return (___fixdfsi = Module["___fixdfsi"] = Module["asm"]["__fixdfsi"]).apply(null, arguments)
        }
        ;
        var ___fixdfti = Module["___fixdfti"] = function() {
            return (___fixdfti = Module["___fixdfti"] = Module["asm"]["__fixdfti"]).apply(null, arguments)
        }
        ;
        var ___fixsfdi = Module["___fixsfdi"] = function() {
            return (___fixsfdi = Module["___fixsfdi"] = Module["asm"]["__fixsfdi"]).apply(null, arguments)
        }
        ;
        var ___fixunssfdi = Module["___fixunssfdi"] = function() {
            return (___fixunssfdi = Module["___fixunssfdi"] = Module["asm"]["__fixunssfdi"]).apply(null, arguments)
        }
        ;
        var ___fixsfsi = Module["___fixsfsi"] = function() {
            return (___fixsfsi = Module["___fixsfsi"] = Module["asm"]["__fixsfsi"]).apply(null, arguments)
        }
        ;
        var ___fixsfti = Module["___fixsfti"] = function() {
            return (___fixsfti = Module["___fixsfti"] = Module["asm"]["__fixsfti"]).apply(null, arguments)
        }
        ;
        var ___fixtfti = Module["___fixtfti"] = function() {
            return (___fixtfti = Module["___fixtfti"] = Module["asm"]["__fixtfti"]).apply(null, arguments)
        }
        ;
        var ___fixunsdfsi = Module["___fixunsdfsi"] = function() {
            return (___fixunsdfsi = Module["___fixunsdfsi"] = Module["asm"]["__fixunsdfsi"]).apply(null, arguments)
        }
        ;
        var ___fixunsdfti = Module["___fixunsdfti"] = function() {
            return (___fixunsdfti = Module["___fixunsdfti"] = Module["asm"]["__fixunsdfti"]).apply(null, arguments)
        }
        ;
        var ___fixunssfsi = Module["___fixunssfsi"] = function() {
            return (___fixunssfsi = Module["___fixunssfsi"] = Module["asm"]["__fixunssfsi"]).apply(null, arguments)
        }
        ;
        var ___fixunssfti = Module["___fixunssfti"] = function() {
            return (___fixunssfti = Module["___fixunssfti"] = Module["asm"]["__fixunssfti"]).apply(null, arguments)
        }
        ;
        var ___fixunstfdi = Module["___fixunstfdi"] = function() {
            return (___fixunstfdi = Module["___fixunstfdi"] = Module["asm"]["__fixunstfdi"]).apply(null, arguments)
        }
        ;
        var ___fixunstfsi = Module["___fixunstfsi"] = function() {
            return (___fixunstfsi = Module["___fixunstfsi"] = Module["asm"]["__fixunstfsi"]).apply(null, arguments)
        }
        ;
        var ___fixunstfti = Module["___fixunstfti"] = function() {
            return (___fixunstfti = Module["___fixunstfti"] = Module["asm"]["__fixunstfti"]).apply(null, arguments)
        }
        ;
        var ___fixunsxfdi = Module["___fixunsxfdi"] = function() {
            return (___fixunsxfdi = Module["___fixunsxfdi"] = Module["asm"]["__fixunsxfdi"]).apply(null, arguments)
        }
        ;
        var ___fixunsxfsi = Module["___fixunsxfsi"] = function() {
            return (___fixunsxfsi = Module["___fixunsxfsi"] = Module["asm"]["__fixunsxfsi"]).apply(null, arguments)
        }
        ;
        var ___fixunsxfti = Module["___fixunsxfti"] = function() {
            return (___fixunsxfti = Module["___fixunsxfti"] = Module["asm"]["__fixunsxfti"]).apply(null, arguments)
        }
        ;
        var ___fixxfdi = Module["___fixxfdi"] = function() {
            return (___fixxfdi = Module["___fixxfdi"] = Module["asm"]["__fixxfdi"]).apply(null, arguments)
        }
        ;
        var ___fixxfti = Module["___fixxfti"] = function() {
            return (___fixxfti = Module["___fixxfti"] = Module["asm"]["__fixxfti"]).apply(null, arguments)
        }
        ;
        var ___floatdidf = Module["___floatdidf"] = function() {
            return (___floatdidf = Module["___floatdidf"] = Module["asm"]["__floatdidf"]).apply(null, arguments)
        }
        ;
        var ___floatdisf = Module["___floatdisf"] = function() {
            return (___floatdisf = Module["___floatdisf"] = Module["asm"]["__floatdisf"]).apply(null, arguments)
        }
        ;
        var ___floatditf = Module["___floatditf"] = function() {
            return (___floatditf = Module["___floatditf"] = Module["asm"]["__floatditf"]).apply(null, arguments)
        }
        ;
        var ___floatdixf = Module["___floatdixf"] = function() {
            return (___floatdixf = Module["___floatdixf"] = Module["asm"]["__floatdixf"]).apply(null, arguments)
        }
        ;
        var ___floatsidf = Module["___floatsidf"] = function() {
            return (___floatsidf = Module["___floatsidf"] = Module["asm"]["__floatsidf"]).apply(null, arguments)
        }
        ;
        var ___floatsisf = Module["___floatsisf"] = function() {
            return (___floatsisf = Module["___floatsisf"] = Module["asm"]["__floatsisf"]).apply(null, arguments)
        }
        ;
        var ___floattidf = Module["___floattidf"] = function() {
            return (___floattidf = Module["___floattidf"] = Module["asm"]["__floattidf"]).apply(null, arguments)
        }
        ;
        var ___floattisf = Module["___floattisf"] = function() {
            return (___floattisf = Module["___floattisf"] = Module["asm"]["__floattisf"]).apply(null, arguments)
        }
        ;
        var ___floattitf = Module["___floattitf"] = function() {
            return (___floattitf = Module["___floattitf"] = Module["asm"]["__floattitf"]).apply(null, arguments)
        }
        ;
        var ___floattixf = Module["___floattixf"] = function() {
            return (___floattixf = Module["___floattixf"] = Module["asm"]["__floattixf"]).apply(null, arguments)
        }
        ;
        var ___floatundidf = Module["___floatundidf"] = function() {
            return (___floatundidf = Module["___floatundidf"] = Module["asm"]["__floatundidf"]).apply(null, arguments)
        }
        ;
        var ___floatundisf = Module["___floatundisf"] = function() {
            return (___floatundisf = Module["___floatundisf"] = Module["asm"]["__floatundisf"]).apply(null, arguments)
        }
        ;
        var ___floatunditf = Module["___floatunditf"] = function() {
            return (___floatunditf = Module["___floatunditf"] = Module["asm"]["__floatunditf"]).apply(null, arguments)
        }
        ;
        var ___floatundixf = Module["___floatundixf"] = function() {
            return (___floatundixf = Module["___floatundixf"] = Module["asm"]["__floatundixf"]).apply(null, arguments)
        }
        ;
        var ___floatunsidf = Module["___floatunsidf"] = function() {
            return (___floatunsidf = Module["___floatunsidf"] = Module["asm"]["__floatunsidf"]).apply(null, arguments)
        }
        ;
        var ___floatunsisf = Module["___floatunsisf"] = function() {
            return (___floatunsisf = Module["___floatunsisf"] = Module["asm"]["__floatunsisf"]).apply(null, arguments)
        }
        ;
        var ___floatuntidf = Module["___floatuntidf"] = function() {
            return (___floatuntidf = Module["___floatuntidf"] = Module["asm"]["__floatuntidf"]).apply(null, arguments)
        }
        ;
        var ___floatuntisf = Module["___floatuntisf"] = function() {
            return (___floatuntisf = Module["___floatuntisf"] = Module["asm"]["__floatuntisf"]).apply(null, arguments)
        }
        ;
        var ___floatuntitf = Module["___floatuntitf"] = function() {
            return (___floatuntitf = Module["___floatuntitf"] = Module["asm"]["__floatuntitf"]).apply(null, arguments)
        }
        ;
        var ___floatuntixf = Module["___floatuntixf"] = function() {
            return (___floatuntixf = Module["___floatuntixf"] = Module["asm"]["__floatuntixf"]).apply(null, arguments)
        }
        ;
        var ___lshrdi3 = Module["___lshrdi3"] = function() {
            return (___lshrdi3 = Module["___lshrdi3"] = Module["asm"]["__lshrdi3"]).apply(null, arguments)
        }
        ;
        var ___moddi3 = Module["___moddi3"] = function() {
            return (___moddi3 = Module["___moddi3"] = Module["asm"]["__moddi3"]).apply(null, arguments)
        }
        ;
        var ___modsi3 = Module["___modsi3"] = function() {
            return (___modsi3 = Module["___modsi3"] = Module["asm"]["__modsi3"]).apply(null, arguments)
        }
        ;
        var ___modti3 = Module["___modti3"] = function() {
            return (___modti3 = Module["___modti3"] = Module["asm"]["__modti3"]).apply(null, arguments)
        }
        ;
        var ___muldf3 = Module["___muldf3"] = function() {
            return (___muldf3 = Module["___muldf3"] = Module["asm"]["__muldf3"]).apply(null, arguments)
        }
        ;
        var ___muldi3 = Module["___muldi3"] = function() {
            return (___muldi3 = Module["___muldi3"] = Module["asm"]["__muldi3"]).apply(null, arguments)
        }
        ;
        var ___mulodi4 = Module["___mulodi4"] = function() {
            return (___mulodi4 = Module["___mulodi4"] = Module["asm"]["__mulodi4"]).apply(null, arguments)
        }
        ;
        var ___mulosi4 = Module["___mulosi4"] = function() {
            return (___mulosi4 = Module["___mulosi4"] = Module["asm"]["__mulosi4"]).apply(null, arguments)
        }
        ;
        var ___muloti4 = Module["___muloti4"] = function() {
            return (___muloti4 = Module["___muloti4"] = Module["asm"]["__muloti4"]).apply(null, arguments)
        }
        ;
        var ___udivti3 = Module["___udivti3"] = function() {
            return (___udivti3 = Module["___udivti3"] = Module["asm"]["__udivti3"]).apply(null, arguments)
        }
        ;
        var ___mulsf3 = Module["___mulsf3"] = function() {
            return (___mulsf3 = Module["___mulsf3"] = Module["asm"]["__mulsf3"]).apply(null, arguments)
        }
        ;
        var ___mulvdi3 = Module["___mulvdi3"] = function() {
            return (___mulvdi3 = Module["___mulvdi3"] = Module["asm"]["__mulvdi3"]).apply(null, arguments)
        }
        ;
        var ___mulvsi3 = Module["___mulvsi3"] = function() {
            return (___mulvsi3 = Module["___mulvsi3"] = Module["asm"]["__mulvsi3"]).apply(null, arguments)
        }
        ;
        var ___mulvti3 = Module["___mulvti3"] = function() {
            return (___mulvti3 = Module["___mulvti3"] = Module["asm"]["__mulvti3"]).apply(null, arguments)
        }
        ;
        var ___mulxc3 = Module["___mulxc3"] = function() {
            return (___mulxc3 = Module["___mulxc3"] = Module["asm"]["__mulxc3"]).apply(null, arguments)
        }
        ;
        var ___negdf2 = Module["___negdf2"] = function() {
            return (___negdf2 = Module["___negdf2"] = Module["asm"]["__negdf2"]).apply(null, arguments)
        }
        ;
        var ___negdi2 = Module["___negdi2"] = function() {
            return (___negdi2 = Module["___negdi2"] = Module["asm"]["__negdi2"]).apply(null, arguments)
        }
        ;
        var ___negsf2 = Module["___negsf2"] = function() {
            return (___negsf2 = Module["___negsf2"] = Module["asm"]["__negsf2"]).apply(null, arguments)
        }
        ;
        var ___negti2 = Module["___negti2"] = function() {
            return (___negti2 = Module["___negti2"] = Module["asm"]["__negti2"]).apply(null, arguments)
        }
        ;
        var ___negvdi2 = Module["___negvdi2"] = function() {
            return (___negvdi2 = Module["___negvdi2"] = Module["asm"]["__negvdi2"]).apply(null, arguments)
        }
        ;
        var ___negvsi2 = Module["___negvsi2"] = function() {
            return (___negvsi2 = Module["___negvsi2"] = Module["asm"]["__negvsi2"]).apply(null, arguments)
        }
        ;
        var ___negvti2 = Module["___negvti2"] = function() {
            return (___negvti2 = Module["___negvti2"] = Module["asm"]["__negvti2"]).apply(null, arguments)
        }
        ;
        var ___paritydi2 = Module["___paritydi2"] = function() {
            return (___paritydi2 = Module["___paritydi2"] = Module["asm"]["__paritydi2"]).apply(null, arguments)
        }
        ;
        var ___paritysi2 = Module["___paritysi2"] = function() {
            return (___paritysi2 = Module["___paritysi2"] = Module["asm"]["__paritysi2"]).apply(null, arguments)
        }
        ;
        var ___parityti2 = Module["___parityti2"] = function() {
            return (___parityti2 = Module["___parityti2"] = Module["asm"]["__parityti2"]).apply(null, arguments)
        }
        ;
        var ___popcountdi2 = Module["___popcountdi2"] = function() {
            return (___popcountdi2 = Module["___popcountdi2"] = Module["asm"]["__popcountdi2"]).apply(null, arguments)
        }
        ;
        var ___popcountsi2 = Module["___popcountsi2"] = function() {
            return (___popcountsi2 = Module["___popcountsi2"] = Module["asm"]["__popcountsi2"]).apply(null, arguments)
        }
        ;
        var ___popcountti2 = Module["___popcountti2"] = function() {
            return (___popcountti2 = Module["___popcountti2"] = Module["asm"]["__popcountti2"]).apply(null, arguments)
        }
        ;
        var ___powidf2 = Module["___powidf2"] = function() {
            return (___powidf2 = Module["___powidf2"] = Module["asm"]["__powidf2"]).apply(null, arguments)
        }
        ;
        var ___powisf2 = Module["___powisf2"] = function() {
            return (___powisf2 = Module["___powisf2"] = Module["asm"]["__powisf2"]).apply(null, arguments)
        }
        ;
        var ___powitf2 = Module["___powitf2"] = function() {
            return (___powitf2 = Module["___powitf2"] = Module["asm"]["__powitf2"]).apply(null, arguments)
        }
        ;
        var ___powixf2 = Module["___powixf2"] = function() {
            return (___powixf2 = Module["___powixf2"] = Module["asm"]["__powixf2"]).apply(null, arguments)
        }
        ;
        var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
            return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments)
        }
        ;
        var _emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = function() {
            return (_emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = Module["asm"]["emscripten_stack_set_limits"]).apply(null, arguments)
        }
        ;
        var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
            return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments)
        }
        ;
        var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
            return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments)
        }
        ;
        var stackSave = Module["stackSave"] = function() {
            return (stackSave = Module["stackSave"] = Module["asm"]["stackSave"]).apply(null, arguments)
        }
        ;
        var stackRestore = Module["stackRestore"] = function() {
            return (stackRestore = Module["stackRestore"] = Module["asm"]["stackRestore"]).apply(null, arguments)
        }
        ;
        var stackAlloc = Module["stackAlloc"] = function() {
            return (stackAlloc = Module["stackAlloc"] = Module["asm"]["stackAlloc"]).apply(null, arguments)
        }
        ;
        var ___subdf3 = Module["___subdf3"] = function() {
            return (___subdf3 = Module["___subdf3"] = Module["asm"]["__subdf3"]).apply(null, arguments)
        }
        ;
        var ___subsf3 = Module["___subsf3"] = function() {
            return (___subsf3 = Module["___subsf3"] = Module["asm"]["__subsf3"]).apply(null, arguments)
        }
        ;
        var ___subvdi3 = Module["___subvdi3"] = function() {
            return (___subvdi3 = Module["___subvdi3"] = Module["asm"]["__subvdi3"]).apply(null, arguments)
        }
        ;
        var ___subvsi3 = Module["___subvsi3"] = function() {
            return (___subvsi3 = Module["___subvsi3"] = Module["asm"]["__subvsi3"]).apply(null, arguments)
        }
        ;
        var ___subvti3 = Module["___subvti3"] = function() {
            return (___subvti3 = Module["___subvti3"] = Module["asm"]["__subvti3"]).apply(null, arguments)
        }
        ;
        var ___truncdfhf2 = Module["___truncdfhf2"] = function() {
            return (___truncdfhf2 = Module["___truncdfhf2"] = Module["asm"]["__truncdfhf2"]).apply(null, arguments)
        }
        ;
        var ___truncdfsf2 = Module["___truncdfsf2"] = function() {
            return (___truncdfsf2 = Module["___truncdfsf2"] = Module["asm"]["__truncdfsf2"]).apply(null, arguments)
        }
        ;
        var ___truncsfhf2 = Module["___truncsfhf2"] = function() {
            return (___truncsfhf2 = Module["___truncsfhf2"] = Module["asm"]["__truncsfhf2"]).apply(null, arguments)
        }
        ;
        var ___gnu_f2h_ieee = Module["___gnu_f2h_ieee"] = function() {
            return (___gnu_f2h_ieee = Module["___gnu_f2h_ieee"] = Module["asm"]["__gnu_f2h_ieee"]).apply(null, arguments)
        }
        ;
        var ___ucmpdi2 = Module["___ucmpdi2"] = function() {
            return (___ucmpdi2 = Module["___ucmpdi2"] = Module["asm"]["__ucmpdi2"]).apply(null, arguments)
        }
        ;
        var ___ucmpti2 = Module["___ucmpti2"] = function() {
            return (___ucmpti2 = Module["___ucmpti2"] = Module["asm"]["__ucmpti2"]).apply(null, arguments)
        }
        ;
        var ___udivdi3 = Module["___udivdi3"] = function() {
            return (___udivdi3 = Module["___udivdi3"] = Module["asm"]["__udivdi3"]).apply(null, arguments)
        }
        ;
        var ___udivsi3 = Module["___udivsi3"] = function() {
            return (___udivsi3 = Module["___udivsi3"] = Module["asm"]["__udivsi3"]).apply(null, arguments)
        }
        ;
        var ___umoddi3 = Module["___umoddi3"] = function() {
            return (___umoddi3 = Module["___umoddi3"] = Module["asm"]["__umoddi3"]).apply(null, arguments)
        }
        ;
        var ___umodsi3 = Module["___umodsi3"] = function() {
            return (___umodsi3 = Module["___umodsi3"] = Module["asm"]["__umodsi3"]).apply(null, arguments)
        }
        ;
        var ___umodti3 = Module["___umodti3"] = function() {
            return (___umodti3 = Module["___umodti3"] = Module["asm"]["__umodti3"]).apply(null, arguments)
        }
        ;
        var ___cxa_pure_virtual = Module["___cxa_pure_virtual"] = function() {
            return (___cxa_pure_virtual = Module["___cxa_pure_virtual"] = Module["asm"]["__cxa_pure_virtual"]).apply(null, arguments)
        }
        ;
        var ___cxa_bad_cast = Module["___cxa_bad_cast"] = function() {
            return (___cxa_bad_cast = Module["___cxa_bad_cast"] = Module["asm"]["__cxa_bad_cast"]).apply(null, arguments)
        }
        ;
        var ___cxa_bad_typeid = Module["___cxa_bad_typeid"] = function() {
            return (___cxa_bad_typeid = Module["___cxa_bad_typeid"] = Module["asm"]["__cxa_bad_typeid"]).apply(null, arguments)
        }
        ;
        var ___cxa_throw_bad_array_new_length = Module["___cxa_throw_bad_array_new_length"] = function() {
            return (___cxa_throw_bad_array_new_length = Module["___cxa_throw_bad_array_new_length"] = Module["asm"]["__cxa_throw_bad_array_new_length"]).apply(null, arguments)
        }
        ;
        var ___cxa_demangle = Module["___cxa_demangle"] = function() {
            return (___cxa_demangle = Module["___cxa_demangle"] = Module["asm"]["__cxa_demangle"]).apply(null, arguments)
        }
        ;
        var ___gxx_personality_v0 = Module["___gxx_personality_v0"] = function() {
            return (___gxx_personality_v0 = Module["___gxx_personality_v0"] = Module["asm"]["__gxx_personality_v0"]).apply(null, arguments)
        }
        ;
        var ___thrown_object_from_unwind_exception = Module["___thrown_object_from_unwind_exception"] = function() {
            return (___thrown_object_from_unwind_exception = Module["___thrown_object_from_unwind_exception"] = Module["asm"]["__thrown_object_from_unwind_exception"]).apply(null, arguments)
        }
        ;
        var ___get_exception_message = Module["___get_exception_message"] = function() {
            return (___get_exception_message = Module["___get_exception_message"] = Module["asm"]["__get_exception_message"]).apply(null, arguments)
        }
        ;
        var ___get_exception_terminate_message = Module["___get_exception_terminate_message"] = function() {
            return (___get_exception_terminate_message = Module["___get_exception_terminate_message"] = Module["asm"]["__get_exception_terminate_message"]).apply(null, arguments)
        }
        ;
        var ___cxa_guard_acquire = Module["___cxa_guard_acquire"] = function() {
            return (___cxa_guard_acquire = Module["___cxa_guard_acquire"] = Module["asm"]["__cxa_guard_acquire"]).apply(null, arguments)
        }
        ;
        var ___cxa_guard_release = Module["___cxa_guard_release"] = function() {
            return (___cxa_guard_release = Module["___cxa_guard_release"] = Module["asm"]["__cxa_guard_release"]).apply(null, arguments)
        }
        ;
        var ___cxa_guard_abort = Module["___cxa_guard_abort"] = function() {
            return (___cxa_guard_abort = Module["___cxa_guard_abort"] = Module["asm"]["__cxa_guard_abort"]).apply(null, arguments)
        }
        ;
        var ___cxa_thread_atexit = Module["___cxa_thread_atexit"] = function() {
            return (___cxa_thread_atexit = Module["___cxa_thread_atexit"] = Module["asm"]["__cxa_thread_atexit"]).apply(null, arguments)
        }
        ;
        var ___cxa_deleted_virtual = Module["___cxa_deleted_virtual"] = function() {
            return (___cxa_deleted_virtual = Module["___cxa_deleted_virtual"] = Module["asm"]["__cxa_deleted_virtual"]).apply(null, arguments)
        }
        ;
        var ___dynamic_cast = Module["___dynamic_cast"] = function() {
            return (___dynamic_cast = Module["___dynamic_cast"] = Module["asm"]["__dynamic_cast"]).apply(null, arguments)
        }
        ;
        var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
            return (___cxa_can_catch = Module["___cxa_can_catch"] = Module["asm"]["__cxa_can_catch"]).apply(null, arguments)
        }
        ;
        var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
            return (___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = Module["asm"]["__cxa_is_pointer_type"]).apply(null, arguments)
        }
        ;
        var _socketpair = Module["_socketpair"] = function() {
            return (_socketpair = Module["_socketpair"] = Module["asm"]["socketpair"]).apply(null, arguments)
        }
        ;
        var _py_docstring_mod = Module["_py_docstring_mod"] = 3083968;
        var _PyExc_AttributeError = Module["_PyExc_AttributeError"] = 2807264;
        var _stdout = Module["_stdout"] = 3007048;
        var __Py_NoneStruct = Module["__Py_NoneStruct"] = 2832420;
        var _PyExc_TypeError = Module["_PyExc_TypeError"] = 2801024;
        var _internal_error = Module["_internal_error"] = 3083972;
        var _conversion_error = Module["_conversion_error"] = 3083976;
        var _PyExc_ValueError = Module["_PyExc_ValueError"] = 2808720;
        var _PyExc_OverflowError = Module["_PyExc_OverflowError"] = 2810384;
        var _Js_undefined = Module["_Js_undefined"] = 242664;
        var _Js_true = Module["_Js_true"] = 242668;
        var _Js_false = Module["_Js_false"] = 242672;
        var _Js_null = Module["_Js_null"] = 242676;
        var _Js_novalue = Module["_Js_novalue"] = 242680;
        var __Py_TrueStruct = Module["__Py_TrueStruct"] = 2790032;
        var __Py_FalseStruct = Module["__Py_FalseStruct"] = 2790048;
        var _PyExc_RuntimeError = Module["_PyExc_RuntimeError"] = 2806224;
        var _PyExc_BaseException = Module["_PyExc_BaseException"] = 2800608;
        var _PyExc_Exception = Module["_PyExc_Exception"] = 2800816;
        var _PyExc_StopIteration = Module["_PyExc_StopIteration"] = 2801440;
        var _PyExc_KeyError = Module["_PyExc_KeyError"] = 2808512;
        var _PyExc_IndexError = Module["_PyExc_IndexError"] = 2808304;
        var _PySlice_Type = Module["_PySlice_Type"] = 2837012;
        var _PyExc_NotImplementedError = Module["_PyExc_NotImplementedError"] = 2806640;
        var _PyBaseObject_Type = Module["_PyBaseObject_Type"] = 2838312;
        var _PyList_Type = Module["_PyList_Type"] = 2822276;
        var _PyTuple_Type = Module["_PyTuple_Type"] = 2837480;
        var __Py_NotImplementedStruct = Module["__Py_NotImplementedStruct"] = 2833196;
        var _PyGen_Type = Module["_PyGen_Type"] = 2816148;
        var _PyCFunction_Type = Module["_PyCFunction_Type"] = 2831028;
        var _py_buffer_len_offset = Module["_py_buffer_len_offset"] = 2788796;
        var _py_buffer_shape_offset = Module["_py_buffer_shape_offset"] = 2788800;
        var _buffer_struct_size = Module["_buffer_struct_size"] = 2788804;
        var _PySet_Type = Module["_PySet_Type"] = 2835760;
        var _PyFloat_Type = Module["_PyFloat_Type"] = 2818576;
        var _PyBool_Type = Module["_PyBool_Type"] = 2790208;
        var __PyParser_TokenNames = Module["__PyParser_TokenNames"] = 2789248;
        var _PyExc_SyntaxError = Module["_PyExc_SyntaxError"] = 2807472;
        var __Py_EllipsisObject = Module["__Py_EllipsisObject"] = 2837004;
        var _PyExc_SystemError = Module["_PyExc_SystemError"] = 2810800;
        var _stdin = Module["_stdin"] = 3006896;
        var _PyExc_IndentationError = Module["_PyExc_IndentationError"] = 2807680;
        var _PyExc_KeyboardInterrupt = Module["_PyExc_KeyboardInterrupt"] = 2802064;
        var _PyExc_TabError = Module["_PyExc_TabError"] = 2807888;
        var _PyExc_LookupError = Module["_PyExc_LookupError"] = 2808096;
        var _PyExc_UnicodeDecodeError = Module["_PyExc_UnicodeDecodeError"] = 2809344;
        var _PyExc_UnicodeError = Module["_PyExc_UnicodeError"] = 2808928;
        var _PyComplex_Type = Module["_PyComplex_Type"] = 2796296;
        var __Py_ctype_table = Module["__Py_ctype_table"] = 427920;
        var _PyExc_DeprecationWarning = Module["_PyExc_DeprecationWarning"] = 2812048;
        var __PyOS_ReadlineTState = Module["__PyOS_ReadlineTState"] = 3084056;
        var _stderr = Module["_stderr"] = 3006744;
        var _PyOS_InputHook = Module["_PyOS_InputHook"] = 3084060;
        var __PyRuntime = Module["__PyRuntime"] = 3086208;
        var _PyOS_ReadlineFunctionPointer = Module["_PyOS_ReadlineFunctionPointer"] = 3084064;
        var _PyExc_MemoryError = Module["_PyExc_MemoryError"] = 2811216;
        var _PyExc_OSError = Module["_PyExc_OSError"] = 2802688;
        var _PyType_Type = Module["_PyType_Type"] = 2838108;
        var _PyExc_BufferError = Module["_PyExc_BufferError"] = 2811424;
        var _PyUnicode_Type = Module["_PyUnicode_Type"] = 2843312;
        var _PyLong_Type = Module["_PyLong_Type"] = 2823404;
        var _PyByteArray_Type = Module["_PyByteArray_Type"] = 2790412;
        var __PyByteArray_empty_string = Module["__PyByteArray_empty_string"] = 3084080;
        var _PyDict_Type = Module["_PyDict_Type"] = 2824584;
        var __Py_ctype_tolower = Module["__Py_ctype_tolower"] = 428944;
        var __Py_ctype_toupper = Module["__Py_ctype_toupper"] = 429200;
        var _Py_hexdigits = Module["_Py_hexdigits"] = 2851228;
        var _PyExc_BytesWarning = Module["_PyExc_BytesWarning"] = 2813504;
        var _PyByteArrayIter_Type = Module["_PyByteArrayIter_Type"] = 2791776;
        var _PyBytes_Type = Module["_PyBytes_Type"] = 2792380;
        var __PyLong_DigitValue = Module["__PyLong_DigitValue"] = 2823616;
        var _PyBytesIter_Type = Module["_PyBytesIter_Type"] = 2793568;
        var _PyCapsule_Type = Module["_PyCapsule_Type"] = 2794172;
        var _PyExc_ImportError = Module["_PyExc_ImportError"] = 2802272;
        var _PyCell_Type = Module["_PyCell_Type"] = 2794376;
        var _PyMethod_Type = Module["_PyMethod_Type"] = 2794632;
        var _PyInstanceMethod_Type = Module["_PyInstanceMethod_Type"] = 2794984;
        var _PyCode_Type = Module["_PyCode_Type"] = 2795312;
        var _PyFrozenSet_Type = Module["_PyFrozenSet_Type"] = 2836320;
        var _PyExc_ZeroDivisionError = Module["_PyExc_ZeroDivisionError"] = 2810592;
        var __PyMethodWrapper_Type = Module["__PyMethodWrapper_Type"] = 2798680;
        var _PyMethodDescr_Type = Module["_PyMethodDescr_Type"] = 2797024;
        var _PyClassMethodDescr_Type = Module["_PyClassMethodDescr_Type"] = 2797228;
        var _PyMemberDescr_Type = Module["_PyMemberDescr_Type"] = 2797500;
        var _PyGetSetDescr_Type = Module["_PyGetSetDescr_Type"] = 2797772;
        var _PyWrapperDescr_Type = Module["_PyWrapperDescr_Type"] = 2798064;
        var _PyDictProxy_Type = Module["_PyDictProxy_Type"] = 2798268;
        var _PyProperty_Type = Module["_PyProperty_Type"] = 2799448;
        var _PyReversed_Type = Module["_PyReversed_Type"] = 2800144;
        var _PyEnum_Type = Module["_PyEnum_Type"] = 2799872;
        var _PyTraceBack_Type = Module["_PyTraceBack_Type"] = 2858584;
        var _PyExc_UnicodeEncodeError = Module["_PyExc_UnicodeEncodeError"] = 2809136;
        var _PyExc_UnicodeTranslateError = Module["_PyExc_UnicodeTranslateError"] = 2809552;
        var _PyExc_StopAsyncIteration = Module["_PyExc_StopAsyncIteration"] = 2801232;
        var _PyExc_GeneratorExit = Module["_PyExc_GeneratorExit"] = 2801648;
        var _PyExc_SystemExit = Module["_PyExc_SystemExit"] = 2801856;
        var _PyExc_ModuleNotFoundError = Module["_PyExc_ModuleNotFoundError"] = 2802480;
        var _PyExc_EOFError = Module["_PyExc_EOFError"] = 2806016;
        var _PyExc_RecursionError = Module["_PyExc_RecursionError"] = 2806432;
        var _PyExc_NameError = Module["_PyExc_NameError"] = 2806848;
        var _PyExc_UnboundLocalError = Module["_PyExc_UnboundLocalError"] = 2807056;
        var _PyExc_AssertionError = Module["_PyExc_AssertionError"] = 2809760;
        var _PyExc_ArithmeticError = Module["_PyExc_ArithmeticError"] = 2809968;
        var _PyExc_FloatingPointError = Module["_PyExc_FloatingPointError"] = 2810176;
        var _PyExc_ReferenceError = Module["_PyExc_ReferenceError"] = 2811008;
        var _PyExc_Warning = Module["_PyExc_Warning"] = 2811632;
        var _PyExc_UserWarning = Module["_PyExc_UserWarning"] = 2811840;
        var _PyExc_EncodingWarning = Module["_PyExc_EncodingWarning"] = 2813712;
        var _PyExc_PendingDeprecationWarning = Module["_PyExc_PendingDeprecationWarning"] = 2812256;
        var _PyExc_SyntaxWarning = Module["_PyExc_SyntaxWarning"] = 2812464;
        var _PyExc_RuntimeWarning = Module["_PyExc_RuntimeWarning"] = 2812672;
        var _PyExc_FutureWarning = Module["_PyExc_FutureWarning"] = 2812880;
        var _PyExc_ImportWarning = Module["_PyExc_ImportWarning"] = 2813088;
        var _PyExc_UnicodeWarning = Module["_PyExc_UnicodeWarning"] = 2813296;
        var _PyExc_ResourceWarning = Module["_PyExc_ResourceWarning"] = 2813920;
        var _PyExc_ConnectionError = Module["_PyExc_ConnectionError"] = 2803104;
        var _PyExc_BlockingIOError = Module["_PyExc_BlockingIOError"] = 2802896;
        var _PyExc_BrokenPipeError = Module["_PyExc_BrokenPipeError"] = 2803520;
        var _PyExc_ChildProcessError = Module["_PyExc_ChildProcessError"] = 2803312;
        var _PyExc_ConnectionAbortedError = Module["_PyExc_ConnectionAbortedError"] = 2803728;
        var _PyExc_ConnectionRefusedError = Module["_PyExc_ConnectionRefusedError"] = 2803936;
        var _PyExc_ConnectionResetError = Module["_PyExc_ConnectionResetError"] = 2804144;
        var _PyExc_FileExistsError = Module["_PyExc_FileExistsError"] = 2804352;
        var _PyExc_FileNotFoundError = Module["_PyExc_FileNotFoundError"] = 2804560;
        var _PyExc_IsADirectoryError = Module["_PyExc_IsADirectoryError"] = 2804768;
        var _PyExc_NotADirectoryError = Module["_PyExc_NotADirectoryError"] = 2804976;
        var _PyExc_InterruptedError = Module["_PyExc_InterruptedError"] = 2805184;
        var _PyExc_PermissionError = Module["_PyExc_PermissionError"] = 2805392;
        var _PyExc_ProcessLookupError = Module["_PyExc_ProcessLookupError"] = 2805600;
        var _PyExc_TimeoutError = Module["_PyExc_TimeoutError"] = 2805808;
        var _PyExc_EnvironmentError = Module["_PyExc_EnvironmentError"] = 3084100;
        var _PyExc_IOError = Module["_PyExc_IOError"] = 3084104;
        var _Py_GenericAliasType = Module["_Py_GenericAliasType"] = 2815416;
        var _PyAsyncGen_Type = Module["_PyAsyncGen_Type"] = 2815700;
        var _PyCoro_Type = Module["_PyCoro_Type"] = 2816352;
        var __PyAsyncGenWrappedValue_Type = Module["__PyAsyncGenWrappedValue_Type"] = 2817644;
        var __PyCoroWrapper_Type = Module["__PyCoroWrapper_Type"] = 2816896;
        var __PyAsyncGenASend_Type = Module["__PyAsyncGenASend_Type"] = 2817440;
        var __PyAsyncGenAThrow_Type = Module["__PyAsyncGenAThrow_Type"] = 2817936;
        var _PyStdPrinter_Type = Module["_PyStdPrinter_Type"] = 2818188;
        var __Py_SwappedOp = Module["__Py_SwappedOp"] = 2832432;
        var _PyFrame_Type = Module["_PyFrame_Type"] = 2819620;
        var _PyModule_Type = Module["_PyModule_Type"] = 2831652;
        var _PyFunction_Type = Module["_PyFunction_Type"] = 2819840;
        var _PyClassMethod_Type = Module["_PyClassMethod_Type"] = 2820460;
        var _PyStaticMethod_Type = Module["_PyStaticMethod_Type"] = 2820796;
        var __PyInterpreterID_Type = Module["__PyInterpreterID_Type"] = 2821252;
        var _PySeqIter_Type = Module["_PySeqIter_Type"] = 2821468;
        var _PyCallIter_Type = Module["_PyCallIter_Type"] = 2821744;
        var _PyListIter_Type = Module["_PyListIter_Type"] = 2822864;
        var _PyListRevIter_Type = Module["_PyListRevIter_Type"] = 2823136;
        var _PyDictIterKey_Type = Module["_PyDictIterKey_Type"] = 2825312;
        var _PyDictRevIterKey_Type = Module["_PyDictRevIterKey_Type"] = 2825924;
        var _PyDictRevIterValue_Type = Module["_PyDictRevIterValue_Type"] = 2826332;
        var _PyDictKeys_Type = Module["_PyDictKeys_Type"] = 2826536;
        var _PyDictItems_Type = Module["_PyDictItems_Type"] = 2826740;
        var _PyDictIterItem_Type = Module["_PyDictIterItem_Type"] = 2825720;
        var _PyDictIterValue_Type = Module["_PyDictIterValue_Type"] = 2825516;
        var _PyDictRevIterItem_Type = Module["_PyDictRevIterItem_Type"] = 2826128;
        var _PyDictValues_Type = Module["_PyDictValues_Type"] = 2827392;
        var _PyODict_Type = Module["_PyODict_Type"] = 2828120;
        var _PyODictIter_Type = Module["_PyODictIter_Type"] = 2828368;
        var _PyODictKeys_Type = Module["_PyODictKeys_Type"] = 2828608;
        var _PyODictValues_Type = Module["_PyODictValues_Type"] = 2829088;
        var _PyODictItems_Type = Module["_PyODictItems_Type"] = 2828848;
        var __PyManagedBuffer_Type = Module["__PyManagedBuffer_Type"] = 2829560;
        var _PyMemoryView_Type = Module["_PyMemoryView_Type"] = 2829764;
        var _PyCMethod_Type = Module["_PyCMethod_Type"] = 2830824;
        var _PyModuleDef_Type = Module["_PyModuleDef_Type"] = 2831448;
        var __Py_PackageContext = Module["__Py_PackageContext"] = 3086132;
        var __PyNamespace_Type = Module["__PyNamespace_Type"] = 2832184;
        var __Py_tracemalloc_config = Module["__Py_tracemalloc_config"] = 2833264;
        var _PyEllipsis_Type = Module["_PyEllipsis_Type"] = 2836800;
        var _PyLongRangeIter_Type = Module["_PyLongRangeIter_Type"] = 2834736;
        var _PyPickleBuffer_Type = Module["_PyPickleBuffer_Type"] = 2833560;
        var _PyRangeIter_Type = Module["_PyRangeIter_Type"] = 2834464;
        var _PyRange_Type = Module["_PyRange_Type"] = 2834192;
        var _PySetIter_Type = Module["_PySetIter_Type"] = 2835008;
        var _PySuper_Type = Module["_PySuper_Type"] = 2842048;
        var _PyTupleIter_Type = Module["_PyTupleIter_Type"] = 2837888;
        var _PyUnicodeIter_Type = Module["_PyUnicodeIter_Type"] = 2845216;
        var __PyNone_Type = Module["__PyNone_Type"] = 2832608;
        var __PyNotImplemented_Type = Module["__PyNotImplemented_Type"] = 2832992;
        var __PyWeakref_CallableProxyType = Module["__PyWeakref_CallableProxyType"] = 2847148;
        var __PyWeakref_ProxyType = Module["__PyWeakref_ProxyType"] = 2846944;
        var __PyWeakref_RefType = Module["__PyWeakref_RefType"] = 2846488;
        var __PySet_Dummy = Module["__PySet_Dummy"] = 2836532;
        var __Py_ascii_whitespace = Module["__Py_ascii_whitespace"] = 288448;
        var _PyFilter_Type = Module["_PyFilter_Type"] = 2849168;
        var _PyMap_Type = Module["_PyMap_Type"] = 2849408;
        var _PyZip_Type = Module["_PyZip_Type"] = 2849664;
        var _Py_EMSCRIPTEN_SIGNAL_HANDLING = Module["_Py_EMSCRIPTEN_SIGNAL_HANDLING"] = 3103368;
        var _PyContext_Type = Module["_PyContext_Type"] = 2851432;
        var _PyContextVar_Type = Module["_PyContextVar_Type"] = 2851636;
        var _PyContextToken_Type = Module["_PyContextToken_Type"] = 2851840;
        var _Py_IgnoreEnvironmentFlag = Module["_Py_IgnoreEnvironmentFlag"] = 3086092;
        var _Py_VerboseFlag = Module["_Py_VerboseFlag"] = 3086060;
        var __PyHamt_Type = Module["__PyHamt_Type"] = 2853616;
        var __PyHamt_BitmapNode_Type = Module["__PyHamt_BitmapNode_Type"] = 2854024;
        var __PyHamt_ArrayNode_Type = Module["__PyHamt_ArrayNode_Type"] = 2853820;
        var __PyHamt_CollisionNode_Type = Module["__PyHamt_CollisionNode_Type"] = 2854228;
        var __PyHamtItems_Type = Module["__PyHamtItems_Type"] = 2852836;
        var __PyHamtKeys_Type = Module["__PyHamtKeys_Type"] = 2853040;
        var __PyHamtValues_Type = Module["__PyHamtValues_Type"] = 2853244;
        var _PyImport_Inittab = Module["_PyImport_Inittab"] = 2854432;
        var _PyImport_FrozenModules = Module["_PyImport_FrozenModules"] = 3001748;
        var _Py_IsolatedFlag = Module["_Py_IsolatedFlag"] = 3086112;
        var _Py_BytesWarningFlag = Module["_Py_BytesWarningFlag"] = 3086084;
        var _Py_InspectFlag = Module["_Py_InspectFlag"] = 3086072;
        var _Py_InteractiveFlag = Module["_Py_InteractiveFlag"] = 3086068;
        var _Py_OptimizeFlag = Module["_Py_OptimizeFlag"] = 3086076;
        var _Py_DebugFlag = Module["_Py_DebugFlag"] = 3086056;
        var _Py_QuietFlag = Module["_Py_QuietFlag"] = 3086064;
        var _Py_FrozenFlag = Module["_Py_FrozenFlag"] = 3086088;
        var _Py_UnbufferedStdioFlag = Module["_Py_UnbufferedStdioFlag"] = 3086104;
        var _Py_NoSiteFlag = Module["_Py_NoSiteFlag"] = 3086080;
        var _Py_DontWriteBytecodeFlag = Module["_Py_DontWriteBytecodeFlag"] = 3086096;
        var _Py_NoUserSiteDirectory = Module["_Py_NoUserSiteDirectory"] = 3086100;
        var _Py_HashRandomizationFlag = Module["_Py_HashRandomizationFlag"] = 3086108;
        var __Py_path_config = Module["__Py_path_config"] = 3086136;
        var _Py_FileSystemDefaultEncoding = Module["_Py_FileSystemDefaultEncoding"] = 3086160;
        var _Py_HasFileSystemDefaultEncoding = Module["_Py_HasFileSystemDefaultEncoding"] = 3086164;
        var _Py_FileSystemDefaultEncodeErrors = Module["_Py_FileSystemDefaultEncodeErrors"] = 3086168;
        var _Py_UTF8Mode = Module["_Py_UTF8Mode"] = 3086052;
        var __Py_HashSecret = Module["__Py_HashSecret"] = 3086176;
        var __Py_UnhandledKeyboardInterrupt = Module["__Py_UnhandledKeyboardInterrupt"] = 3086200;
        var _ffi_type_pointer = Module["_ffi_type_pointer"] = 2435528;
        var _ffi_type_void = Module["_ffi_type_void"] = 2435420;
        var _ffi_type_sint32 = Module["_ffi_type_sint32"] = 2435492;
        var _ffi_type_sint8 = Module["_ffi_type_sint8"] = 2435444;
        var _ffi_type_uint8 = Module["_ffi_type_uint8"] = 2435432;
        var _ffi_type_double = Module["_ffi_type_double"] = 2435552;
        var _ffi_type_longdouble = Module["_ffi_type_longdouble"] = 2435564;
        var _ffi_type_float = Module["_ffi_type_float"] = 2435540;
        var _ffi_type_sint16 = Module["_ffi_type_sint16"] = 2435468;
        var _ffi_type_uint16 = Module["_ffi_type_uint16"] = 2435456;
        var _ffi_type_uint32 = Module["_ffi_type_uint32"] = 2435480;
        var _ffi_type_sint64 = Module["_ffi_type_sint64"] = 2435516;
        var _ffi_type_uint64 = Module["_ffi_type_uint64"] = 2435504;
        var _environ = Module["_environ"] = 3104304;
        var __PyBytesIOBuffer_Type = Module["__PyBytesIOBuffer_Type"] = 2994412;
        var _z_errmsg = Module["_z_errmsg"] = 3001952;
        var __length_code = Module["__length_code"] = 2446176;
        var __dist_code = Module["__dist_code"] = 2445664;
        var _deflate_copyright = Module["_deflate_copyright"] = 2440832;
        var _inflate_copyright = Module["_inflate_copyright"] = 2445360;
        var _BZ2_crc32Table = Module["_BZ2_crc32Table"] = 3002064;
        var _BZ2_rNums = Module["_BZ2_rNums"] = 3003088;
        var ___environ = Module["___environ"] = 3104304;
        var ____environ = Module["____environ"] = 3104304;
        var __environ = Module["__environ"] = 3104304;
        var _tzname = Module["_tzname"] = 3104848;
        var _daylight = Module["_daylight"] = 3104844;
        var _timezone = Module["_timezone"] = 3104840;
        var ___progname = Module["___progname"] = 3106064;
        var ___optreset = Module["___optreset"] = 3105028;
        var _optind = Module["_optind"] = 3006280;
        var ___optpos = Module["___optpos"] = 3105032;
        var _optarg = Module["_optarg"] = 3105036;
        var _optopt = Module["_optopt"] = 3105040;
        var _opterr = Module["_opterr"] = 3006284;
        var _optreset = Module["_optreset"] = 3105028;
        var _h_errno = Module["_h_errno"] = 3105164;
        var ___signgam = Module["___signgam"] = 3120364;
        var __ns_flagdata = Module["__ns_flagdata"] = 2633200;
        var ___progname_full = Module["___progname_full"] = 3106068;
        var _program_invocation_short_name = Module["_program_invocation_short_name"] = 3106064;
        var _program_invocation_name = Module["_program_invocation_name"] = 3106068;
        var ___sig_pending = Module["___sig_pending"] = 3110416;
        var ___sig_actions = Module["___sig_actions"] = 3111264;
        var _signgam = Module["_signgam"] = 3120364;
        var ___THREW__ = Module["___THREW__"] = 3127168;
        var ___threwValue = Module["___threwValue"] = 3127172;
        var ___cxa_unexpected_handler = Module["___cxa_unexpected_handler"] = 3017136;
        var ___cxa_terminate_handler = Module["___cxa_terminate_handler"] = 3017132;
        var ___cxa_new_handler = Module["___cxa_new_handler"] = 3149700;
        var _in6addr_any = Module["_in6addr_any"] = 2787012;
        var _in6addr_loopback = Module["_in6addr_loopback"] = 2787028;
        var ___start_em_js = Module["___start_em_js"] = 3023528;
        var ___stop_em_js = Module["___stop_em_js"] = 3082533;
        function invoke_iiii(index, a1, a2, a3) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iii(index, a1, a2) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_i(index) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)()
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viiifi(index, a1, a2, a3, a4, a5) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4, a5)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viiidi(index, a1, a2, a3, a4, a5) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4, a5)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viiii(index, a1, a2, a3, a4) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_ii(index, a1) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_j(index) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)()
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0);
                return 0n
            }
        }
        function invoke_ji(index, a1) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0);
                return 0n
            }
        }
        function invoke_vii(index, a1, a2) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_jii(index, a1, a2) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0);
                return 0n
            }
        }
        function invoke_viii(index, a1, a2, a3) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_v(index) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)()
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiii(index, a1, a2, a3, a4) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_vi(index, a1) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viiiii(index, a1, a2, a3, a4, a5) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4, a5)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viijii(index, a1, a2, a3, a4, a5) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4, a5)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiiij(index, a1, a2, a3, a4, a5) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiiid(index, a1, a2, a3, a4, a5) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiiijj(index, a1, a2, a3, a4, a5, a6) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_jiiii(index, a1, a2, a3, a4) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0);
                return 0n
            }
        }
        function invoke_iiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_fiii(index, a1, a2, a3) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_diii(index, a1, a2, a3) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_iiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_jiii(index, a1, a2, a3) {
            var sp = stackSave();
            try {
                return getWasmTableEntry(index)(a1, a2, a3)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0);
                return 0n
            }
        }
        function invoke_viif(index, a1, a2, a3) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viid(index, a1, a2, a3) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        function invoke_viijj(index, a1, a2, a3, a4) {
            var sp = stackSave();
            try {
                getWasmTableEntry(index)(a1, a2, a3, a4)
            } catch (e) {
                stackRestore(sp);
                if (e !== e + 0)
                    throw e;
                _setThrew(1, 0)
            }
        }
        Module["addRunDependency"] = addRunDependency;
        Module["removeRunDependency"] = removeRunDependency;
        Module["FS_createPath"] = FS.createPath;
        Module["FS_createDataFile"] = FS.createDataFile;
        Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
        Module["FS_createLazyFile"] = FS.createLazyFile;
        Module["FS_createDevice"] = FS.createDevice;
        Module["FS_unlink"] = FS.unlink;
        Module["LZ4"] = LZ4;
        var calledRun;
        dependenciesFulfilled = function runCaller() {
            if (!calledRun)
                run();
            if (!calledRun)
                dependenciesFulfilled = runCaller
        }
        ;
        function callMain(args) {
            var entryFunction = Module["_main"];
            if (!entryFunction)
                return;
            args = args || [];
            args.unshift(thisProgram);
            var argc = args.length;
            var argv = stackAlloc((argc + 1) * 4);
            var argv_ptr = argv >> 2;
            args.forEach(arg=>{
                HEAP32[argv_ptr++] = allocateUTF8OnStack(arg)
            }
            );
            HEAP32[argv_ptr] = 0;
            try {
                var ret = entryFunction(argc, argv);
                exitJS(ret, true);
                return ret
            } catch (e) {
                return handleException(e)
            }
        }
        var dylibsLoaded = false;
        function run(args) {
            args = args || arguments_;
            if (runDependencies > 0) {
                return
            }
            if (!dylibsLoaded) {
                preloadDylibs();
                dylibsLoaded = true;
                if (runDependencies > 0) {
                    return
                }
            }
            preRun();
            if (runDependencies > 0) {
                return
            }
            function doRun() {
                if (calledRun)
                    return;
                calledRun = true;
                Module["calledRun"] = true;
                if (ABORT)
                    return;
                initRuntime();
                preMain();
                readyPromiseResolve(Module);
                if (Module["onRuntimeInitialized"])
                    Module["onRuntimeInitialized"]();
                if (shouldRunNow)
                    callMain(args);
                postRun()
            }
            if (Module["setStatus"]) {
                Module["setStatus"]("Running...");
                setTimeout(function() {
                    setTimeout(function() {
                        Module["setStatus"]("")
                    }, 1);
                    doRun()
                }, 1)
            } else {
                doRun()
            }
        }
        if (Module["preInit"]) {
            if (typeof Module["preInit"] == "function")
                Module["preInit"] = [Module["preInit"]];
            while (Module["preInit"].length > 0) {
                Module["preInit"].pop()()
            }
        }
        var shouldRunNow = true;
        if (Module["noInitialRun"])
            shouldRunNow = false;
        run();
        Module.UTF8ToString = UTF8ToString;
        Module.wasmTable = wasmTable;
        Module.ERRNO_CODES = ERRNO_CODES;

        return _createPyodideModule.ready
    }
    );
}
)();
globalThis._createPyodideModule = _createPyodideModule;
